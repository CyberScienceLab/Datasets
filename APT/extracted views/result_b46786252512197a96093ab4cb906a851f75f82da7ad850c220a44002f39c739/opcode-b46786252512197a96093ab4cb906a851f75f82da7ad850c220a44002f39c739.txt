mov push sub mov xor xor jmpq jmpq dec jmpq dec setae cmp movsbw mov jmpq bt cmc add stc cmc jmpq mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex sub mov mov callq test je mov mov mov mov mov mov cmp mov mov cmovae xor cmp jne cmp jne lea callq test jne inc inc cmp jbe xor mov mov mov add pop retq mov movabs add add jmp xor add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 sub mov callq test je mov mov mov mov mov mov cmp mov mov mov cmovae mov xor cmp jne cmp jne lea callq test jne inc inc cmp jbe xor mov mov mov mov add retq mov movabs add add jmp xor add retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex push sub mov mov movzwl callq test je mov mov mov mov mov mov mov xor mov lea mov mov xchg cmp jb cmp jne cmpb jne cmp jne lea callq test je mov movabs add add mov mov mov mov mov mov add pop pop retq cmp jne cmpb jne cmp jne lea callq test jne inc inc cmp jbe xor jmp mov lea jmp xor add pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 rex push sub mov mov mov callq test je mov mov mov mov xor mov mov lea mov mov mov cmp jb cmp jne cmpb jne mov callq test je mov movabs add add mov callq test je mov callq test je mov and mov mov callq test je cmp je inc add cmp jb xor mov mov mov mov mov add pop pop retq cmp jne cmpb jne mov callq test jne inc inc inc cmp jbe jmp mov movabs add add mov callq test je nopl mov callq test je mov and mov mov callq test je cmp je inc add cmp jb jmpq mov mov jmpq xor add pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 sub xor jmpq jmpq mov jmpq popq jmpq jmpq mov jmpq push jmpq js popq jmpq test clc bt cwtl bt cltq cmc cmc cmp bt sub jmpq push movzbw bswap mov lea mov jmpq lea bswap jmpq mov push mov movabs bswap push lea push jmpq jmpq jmpq jmpq push lea setp movzbw push jmpq dec stc shr mov stc (bad) icebp not mov clc clc cmc sub cmc shr jmpq jmpq bswap lea shl bsf btc movabs cmc add xadd dec mov setno add bsf mov xor bt ror clc sub bts bsf sub neg bsr rol sar xor ror movzbw rol shl shld sub add cmp sbb mov movzbq rcr clc mov jmpq popq jmpq mov jmpq jmpq jmpq push jmpq clc xchg clc stc stc test xor jmpq jmpq jmpq mov jmpq pop cmp (bad) cmp add retq int3 int3 int3 int3 int3 int3 int3 int3 mov mov push sub xor mov movb mov mov mov mov mov mov mov mov mov mov callq mov mov lea mov callq mov mov add mov callq xor mov lea mov callq mov test jne mov mov mov add pop retq mov mov mov callq mov test js mov mov mov mov mov mov callq mov test js mov mov mov mov mov mov callq mov test js mov mov mov mov mov mov callq mov test js lea mov callq mov test js lea xor mov mov callq mov test js lea mov mov callq mov xor mov callq mov mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov push push push sub xor movl lea mov mov mov movl mov mov mov lea lea mov xor mov mov mov mov callq test js mov callq jmpq (bad) loope mov nop nop nop lea mov callq mov lea callq jmpq mov nop nop lea mov callq mov lea lea lea xor movl mov mov callq jmpq repz mov nop nop nop lea mov callq mov lea lea lea xor movl movl mov callq jmpq in or enterq lea mov callq mov lea lea lea xor movl mov callq test je or xor mov repnz not lea jmpq rex.WX mov nop nop nop lea mov callq mov lea mov xor mov mov callq jmpq jle mov nop nop nop lea mov callq or xor mov lea mov repnz xor not lea mov mov mov callq mov mov mov callq mov test je add je or xor mov repnz not lea jmpq pop lods mov nop nop nop lea mov callq mov lea mov xor mov mov callq mov mov callq mov mov add pop pop pop retq int3 int3 mov mov mov push sub mov mov lea mov mov callq xor lea lea lea mov movl mov mov movl mov mov callq test js lea mov callq mov lea mov lea lea xor mov callq cmp je mov test je mov xor callq mov test jne mov callq mov jmpq mov xor mov callq mov mov lea lea mov mov mov mov callq mov test jns mov callq xor mov callq mov jmpq cmpl mov jne mov cmp jbe mov mov callq mov test je mov xor mov callq mov lea mov callq mov mov mov jmp mov jmp mov mov callq xor mov callq mov mov jmp mov callq mov lea mov mov mov mov pop retq int3 int3 int3 int3 int3 int3 mov mov push sub mov mov lea mov mov callq xor lea lea mov lea mov mov mov mov mov mov lea xor mov movl movl callq test js mov callq lea mov callq mov lea mov xor mov mov callq mov mov callq mov lea mov mov mov pop retq int3 int3 int3 rex push push push push sub mov callq mov test je add je or xor mov repnz not lea jmpq push add enterq lea mov callq xor lea lea lea mov mov movl mov movl mov mov callq test js jmpq rex.R gs nop nop nop lea mov callq mov lea mov lea lea xor mov callq cmp je mov test je add xor mov mov callq mov test jne mov callq mov add pop pop pop pop pop retq mov xor mov callq mov mov lea mov mov mov lea mov callq mov test js cmpl jne mov cmp jbe mov xor mov callq mov test je mov xor mov mov mov callq or xor lea mov mov repnz not dec mov test je nopl mov mov callq test je add je mov mov mov callq test jne lea cmp jae or xor lea repnz not dec test je lea jmp add jmp mov mov mov add callq lea lea lea cmp jae or xor lea mov repnz not dec mov test je mov mov add callq lea lea lea jmp add add cmp jae or xor lea mov repnz not dec mov test jne mov lea lea mov mov xor mov callq xor mov mov callq mov mov mov mov callq xor mov callq mov add pop pop pop pop pop retq mov callq mov add pop pop pop pop pop retq mov mov add pop pop pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex push push sub xor mov mov test je mov test je mov mov mov movl movl mov movl lea lea lea mov movl movl mov mov movl mov mov callq test js mov lea lea mov mov movl mov callq mov test js mov test je cmp jne mov cmp cmovae xor mov mov callq mov test je mov mov mov mov mov mov lea xor xor xor mov callq mov test jns xor mov callq jmp mov mov mov jmp mov jmp mov mov callq mov mov mov add pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov push sub mov mov mov callq lea mov callq lea callq xor lea mov mov movl movl movl lea lea lea mov movl movl mov mov movl mov mov mov callq test js mov mov lea mov lea mov xor xor xor mov mov mov mov callq mov mov callq mov lea mov mov mov pop retq int3 int3 mov push sub callq jmpq out xor mov mov nop nop nop lea mov callq mov mov movl movl lea movl lea lea lea mov movl mov movl mov movl mov mov mov callq test js lea callq mov test je mov test je lea mov mov cmp jne cmp je inc add cmp jb jmp mov lea movzbl xor mov callq mov callq mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex push sub cmpw mov mov je mov mov callq mov test je mov test je mov mov xor mov test je mov lea mov nopl movzbl cmp jne mov callq cmp jne movzwl lea xor xor xor mov mov callq test js mov callq test je lea xor mov callq mov lea callq or xor mov mov repnz not lea lea callq test jne mov callq mov mov callq jmpq lea lea lea mov mov mov movl mov movl mov mov mov callq test js movzwl mov movl lea or mov mov callq test js mov lea xor xor xor mov mov callq test js mov callq test je lea xor mov callq mov lea callq or xor mov mov repnz not lea lea callq test jne mov callq mov mov callq mov callq mov callq inc add cmp jb mov mov mov mov xor mov callq mov mov add pop pop retq int3 int3 int3 int3 mov push sub xor mov mov mov mov test jne mov mov add pop retq mov lea lea mov callq mov test js mov callq test jne mov callq mov test je callq mov mov mov add pop retq mov test je mov test je cmpw lea je cmpq je lea mov callq test js movzwl test je movzwl cmp jb test je mov movzwl xor lea mov callq mov mov mov callq jmp mov test je movzwl mov lea callq mov callq mov test je callq mov mov mov add pop retq int3 int3 rex push sub mov mov mov callq test jne mov add pop pop retq lea mov mov callq lea xor lea lea mov mov movl movl mov mov mov callq test js mov lea lea xor xor mov mov callq mov add xor mov mov callq mov test jne mov callq mov jmpq mov mov lea mov mov mov callq mov test jns xor mov callq jmpq mov test je dec js data16 mov lea xor mov xor mov mov callq mov add xor mov mov callq mov test je mov xor mov callq mov lea mov mov mov mov xor mov callq test js mov lea callq xor mov callq sub jns xor mov callq mov callq mov mov callq mov mov mov add pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov push sub xor mov lea lea mov movl mov movl mov mov callq test js mov lea lea xor xor mov mov callq mov add xor mov mov callq mov test jne mov callq mov mov add pop retq mov mov lea mov mov mov mov callq mov test jns xor mov callq jmpq mov test je dec js mov data16 mov lea xor mov xor mov mov callq mov add xor mov mov callq mov test je mov xor mov callq mov lea mov mov mov mov xor mov callq test js mov lea callq xor mov callq sub jns mov xor mov callq mov callq mov mov callq mov mov mov add pop retq int3 int3 int3 int3 int3 int3 rex sub xor mov mov movzwl xor add movzwl mov callq mov test jne mov add pop retq cmpb mov je xor lea lea mov mov mov callq lea lea callq jmpq mov test je mov callq mov test je or xor mov repnz xor not lea mov callq mov or movb mov xor mov lea repnz not lea mov callq mov or mov xor repnz not mov mov lea callq movzwl mov xor mov callq jmpq je lea callq lea lea mov callq mov test js lea lea callq mov test js mov test je xor callq mov xor callq mov test je xor mov mov callq mov lea data16 movzwl add add mov test jne mov mov xor or repnz xor nopl movzwl add mov test jne mov xor or repnz mov mov movzwl mov mov mov movzwl mov movzwl mov lea callq mov mov mov add pop retq xor mov callq mov mov add pop retq int3 int3 int3 int3 int3 mov push sub mov mov callq xor mov test mov mov mov cmove mov mov mov mov lea lea mov mov mov movl callq mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov push push push push push sub mov mov mov mov callq mov movq lea mov mov mov xor mov callq mov test jns mov jmpq mov mov mov xor callq mov mov test jne mov callq mov jmpq lea mov callq nop mov mov mov callq mov mov mov callq jmp mov mov mov mov lea callq test js mov mov mov callq mov mov mov callq mov test je mov jmp mov mov mov callq mov mov callq mov mov add pop pop pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov push push push sub mov mov mov mov callq xor mov mov test cmove mov mov movl mov mov mov mov mov lea lea mov lea callq test js callq mov mov lea mov mov mov xor mov callq mov test jns mov callq mov jmpq lea mov callq nop mov mov mov callq mov mov xor callq mov mov jmp mov mov mov lea callq nop mov lea mov callq mov jmp mov mov callq mov callq mov lea mov mov mov pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov push sub xor mov mov movzwl xor add mov movzwl mov callq mov test je movzwl xor mov callq mov lea mov callq lea lea mov movl mov movl mov mov mov callq test js jmpq cmp mov nop nop nop lea mov callq mov lea mov lea lea xor mov callq cmp je mov test je add xor mov mov callq mov test jne mov callq mov mov add pop retq mov xor mov callq mov mov lea lea mov mov mov mov callq mov test jns mov callq xor mov callq mov mov add pop retq cmpl jne mov cmp jbe mov xor callq mov test je mov xor mov callq mov mov lea callq jmp mov jmp mov mov callq xor mov callq test js mov lea callq lea lea lea callq mov test js mov mov xor callq mov mov mov add pop retq mov callq mov mov add pop retq int3 rex sub mov mov mov mov mov mov mov test je xor xor callq mov test je callq movq mov callq mov add pop retq int3 int3 int3 int3 int3 mov mov push push push push push sub mov xor movl mov movl mov mov mov mov mov mov lea mov mov mov mov mov mov mov mov mov lea xor xor mov callq test js mov mov mov movzbl xor callq mov test jne mov callq mov jmpq xor lea lea callq mov xor mov callq mov mov mov mov mov mov mov mov mov mov movl mov mov movzwl mov mov movzwl xor callq mov mov mov cmp je add mov callq mov xor lea sub callq mov xor add xor callq lea xor mov callq callq lea lea mov mov callq mov test jns mov callq mov callq mov jmpq mov mov mov lea lea mov mov mov movl mov mov mov mov lea mov lea mov mov mov mov mov mov mov mov mov mov mov mov mov mov lea mov mov shl or mov mov mov mov mov mov movb callq cmp jne lea mov xor xor mov callq mov test jns mov xor mov callq mov mov mov mov mov callq jmp mov mov lock mov cmp je mov lock mov mov mov mov mov mov add pop pop pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov push push push sub mov xor mov mov mov mov mov test je mov test je mov jmp cmp je callq mov mov callq test jne mov jmpq test jne testb jne mov jmpq lea movzbl xor mov callq mov test je mov xor mov callq mov mov test je mov mov mov movl jmpq test je xor xor mov mov mov callq mov test je mov callq mov mov movl jmp testb je xor xor mov mov mov callq mov test jne mov callq mov jmpq mov callq mov mov movl jmp mov mov mov movl xor lea lea callq mov mov mov lea mov mov mov mov mov mov movb mov mov mov mov mov mov mov lea mov mov mov movb callq cmp jne lea mov xor xor mov callq mov mov lea mov mov mov mov pop pop pop retq int3 mov mov mov mov push sub mov xor mov mov mov mov test je mov test jne cmp je callq mov mov callq test jne mov jmpq xor lea lea callq movzbl xor callq mov test jne mov jmpq mov movb lea mov lea lea mov mov mov mov mov movb mov mov mov mov mov mov mov movq movb callq cmp jne lea mov xor xor movq callq mov lea mov mov mov mov mov pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov push sub mov mov test je mov test je mov callq test jne mov mov add pop retq movzbl xor mov callq mov test jne mov mov mov add pop retq xor lea lea callq movb movl lea lea mov mov mov mov mov mov movb mov mov test je btl jb lock orl mov mov callq cmp jne lea xor xor xor movq callq mov callq mov mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov push sub movl xor mov mov mov mov mov movl movl mov mov movl lea lea lea mov movl movl mov mov movl mov mov callq test js mov mov lea mov lea xor mov mov callq mov mov callq test js mov cmpq je mov mov test jne cmpq je mov callq mov test je mov mov mov mov mov lea lea mov movl movl callq mov mov jmp mov mov callq mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov push push push push push sub mov xor mov mov mov test je mov test je mov test je mov mov test je mov mov test je mov mov mov lea callq mov test je mov mov mov lea callq test js mov test je cmpl jne cmp jb movl mov xor callq mov test je xor mov mov test je mov test je mov mov cmpb je mov lea lea mov mov mov callq mov mov callq test js mov test je mov mov xor callq mov test je mov mov or callq not mov cmpb je test je movl jmpq mov bt jae btc mov mov lea lea mov mov mov callq mov cmp jne mov test je mov test jne cmpq je mov callq test je lea mov lea mov mov lea mov mov mov movl movl callq mov test js mov mov lea lea mov mov mov callq mov mov callq jmpq mov jmp test je movl test jne xor mov callq xor mov callq mov lea mov mov mov mov pop pop pop pop pop retq int3 int3 int3 sub lea lea callq test js mov mov mov cmp jbe mov cmp jb mov lea cmp jne lea xor callq cmp jne mov test je mov mov callq mov test je mov mov mov mov add mov callq mov mov xor callq mov mov lea mov mov callq mov test je mov mov callq mov test je mov mov mov mov mov mov add mov add callq mov mov xor callq mov mov lea mov mov callq mov test je mov mov callq mov test je mov mov mov mov mov mov add mov add add add mov callq mov mov xor callq mov mov mov callq mov mov mov mov add mov add add mov add callq mov test je mov mov callq mov test je mov mov mov mov mov mov add mov add mov add add add mov callq mov mov xor callq mov mov lea mov mov callq mov test je mov mov callq mov mov test je mov mov mov mov mov add mov mov mov add mov add mov add mov add add callq mov mov mov xor callq cmp jne mov callq jmp mov xor callq xor mov mov mov mov mov test je mov xor callq mov mov test je mov mov mov mov mov mov mov add mov add mov add mov add mov add add add callq mov mov xor callq mov mov mov xor lea mov mov mov mov mov callq movzwl mov mov test je mov xor callq mov mov test je mov mov mov mov mov mov mov add mov add mov add mov add mov add mov add add add callq mov mov xor callq mov mov mov xor lea mov mov mov mov mov callq movzwl mov mov xor mov callq mov add retq mov mov push push push sub mov xor mov lea lea callq cmpq je mov mov test cmovne mov jmp mov cmpq je mov mov test cmovne mov jmp mov cmpq je mov mov test cmovne mov jmp mov cmpq je mov mov test cmovne mov jmp mov cmpq je mov test je mov test je mov mov jmp mov cmpq je mov test je cmpl je movzwl mov mov jmp mov cmpq je mov test je cmpl je movzwl mov mov jmp mov mov mov movzbl add xor movl add and add xor add mov add add add mov je mov lea mov mov callq mov test je lea mov mov callq mov test je mov lea mov callq mov mov test je mov mov mov lea callq mov mov mov test je mov mov mov mov add add lea callq mov mov mov test je mov mov mov add mov mov add add mov lea callq mov mov mov mov test je mov test je cmpl je mov mov mov add mov mov add add mov add mov lea callq mov mov mov mov jmp mov mov test je mov test je cmpl je mov mov mov add mov mov add mov add add mov mov add lea callq mov mov mov mov mov jmp mov mov test je mov test je cmpl je mov add mov mov add mov add add mov mov add mov add lea callq lea mov xor callq mov mov mov mov mov callq xor mov callq mov lea mov mov mov pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 mov push sub mov xor mov jmpq dec cmp cmp stc neg cmc stc bt stc rol cmc xor test sub clc mov test sub jmpq shrd mov add btr mov jbe test cmp add jmpq mov jmpq jmpq push jmpq mov jmpq mov jmpq xchg adc mov not movzbw data16 repnz bswap stc (bad) div fsubs mov loop fnstsw and cmp not sub xor add shld btr sub cmp mov mov stc test clc clc add jmpq dec jmpq jmpq mov jmpq jmpq sub jmpq jmpq setae setle push lea movzbw mov push bswap not movzbq push bswap lea mov movzbl push movzbw movsbl jmpq pop sub mov test je xor callq mov test je xor callq mov test je xor callq mov test je xor callq mov test je xor callq xor mov callq mov xor add pop retq int3 int3 mov push sub incl mov mov callq cmp jb incl mov mov mov add pop rex.W mov mov mov add pop rex.W int3 int3 int3 rex sub xor mov mov test jne mov add pop retq mov lea callq lea lea mov callq mov test js mov lea lea callq mov test js mov callq test jne mov lea callq mov test je callq mov test je callq mov add pop retq int3 int3 int3 int3 int3 mov mov push sub movzwl mov mov test je cmpb je mov callq jmp callq mov test jne mov mov add pop retq callq mov mov rol mov mov movzwl mov callq mov mov test setns add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov push push push sub xor mov mov mov mov test je cmp jb mov mov mov mov mov callq mov test je xor jmpq stc cbtw cmc test cwtl test jmpq nop mov lea cmp jne lea lea shr cmp jne mov mov xor callq cmp jne mov cmp jbe cmp jne callq xor cmp jbe lea nopl mov cmp ja mov add jmpq mov mov mov mov mov lea xor mov callq jmpq mov mov mov mov mov lea xor mov callq jmpq mov mov mov mov mov lea xor mov callq jmpq mov mov mov mov mov lea xor mov callq jmpq mov mov mov mov mov lea xor mov callq jmp mov mov mov mov mov lea xor mov callq jmp mov mov mov mov mov lea xor mov callq jmp mov mov mov mov mov lea xor mov callq inc add cmp jb mov mov mov jmp mov xor mov callq mov mov mov jmp xor mov mov add pop pop pop retq nop xchg add add loope add loope add loope add (bad) push add (bad) push add loope add loope add loope add cmp add push add gs add gs add loope add (bad) push add mov int3 int3 int3 int3 int3 int3 int3 mov mov push sub xor mov mov test je cmp jb xor jmpq push jmpq jmpq popq jmpq cmpsb mov lea mov cmp jne lea mov xor mov callq cmpl je cmp jne mov cmp jbe mov callq xor cmp jbe nopl movzbl movzbl add mov add movzbl inc mov add mov movzwl add cmp jne mov callq mov inc cmp jb mov mov mov mov mov mov add pop retq mov mov mov mov add pop retq mov mov xor add pop retq int3 int3 int3 int3 mov mov push sub xor mov mov test je cmp jb xor jmpq jmpq stc add jmpq jmpq mov rolb lea mov cmp jne lea mov xor mov callq cmpl je cmp jne mov cmp jbe mov callq xor cmp jbe nopl movzbl movzbl add mov add movzbl inc mov add mov movzwl add cmp jne mov callq mov inc cmp jb mov mov mov mov mov mov add pop retq mov mov mov mov add pop retq mov mov xor add pop retq int3 int3 int3 int3 mov push sub lea cmp je lea mov mov mov lea mov mov lea mov lea mov nopw mov mov test je mov lea xor xor mov callq mov lea cmp je mov lea callq mov test je mov movzwl lea mov mov callq cmp jne lea callq mov mov add pop retq xor add pop retq int3 int3 rex push push sub movzwl mov xor mov cmp je mov mov callq test jne add pop pop pop retq mov callq lea rol lea mov lea mov mov movzwl mov mov mov mov callq mov test cmovns test je test je mov movabs mul mov shr test je lea mov test je sub je sub je sub je cmp jne mov mov lea mov mov mov mov mov mov mov callq jmpq mov mov lea mov mov mov mov mov mov mov callq jmpq mov mov lea mov mov mov mov mov mov mov callq jmp mov mov mov mov mov mov lea mov callq jmp mov mov mov mov mov mov lea mov callq add add jne mov test je xor callq mov mov xor mov mov callq mov mov mov add pop pop pop retq xor mov callq xor mov add pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex sub mov test je mov test je mov mov movabs mul mov shr test je nopl mov test je sub je sub je sub je cmp jne mov mov lea mov mov mov mov mov mov mov callq jmpq mov mov lea mov mov mov mov mov mov mov callq jmpq mov mov lea mov mov mov mov mov mov mov callq jmp mov mov mov mov mov mov lea mov callq jmp mov mov mov mov mov mov lea mov callq add add jne mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov push push push sub mov xor mov xor jmpq pushq not movabs not mov bswap lea push not mov jmpq je popq jmpq movzbq mov sete pushq xchg movzbl movabs movsbw movsbw lea bswap mov movsbw bswap bswap lea push movzbw jmpq jmpq push mov push xchg push movzbw movzbl setle setle push setle not repz xchg pushq setb jmpq push mov mov movsbw push setp push movzbw mov push bswap repz bswap pushq mov xchg lea lea movabs lea movsbw mov not bswap push movsbw movsbw lea mov jmpq push jmpq jmpq push sete setns push lea push mov push movsbl jle push setno movsbl push movzbw jmpq sete cmc rcl adc movzbl clc bt cmc test sub jmpq movzbw mov push mov setns push movsbw mov jmpq pushq flds mov test je xor callq test je xor mov callq mov add pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 mov push sub xor mov test je mov test je lea lea mov callq test je lea mov callq test je lea mov mov callq mov test je add lea mov mov callq mov test je lea mov mov callq mov test je cmp jb cmp ja add lea mov callq mov test je cmp jbe cmp jae sub mov callq xor mov mov callq mov test je mov mov mov callq test je mov mov mov mov mov mov add pop retq int3 int3 int3 int3 rex push push sub xor mov test je mov mov xor callq mov test je xor mov mov callq lea mov mov callq xor lea lea lea mov mov mov callq mov mov mov callq test je lea lea mov mov lea mov mov mov mov mov mov callq mov test mov cmovns test je lea mov callq mov test je test je mov mov xor mov callq mov xor mov callq mov add pop pop pop retq mov push sub mov test je movl lea callq mov test je test je mov mov mov add pop retq mov xor callq mov test je xor mov mov callq lea mov mov callq mov callq test je mov callq test je xor mov mov callq lea mov mov callq mov callq test je mov movb callq test js xor mov mov callq lea mov mov callq callq mov callq test jne movb xor mov callq mov mov add pop retq int3 int3 rex sub mov mov mov lea callq lea lea mov callq test js lea lea mov callq mov test cmovs mov lea callq mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 mov mov push push push push push push push sub mov or xor mov xor mov repnz lea not lea xor jmpq mov jp mov jmpq add jmpq bswap repz not lea pushq sets movabs movsbl mov jmpq movsbw jmpq mov jmpq push jmpq jmpq movsbl push jmpq pushfq jmpq bswap push movzbw not movzbq movzbw push movzbl lea lea jb repz not pushq jmpq jmpq mov jmpq jmpq mov jmpq jmpq shr cmc xchg mov inc and cmc mov test add jmpq mov mov test jmpq test mov cmp cmp sub cmc jmpq jmpq dec jmpq movsbq movsbw push xchg setno repz bswap bswap xchg jmpq jmpq cmp bt bt add jmpq jb mov jmpq pushfq jmpq mov mov add pop pop pop pop pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov push push push push push push push sub mov or xor mov xor mov repnz lea not lea xor jmpq mov jmpq movzbw push movsbw jmpq mov shr add movsbl movzbl movabs not inc ror cmp adc rol not neg inc add inc sbb add rcr sar bt sub not bsr bt mov stc add jge mov jmpq rcl btr cmc mov clc sub jmpq movabs movsbw shld sar add cmp mov clc shld sar add rcl rol mov movsbw btr shrd sub and jmpq jg push jmpq mov jmpq and jmpq xchg push setne setle push bswap xchg sete lea repz and pushq bswap inc movabs jmpq inc test neg jmpq jmpq xchg mov not jmpq mov jmpq push jmpq jmpq and retq mov add pop pop pop pop pop pop pop retq int3 int3 int3 int3 mov mov push push push push push push push sub mov or xor xor mov mov repnz lea not dec mov test je mov mov xor lea callq mov test je lea xor mov callq mov mov callq mov test je or lea xor repnz mov not lea lea callq sub mov mov dec jmp mov mov mov callq mov mov mov callq test je mov lea rol mov lea mov mov movzwl mov mov mov callq test mov mov cmovns test je test je mov mov xor mov callq mov mov add pop pop pop pop pop pop pop retq int3 int3 int3 int3 int3 mov mov push push push push push sub xor mov mov mov xor mov mov mov mov mov mov mov mov mov mov mov mov mov mov callq mov mov test je mov xor mov mov callq mov test je mov xor shl add callq mov xor shl mov mov add mov callq mov test je mov xor shl add callq mov xor shl mov mov add callq mov test je mov xor shl add callq mov xor shl mov mov add callq mov test je mov xor shl add callq mov xor shl mov mov add mov callq mov test je lea xor callq mov xor lea mov mov mov callq lea cmp jae nopw mov movzbl add test je mov mov mov callq add lea mov mov add movb test je lea mov mov callq add lea cmp ja lea mov add jmpq mov test je mov cmp ja add mov mov mov inc add mov incl mov mov jmpq mov test je mov cmp ja add mov mov mov inc add mov incl mov mov jmpq mov test je mov cmp ja add mov mov mov inc add mov incl mov mov jmpq mov test je mov cmp ja add mov mov mov inc add mov incl mov mov jmpq mov mov mov mov mov jmpq mov mov mov mov mov jmpq mov mov mov mov jmpq mov test je mov cmp ja mov incl mov mov mov jmpq mov mov mov jmpq mov mov mov jmpq mov mov mov jmpq mov mov mov jmpq mov mov mov jmpq mov mov mov jmp mov mov mov jmp mov mov mov jmp mov mov mov jmp mov mov mov jmp mov mov mov jmp mov mov mov cmp jb test je test je mov mov mov xor jmp mov mov jmp mov mov xor mov mov mov mov mov test je xor mov callq mov mov test mov cmovne mov test je xor callq mov mov test je cmpq je mov xor callq mov test je mov test jne callq mov mov lea mov mov mov mov mov callq mov mov mov test je xor callq mov mov mov test je xor mov callq mov test cmovne mov mov test je xor mov callq mov mov test cmovne mov mov test je xor mov callq mov mov test cmovne mov mov test je xor mov callq mov test cmovne mov lea mov mov mov pop pop pop pop pop retq xchg (bad) pushq add js add mov pushq add pushq add add add int3 int3 int3 int3 rex push push push push push sub xor mov xor mov mov mov mov mov mov mov xor callq mov mov test je xor mov mov callq lea lea mov callq mov mov mov callq test je lea lea mov mov lea mov mov mov mov mov mov mov callq mov mov test cmovns test je test je cmp jb mov cmp jb mov add cmp jne lea lea xor callq cmp jne mov mov cmp jne mov test je xor callq xor mov mov mov mov mov mov mov mov cmp jne mov test je xor callq xor mov mov mov mov mov mov mov mov mov jmp mov cmp je mov cmp jne cmp je mov mov xor add callq mov test je mov xor mov callq lea mov mov cmp jae nopl mov mov add test je mov mov mov callq add lea mov mov add movb test je lea mov mov callq add sub lea je cmp jne mov mov mov mov jmp mov mov mov mov jmp mov mov mov cmp jb mov test je test je test je cmp je lea mov mov callq mov test je mov mov xor mov callq cmp jne mov test je xor callq mov mov mov mov xor lea mov mov mov mov mov mov mov callq movzwl mov jmp xor mov callq mov test je test je mov test je cmp je lea mov callq mov test je mov mov xor mov callq cmp jne mov test je xor callq mov mov mov mov xor lea mov mov mov mov mov mov mov callq movzwl movzbl mov mov jmpq xor mov callq mov mov jmp mov mov jmp mov mov jmp mov mov jmp mov mov jmp mov mov jmp jmp jmp jmp jmp mov xor mov callq mov mov xor mov callq test je xor mov callq mov add pop pop pop pop pop pop retq int3 int3 mov mov push push push sub mov mov xor xor lea mov mov callq lea lea callq mov lea xor mov callq lea lea xor mov mov jmpq mov jmpq popq jmpq popq jmpq ror adc mov movsbl movzbl rol ror sub rcl and bsf add xchg mov ror xadd xadd rol lea test adc not cmp movabs not not sub inc add mov add mov cmp bts add shl rcl cmp mov bts btc shr rol sub movsbl dec sub xor xor bswap rol btr or shld sub bswap rcl movzbq add xor mov stc neg bt jmpq jmpq push jmpq lea movzbw jmpq push jmpq inc clc stc stc add cmc cbtw cmp jmpq jmpq stc bswap jmpq mov jmpq jmpq sete rcr mov rcl neg data16 repnz bsf jmpq push movsbw jmpq clc neg sete dec mov adc mov and and and mov stc jmpq xchg stc mov setl mov stc clc sub cmp clc bt shl jmpq jmpq jmpq fsubrp rex.B mov test je xor callq mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea callq xor callq mov add pop pop pop retq int3 int3 int3 int3 int3 mov push push push push push push push push sub mov xor xor mov mov mov mov mov mov mov mov mov mov mov mov mov mov mov lea mov mov callq lea lea callq mov lea xor mov callq lea lea mov mov callq xor mov jmpq movsbl jmpq mov jmpq clc rol jmpq pushfq jmpq sub cmc jmpq push movabs seta push xchg lea repz movzbl pushq mov not mov movabs not jmpq push mov not push movzbl movsbw xchg bswap repz movsbl not pushq mov movabs movzbq movsbw mov mov jmpq dec jmpq push jg push jmpq sbb neg shr cmc mov test cmc cmc stc add jmpq mov jmpq push bswap movzbw push setb repz jmpq mov jmpq jmpq jmpq jmpq popq jmpq push jmpq mov jmpq push movsbw push setnp xchg push jmpq shr jmpq rol stc ror ror mov clc bt cmp jmpq jmpq pushq xchg setge movabs bswap mov mov jmpq not push jmpq dec jmpq mov bswap lea push movsbw lea movzbw jmpq lea clc bt sub jmpq cmp bt test shld jle mov jmpq lea bsr xor ror rcr bsr test sub movsbw mov stc bt cmc sub jmpq jmpq bt sub jmpq push not push movsbw repz bswap not pushq bswap movzbw movabs jmpq push jmpq movabs xchg mov mov movzbw push movzbq jmpq xchg lea push movsbw push jmpq jmpq push jmpq jmpq pop mov xchg mov pop not bswap pop xchg not movzbl pop not pop retq pushfq jmpq jmpq jb mov jmpq sets movsbw inc movzbw dec rcl ror neg not shrd cmc rol not sub bsf or and mov mov cmp cmp add cmc add jmpq jmpq mov jbe pushfq jmpq movzbw push setp sets push movzbw push sets push not movsbw not push movzbw movzbq jo push movzbw movzbl bswap movzbw push xchg lea movsbw not push movzbw push xchg setl lea push not not push movzbl push bswap movzbw bswap lea push movzbw movsbw repz bt jno bts sub pushq ror shl cmp movsbw movabs mov movsbl mov rcl btr shld push mov mov rcr bsr bts bswap (bad) hlt rol sub lea rcl movzbl lea not sub inc or mov xadd ror rcr sub movzbl stc xchg and neg movzbq shr rcl mov shrd lea xor lea bswap mov movabs xor bsr add clc btc dec mov shld shld shrd add shrd mov dec cmp sub sar sub movzbw shld bt xor rcl rol sub sub and movzbq inc mov cmc jmpq jmpq push movzbw bswap lea push mov mov mov mov push movsbl jmpq push lea push mov movzbw push bswap not lea push jmpq mov jmpq mov jmpq jmpq jmpq add test add jmpq not bswap push not jmpq not xchg push bswap jmpq push jmpq test pushq bt cmc add std cmc popfq jmpq push jmpq jmpq jnp push jmpq jmpq je mov jmpq push jmpq push movsbw not movzbl push movsbw push jmpq xadd shr movzbw add rol stc shrd bsr mov seta rcr ror cmp add sub sub cmc shr mov shrd xor not or sub movsbw btc sub clc xor stc rol dec sub or sar rol sub movzbq cmp stc xor mov clc test neg cmc clc add jmpq data16 repnz shlb cli jmpq jmpq bswap mov jmpq jmpq popq jmpq push jmpq movsbl push mov mov jmpq mov jmpq setnp mov repz mov movzbw jmpq jmpq setbe mov btr ror and stc mov cmc test not clc cmp jmpq push jmpq mov setge clc mov shl mov add add pop sar rcl rol test pop movzbw bt sbb bt popfq jmpq bt mov sar lea add lea inc sub or cmc not btr bswap add cmp mov lea test add shl mov clc sub jmpq mov jmpq dec test stc cmp cmp neg stc bt rol jae xor cmp cmc clc cwtl test bt cmc sub stc cmc test test add jmpq movsbw push setne setp lea push lea push mov bswap movzbl push movzbl mov repz rcl and pushq rol adc movabs xor add mov and or xchg push seto jmpq test test neg cmc jmpq cmc clc add cmp test bt stc cbtw jmpq jmpq mov jnp mov jmpq push jmpq cmc jmpq mov jmpq push bswap mov jmpq jmpq xor jmpq dec ja test test neg bt jmpq inc jmpq clc shld mov shl or mov jmpq mov jmpq mov jmpq jmpq mov jno push movzbl lea jmpq jmpq shr jmpq jmpq push jmpq push jmpq push mov jb mov push movzbl push bswap movsbw push movsbw mov xchg bswap push mov lea push not lea push movsbl xchg bswap push mov movsbw bswap mov push movsbw xchg jmpq or test ror mov sar cmp shl rcr mov jmpq sub bt add jmpq push jmpq mov jmpq not cmp btr bt ror mov clc jmpq jg push jmpq stc sub cmp sub jmpq jmpq push setae lea mov push lea bswap not jmpq mov jmpq push jmpq jmpq mov bswap movzbw jmpq jmpq test je xor mov callq test je xor mov callq lea callq xor callq add pop pop pop pop pop pop pop pop retq int3 mov mov push push push push push push push sub mov mov xor xor lea mov mov mov mov mov mov mov mov mov mov callq lea lea callq mov lea xor mov callq lea lea xor mov mov jmpq push setbe movzbw push bswap bswap push movabs push bswap setl xchg repz jmpq jg inc stc stc stc cmc neg jnp inc jmpq mov repz and sbb pushq bswap ror and movabs data16 testb not lea mov shl push not mov xor ror (bad) hlt shrd bswap bt add bt sub ror stc setg not setle shr (bad) cmc mov inc inc cmc add sub sub and rol dec mov not lea mov lea btc movabs not add sar test shrd rcl mov btr add shr bt test btc mov btc mov add shl sub xor bts sub dec neg rcl inc xor bt setg bts rol clc cmc sub bswap movzbq adc sar mov cmp bt cmc neg clc clc stc cmp add jmpq bt cmp movzww stc stc je bt xchg cmc xor jmpq push bswap mov push not movsbl bswap push bswap movzbw not movzbw push mov bswap push jmpq lea bswap push xchg push bswap setns push not jne movzbw bswap repz adc cmp inc pushq bswap test cmc movabs adc mov movzbw not push xor and xadd mov xadd adc bswap movsbw rol mov xchg sub cmp adc not data16 testl (bad) adc in std rcr sub or clc shr or and bt shld mov rcl shl lea xchg adc not movabs jmpq lea not mov lea push movsbw ja not mov jmpq movabs movzbl movsbw mov bswap movzbl push jmpq mov inc btc bts sub inc ror shld sub and neg cmp xor cmc rcr rol bsf rcr neg sub bsf bts sbb movzbq and clc sub mov jmpq bswap movsbw push movzbw movsbl push movzbw push jmpq cmp sub ror mov jmpq mov jmpq jmpq push not bswap mov push movsbw bswap not setns repz seto sets movzbw pushq not bswap setp movabs mov mov mov not not not push bswap mov jmpq jmpq mov jmpq push jmpq jmpq push jmpq jp mov jmpq push jmpq jmpq jmpq test xor jmpq in test je xor mov callq test je xor mov callq mov test je callq mov lea callq xor callq mov add pop pop pop pop pop pop pop retq mov mov push push push sub mov mov xor lea xor mov mov callq lea lea callq mov lea xor mov callq lea lea mov mov mov lea mov nopl xor mov mov lea lea lea mov mov callq test jne cmp jne lea callq mov movzbl cmp je callq cmp ja cmp jne cmp je mov callq cmp jbe mov mov callq mov mov mov mov mov incl mov callq cmp jb incl mov callq jmp mov mov callq lea movzbl callq jmpq lea callq xor callq mov mov mov add pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov push push push push push sub mov xor xor mov mov mov mov mov mov mov mov lea lea lea lea lea xor mov mov mov mov mov mov mov mov callq lea lea xor callq lea lea xor callq lea lea xor callq lea mov mov lea xor xor xor mov callq test js mov xor xor mov mov mov callq mov mov callq test js lea mov lea mov xor xor xor movq callq mov test js mov xor xor mov movq mov callq mov mov callq test js lea mov lea mov xor xor xor movq callq mov test js mov xor xor mov movq mov callq mov mov callq test js mov lea lea mov xor xor xor xor mov callq mov test js mov xor xor mov mov mov callq mov mov callq test js xor jmpq xor lea xor xor movb movb movb callq mov test je xor xor xor mov callq mov callq mov lea xor xor callq mov test je xor xor xor mov callq mov callq mov lea xor xor callq mov test je xor xor xor mov callq mov callq mov lea xor xor callq mov test je xor xor xor mov callq mov callq mov mov lea mov mov mov mov pop pop pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 mov push sub mov xor xor lea movb movb movb callq mov xor test je xor xor xor mov callq mov callq mov lea xor xor callq mov test je xor xor xor mov callq mov callq mov lea xor xor callq mov test je xor xor xor mov callq mov callq mov lea xor xor callq mov test je xor xor xor mov callq mov callq mov mov add pop retq int3 int3 mov mov mov mov push push push sub mov xor mov mov mov lea lea xor movl xor callq mov lea xor mov callq lea mov mov mov mov callq test js cmp jb test je mov imul mov mov test je mov mov mov mov mov imul mov mov mov movzwl mov movzwl add or lea xor repnz xor nopl movzbl inc mov test jne test je mov imul mov mov mov xor mov callq mov mov mov mov mov add pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov push sub mov mov movl mov xor mov callq mov test je mov xor mov callq lea mov mov mov callq cmp jne xor mov callq mov lea jmp mov mov mov mov add pop retq int3 int3 int3 int3 mov mov push push push sub mov mov mov mov movq xor xor mov callq mov mov test jne mov jmp mov callq nop movswl or mov xor mov callq mov mov test je mov mov mov callq mov mov callq xor jmp mov mov mov callq mov mov mov add pop pop pop retq int3 int3 rex push push push push push sub mov xor xor shr xor mov and mov mov mov mov mov mov mov mov mov je lea lea lea cmp jne lea cmp jne cmp jne cmp je mov mov mov movslq add cmp jne cmpl jne mov callq btl mov jae mov mov jmp lea mov callq mov mov mov callq test je lea xor mov callq mov lea lea mov lea lea lea mov callq test je mov cmp je mov mov lea mov mov lea lea lea xor mov callq mov test js mov mov callq jmpq mov lea callq mov mov lea mov lea mov lea lea xor mov callq mov test js mov mov mov mov lea mov mov mov callq test js cmpb je lea mov callq test je add jne mov mov callq mov mov lea callq test jne mov mov mov add lea mov callq test jne mov lea mov callq test jne mov test je mov mov lea callq test je mov mov xor mov xor mov movl callq mov callq jmpq lea mov callq mov mov mov callq or xor mov mov repnz not lea xor callq mov jmpq mov jmpq mov mov callq mov test je mov mov mov lea lea sub callq test je mov mov xor mov xor mov movl callq mov callq jmpq cmpb jne cmpq je cmpw je mov mov mov lea lea sub callq movzbl mov test cmovne jmp mov cmpb jne jmp mov cmpq je cmpw je test jne mov lea mov callq test je mov jmp mov mov mov lea callq movzbl test cmovne cmpb jne test je cmpq je cmpw je mov xor lea lea lea mov mov mov mov mov mov mov mov mov mov mov mov mov mov callq lea lea mov callq xor or lea lea repnz xor nop movzbl inc mov test jne movzbl movzwl mov lea lea movb mov callq test je mov sub je sub je sub je cmp jne mov mov mov mov mov mov test mov cmovne xor callq test je mov test je mov xor xor add callq jmp mov mov xor mov xor mov movl callq mov callq jmpq mov mov lea mov xor xor movl callq mov test je xor callq mov mov add pop pop pop pop pop pop retq cmpb je mov mov xor mov xor mov movl callq mov callq jmp mov callq mov mov xor sub add callq lea mov mov callq mov test jmpq int3 rex push push push push sub movzwl mov mov mov mov mov callq mov test jne mov add pop pop pop pop pop retq mov mov mov callq mov test jne xor mov callq mov mov add pop pop pop pop pop retq xor mov jmpq stc cmc cmc sub test stc cmp bt shld jno mov jmpq jmpq rex.WX mov mov lea mov callq mov cmp je lea lea mov mov mov mov callq mov test js or xor mov repnz xor mov not lea mov callq test jns mov callq lea xor mov callq mov cmp jne xor mov callq xor mov callq mov jmpq lea mov mov mov mov mov callq mov test js or xor mov repnz xor mov not lea mov callq mov test jns xor mov callq xor mov callq mov callq mov jmpq xor mov mov mov mov callq mov test jns mov callq xor mov lea callq mov cmp jne xor mov callq xor mov callq mov jmpq lea mov mov mov mov mov callq mov test js or xor mov repnz xor mov not lea mov callq mov test jns xor mov callq xor mov callq mov callq mov jmpq xor mov mov mov callq mov test jns xor mov callq xor mov callq mov callq mov jmpq lea xor movb jmpq not push setle movsbl push movzbq lea mov push mov setns lea push lea repz movsbq movzbq pushq jmpq mov jae mov jmpq jo popq jmpq jmpq and callq mov mov test je mov mov callq mov test jne xor mov callq xor mov callq mov callq mov jmpq xor jmpq stc cmc push mov movzbw rex.W repz repz rcr setge lea dec movzbl inc rcr pop test cltq bt bt cmc sub jmpq rex.WX mov sub add cmp ja lea lea mov cmp ja test je mov mov callq cmp jae nopl xor mov mov mov callq test js cmp jl lea cmp ja cmp jg mov movslq mov add callq mov cmp jb jmp mov callq or jmp mov callq or xor mov callq xor mov callq cmp je mov callq cmp je xor mov callq mov jmp mov test je mov xor jmp xor mov callq xor jmp xor mov callq xor mov callq xor mov callq mov callq mov jmp xor mov callq xor mov callq mov callq mov mov mov mov add pop pop pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov mov push push sub xor mov lea callq mov test jne mov add pop pop retq mov mov mov callq mov test jne xor mov callq mov mov add pop pop retq mov mov mov mov test je test je mov mov callq mov test jne xor mov callq xor mov callq mov jmpq xor mov mov callq mov mov mov callq mov test jne xor mov callq xor mov callq xor mov callq mov jmpq xor mov mov jmpq inc neg (bad) hlt cmp lea cmc cmp jmpq jmpq jmpq pushfq jmpq jmpq push bswap mov movsbl not push mov movsbw push bswap xchg bswap push jmpq push not push lea mov mov jmpq (bad) push lret rorb int3 callq xor jmpq movzbw push movzbl push mov movsbw movzbw push lea bswap not mov push xchg mov mov not push movsbw push lea not mov movsbw push xchg bswap xchg push bswap jmpq push setnp movzbl push setno movzbw mov movsbw push xchg movzbw lea push movzbw mov xchg lea push bswap repz xchg setge pushq mov bswap setno movabs movzbw not not not mov mov bswap push not jmpq jmpq jmpq push lea bswap not push bswap not lea not push bswap bswap not bswap push lea jmpq jmpq mov jmpq test sarl mov callq mov test jne xor mov callq xor mov callq test je xor mov callq mov jmpq xor mov lea mov callq mov cmp jne xor mov callq xor mov callq test je xor mov callq xor mov callq mov jmpq movzwl lea mov mov mov mov mov mov callq mov test jns xor mov callq xor mov callq test je jmpq or xor mov repnz xor mov not lea mov callq mov test jns xor mov callq xor mov callq test je jmpq or xor mov repnz xor mov not lea mov callq mov test jns xor mov callq xor mov callq test je jmpq test je test je xor mov mov mov callq mov test jns xor mov callq xor mov callq test je jmpq or xor mov repnz xor mov not lea mov callq mov test jns xor mov callq xor mov callq test je jmp xor mov mov mov callq mov test jns xor mov callq xor mov callq test je xor mov callq xor mov callq mov callq mov jmpq xor movb jmpq sets push movzbq movzbw bswap push mov xchg push xchg not lea movsbq push movzbl movsbw movzbw mov push setb not movsbl push xchg xchg push movzbl not setle repz jmpq push jmpq jmpq jmpq not shl shld mov setb mov mov test mov jmpq mov jmpq jmpq dec jmpq push jmpq rdpmc rorb int adc xor mov callq test je xor mov callq xor mov callq mov callq xor mov mov mov mov mov mov add pop pop retq xor mov callq xor mov callq test je xor mov callq xor mov callq mov callq mov jmp int3 mov mov push push push sub movzwl mov mov mov mov mov callq mov test jne mov jmpq mov mov mov callq mov test jne xor mov callq mov jmpq xor jmpq push ja push not lea jmpq popq jmpq jmpq jmpq lret in addr32 xor mov lea mov callq mov cmp jne xor mov callq xor mov callq mov jmpq lea mov mov mov mov mov callq mov test js or xor mov repnz xor mov not lea mov callq mov test js xor mov mov mov callq mov test jns xor mov callq xor mov callq mov callq mov jmpq mov lea movb test je xor jmpq mov mov cmc bswap clc cmp cmp sub bt je cmc bt rol jmpq cmp neg stc add jmpq stc rol jmpq jmpq push jmpq push jmpq xor mov callq xor mov callq mov callq xor mov mov mov add pop pop pop retq xor mov callq xor mov callq mov callq mov jmp int3 int3 int3 int3 int3 int3 int3 mov mov push push push push push push push sub mov mov mov mov mov add lea mov nopl movzbl movzbl add shl add or movzbl shl or movzbl shl or sub mov jne mov mov mov not mov and and or mov add lea rol add and mov not and or add lea rol add mov mov not and and or mov add lea ror add and mov not and or mov add lea ror add and mov not and or mov add lea rol add and mov not and or add lea rol add mov mov not and and or mov add lea ror add and mov not and or add lea ror mov mov mov mov add mov and mov not and or mov add lea rol add and mov not and or add lea rol add mov mov not and and or mov add lea ror add and mov not and or mov add lea ror add and mov not and or mov add lea rol add and mov not and or add lea rol add mov mov and not mov and or mov add lea ror add mov not mov and mov and and or mov add lea mov ror add and and or mov add mov not lea rol add and and or add lea rol add mov and or add lea mov not rol and add mov and or mov add lea mov not ror and add and or mov add lea mov not rol and add and or add lea mov not rol and add mov and or add lea mov not rol add and mov and or add lea mov mov not ror and add and or mov add lea mov not rol and add and or add lea mov not rol and add mov and or add lea mov not rol and add mov and or mov add lea mov not ror and add and or mov add lea mov not rol and add and or add lea mov not rol and add mov and or add lea mov not rol add and mov and or add lea mov ror mov xor add xor add lea mov xor rol add xor add lea rol add mov mov xor xor add lea rol add xor mov xor add lea mov ror add xor xor add lea rol add xor add lea rol add mov mov xor xor add lea rol add xor mov xor add lea mov ror add xor xor add lea rol add xor add lea rol add mov mov xor xor add lea rol add xor mov xor add lea mov ror add xor xor add lea rol add xor add lea rol add mov xor xor add lea mov rol add xor xor add lea mov not ror add or xor add lea mov not rol add or xor add lea mov not rol add or xor add lea mov not rol add or xor add lea mov not ror add or xor add lea mov not rol add or xor add lea mov rol not add or xor add lea mov mov not rol add or xor add lea mov not ror add or xor add lea mov not rol add or xor add lea mov not rol add or xor add lea mov not rol add or xor add lea mov not ror add or xor add lea mov not rol add or xor add lea mov not rol add or xor add lea mov mov add not rol add mov or xor add lea ror add mov add mov mov add mov mov add mov add pop pop pop pop pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov push sub mov mov mov lea mov lea shr mov mov and cmp jae incl mov mov shr sub add cmp jb lea mov callq lea mov callq lea cmp jae data16 mov mov add callq add lea cmp jb xor jmp xor sub mov lea mov add mov mov mov add pop jmpq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov push push push sub xor movl movl movl movl movl movl mov mov lea mov mov mov mov mov mov mov mov callq lea lea mov nopl movzbl add add sub mov movzbl mov movzbl mov movzbl mov jne mov lea mov shr and cmp jb mov sub lea lea cmp mov mov jae inc mov mov lea shr mov add sub mov cmp jb lea mov mov callq lea lea callq lea cmp jae nopl mov lea add callq add lea cmp jb xor jmp xor sub mov lea mov add callq mov mov add shr mov and cmp jae incl sub cmp ja lea lea mov callq lea lea callq lea cmp jae data16 lea lea callq add lea cmp jb xor jmp xor mov lea lea sub callq mov lea mov lea movzbl mov movzbl mov movzbl mov movzbl add mov add sub jne lea lea nopw movzbl add add mov and shr movzbl mov movzbl movzbl mov mov and shr movzbl mov movzbl movzbl mov mov and shr movzbl mov movzbl movzbl mov mov and shr sub movzbl mov movzbl mov jne lea mov mov mov pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex sub mov mov mov mov mov mov mov mov xor xor callq mov callq mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov push sub mov callq mov movzbl mov callq mov test jne mov callq mov jmpq xor lea lea callq xor lea mov mov mov movl mov mov mov mov lea mov lea lea mov mov mov mov mov mov movb mov mov movl movl mov mov mov lea movb mov mov callq cmp jne lea mov xor xor movq callq mov lea mov mov mov pop retq int3 int3 int3 mov mov push push push push push sub xor mov mov mov mov callq mov callq mov movzbl mov callq mov test jne mov callq mov jmpq xor lea lea callq movb mov lea lea mov lea mov lea mov mov mov mov mov movb mov mov movl movl mov mov mov lea movb mov mov test je mov test je mov mov mov test je mov mov mov test je mov mov mov mov callq cmp jne lea mov xor xor mov callq mov test je test je mov test je mov test je mov mov lea mov mov mov pop pop pop pop pop retq int3 int3 mov mov mov mov push sub xor mov xor xor mov mov mov mov mov mov mov mov mov mov mov mov mov jmpq not pop movsbw pop bswap pop xchg movzbl lea pop jmpq sub setno shrd btr notq sets rol mov cmp test test test sub clc cmp jmpq or and bsf mov cmp mov test cmc bt cmc sub cmp bt shl jmpq sub jmpq popq jmpq movzbw push lea movzbw push mov repz jmpq cmc add jno pushfq jmpq push jmpq not bswap not push not push movsbw jmpq push jmpq mov jmpq jmpq mov lea mov mov mov mov pop retq rex sub mov mov callq mov test je mov lea xor mov mov mov movq mov mov callq mov test js mov callq mov mov callq mov callq mov mov add pop retq mov add pop retq int3 sub mov lea xor mov mov movq mov callq test js mov mov mov callq mov movzbl mov callq mov test jne mov callq mov mov mov add retq xor lea lea callq movb lea mov lea mov mov lea mov mov mov mov mov mov movb movb mov mov movl mov movl mov mov mov lea mov lea movb mov mov callq cmp jne lea mov xor xor movq callq mov callq mov mov mov add retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov push sub xor mov movb mov mov mov mov mov mov mov mov mov mov callq mov mov lea mov callq mov mov add mov callq xor mov lea mov callq mov test jne mov mov mov add pop retq mov mov mov callq mov test js mov mov mov mov mov mov callq mov test js mov mov mov mov mov mov callq mov test js mov mov mov mov mov mov callq mov test js lea mov callq mov test js lea xor mov mov callq mov test js lea mov mov callq mov xor mov callq mov mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex push push push sub movzwl xor mov lea add mov callq mov test jne mov add pop pop pop pop retq mov mov lea callq mov test jne xor mov callq mov jmpq movzwl mov mov mov mov mov callq movzwl lea shr lea mov mov lea mov mov mov mov mov mov lea mov cmp je nopw mov lea mov mov cmp je mov lea mov mov mov mov mov mov lea callq mov mov movl movl lea mov lea lea lea mov mov mov movl mov movl mov mov mov callq mov test js mov callq mov nopl mov mov mov nopl cmp je cmp jne test je xor mov callq add mov mov callq mov test je mov mov mov mov movl mov mov lea xor xor xor mov callq mov jmp cmp jne xor mov callq mov callq mov jmpq mov xor test js mov or xor repnz mov not lea mov callq mov test je mov mov or xor repnz not lea xor mov callq mov mov nopl movzwl add add mov test jne or xor mov repnz mov or mov mov xor mov lea repnz not lea callq lea mov callq testb je mov cmp jne cmpw je cmp jne cmpw jne cmpw je mov lea callq test je mov mov lea mov mov mov mov mov jmp mov mov mov mov callq mov test je mov lea xor mov mov mov mov mov callq mov test js mov callq mov mov callq mov callq test js xor mov callq test je xor mov callq jmpq xor mov callq xor mov callq mov jmp xor mov callq xor mov callq jmp xor mov callq mov jmp test je xor mov callq mov callq test js mov mov mov mov mov xor callq xor mov callq mov lea cmp jne jmp mov mov lea cmp je nopl mov lea xor mov mov mov callq xor mov callq mov lea cmp jne jmp mov mov mov mov mov mov add pop pop pop pop retq mov mov mov push sub movzwl mov mov mov cmp je mov mov cmp jne cmp jne cmp je cmp jne mov xor callq xor mov mov mov mov mov mov mov mov movl mov mov mov mov mov mov mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 rex sub mov cmp je xchg mov xor mov mov mov callq cmp jne add pop retq mov mov push sub lea xor mov cmp je lea callq movzbl mov cmp je nop cmp je mov cmp jne mov lea callq mov mov mov add pop retq rex sub lea lea callq mov test je mov nopw mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 rex sub mov cmp je mov mov lea mov mov callq mov lea movzbl cmp je nopl mov mov mov cmpb je mov mov mov mov mov jmp mov mov incl callq cmp jb incl mov callq jmp mov mov callq mov cmp jne cmp je nopl mov mov mov mov mov incl mov callq mov test jne mov mov mov incl callq mov test je xor mov mov mov mov mov mov mov mov movzwl mov movzbl mov mov mov mov mov mov mov mov xor mov callq cmp jne lea movzbl callq mov mov mov mov mov add pop retq xor add pop retq int3 int3 int3 int3 int3 int3 int3 mov mov mov push push push sub movzbl movzbl mov lea xor mov mov mov callq mov xor mov mov callq test je lea movzbl mov mov callq test je movzbl movzbl mov lea mov callq movzwl lea lea mov mov mov mov mov add pop pop pop rex.W int3 int3 int3 int3 int3 int3 mov mov mov push push push push push sub movzbl movzbl mov lea xor mov mov mov mov mov callq mov mov xor mov callq test je lea mov cmpb jne lea movslq lea callq movb lea jmp movzbl mov callq movb mov mov xor callq mov test je movzbl movzbl mov lea mov callq mov mov xor callq mov movzwl lea lea mov mov mov mov mov add pop pop pop pop pop rex.W int3 int3 int3 mov mov mov push sub lea xor mov mov cmp je lea callq movzbl mov nopl mov cmpb je mov cmp je cmp jmp cmp je cmp jne jmp mov lea callq mov mov mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 sub lea lea callq test je nopl xor mov callq lea lea callq test jne add retq int3 int3 int3 int3 int3 int3 int3 sub lea lea callq test je nopl xor mov callq lea lea callq test jne add retq int3 int3 int3 int3 int3 int3 int3 mov mov mov push push push push push sub mov lea mov mov xor callq mov mov movzbl cmp je mov nopl mov cmp jne cmp jne cmp jne cmp je cmp jne mov mov incl mov callq mov test jne mov mov mov incl callq mov test je xor mov mov mov mov mov mov mov mov mov mov mov mov mov mov mov lea movzbl callq mov mov mov add pop pop pop pop pop retq mov jmp int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov push push push sub mov lea mov mov xor callq movzbl cmp je mov mov mov mov mov lea cmp jb lea xor callq cmp je cmp jne jmp mov mov lea movzbl callq mov mov mov add pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov push push push sub mov lea mov mov xor callq movzbl cmp je mov mov mov mov mov lea cmp jb lea xor callq cmp je cmp jne jmp mov mov test je mov mov mov mov mov mov mov mov mov lea movzbl callq mov mov mov add pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov push sub mov lea mov xor callq movzbl cmp je mov cmp je cmp je mov cmp jne mov lea callq mov mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 test je push push push sub xor mov mov test je mov mov xor mov mov callq lea mov callq mov lea cmp je cmp je xchg cmp je mov cmp jne mov lea movzbl callq test jne mov mov incl mov callq mov test jne mov mov mov incl callq mov test je xor mov lea callq lea mov mov callq lea mov mov mov callq mov mov mov add pop pop pop repz int3 int3 int3 int3 int3 int3 int3 int3 int3 mov push sub lea lea callq mov test je data16 mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne lea lea callq mov test je nopl mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne lea lea callq mov test je nopl mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne lea lea callq mov test je nopl mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne lea lea callq mov test je nopl mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne lea lea callq mov test je nopl mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne lea lea callq mov test je nopl mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne lea lea callq mov test je nopl mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne lea lea callq mov test je nopl mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne lea lea callq mov test je nopl mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne lea lea callq mov test je nopl mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne lea lea callq mov test je nopl mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne lea lea callq mov test je nopl mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne lea lea callq mov test je nopl mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 xor mov test je mov cmp jne movslq cmpl jne movzwl cmp je cmp jne cmpl jbe mov test je mov test je cmp jae lea cmp ja mov mov retq cmpl jbe mov test je mov test je cmp jae lea cmp cmovbe mov retq int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov push push push sub xor cmpl mov mov mov mov jae mov mov incl mov callq mov test jne mov mov mov incl callq mov test je xor mov mov callq mov mov mov mov mov mov mov test je cmpb je mov sub nopl movzbl inc mov test jne lea lea mov callq mov incl mov mov mov mov mov add pop pop pop retq lea lea callq mov test je xor mov mov callq mov mov mov mov mov mov mov test je cmpb je mov sub nopw movzbl inc mov test jne lea lea mov callq mov jmpq int3 int3 int3 int3 mov mov mov mov push sub mov lea mov mov mov xor callq mov movzbl lea cmp je cmp je cmp je mov cmp jne test je mov mov test je mov mov mov test je cmpb lea je sub movzbl inc mov test jne test je mov mov mov test je mov mov mov lea movzbl callq mov mov mov mov mov add pop retq int3 int3 int3 mov push sub mov lea mov callq mov lea cmp je cmp je cmp je mov cmp jne mov lea movzbl mov add pop rex.W int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex sub lea lea callq mov test je mov nopw mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov mov push sub mov mov mov incl mov mov mov callq mov test jne mov mov mov incl callq mov test je xor lea lea mov mov mov mov mov mov mov mov mov mov mov mov mov callq mov mov mov mov mov add pop retq int3 int3 int3 int3 int3 rex sub lea lea callq mov test je mov mov test je xor callq mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne mov add pop retq int3 mov mov mov push sub mov mov mov incl mov mov callq test jne mov mov mov incl callq test je xor lea mov mov mov mov lea mov mov mov callq mov mov mov add pop retq int3 int3 int3 int3 mov push sub mov lea callq mov movzbl lea cmp je cmp je cmp je mov cmp jne mov mov mov mov cmp jne mov callq lea movzbl mov add pop rex.W int3 rex sub lea lea callq mov test je mov nopw mov mov incl callq cmp jb incl mov callq jmp mov mov callq lea lea callq mov test jne mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 rex sub mov xor callq xor lea mov mov mov movl mov mov mov mov xor mov mov callq xor mov mov mov mov movl mov mov mov mov xor mov callq xor mov mov mov movl mov mov mov mov xor mov mov callq xor mov mov mov mov movl mov mov mov mov xor mov callq xor mov mov mov movl mov mov mov mov xor mov mov callq xor mov mov mov mov movl mov mov mov mov mov xor callq xor mov mov mov mov movl mov mov mov mov xor mov callq xor mov mov mov movl mov mov mov mov xor mov mov callq xor mov mov mov mov movl mov mov mov mov xor mov callq xor mov mov mov movl mov mov mov mov xor mov mov callq xor mov mov mov mov movl mov mov mov mov xor mov callq xor mov mov mov movl mov mov mov mov xor mov mov callq xor mov mov mov movl mov mov mov mov mov xor mov callq xor mov mov mov movl mov mov mov mov xor mov mov callq xor mov mov mov mov movl mov mov mov mov xor mov callq xor mov mov mov movl mov mov mov mov xor mov mov callq xor mov mov mov mov movl mov mov mov mov xor mov callq xor mov mov mov movl mov mov mov mov xor mov mov callq xor mov mov mov movl mov mov mov mov mov xor mov callq xor mov mov mov movl mov mov mov mov xor mov mov callq xor mov mov mov mov movl mov mov mov mov xor mov callq xor mov mov mov movl mov mov mov mov xor mov mov callq xor mov mov mov mov movl mov mov mov mov xor mov callq xor mov mov mov movl mov mov mov mov xor mov mov callq xor mov mov mov movl mov mov mov mov mov xor mov callq xor mov mov mov movl mov mov mov mov xor mov mov callq xor mov mov mov mov movl mov mov mov mov xor mov callq xor mov mov mov movl mov mov mov mov xor mov mov callq xor mov mov mov mov movl mov mov mov mov xor mov callq xor mov mov mov movl mov mov mov mov xor mov mov callq xor mov mov mov mov movl mov mov mov mov mov xor callq xor mov mov mov mov movl mov mov mov mov xor mov callq xor mov mov mov movl mov mov mov mov mov add pop retq int3 int3 int3 mov lea cmp je cmp je cmp je mov cmp jne mov retq xor retq int3 int3 int3 int3 int3 rex sub mov xor callq xor xor mov xor xor mov movl mov movq callq mov xor callq mov xor xor xor mov movl mov movq callq mov xor callq mov xor xor xor mov movl mov movq callq mov xor callq mov xor xor xor mov movl mov movq callq mov xor callq mov xor xor xor mov movl mov movq callq mov xor callq mov xor xor xor mov movl mov movq callq lea lea mov mov mov mov mov mov lea mov mov mov mov lea mov mov lea mov mov lea mov mov lea mov mov lea mov mov lea mov mov lea mov mov lea mov mov lea mov mov lea mov mov lea mov mov lea mov mov lea mov mov lea mov mov lea mov mov lea mov mov lea mov mov lea mov mov lea mov mov mov lea mov mov mov mov mov mov mov mov mov mov mov mov mov mov mov mov mov mov mov add pop jmpq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex sub callq mov callq mov xor callq callq mov callq mov xor callq mov callq mov xor callq callq mov callq mov xor callq callq mov callq mov xor callq lea lea callq test je nop xor mov callq lea lea callq test jne lea lea callq test je nopl xor mov callq lea lea callq test jne lea lea callq test je nopl xor mov callq lea lea callq test jne lea lea callq test je nopl xor mov callq lea lea callq test jne callq mov lea cmp je nopl mov xor mov mov callq mov cmp jne add pop retq int3 int3 int3 int3 int3 int3 int3 int3 lea movq mov mov retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex sub lea lea callq mov test je mov test je xor callq xor mov callq lea lea callq mov test jne add pop retq mov push push push push push sub lea xor movzwl mov mov mov cmp je lea mov mov callq mov callq xor mov nopl mov mov test je cmp jbe mov test je xor callq mov mov mov mov cmp jne cmp jne lea cmp jne jmp cmp jbe mov xchg mov movzwl mov mov mov callq inc add cmp jb mov movzbl lea callq mov mov mov mov add pop pop pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov push push push sub xor lea mov mov cmp je mov lea mov mov callq mov movzbl callq mov mov mov test je cmp jbe mov test je xor callq mov mov mov mov cmp jne cmp jne cmp jne jmp mov mov mov inc mov cmp jb mov lea movzbl callq mov mov mov mov mov add pop pop pop retq int3 int3 mov mov mov push push push push push sub mov lea mov mov callq lea xor movzbl cmp je mov callq mov mov mov test je cmp jbe mov test je xor callq mov mov mov mov cmp je cmp jne mov xor callq mov xor mov mov mov mov mov mov mov callq mov add mov mov mov mov mov mov lea movzbl mov mov mov add pop pop pop pop pop rex.W mov test je xor callq mov mov callq add mov mov jmp int3 int3 sub xor lea lea callq cmpb je mov test jne mov mov movl xor add retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov push push push push sub movzwl movzbl xor shl mov mov or testb jne test je mov lea mov lea movzwl xor shl mov mov callq mov xor mov mov mov callq movzwl test jle mov mov nopl xor mov lea cmp je nop movzbl cmp jb movzbl movzbl mov shl lea lea inc test jne inc cmpb jne cmp jne inc add mov add movzwl movzbl shr shl or cmp jne movzwl movzbl shl or cmp jne mov test je test je movzwl mov mov mov callq mov inc add movzwl add jmp xor mov lea cmp je movzbl cmp jb movzbl movzbl mov shl lea lea inc test jne inc cmpb jne cmp jne inc movslq add sub jne mov mov mov mov test je test je mov mov mov mov add pop pop pop pop jmpq xor mov callq mov add pop pop pop pop retq int3 int3 int3 int3 int3 int3 int3 mov mov mov mov push sub mov mov lea xor mov xor callq or xor mov repnz not lea lea sub movzbl inc mov test jne movslq inc mov movb test jle movslq cmpb jne movzbl inc sub cmp mov jge movslq mov lea mov sub mov mov callq add add inc inc cmp jl movb jmp mov lea mov mov mov mov mov pop retq int3 int3 int3 int3 int3 int3 int3 rex push push push sub mov xor or mov mov mov repnz mov mov not mov lea xor callq mov mov callq mov test jne lea mov mov mov callq mov xor mov mov test je mov lea lea mov nopl cmpl je xor mov mov callq mov mov mov mov mov lea mov movb mov mov mov movb callq xor or movq xor repnz mov not mov lea lea mov mov mov mov mov mov mov mov mov mov lea mov lea movl mov callq test jle mov xor xor xor mov mov mov callq mov callq mov mov callq mov xor lea inc add cmp jb mov mov xor mov callq mov mov mov add pop pop pop pop retq int3 int3 int3 int3 mov push push push push push sub mov xor or mov mov xor repnz mov mov not mov mov lea xor mov callq mov mov callq mov test jne lea mov mov mov callq xor mov mov mov mov callq mov lea mov xor mov mov mov movb mov mov mov mov mov callq xor or xor repnz mov not mov lea lea mov mov mov mov mov mov xor mov mov lea mov lea movl mov mov callq test jle mov xor xor mov mov mov callq mov callq mov mov callq xor mov callq mov mov mov mov add pop pop pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov push push push push push sub mov or xor mov mov mov repnz mov movzwl not lea xor callq movzwl mov mov mov mov callq test jne mov mov mov mov callq xor mov mov mov mov callq lea mov mov mov mov mov mov xor movb movb mov mov mov callq xor or movq repnz mov xor not mov lea lea mov mov mov mov mov mov mov mov mov mov lea mov lea movl mov callq test jle mov mov mov mov mov mov callq mov callq xor mov callq mov mov mov add pop pop pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov test je cmp je mov lea lea data16 mov sub cmp jne cmpw jne cmpw jne cmp je cmp jne xor retq mov retq int3 int3 int3 rex sub cmpb mov jne xor xchg test je cmpb je cmpq je callq test jne mov mov cmpq je movq mov lea lea callq test js mov callq movb mov xchg mov callq add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex push push push sub movzbl mov mov movq test je movb mov lea callq lea lea lea callq mov test js mov mov xor callq mov lea mov callq test je mov callq mov test je movb jmpq mov test je mov mov lea callq test je mov callq mov test je movb jmpq test je mov mov mov lea callq test je mov callq mov test je movb jmpq mov mov mov callq mov test je mov mov mov lea lea sub mov callq test je mov callq mov test je movb jmp test je mov mov mov lea lea sub callq test je mov callq mov test je movb mov mov mov test je xor callq mov add pop pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov push sub xor mov lea lea mov movl mov movl mov mov callq test js jmpq test lea callq mov lea mov lea lea xor mov callq cmp je mov test je add xor mov mov mov mov callq mov test jne mov callq mov mov mov add pop retq mov xor mov callq mov mov lea lea mov mov mov mov callq mov test jns mov callq xor mov callq mov mov mov add pop retq cmpl jne mov cmp jbe mov xor callq mov test je mov xor mov callq mov lea mov callq jmp mov jmp mov mov callq xor mov callq test js lea mov mov callq mov test je xor mov callq mov mov mov add pop retq mov callq mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex sub lea cmp je lea mov mov callq mov test je mov mov mov xor mov mov mov mov mov callq mov test je movzwl xor mov callq jmpq es lea callq lea lea callq lea callq mov mov incl callq cmp jb incl mov callq jmp mov mov callq mov test je xor callq lea mov callq mov test jne mov mov mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 rex push push sub xor mov mov test je mov mov mov mov mov mov callq mov test je movzwl xor mov callq lea lea callq lea mov callq lea lea callq lea lea lea mov mov movl mov movl mov mov callq mov test jns mov xor callq mov jmpq lea xor callq mov lea mov xor lea lea mov callq cmp je mov test je add xor mov mov mov callq mov test jne mov callq mov xor callq mov mov mov add pop pop pop retq mov xor mov callq mov mov lea mov mov mov lea mov callq mov test jns mov callq xor mov jmpq cmpl jne mov cmp jbe lea xor callq mov test je mov xor mov add callq cmpb jne mov lea mov callq jmp movabs or mov mov xor repnz xor xchg movzwl add mov test jne jmp mov jmp mov mov callq xor mov callq test js xor mov mov callq mov test je xor mov callq mov xor callq mov jmpq mov callq mov xor callq mov jmpq mov jmpq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex push sub lea lea mov callq xor lea lea lea mov mov movl mov movl mov mov callq test js mov lea lea xor xor mov mov callq mov add xor mov mov callq mov test jne mov callq mov mov add pop pop retq mov mov lea mov mov mov mov callq mov test jns xor mov callq mov callq mov jmpq mov test je dec js mov nopl mov lea xor mov xor mov mov callq mov add xor mov mov callq mov test je mov xor mov callq mov mov lea mov xor mov mov mov callq test js lea lea callq cmp je lea lea callq lea lea mov mov lea mov movl movl mov mov mov callq test js mov callq mov callq mov xor mov callq sub jns mov xor mov callq mov callq mov mov mov add pop pop retq int3 int3 int3 int3 mov mov push sub mov mov mov mov callq test je mov callq test je lea mov callq lea xor lea lea mov mov movl movl mov mov mov callq test js lea mov callq mov lea mov lea lea xor mov callq cmp je mov test je add xor mov mov callq mov test jne mov callq mov jmpq mov xor mov callq mov mov lea lea mov mov mov mov callq mov test js cmpl jne cmpl jbe lea lea callq lea lea mov callq mov test js movzwl mov xor callq lea mov callq jmp mov mov callq xor mov callq mov jmp mov callq mov jmp mov lea mov mov mov pop retq rex push sub lea lea mov callq xor lea lea lea mov mov movl mov movl mov mov callq test js mov lea lea xor xor mov mov callq mov add xor mov mov callq mov test jne mov callq mov mov add pop pop retq mov mov lea mov mov mov mov callq mov test jns xor mov callq mov callq mov jmpq mov cmp jbe mov nopl mov lea xor mov xor mov mov callq mov add xor mov mov callq mov test je mov xor mov callq mov mov lea mov xor mov mov mov callq test js mov lea lea callq test jns xor mov callq inc cmp jb jmp mov mov xor mov callq mov callq mov mov mov add pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov push sub xor mov mov mov test je mov callq test je test je mov movzwl cmp je cmp je cmp jne cmpw jne cmpw jne cmpw jne mov mov callq mov mov jmp lea xor xor mov callq cmp jne mov xor mov callq mov lea mov mov mov callq test js mov mov callq mov mov mov callq mov jmp xor mov mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov push sub mov mov mov test je callq test je mov mov lea mov callq xor mov mov mov xor mov callq mov test je cmp jne cmp jne mov xor lea callq test je mov cmpw je xor jmpq sub test stc shl jmpq pushfq jmpq pushfq jmpq add sar notl mov adc shld mov cmc test sub bt clc test and jmpq add jmpq popq jmpq jmpq dec cmp jmpq jmpq pop (bad) mov jmp mov jmp mov test je mov mov callq xor mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov push sub mov xor lea mov mov callq test je mov and mov callq test je cmp je inc add cmp jb xor mov mov mov add pop retq mov jmp int3 int3 int3 int3 cmp je mov lea cmp je cmp je mov cmp jne mov retq xor retq int3 int3 int3 int3 int3 int3 int3 cmp je mov lea cmp je cmp je mov cmp jne mov retq xor retq int3 int3 int3 int3 int3 int3 int3 mov push sub xor lea lea mov xor mov mov callq mov test js mov mov mov test je mov cmp jb callq mov mov mov jmp callq mov mov mov jmp mov mov mov movzwl mov cmp jb test je cmp je mov cmp je cmp je mov cmp jne mov mov mov add pop retq cmp jae test je callq mov mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov or xor mov xor repnz not dec cmp mov jge test jle nopl movzbl inc lea mov cmp jg test je nopl movzbl inc inc sub mov jne movb inc cmp jl movb mov retq int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov mov push push push push push push sub mov xor movzwl mov sub je cmp jne lea cmp je xor jmpq push mov bswap push not jbe bswap movsbl push movsbq bswap lea push movzbw push xchg push xchg lea movsbw push movsbw bswap not setns push movsbl movsbw movsbl push movsbw lea lea push jmpq movsbw not push movzbq bswap lea push movsbl bswap push xchg bswap movsbw bswap push jmpq movzbw push not bswap movsbw push not setns push setb movzbw xchg movsbw push movsbq jmpq push movzbw push mov movsbq movzbw push mov push mov push lea push bswap jmpq mov jmpq push mov mov push movzbw jmpq jmpq push jmpq jmpq movzbw test inc mov cmp add jmpq sub jmpq jmpq or bt mov test cmc stc bswap bt add cmc clc test clc xor test add clc clc bt bswap bt cmc stc rol stc test cmc bt push add add movsbl sub pop bt cmc test clc sub jmpq jmpq jmpq jmpq lea push mov lea not lea push movzbl movsbw movsbl push mov push jmpq popq jmpq clc xor test stc mov test test lea clc jmpq jmpq push js push jmpq not jmpq repz jmpq lock in xor or pushfq and add add retq add leaveq jmpq sub jmpq push jmpq cmp cbtw bt test cmp cwtl jno stc cmc cltq stc cmc sub jmpq dec cmc stc stc neg jl bt stc rol cmc cmp jmpq xchg movsbw movzbw repz movzbw jmpq inc test test add bt cmc sub jmpq jmpq movsbw movsbw mov jmpq push movsbw jmpq adc pushfq and add add test add add rex.R mov mov mov mov mov mov mov mov mov mov movzbl mov callq add pop pop pop pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex sub mov test jne mov add pop retq mov xor mov xor jmpq jmpq dec jmpq mov jmpq jmpq out jl push mov mov movl lea mov lea lea lea mov movl movl mov mov movl mov mov mov callq test js mov lea xor xor mov mov mov callq mov mov callq test jns mov mov add pop retq mov mov mov callq xor mov add pop retq int3 int3 int3 int3 int3 rex sub lea xor mov callq test js mov mov mov test je cmp je mov mov lea mov mov xchg movb mov add pop retq mov mov add pop retq mov push sub mov callq callq xor test mov cmove lea mov mov mov mov mov xor mov mov callq mov mov callq test js xor jmpq adc not ror rcr mov clc stc bt test sub clc test cmp cmc add jmpq jmpq jmpq (bad) fstpt mov add pop retq int3 int3 int3 int3 int3 int3 int3 rex sub mov mov callq test je mov mov mov movzwl mov mov mov mov mov mov mov mov mov cmp jb cmp jne cmpb jne mov lea jmp cmp jb cmp jne cmpb jne movzbl lea jmp cmp jb cmp jne cmpb jne mov movabs add add xor mov mov mov mov mov mov mov mov nopl mov movzwl cmp jb cmp jne cmp jne cmpb jne cmp jne lea callq test jne mov mov mov mov mov jmpq cmp jb cmp jae cmp jne cmpb jne cmp jne lea callq test jne mov mov mov mov mov jmpq cmp jb cmp jae cmp jne cmpb jne cmp jne lea callq test jne mov mov mov mov mov jmpq cmp jb cmp jne cmpb jne cmp jne lea callq test jne mov mov mov mov mov jmp cmp jne cmpb jne cmp jne lea callq test jne mov mov mov mov mov inc inc cmp jbe xor mov mov mov mov mov mov mov add pop retq mov movabs add add jmp xor add pop retq int3 int3 int3 int3 int3 int3 int3 mov mov push push push sub mov mov mov xor mov lea mov callq nop mov lea mov callq mov mov xor callq mov mov jmp mov mov mov mov lea callq test js cmp jne mov callq mov mov movl xor xor mov lea callq mov callq mov callq mov callq xor mov callq mov add pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 rex push sub cmpb mov mov jne lea mov callq cmpq movzbl je mov lea cmp je mov mov mov data16 mov mov xor mov xor mov callq test js mov xor callq mov test je xor mov mov mov mov mov mov mov mov mov mov mov mov mov callq mov test je lea mov mov mov callq cmpb jne cmp jne mov mov mov lea movzbl callq mov add pop pop retq int3 int3 mov push sub mov mov mov movzwl cmp jb mov mov cmp cmove jmp mov mov callq test je mov mov mov xor test je mov mov callq test je mov and mov mov callq test je cmp je inc add cmp jb xor mov mov mov mov add pop retq mov jmp xor jmp xor mov add pop retq int3 int3 int3 mov mov push sub xor mov mov mov callq mov test mov cmove lea xor mov mov mov mov mov mov mov callq test js mov xor lea lea xor mov mov callq mov test je mov xor callq mov test je mov mov lea mov mov mov callq mov test js mov jmp xor mov callq mov callq mov mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 mov push push push push push sub mov xor mov lea mov mov mov mov callq test je lea xor mov callq mov callq test je mov lea lea mov lea xor xor mov callq test je mov cmp je lea xor mov callq mov lea callq mov mov lea mov lea mov lea xor xor mov callq mov test jns lea mov callq test js mov lea lea mov callq mov test js lea mov mov callq test js lea xor mov callq movzwl mov lea callq lea callq mov mov xor callq mov xor mov callq test js mov mov callq jmpq mov lea callq mov mov lea mov lea mov lea xor xor mov callq mov test jns lea mov callq test js mov lea lea mov callq mov test js lea mov mov callq test js lea xor mov callq movzwl mov lea callq lea callq mov mov xor callq mov xor mov callq test js mov mov lea mov mov xor xor mov callq test js cmp je lea mov callq test je add je jmp lea mov callq mov mov mov callq or xor mov mov repnz not lea xor callq mov mov mov lea callq test jne mov mov lea callq test jne mov lea mov callq test jne mov test je mov mov lea callq test je mov mov lea mov xor xor mov callq mov callq mov test je xor callq mov callq jmpq mov mov callq mov test je mov mov mov lea lea sub callq test jne cmp jne mov mov mov lea lea lea sub mov callq test jne cmp jne mov mov mov lea lea mov callq test je callq movb add mov mov mov cmp je callq mov mov add mov callq mov callq mov test je xor callq mov callq xor mov callq mov add pop pop pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex sub cmpq mov je mov xor xor mov callq test js mov xor mov callq mov test je xor mov mov mov callq mov test je lea mov mov mov callq mov add pop retq int3 int3 int3 int3 int3 int3 int3 rex sub mov lea movzbl callq test js mov test je callq mov callq add pop retq callq mov callq add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 sub test je movzbl lea add rex.W lea xor mov callq mov test js callq lea mov callq mov mov mov add retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov push sub cmpb mov mov jne mov xor mov xchg test je xor jmpq lea push lea lea push lea xchg xchg movsbw push bswap push movsbw xchg jmpq inc bt test neg jmpq mov movzbw push bswap mov mov jmpq setno not push setp push mov not push lea push bswap movabs movzbw xchg push not bswap ja repz jmpq jmpq push jmpq test neg test add jmpq pushfq jmpq push jmpq or shl mov cmc jmpq push xchg repz movzbl pushq movsbw movsbw bswap movabs not not bswap jmpq pushfq jmpq stc xchg jmpq jmpq jmpq jmpq jmpq jmpq movzbw push movsbw seto xchg setb push bswap movsbw jmpq jmpq bswap bswap push jge movzbl movzbl not mov jmpq jmpq jmpq jmpq jmpq mov btc movzww cmc jmpq push jmpq pushfq jmpq jmpq stc jmpq mov jmpq sub movabs mov add pop rex.W int3 int3 int3 sub mov test je callq test je lea mov mov mov callq add retq int3 int3 int3 int3 int3 int3 int3 mov push sub mov xor jmpq lea push mov push xchg setg lea push xchg xchg lea bswap repz mov movsbw setae pushq xchg lea movabs jmpq jo mov jmpq jmpq mov pop and add pop retq int3 int3 int3 sub mov lea xor xor movb callq xor add retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov mov push sub mov mov mov lea xor xor mov callq xor lea lea lea mov mov movb xor xor mov mov mov callq mov test jne mov jmp mov mov mov mov mov mov movb movb mov mov mov mov mov mov callq cmp jne lea xor xor xor mov callq mov lea mov mov mov mov mov pop retq int3 int3 int3 int3 int3 int3 int3 mov mov mov push push push sub mov mov mov movl mov mov mov mov xor mov mov xor mov movl mov mov movzwl mov mov mov xor mov mov mov mov mov movl lea mov mov mov mov mov movl lea mov mov test jne xor jmpq mov mov mov cmp jne mov mov mov callq lea xor xor callq xor jmpq cmp je xor jmpq mov xor callq mov mov mov xor mov callq mov mov mov callq sub mov lea mov xor xor mov callq mov mov test jne xor mov callq mov xor jmpq xor lea mov callq nop mov xor movzbl callq mov test jne mov callq xor mov callq mov xor jmpq lea test je mov mov mov movb jmp mov mov mov movb mov movb movb mov mov mov mov mov lea mov lea mov movl mov decb addq mov mov mov jmp mov callq mov xor mov callq xor mov xor lea mov mov mov pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 mov push sub mov mov mov mov callq lea xor xor callq mov test je callq mov callq movq mov callq mov xor callq mov movq mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov push sub mov mov mov mov test jne xor jmpq mov mov mov cmp jne mov mov mov callq lea xor xor callq xor jmpq cmpq je xor jmpq mov xor callq mov mov mov xor mov callq mov mov mov callq sub mov lea xor mov xor xor mov callq mov mov test jne xor mov callq mov xor jmpq xor lea mov callq nop mov xor movzbl callq mov test jne mov callq xor mov callq mov xor jmpq lea test je mov mov mov movb jmp mov mov mov movb mov movb movb mov mov mov mov movl mov mov decb addq mov mov mov jmp mov callq mov xor mov callq xor mov xor mov mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov mov push sub mov movzwl mov mov cmp jne lea jmp cmp jne lea lea callq xor lea movl lea mov movl lea mov mov mov callq mov test jne mov jmpq mov mov movb movl mov mov mov mov movl mov mov mov mov mov lea mov movzbl lea mov movzbl mov mov mov movl mov xor mov mov mov lea movl mov callq xor mov mov callq test js mov lea xor xor mov mov mov callq mov test jns mov callq mov movq mov jmp mov xor lea mov mov mov mov mov pop retq int3 int3 mov mov push sub mov lea lea callq xor lea lea movl mov lea movl mov mov mov callq mov test jne mov jmpq mov mov movb movl mov mov mov movl mov mov mov lea mov mov mov mov movzwl lea mov movzbl lea mov lea mov mov movl mov mov callq xor mov mov callq test jns mov jmp mov lea xor xor mov mov mov callq mov test jns mov callq mov movq mov jmp xor mov mov lea mov mov mov pop retq int3 mov push sub mov lea xor xor callq mov xor lea lea xor mov lea xor mov movb mov mov callq mov test jne mov mov add pop retq mov mov mov mov mov movb movb mov mov mov mov mov mov mov callq cmp jne lea xor xor xor mov callq mov mov add pop retq int3 int3 int3 mov push sub mov lea xor xor callq mov xor callq mov test jne mov mov add pop retq xor mov mov mov mov callq movl lea mov mov mov movl mov lea xor mov movzwl xor mov mov mov lea movl mov mov movl mov mov lea mov lea lea mov movb xor mov mov callq mov test jne mov callq mov jmp mov mov mov mov mov movb movb mov mov mov mov mov mov mov mov callq mov cmp jne lea xor xor xor mov callq mov xor mov callq mov mov mov mov add pop retq int3 int3 mov push sub mov lea xor xor callq mov xor lea lea xor mov lea xor mov movb mov mov callq mov test jne mov mov add pop retq mov mov mov mov mov movb movb mov mov mov mov movq mov mov mov mov callq cmp jne lea xor xor xor mov callq mov mov mov add pop retq int3 int3 int3 mov push sub mov lea xor xor callq mov xor lea lea xor mov lea xor mov movb mov mov callq mov test jne mov mov add pop retq mov mov mov mov mov movb movb mov mov mov mov mov callq cmp jne lea xor xor xor mov callq mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex sub mov mov cmp je callq movq mov cmp je callq movq mov test je callq movq mov test je callq movq xor add pop retq int3 mov mov push push push push push sub mov mov mov xor xor lea callq lea mov lea mov movb xor mov mov xor xor mov lea callq mov mov test jne mov jmpq test je mov xor xor mov mov callq mov mov test jne mov callq mov jmpq xor xor mov callq mov mov jmp mov mov callq mov mov callq mov mov xor mov mov test jns jmpq mov mov mov mov movb mov movb movb mov mov mov mov mov mov mov test cmovne mov mov mov callq cmp jne mov xor xor xor lea callq mov test cmovns add pop pop pop pop pop retq mov mov push push push push push sub mov mov mov xor xor lea callq lea mov lea mov movb xor mov mov xor xor mov lea callq mov mov test jne mov jmpq test je mov xor xor mov mov callq mov mov test jne mov callq mov jmpq xor lea mov callq mov mov jmp mov mov callq mov mov callq mov mov xor mov mov test jns jmpq mov mov mov mov movb mov movb movb mov mov mov mov movl mov mov test cmovne mov mov mov callq cmp jne mov xor xor xor lea callq mov test cmovns add pop pop pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov mov push push push push push sub mov movzwl mov mov xor xor lea callq mov xor callq mov mov test jne mov jmpq xor mov mov mov mov mov mov mov mov mov movl lea mov movl mov mov mov mov mov mov lea mov lea mov movb xor mov mov xor xor mov lea callq mov mov test jne xor mov callq mov jmpq mov test je mov xor xor mov mov callq mov mov test jne mov callq xor mov callq mov jmpq mov xor mov callq mov mov jmp mov mov callq mov mov callq xor mov mov callq mov mov xor mov mov test jns jmpq mov mov mov mov movb mov movb movb mov mov mov mov mov mov mov test cmovne mov mov mov callq mov cmp jne mov xor xor xor lea callq mov xor mov callq test cmovns mov lea mov mov mov pop pop pop pop pop retq int3 int3 int3 int3 mov mov mov mov mov push push push sub mov mov movl mov mov mov mov xor mov mov xor mov mov mov mov mov movl lea mov movl mov mov mov mov xor mov mov mov mov mov movl lea mov xor xor lea callq lea mov lea mov movb mov mov xor xor mov lea callq mov mov test jne mov jmpq mov test je mov xor xor mov mov callq mov mov test jne mov callq mov jmpq mov xor mov callq mov mov jmp mov mov callq mov mov callq mov mov xor mov mov test jns jmpq mov mov mov mov movb mov movb movb mov mov mov mov mov lea mov lea mov movl mov test cmovne mov mov mov callq cmp jne movq lea mov xor xor xor lea callq cmp jne mov callq mov xor xor xor lea callq mov jmp mov test cmovns lea mov mov mov mov pop pop pop retq int3 int3 int3 int3 int3 int3 int3 int3 sub mov test je movzbl mov xor xor xor xor test je xor cmp jne mov add inc shl add cmp ja test je xor xor jmp lea inc movsbl lea cmp ja cmp jl cmp jg cmp ja mov inc test jne cmp jne test je shl add mov add retq xor mov add retq or add retq int3 int3 int3 int3 int3 int3 int3 int3 rex sub mov cmp jne cmp je cmp jne cmp je test je or add pop retq cmp je test jne mov xor mov callq mov test jne or mov add pop retq xor mov mov callq mov movq movq neg mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex sub mov neg test je cmp jb cmpb jne movzwl mov mov callq test js cmpl mov mov mov mov jne lea lea mov mov callq cmpq je mov mov lea mov mov callq lea xor xor callq mov movb xor add pop retq cmpq je lea lea mov mov callq lea xor xor callq mov movb xor add pop retq or add pop retq int3 int3 int3 int3 int3 int3 int3 rex sub mov neg test je cmp jb cmpb mov mov mov mov mov mov mov mov jne mov lea mov xor lea mov mov callq test js mov cmp jne cmpb jne cmpb jne mov callq test js mov callq mov test js callq test jns mov callq mov callq movb or add pop retq lea xor xor movb callq xor add pop retq sub neg sbb add pop retq int3 mov mov push sub mov mov mov neg mov cmp jne cmp jne lea movl mov callq mov mov add pop retq cmp jne cmpb je mov mov mov add pop jmpq or mov mov add pop retq cmp jne mov mov test je cmpl jb cmpb jne mov xor lea lea mov mov callq test js movzwl mov mov mov mov callq jmp or mov mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 test je mov mov push sub mov mov mov mov mov test je xor callq xor mov mov mov xor callq mov test je mov mov mov callq mov mov mov mov add pop repz int3 int3 int3 int3 int3 int3 int3 int3 int3 sub mov neg mov mov cmp jne mov lea cmp jne mov mov add jmpq cmp jne cmpb je test je mov movzwl mov mov callq add retq cmp jne cmpb je add jmpq or add retq int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov push sub mov neg cmpl jne cmpq je cmpq je cmpb je mov callq mov callq mov callq mov mov test je xor callq mov xor mov mov test je xor callq xor mov mov mov callq mov mov mov add pop retq sub mov neg mov cmp jne lea mov movl mov callq add retq cmp jne cmpb je add jmpq or add retq int3 int3 int3 int3 int3 mov mov mov push push push sub mov mov xor neg mov mov test je mov mov test je mov mov cmp jne cmp jne lea movl mov callq jmpq cmp jne cmp je mov callq jmpq or jmpq cmp jne mov mov test je cmpl jb cmp jne mov lea lea mov mov mov mov mov mov mov mov mov mov mov mov callq test js movzwl mov mov mov mov callq mov test jle lea lea xor xor xor movq mov callq mov mov xor mov lea mov callq cmp jne mov jmp test je mov mov test je mov mov mov jmp or mov mov mov mov add pop pop pop retq int3 int3 test je test je test je mov lea nopl movzbl inc inc xor movzbl xor sub mov jne repz int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov test je lea nop movzbl mov inc xor movzbl mov mov shr xor add jne mov retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 rex xor mov mov mov test jle mov lea movzbl cmp je cmp je movzbl add inc movsbl movzbl inc movsbl shl shl add mov shr mov movzbl cmp je movzbl inc inc movsbl inc shl add mov shr mov movzbl cmp je movzbl inc inc movsbl add inc mov add jmp inc inc cmp jl mov movb mov pop retq mov mov pop retq int3 int3 int3 shr lea retq int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov mov push sub lea lea xor xor xor xor callq lea callq mov test je lea xor mov callq lea movl callq test jne mov mov mov movzwl sub movl je sub je cmp jne lea lea callq lea callq mov test jne lea lea callq lea callq lea lea mov callq lea callq movl mov movl movl movl mov movl movl jmpq lea lea callq lea callq mov test je sub je sub je cmp jne lea lea callq lea callq lea lea mov callq lea callq movl movl movl movl movl mov movl movl jmpq lea lea callq lea callq lea lea mov callq lea callq movl movl movl movl movl mov movl movl jmpq lea lea callq lea callq lea lea mov callq lea callq sub movl movl movl movl mov movl movl je cmp jne movl jmpq movl jmpq sub movl movl movl movl movl je sub je cmp jne movl movl jmpq movl movl jmpq movl movl jmp cmp jne movl movl movl movl movl movl test je sub je cmp jne movl jmp movl jmp movl lea mov mov mov mov mov pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 sub callq movabs mov mov movabs imul imul sar mov shr add add retq int3 int3 int3 mov mov push sub mov mov lea mov callq xor lea mov mov mov movl mov lea lea mov mov movl movl mov mov movl mov mov mov callq test js mov xor xor xor mov mov callq lea mov mov mov pop retq int3 int3 int3 int3 int3 int3 int3 int3 mov push push push sub mov lea lea callq mov xor mov mov nopw mov lea lea mov lea mov movl mov movl mov mov mov callq test js mov mov mov mov callq mov test jne mov callq jmp movzwl xor mov callq mov lea xor callq mov mov callq test jns mov xor callq jmp lea mov mov callq test jne mov xor callq inc cmp jbe jmp mov xor callq cmp ja movzwl mov xor callq mov mov mov mov mov mov mov mov mov add pop pop pop retq int3 int3 int3 int3 int3 int3 int3 mov mov push sub cmpw mov mov je mov callq test je movzwl add callq test je lea lea mov callq test js mov mov xor lea mov mov callq mov test je movzwl xor mov callq mov lea lea callq test jne mov add jmpq mov lea mov mov callq test jne add je cmp je lea mov callq mov mov test je mov mov cmp jb mov callq mov jmp movzbl add test je movzbl sub jmp mov test je cmp je lea lea callq lea lea callq lea callq test je or xor mov repnz not dec mov test je cmp jbe lea lea mov callq test js movzwl mov mov callq lea callq cmpb je xor mov or repnz movzwl mov or xor mov repnz mov not dec lea cmp jbe sub mov mov mov mov add callq mov xor callq lea callq mov mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov push sub mov xor callq test je lea mov callq test je cmp jle mov mov cmp jb mov callq mov cmp jne lea mov mov add pop retq mov mov mov cmp cmove mov mov mov add pop retq mov mov add pop retq mov mov push sub xor mov test je mov add cmp ja lea cltq movzbl mov add jmpq mov jmp mov jmp mov jmp mov callq test setns mov mov add pop retq mov jmp xor mov callq test je mov xor xor mov mov callq test js mov callq test je mov mov callq test je mov mov cmp jne mov mov mov mov mov cmp jb and mov callq test je mov mov mov mov callq mov mov mov add pop retq nop or adc add sbb add rex.R add add add add add add add add add add add add add add add mov push sub mov mov callq mov movabs movabs mov imul imul sar mov shr add callq test je mov lea nopl callq inc mov and sub movzbl mov jne mov mov add pop retq int3 int3 int3 int3 int3 int3 int3 int3 int3 data16 data16 xchg mov cmp jb movzbl movabs imul cmp jb neg and je sub mov add mov and shr jne mov and shr je data16 nop mov add dec jne test je mov inc dec jne retq data16 data16 data16 cmp jae mov mov mov add mov mov dec mov mov mov jne jmp data16 data16 movnti movnti movnti add movnti movnti dec movnti movnti movnti jne lock jmpq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 data16 data16 xchg mov sub jbe cmp jb test je test je mov dec mov add test je mov sub mov add test je mov sub mov add mov shr jne mov shr je mov mov add dec jne and test jne mov retq data16 mov mov inc dec jne mov retq data16 data16 data16 data16 data16 data16 cmp jae mov mov add mov mov mov mov dec mov mov jne and jmpq data16 data16 data16 xchg cmp jb mov prefetchnta prefetchnta add dec jne sub mov mov mov movnti movnti mov mov movnti movnti mov mov add movnti movnti mov mov dec movnti movnti jne sub cmp jae lock jmpq data16 data16 data16 data16 data16 je add cmp jb test je test je dec mov dec mov test je sub mov sub mov test je sub mov sub mov mov shr jne mov shr je sub mov dec mov jne and test jne mov retq data16 dec mov dec mov jne mov retq data16 data16 data16 data16 data16 data16 cmp jae mov mov sub mov mov mov mov dec mov mov jne and jmpq data16 data16 data16 xchg cmp ja mov sub prefetchnta prefetchnta dec jne add mov mov mov movnti movnti mov mov movnti movnti mov mov sub movnti movnti mov mov dec movnti movnti jne sub cmp jae lock jmpq jmpq jmpq jmpq jmpq jmpq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 sub test mov mov jne xor mov add retq mov mov cmpl jle movzbl mov callq jmp movzbl cmp cmove movslq mov mov and test je inc jmp movzbl mov inc cmp mov je cmp jne movzbl inc xor nop add cmp ja cmp je cltq lea inc lea movzbl jmp cmp jne neg mov mov add retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 xor retq sub xor mov mov mov xor mov callq xor add retq int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 int3 mov mov mov push push push push push sub mov mov xor mov mov mov mov mov xor jmpq jmpq callq cmc stc cmc test jmpq setns movzbl jmpq mov jmpq callq bswap sbb mov jmpq test cmp test cmp jmpq ja neg movsbl bsr shld mov bsr lea movzbw btr (bad) icebp bts movzbl mov add jmpq jmpq jmpq mov jmpq callq jmpq pop add mov (bad) decl int (bad) rex.RB mov dec not lea cmp jmpq movsbw mov jmpq callq movzbw xchg lea mov bswap bswap jmpq mov lea mov jmpq jmpq movzbq mov bswap not lea mov jmpq callq not mov jmpq test jmpq pushq jmpq jmpq movzbw mov jmpq jmpq jmpq jge lea bswap mov jmpq movsbw movzbq je lea mov jmpq jmpq jmpq jmpq lea jmpq cmp jmpq callq jmpq jb ror xor neg mov sar bswap lea rol sub jmpq jmpq callq stc test test jmpq callq cmp cmc stc test js je clc cmp cmp jmpq callq movsbw bswap jmpq test jmpq pushq jmpq callq cmp cmp jmpq jmpq je bswap setnp bswap mov jmpq not mov jmpq jmpq je movsbw mov lea setp mov movzbw mov jno callq bswap movzbl movsbq mov not mov jmpq jbe clc cmp jmpq not not bswap mov jmpq jbe lea movsbl mov setp mov bswap bswap jmpq pushq jmpq callq cmp test test jmpq callq cmc bt jmpq mov movsbw mov mov jmpq mov mov bswap mov jmpq jmpq mov jmpq pushq jmpq je pushq jmpq jmpq jmpq bt stc cmp jmpq callq clc mov clc test test jmpq pushq jmpq lea not jg movzbl mov jmpq callq cmp bt stc test jmpq cmp test jmpq setnp mov bswap mov jmpq jmpq mov jmpq jmpq jmpq jmpq jmpq jmpq mov setb movsbq movzbl jb mov jmpq jmpq jne dec sar movzwl lea btr btc mov stc test xor jmpq lea mov jmpq callq cmp ror inc lea mov bts shl shr inc lea clc jmpq jmpq movzbw movzbw mov jmpq mov not bswap not mov mov jmpq movzbl lea mov seto lea mov jmpq je cmp bt cmc cmp jmpq jmpq callq not seta mov jmpq jmpq jmpq callq jmpq jmpq jmpq mov bswap movzbl jmpq cmc bt cmp jmpq callq jmpq (bad) incl jbe mov test je mov xor mov mov callq mov mov mov add pop pop pop pop pop retq nop mov jmpq jmpq jbe je not lea lea mov mov movzbw not mov jmpq clc cmp jmpq lock rex.WRX adc adc adc adc adc adc adc adc adc add adc add adc adc adc adc adc adc adc adc adc add adc adc adc adc adc add adc add adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc or adc adc adc adc mov mov push sub mov mov mov test je movl movq jmp movl movq xor jmpq jmpq je clc bt xor jmpq jmpq callq jmpq callq jmpq setg mov not movsbw jmpq callq cmc xor mov mov cmp test jl js jmpq lea not jmpq xchg lea lea lea jmpq mov sets lea jmpq mov lea movzbq lea jb mov bswap movzbq lea jg mov jnp mov jae mov jmpq callq lea mov mov rcl or mov inc btc mov rcr inc bsf jmpq callq bswap jbe lea mov sets lea not mov lea movsbw lea setae lea lea not jl movzbw movzbw mov jmpq jp mov jmpq setns lea jmpq mov jmpq jmpq callq ror shr jmpq mov bt clc test test jmpq js sets xchg movzbw mov not lea lea mov movzbl bswap movsbw movq movsbw movsbw mov movzbw mov movzbl mov jmpq mov bswap lea jmpq jmpq callq xchg lea not movsbw lea movzbw setbe lea jmpq jo callq dec sbb bt xadd mov setnp mov bt test jmpq jmpq jns jmpq callq jmpq jmpq callq stc test jmpq jmpq pop retq fisttp pop and mov xor add pop retq shl add add (bad) add movsb repnz add add mov add add add jp add add add mov add add stc movabs add add add add add add pushq add add add mov add add add movabs callq add lret add add add callq add out add add add lock add cli callq add or add add add (bad) jmpq add sub add add add ds add push jmpq add pop jmpq add jmpw add add jb add add add sub add add add add add add add add add jmpq add in add add add hlt jmpq add or add add add sbb add add add xor add add add rex.W add add add pushq add add add movabs (bad) add add add shr add add add (bad) add add add out add add add or add add add sub add add add xor add add add rex.RX add add add add add add sub add add add add add add add add add jmp add add add jmp add add add jmp add add add in add add add adc add add add and add add add cmp add add add rex.W add add add pop in add add add jle add add add xchg in add add add movabs in add add add enterq add add in add add add hlt in add add add add add add add (bad) in add add add cs add add add and add add add push in add add add pushq add add add add add mov add add add lods in add add add (bad) in add add add out add add add clc in add add add sbb add add add sub add add add cmp add add add rex.RX add add add (bad) out add add add outsb out add add add mov add add add cwtl out add add add mov add add add shr add add add loop add add add clc out add add add (bad) out add add add (bad) out add add add sub add add add rex.W add add add (bad) out add add add jbe add add add mov add add add cmpsb out add add add mov add add add mov add add out add add add in out add add add add add add add and add add add rex lock add add pop lock add add xor add add add add add add add lock add add (bad) lock add add in lock add add div add add add (bad) icebp add add add sub add add add rex.W add add add data16 add add add mov add add add test add add add mov add add icebp add add add fdiv add add add hlt icebp add add add adc add add add sub add add add rex.R repnz add add rex.WRX repnz add add repnz add add or add add add in out add add add out add add add out add add rex.X insb fs (bad) gs movb insl rex.WB fs jae push (bad) insb imul rex.RXB gs jns je insl push outsl jne imul gs add add je rex.WB imul gs je imul rex.RB jb gs outsl outsl insb push imul add je movslq imul je xchg add je push gs (bad) movslq movslq imul imul repz insb rex.XB (bad) je push movslq imul imul add insb rex.B fs jae rex.B insb outsl ja movslq add add insb rex.XB (bad) je movslq rex.RX rex.B insb outsl movslq gs outsl outsl insb push imul add je rex.WR outsb addr32 push imul rex.RB outsl jb jae and insb outsl jae add add movslq add gs (bad) insb jne rex.WXB gs xor pop ja gs gs push (bad) insb jne rex.WXB gs add gs je rex.WXB gs rex.XB rex.B insb outsl movslq gs outsl outsl insb add jo pop ja jne jb push (bad) insb jne rex.WXB gs rex.WRXB outsb rex.WXB gs fild movslq add outsb imul pop ja gs imul ja jne jb rex.WB outsw jb (bad) je outsl outsb imul ja jb (bad) je imul ja jb je imul rex.RXB gs jne jb outsb je jb movslq jae add add jo imul pushq movslq add outsb push jb movslq jae push add data16 gs data16 outsb movslq (bad) pushq movslq movabs insl jo rex.WX push gs outsb movslq (bad) pushq movslq rex.W outsb fs add add je rex.RX rex.B jae push je imul je push outsb imul jb outsb addr32 outsl rex.B jae push je imul rex.WB rex.RXB gs gs (bad) je fs gs movslq (bad) pushq movslq (bad) add insb rex.B outsb fs outsb imul push je imul pop ja gs gs rex.WXB gs cmp jne gs je rex.WXB gs add pop ja jne jb rex.WXB gs add rex.RX gs outsb imul jb outsb add roll push je rex.B outsb fs outsb imul jb outsb addr32 outsl push je imul push je rex.B jae push je imul imul jb outsb add int3 add movslq add add je rex.WB imul jb outsb add push jae gs jne jb outsb je pushq push jb jbe outsl jne rex.WRB fs xchg add jae movslq imul insb gs add push jb (bad) rex.RX jb jb je add outsb jae (bad) movslq gs movslq jb movslq jae add push jb (bad) rex.RX jb gs add xchg rex.WXB gs je movslq je (bad) movslq jb movslq jae add outsl movslq jae jns gs add insb rex.XB jo push outsb imul jb outsb add jno rex.WB rex.RX gs add rex.WB rex.RX gs fs add rex.WXB gs gs jbe outsb je add imul insb gs pushq movslq add data16 insb insb rex.R jbe jb jrcxz push gs (bad) je movslq jae push je je add gs imul je outsb gs movslq jo imul rex.WB imul rex.RB outsb je xor rex.WB rex.B insb outsl movslq gs add rex.WRXB jb (bad) je rex.WRXB pushq movslq insb add imul je jns add mov rex.WRB rex.X insb fs fs rex.RX jb outsl outsb push (bad) addr32 outsl outsl insb add add rex.B insb outsl movslq gs fs add rex.WB rex.XB (bad) je imul outsl rex.R gs gs rex.R gs movslq add rex.WB rex.R gs gs push jns (bad) outsl insb imul add add push outsb jb imul jne outsl ja rex.WRX je imul outsl outsb add testb outsl rex.XB insl jo gs push gs gs add rolb rex.WB push je jo imul rex.XB push outsb push imul insb insb (bad) movslq add je outsl (bad) fs (bad) rex.WRX je data16 outsl jne imul outsl push imul jne outsl ja rex.WRX je imul outsl outsb add push add rex.XB (bad) je push jns (bad) outsl insb imul add outsl rex.XB (bad) je rex.R gs movslq add rex.WB je jb outsl movslq fs jne pushq jns imul rex.RB jne jb rex.R gs pushq je rex.R (bad) fs jbe jb add add je add mov push je push outsb imul jb outsb addr32 outsl rex.WB je addr32 lahf add jb outsb je add add push gs imul jae gs push pushq add rex.WXB gs outsb movslq push imul rex.RB outsb je jb outsl movslq fs gs outsl jbe rex.W gs imul gs (bad) imul je jo gs pushq movslq add gs imul add add rex.WB imul push imul jge rex.WXB gs gs jb outsl jb je push pushq add add add add push gs gs jae push jo outsb rex.WR movslq or rex.WXB movslq imul rex.WR movslq (bad) imul movslq outsb add rex.XB (bad) je push jns je insl push pushq add out add push outsb insl (bad) jo outsl movslq fs (bad) addr32 add add rex.WRB jo outsl movslq fs (bad) addr32 add pop ja jne jb push jns je insl rex.WB outsw jb (bad) je outsl outsb add lret add movslq add jb ja add je jb movslq jae insl (bad) imul jns rex.WB rex.RXB gs jne jb outsb je jb movslq jae pop add gs imul jns imul js rex.WB je jb outsl movslq fs outsl jo outsb je jns imul js outsb je jb outsl movslq rex.WB jae jb rex.W gs imul js outsb je jb outsl movslq rex.WB jae jb push (bad) imul add rex.WB imul rex.WRX (bad) gs outsl imul fs js gs gs rex.WRX (bad) gs outsl imul fs outsl push je jb push imul add rex.WB imul push imul rex.WRXB jns (bad) insl gs je imul insl push imul insb insb (bad) movslq add add pushq add rex.WRXB outsb rex.WRXB pushq movslq push outsl imul add push gs outsb movslq (bad) pushq movslq push outsl imul add push jne jb rex.WB outsw jb (bad) je outsl outsb push jb movslq jae test outsl outsl imul jb movslq jae jns jb movslq jae add mov gs jb (bad) je push jb movslq jae outsl je data16 outsl jne imul outsl rex.X insb fs gs movslq outsl rex.XB outsb je outsl insb push gs gs add add push outsb insb outsl movslq (bad) addr32 fiadd rex.WRB push jb (bad) rex.B rex.WR movslq (bad) addr32 add rex.XB outsb movslq rex.WB add rex.WXB gs jne jb push imul gs outsb je add pop ja jne jb push jns (bad) outsl insb imul (bad) pushq movslq add outsb push jns (bad) outsl insb imul (bad) pushq movslq adc je rex.RB (bad) insb push outsb imul jb outsb addr32 add movslq add add push movslq outsb rex.WRXB pushq movslq jo add add add outsl jae jb insb cs add mov jmpq jmpq incb callq jmpq jmpq jmpq jmpq add adc neg rcl test lea mov cmp cmc clc bt mov cmc cmc test jmpq cmove jmpq pop retq iret repz movsb rex.W rex.B mov std xchg pop in incl addr32 pop (bad) imulb cmc cmp rex.WXB adc cmpsb frstor lret (bad) push push or out cmp sub xorl gs data16 std flds callq pushq enterq imul add rex.X and pop pop rex.WRXB sbb rex.W xor (bad) sbb (bad) push loope outsl movsb jl rex.WB retq scas iret jp (bad) rex.WXB and (bad) jne repnz (bad) mov xlat (bad) (bad) fwait push addr32 cmc mov rex mov shl or (bad) xor add (bad) je sahf (bad) je jae adc outsl cwtl pushq jns movabs (bad) push sbb xor cltd addl fisubl mov rorb popfq mov mov push movsbw bswap xchg push sete movabs movzbw push movzbw setp push seta push xchg push movsbl repz lea cmc rcl rcr pushq bsr shld movabs clc mov inc shr btr push sar mov test or bswap inc cmc sub btc jmpq dec cmc movabs and bsf sar add xadd sar mov stc not add sub rol jmpq movzbw push setne repz setge setg lea lea pushq lea xchg bswap movabs lea mov jmpq not push lea push movsbl bswap movzbl seta push lea not movzbl push movzbw jo xchg setg push not movsbl xchg mov push xchg not jmpq mov not push not not mov jmpq movsbw push bswap movzbq jmpq lea movzbw movsbw push movzbl push not push not not not not push mov jmpq mov cmc jmpq mov movzbw mov jmpq dec jmpq jmpq neg jmpq mov setne ror mov sar bswap shld mov jmpq jmpq jmpq mov jmpq jmpq push jmpq jmpq jmpq lea repz mov movzbw jmpq dec clc clc stc stc ror clc test test stc not jmpq pop jmpq push jmpq mov jmpq jmpq dec jmpq push jmpq jmpq jmpq push jmpq popq jmpq sar test sar mov cmc jns clc cmp sub stc bt cmc add jmpq jmpq bt rcr bsf mov xor or test add not jmpq jmpq push jmpq mov jmpq clc cmc movzbl mov sub js bswap not dec dec movsbw ror sar inc bt rol not adc sub sub dec jmpq rep sar or neg pop shld add pop clc popfq jmpq jmpq not push lea setp jmpq push movzbw bswap push lea mov bswap setp push jmpq not add mov jmpq dec jmpq push mov bswap not mov jmpq jmpq jmpq inc cmc clc jno neg jnp inc cmc bt add jmpq mov jmpq bts btc mov rol bswap bts not movzbl sub neg mov sar not stc mov inc xor or sub movzbq je and jmpq jmpq push jmpq jmpq jmpq jmpq push mov movzbq bswap jmpq mov jmpq jo mov jmpq popq jmpq dec jmpq dec cmp bt cmp mov cmc clc jmpq jmpq neg clc cmp cmc cmc add jmpq sub jmpq push jmpq repz bswap pushq seta movabs movsbw lea mov jmpq bt add jmpq bswap push movsbw lea movsbw not push not mov push lea mov push not jmpq jmpq pushfq jmpq jmpq jmpq jmpq not jmpq push jmpq push jmpq push lea not cld mov cld std cld jmpq lea setae pushq setae xchg setns bswap movabs not lea jmpq jmpq mov jmpq popq jmpq lea jmpq cmc add jmpq pushfq jmpq jmpq jmpq jmpq sbb mov stc cmc clc cmp sub jmpq jmpq movzbw pushq lea movabs mov jmpq lea xchg push lea push movzbw xchg push movsbw movzbq not setl push not movzbl push setbe setl bswap jmpq dec jmpq popq jmpq jmpq movzbl dec mov sbb dec shr lea mov stc mov clc bt sub jmpq jmpq popq jmpq movsbw mov shr shl dec lea jmpq sub jmpq bt jmpq jmpq jmpq dec jmpq jmpq neg dec lea mov shl shl mov cmp cmc sub stc jmpq push jmpq mov mov lea mov push movzbw mov jmpq pushfq jmpq movsbl movsbw push not movsbw jmpq add jmpq jmpq push mov bswap push lea jmpq cwtl test cmc cltq cmc cmp sub jmpq setle mov jmpq jmpq lea push mov bswap push mov xchg push lea jmpq jmpq jmpq bts mov ror mov test sub cmp shl jmpq pushfq jmpq jmpq mov movabs not mov jmpq mov jmpq seto pushq movsbw lea movabs xchg not movzbl mov mov push movsbl movsbw jmpq test bt stc cwtl jmpq jmpq clc not cmc cmp bt clc and jmpq pushfq jmpq jmpq jmpq jmpq mov jmpq jmpq push jmpq jmpq jmpq push jmpq jmpq popq jmpq clc sub inc xor not rcl ror rcl rol btr add xor data16 repnz bts movzbq bswap mov jmpq jmpq mov movzbl mov jmpq mov jmpq inc jmpq jmpq jmpq jmpq pushq xchg movabs movabs movsbw mov movzbl push not bswap movzbq mov jmpq jmpq rcl shrd setle mov test mov cmp stc clc add jmpq jmpq inc jmpq xor jmpq jmpq clc jmpq mov jmpq and movsbw or movabs mov cmp bswap clc stc test stc add test clc stc bt xor jmpq not setl jmpq mov jmpq mov jmpq mov push not xchg push lea movzbw push mov bswap push lea bswap not movzbl push mov push lea lea xchg xchg push movsbl setg movsbw push movsbw repz bswap jmpq stc add jmpq jmpq jmpq not push jmpq movsbw push setl movsbl push bswap push not push jmpq jmpq jmpq push jmpq mov mov jmpq bswap push movsbw mov jmpq mov jmpq sub clc and bt mov adc movzbl ror lea setl shl adc movabs sub inc add test lea movzbw movzbq mov rol bswap movsbl ror add shl clc cmp test mov bsf test shrd sub sub add sub add bsr xor movsbw stc cmc rol stc movzbq clc seta sub rcr cmp movzbq bt inc mov cmc neg clc stc add jmpq jmpq neg test sub jbe bt clc cmp sub stc jmpq push jmpq xadd mov bsr xor (bad) imulb (bad) mov cmc not jmpq push movzbl push setle bswap jmpq pushfq jmpq jmpq push jmpq jmpq push sets lea movsbq push setns lea jmpq jmpq popq jmpq push bswap movsbw push movzbq mov movzbw xchg push mov movsbw not push jmpq jmpq pushfq jmpq jmpq lea shr movzbl bts stc not neg sub neg shrd sar or neg sbb cmc not and mov jmpq pushfq jmpq jmpq movsbw bswap jmpq popq jmpq push jmpq stc bt bt cltq jmpq pushfq jmpq sar rcl shl dec mov cmc test cmc bt add jmpq jmpq jmpq ja dec bswap btc shr mov bsf sar xchg sub lea not ror sub setbe btr cmc lea rcr shr sar and btc shld btc sub movsbw lea movzbw lea mov bswap not mov bswap pushfq not mov bswap push mov std mov bswap movsbw std std lea std std jmpq jmpq push not setns movsbw push movzbw movsbw movsbq push xchg movzbw push xchg setb jmpq cmp cmp add jmpq push bswap push bswap not lea push mov not bswap push movsbw not jmpq jmpq mov jmpq push jmpq popq jmpq jmpq test add jmpq push jmpq jmpq lea movsbw not pushq not bswap movzbq jmpq jmpq jmpq lea lea lea push xchg push jbe not push movsbl setnp movabs push mov setb repz add pushq test not movabs cmp adc sub mov sbb add shld push btr rcr mov test bswap lea clc not sbb sub (bad) cmc (bad) or shrd movsbw not jl mov xor sub add and rol sar setl stc mov rcl lea bswap jmpq jmpq stc cmc cwtl clc test cmp stc sub stc bt cmc add jb mov jmpq jmpq jmpq bswap push bswap push movzbw movzbl jmpq push movzbw push movzbl movzbw push jmpq push jmpq lea push xchg xchg jmpq mov movsbw push bswap movsbl not mov jmpq pushfq jmpq clc add jnp mov jmpq push not push not movsbw bswap push bswap movzbw jmpq jmpq jmpq movzbw movabs movzbw jmpq dec jmpq jmpq xchg test mov jmpq push not not push movsbw bswap push jmpq bt add jmpq jmpq xor bt bt stc cwtl clc jmpq jmpq dec jmpq popq jmpq bt add stc test test cbtw jmpq mov jmpq lea jle movzbw push movabs mov push jmpq jmpq jmpq jmpq lea mov lea movsbw bswap movsbw push movsbw lea jmpq xchg shrd mov shl push lea movsbw rol mov sub lea bswap ror sub bsr movsbl not ror cmp movsbw mov bsf sub movzbw inc shr and inc shr ror mov neg bts btr lea movsbw shld movabs data16 repnz jmpq push bswap bswap setbe jmpq test add jmpq jmpq stc mov add or mov jmpq push jmpq jmpq jmpq cmp neg stc jmpq rcr pushq btr shr clc movabs xadd bts stc mov sets rcr bt bts push shl mov sbb and bswap bts btc sub rcl mov bts clc not setnp mov sar xor rcr sub mov data16 mull iret or and shld adc btc mov cmc lea movzbq not movabs jmpq bt cmp jmpq popq jmpq push movzbl repz lea pushq bswap not xchg xchg movabs mov lea xchg movzbl mov movzbw movzbl jmpq movsbw lea seto push mov xchg setg push movzbw movsbw push setb xchg setl setae push movsbw movsbl push movsbq lea jmpq bt jmpq push jmpq cmc movsbw bswap movzbq mov clc stc cmp cmp sub jp mov jmpq dec jmpq movzbq push mov xchg push jmpq jmpq xor movzbl jmpq mov jmpq jmpq popq jmpq movabs bswap bswap mov mov jmpq bt movzbl stc cmc cmc add jmpq jmpq sbb (bad) jmpq (bad) (bad) callq repnz (bad) (bad) (bad) (bad) dec movabs std (bad) (bad) (bad) (bad) jmpq (bad) (bad) inc fdivr (bad) (bad) (bad) (bad) (bad) (bad) pushfq (bad) (bad) (bad) (bad) (bad) (bad) mov (bad) (bad) decl cld cld (bad) (bad) (bad) (bad) (bad) (bad) pushfq (bad) (bad) (bad) (bad) (bad) (bad) fchs cld (bad) (bad) (bad) (bad) lcall (bad) (bad) (bad) fsubr (bad) (bad) (bad) (bad) (bad) jmpq (bad) (bad) lcall (bad) (bad) (bad) cmp cld (bad) (bad) (bad) (bad) lcall (bad) (bad) (bad) (bad) pushfq (bad) (bad) (bad) (bad) (bad) inc fdivr (bad) (bad) (bad) (bad) (bad) (bad) cld (bad) (bad) (bad) (bad) inc fdivr (bad) (bad) (bad) (bad) lcall (bad) cld (bad) (bad) (bad) (bad) (bad) mov (bad) (bad) callq (bad) (bad) (bad) clc in cld (bad) (bad) (bad) (bad) lcall idiv (bad) (bad) (bad) (bad) ljmp (bad) (bad) fiadd (bad) lcall (bad) cld (bad) (bad) (bad) (bad) lcall idiv (bad) (bad) (bad) (bad) dec movabs cld (bad) (bad) (bad) (bad) decl (bad) (bad) ljmp (bad) (bad) (bad) (bad) (bad) (bad) (bad) idiv (bad) (bad) (bad) (bad) lcall pop (bad) (bad) (bad) (bad) (bad) callq (bad) (bad) incl (bad) (bad) (bad) (bad) (bad) (bad) fchs cld (bad) (bad) (bad) (bad) lcall (bad) (bad) inc fdivr (bad) (bad) (bad) (bad) (bad) (bad) pushfq (bad) (bad) (bad) (bad) (bad) jmpq cld (bad) (bad) (bad) (bad) callq mov (bad) (bad) (bad) (bad) lcall pop (bad) (bad) (bad) (bad) (bad) (bad) (bad) pushfq (bad) (bad) (bad) (bad) (bad) (bad) jmp cld (bad) (bad) (bad) (bad) ljmp (bad) (bad) jmpq (bad) (bad) (bad) (bad) pushfq (bad) (bad) (bad) (bad) (bad) lcall cld (bad) (bad) (bad) (bad) incl (bad) (bad) callq (bad) cld (bad) (bad) (bad) (bad) (bad) (bad) cld (bad) (bad) (bad) (bad) (bad) jmp cld (bad) (bad) (bad) (bad) incl std (bad) (bad) (bad) (bad) (bad) (bad) pushfq (bad) (bad) (bad) (bad) (bad) callq cld (bad) (bad) (bad) (bad) (bad) clc in cld (bad) (bad) (bad) (bad) (bad) cmp (bad) ljmp (bad) (bad) (bad) (bad) (bad) ljmp jl (bad) (bad) (bad) (bad) callq (bad) (bad) (bad) (bad) (bad) (bad) clc mov (bad) (bad) (bad) (bad) (bad) jmp cld (bad) (bad) (bad) (bad) callq cld (bad) (bad) (bad) (bad) callq cld (bad) (bad) (bad) (bad) decl cld cld (bad) (bad) (bad) (bad) (bad) cmp cld (bad) (bad) (bad) (bad) pushq (bad) (bad) (bad) (bad) (bad) (bad) clc mov (bad) (bad) (bad) (bad) (bad) fsubr (bad) (bad) (bad) (bad) (bad) lcall cld (bad) (bad) (bad) (bad) lcall (bad) cld (bad) (bad) (bad) (bad) incl cld (bad) (bad) (bad) (bad) pushq cmc cld (bad) (bad) (bad) (bad) ljmp idiv (bad) (bad) (bad) (bad) (bad) clc mov (bad) (bad) (bad) (bad) (bad) fdivr cld (bad) (bad) (bad) (bad) (bad) jmp cld (bad) (bad) (bad) (bad) jmpq (bad) (bad) jmpq cld (bad) (bad) (bad) (bad) push cmc std (bad) (bad) (bad) (bad) pushq (bad) (bad) (bad) (bad) (bad) lcall idiv (bad) (bad) (bad) (bad) (bad) fiadd (bad) lcall (bad) cld (bad) (bad) (bad) (bad) lcall (bad) (bad) callq (bad) (bad) incl (bad) (bad) push cmc std (bad) (bad) (bad) (bad) pushq (bad) (bad) (bad) (bad) (bad) lcall (bad) cld (bad) (bad) (bad) (bad) callq (bad) (bad) decl (bad) (bad) (bad) cmp (bad) callq (bad) (bad) (bad) mov (bad) (bad) callq repnz (bad) (bad) (bad) (bad) callq mov (bad) (bad) (bad) (bad) incl (bad) (bad) callq mov (bad) (bad) (bad) (bad) ljmp (bad) ljmp (bad) (bad) (bad) (bad) (bad) callq mov (bad) (bad) (bad) (bad) jmpq cld (bad) (bad) (bad) (bad) pushq loopne (bad) (bad) (bad) (bad) pushq cmc cld (bad) (bad) (bad) (bad) incl std (bad) (bad) (bad) (bad) ljmp jl (bad) (bad) (bad) (bad) callq mov (bad) (bad) (bad) (bad) incl (bad) (bad) jmpq (bad) (bad) incl (bad) (bad) callq repnz (bad) (bad) (bad) (bad) lcall (bad) cld (bad) (bad) (bad) (bad) jmpq (bad) (bad) (bad) clc in cld (bad) (bad) (bad) (bad) (bad) fdivr cld (bad) (bad) (bad) (bad) jmpq (bad) (bad) (bad) fsubr (bad) (bad) (bad) (bad) (bad) lcall pop (bad) (bad) (bad) (bad) (bad) callq mov (bad) (bad) (bad) (bad) jmpq (bad) cld (bad) (bad) (bad) (bad) incl cld (bad) (bad) (bad) (bad) callq (bad) cld (bad) (bad) (bad) (bad) (bad) mov (bad) (bad) jmpq cld (bad) (bad) (bad) (bad) (bad) jmp cld (bad) (bad) (bad) (bad) ljmp jl (bad) (bad) (bad) (bad) (bad) fsubr (bad) (bad) (bad) (bad) (bad) lcall cld (bad) (bad) (bad) (bad) pushq loopne (bad) (bad) (bad) (bad) incl (bad) pushq (bad) (bad) jmpq (bad) (bad) ljmp idiv (bad) (bad) (bad) (bad) jmpq (bad) (bad) pushq (bad) (bad) (bad) fdivr cld (bad) (bad) (bad) (bad) (bad) cmp cld (bad) (bad) (bad) (bad) (bad) (bad) cld (bad) (bad) (bad) (bad) jmpq (bad) cld (bad) (bad) (bad) (bad) inc idiv (bad) (bad) (bad) (bad) ljmp idiv (bad) (bad) (bad) (bad) pushq cmc cld (bad) (bad) (bad) (bad) callq (bad) (bad) (bad) cmp cld (bad) (bad) (bad) (bad) push cld cld (bad) (bad) (bad) (bad) decl (bad) (bad) jmpq cld (bad) (bad) (bad) (bad) lcall (bad) (bad) (bad) (bad) (bad) (bad) pushq (bad) (bad) (bad) (bad) (bad) push cld cld (bad) (bad) (bad) (bad) callq cld (bad) (bad) (bad) (bad) incl (bad) (bad) (bad) (bad) (bad) callq repnz (bad) (bad) (bad) (bad) lcall cld (bad) (bad) (bad) (bad) pushq (bad) (bad) decl cld cld (bad) (bad) (bad) (bad) incl cld (bad) (bad) (bad) (bad) pushq (bad) (bad) (bad) (bad) (bad) jmpq (bad) (bad) jmpq (bad) (bad) callq (bad) cld (bad) (bad) (bad) (bad) lcall pop (bad) (bad) (bad) (bad) (bad) lcall (bad) (bad) incl std (bad) (bad) (bad) (bad) lcall cld (bad) (bad) (bad) (bad) dec movabs cld (bad) (bad) (bad) (bad) ljmp (bad) (bad) ljmp jl (bad) (bad) (bad) (bad) push cld cld (bad) (bad) (bad) (bad) dec movabs cld (bad) (bad) (bad) (bad) incl (bad) (bad) (bad) (bad) (bad) callq (bad) (bad) pushq (bad) (bad) (bad) (bad) (bad) push pushfq (bad) (bad) (bad) (bad) (bad) decl cld cld (bad) (bad) (bad) (bad) (bad) cmp (bad) (bad) fdivr cld (bad) (bad) (bad) (bad) lcall cld (bad) (bad) (bad) (bad) callq mov (bad) (bad) (bad) (bad) jmpq (bad) (bad) lcall cld (bad) (bad) (bad) (bad) pushq (bad) (bad) (bad) (bad) (bad) pushq (bad) (bad) (bad) (bad) (bad) inc fdivr (bad) (bad) (bad) (bad) pushq (bad) (bad) (bad) clc in cld (bad) (bad) (bad) (bad) pushq cmc cld (bad) (bad) (bad) (bad) pushq loopne (bad) (bad) (bad) (bad) pushq cmc cld (bad) (bad) (bad) (bad) (bad) fiadd (bad) decl (bad) (bad) pushq (bad) (bad) callq (bad) (bad) (bad) (bad) (bad) ljmp (bad) callq (bad) (bad) push cmc std (bad) (bad) (bad) (bad) (bad) cmp (bad) decl cld cld (bad) (bad) (bad) (bad) dec movabs cld (bad) (bad) (bad) (bad) inc idiv (bad) (bad) (bad) (bad) callq cld (bad) (bad) (bad) (bad) jmpq cld (bad) (bad) (bad) (bad) pushq cmc cld (bad) (bad) (bad) (bad) incl (bad) (bad) (bad) (bad) (bad) jmpq cld (bad) (bad) (bad) (bad) (bad) fchs cld (bad) (bad) (bad) (bad) incl (bad) (bad) (bad) (bad) idiv (bad) (bad) (bad) (bad) ljmp idiv (bad) (bad) (bad) (bad) ljmp (bad) ljmp jl (bad) (bad) (bad) (bad) ljmp (bad) (bad) (bad) (bad) (bad) lcall (bad) (bad) incl (bad) (bad) (bad) clc in cld (bad) (bad) (bad) (bad) lcall cld (bad) (bad) (bad) (bad) (bad) clc in cld (bad) (bad) (bad) (bad) decl cld cld (bad) (bad) (bad) (bad) lcall idiv (bad) (bad) (bad) (bad) incl (bad) (bad) fiadd (bad) lcall cld (bad) (bad) (bad) (bad) push cld cld (bad) (bad) (bad) (bad) lcall (bad) cld (bad) (bad) (bad) (bad) lcall idiv (bad) (bad) (bad) (bad) ljmp idiv (bad) (bad) (bad) (bad) callq (bad) cld (bad) (bad) (bad) (bad) inc idiv (bad) (bad) (bad) (bad) lcall (bad) (bad) ljmp jl (bad) (bad) (bad) (bad) callq mov (bad) (bad) (bad) (bad) callq (bad) (bad) (bad) fdivr cld (bad) (bad) (bad) (bad) (bad) fdivr cld (bad) (bad) (bad) (bad) inc idiv (bad) (bad) (bad) (bad) incl cld (bad) (bad) (bad) (bad) callq cld (bad) (bad) (bad) (bad) inc idiv (bad) (bad) (bad) (bad) inc idiv (bad) (bad) (bad) (bad) jmpq cld (bad) (bad) (bad) (bad) pushq (bad) (bad) (bad) (bad) (bad) (bad) jmp cld (bad) (bad) (bad) (bad) incl std (bad) (bad) (bad) (bad) lcall cld (bad) (bad) (bad) (bad) callq (bad) (bad) (bad) (bad) (bad) incl std (bad) (bad) (bad) (bad) callq cld (bad) (bad) (bad) (bad) ljmp (bad) decl (bad) jmpq popq jmpq pushfq jmpq push jmpq bswap jmpq push not lea jmpq mov jmpq mov jmpq jmpq jmpq push not bswap push lea jmpq jmpq jmpq bt neg bt clc cmc stc rol jmpq mov jb pushfq jmpq push jmpq mov jmpq jmpq (bad) icebp add roll mov jmpq stc test xor cmc test sub jmpq push jmpq push jmpq mov dec mov stc stc jmpq jnp movsbl push not xchg xchg not push movzbw not setg not push jmpq not push sete jmpq bsr bsf mov jmpq jmpq mov movsbw bswap push jmpq dec jmpq jmpq push jmpq popq jmpq mov je push movsbw movsbw push setl bswap repz lea movzbq xchg xchg pushq xchg lea movzbw not movabs not mov jmpq mov jmpq jmpq jmpq add shld jmpq cmp cwtl clc test cmp lea test stc jmpq dec jmpq clc test clc add stc stc clc cbtw bt clc cwtl clc stc cltq stc bt bt sub jmpq jmpq dec jmpq pushfq jmpq jmpq jmpq push jmpq mov jmpq bswap push lea push setp lea seto push lea mov setne push not mov push seta mov lea xchg repz movzbw movzbw movsbw pushq movzbq lea setns movsbw movabs jmpq pushfq jmpq bswap mov movsbw lea mov jmpq setbe push lea mov bswap push lea setbe setns repz lea pushq not movsbw xchg setns movabs jmpq jmpq movzbw pushq movzbl movsbw movabs movzbw movzbl mov bswap lea not push movzbw movsbl mov jmpq pushfq jmpq push xchg push bswap jmpq popq jmpq jmpq xor bt cmp clc not cmc clc cmc xor cmc clc ror clc jmpq jmpq rol and or rol mov ror lea sar cmc rcl movabs rcr btr ror add bswap sar bswap shld mov sub xchg ror bsf add bsf and mov adc sub lea xor clc mov sub rol test xor rol ror bts rol rol sar add add sub bsf movzbq setle sub neg sbb mov clc stc cmc bt neg bt bt clc stc add jmpq not movsbw bswap push jmpq movsbl push jmpq lea jmpq popq jmpq mov jmpq jmpq pushfq jmpq popq jmpq jmpq sub shrd xadd add mov mov mov cmc bt add jmpq mov jmpq push movsbl lea push mov jmpq lea push setno push mov movzbq xchg push lea lea jmpq lahf mov stc cmc xchg jp stc bt xor jmpq jmpq jmpq xor stc stc clc cwtl cmc stc cmc stc cltq stc sub jg mov jmpq jmpq jmpq stc add jmpq mov jmpq jmpq jmpq rcl mov test mov shr seto cmc mov stc cmp clc stc add jl clc cmc clc shrd jmpq mov jmpq jmpq pushfq jmpq mov jmpq push jmpq movzbw movzbw pop bswap xchg pop mov pop jmpq push jmpq push movzbq jmpq mov pushq movzbl mov jmpq not push not lea movzbw movzbw push not movsbw movzbw not push not mov push movabs mov push sete repz lea pushq movsbl xchg bswap bswap movabs lea lea movzbw jmpq jmpq jmpq jmpq push jmpq push jmpq jge mov jmpq test or neg mov bt cmc add jmpq cbtw clc cmp cwtl jmpq push jmpq lea jmpq push jmpq bt shrd je mov jnp pushfq jge popq jmpq push movsbw lea push jns bswap bswap push movzbw lea movzbq push jmpq jmpq sub jmpq jmpq mov jmpq bt sub jnp test cmp shr jmpq jmpq jmpq add rcr or mov rcr add inc mov sar sub bts sub or bsr lea bsf xor movsbw movzbl rol btc movzbw shld shr sub mov add shl movzbq bsr bsr mov stc neg clc clc add jmpq mov jmpq sete push mov xchg jmpq mov jmpq jmpq push movzbw mov bswap push movzbw push movsbw push not movzbw mov lea push lea push xchg bswap movzbw push xchg mov movzbw movzbl push jmpq push movsbq lea not push jmpq sub jmpq xchg push not push bswap bswap not xchg repz not pushq setne mov xchg jo movabs movzbq mov mov movzbl push mov jmpq je push jmpq not mov not mov push mov not not bswap mov jmpq jne cwtl bt test stc cltq cmc cmp test sub jge mov jmpq mov jmpq inc jmpq xchg bswap setg push movzbw movsbw mov setae push lea movzbw setb mov push movzbq movzbw jmpq movabs lea xchg bswap mov jmpq mov jmpq mov jmpq mov jmpq test jp xchg clc xor jmpq push jmpq mov jmpq rol cmc clc xor cmp bt bt sub stc mov cmp stc sub jmpq jmpq push not bswap movsbw movzbl push mov lea movsbl lea push jo movzbw push mov mov movzbw movsbw push movsbw push movsbw xchg not movzbl push not mov movabs push movsbw movzbq lea push mov movzbw push bswap push xchg mov jmpq push mov movsbw bswap movzbw mov jmpq cmp bt xor jmpq jmpq cmp xchg rol or mov dec mov clc sub cmc shr jmpq jmpq movsbw movzbq setl movsbw push bswap movzbq setns push movzbq movzbw xchg push setb movsbw push movzbw movzbw jmpq push movzbw jmpq movzbw push bswap push movzbw mov xchg xchg repz btr shl stc pushq rcr rol sub movabs btc sar stc movzbw mov sub or push bts mov bswap xadd bswap bsf bsf movzbq shr sub dec or not shld mov bt add adc rcr sub lea bsr or sete and dec btr bsr test mov mov jmpq push lea xchg jmpq mov jmpq push jmpq shld btr not test cmc sar xor stc rol stc ror ror mov sar btr xor sbb bt not xor mov clc cmc bt add jmpq movabs movzbw xchg lea xchg mov lea lea bswap push not movzbw lea lea mov jmpq popq jmpq jmpq jmpq popq jmpq jmpq mov jmpq push jmpq mov jge mov jmpq cmp sub bt clc cmc add jmpq shrd jmpq jmpq mov jmpq clc sub jmpq push bswap movsbw movzbl movsbl mov jmpq mov push lea mov jmpq jmpq xchg push sete setbe mov not push jmpq jmpq jmpq mov jmpq jmpq push jmpq cmc bt xor test jmpq mov jmpq pushfq jmpq add jmpq popq jmpq push not lea push movzbl mov push movsbl not movabs setge push bswap push seto mov mov lea push mov jmpq neg je inc cmp stc jmpq lea push movzbq movsbw push not push bswap jmpq bswap jmpq push lea mov bswap movzbl push not movsbl jmpq mov jmpq jmpq rol and add btr mov neg add shld mov btr and btc (bad) repnz sub or sub xor btc xor not setp cmc rol movzbq stc sub bts bt shrd movzbq clc btc xor and mov jmpq pushq lea movzbw not not movabs lea movzbw xchg mov jmpq mov jmpq movzbw lea lea pop not lea lea pop movzbl pop bswap movzbw xchg jmpq inc cmp cmp cmp clc neg clc stc cmc sub jmpq jmpq lea mov jmpq not push movsbl mov lea movzbw push bswap push movsbw movsbl mov jmpq stc lea clc stc jmpq jmpq mov jmpq clc cmc cmc cwtl test stc cltq cmp sub jmpq callq jmpq test stc clc cmp cltq bt sub jmpq push mov ja push jmpq push jmpq lea mov movsbl push bswap bswap push setae mov not sete push jmpq movzbw xchg mov lea bswap lea lea push movsbl mov jmpq mov jmpq rol jmpq push jmpq push jmpq push setle push movsbl repz movsbw bswap setl lea pushq lea movzbw movabs jmpq mov push setg movsbq mov xchg push mov lea setnp movsbw push bswap movzbw jmpq cmp test bt not cmp cmc test sub clc cmc test stc and jmpq jmpq jmpq cmc cmc bt rol jmpq dec bt neg bt bt cmc rol cmc jmpq stc test stc sub jmpq jmpq callq or xor movzbw lea mov mov jmpq bt cmp jmpq jmpq je test cmp test mov cmp cmpb jmpq jmpq callq neg stc mov or cmp mov jmpq jmpq jmpq stc stc test jmpq jmpq jmpq jmpq lea jmpq callq cmp cmc jmpq jmpq jb rcr setbe movsbw lea cmp cmc jmpq jmpq jmpq je clc test cmp jmpq cmp cmc mov sar mov test mov data16 lock mov clc cmp cmc xchg bt jmpq shrd mov test jmpq jmpq je clc cmp jmpq callq movzbq mov jmpq jmpq jmpq jne rol xor shr mov cmc cmc jmpq mov inc sbb shrd mov and cmp lea neg bswap add bswap lea bswap lea mov jmpq callq shld shr shr shld mov bt jmpq callq jmpq jmpq jmpq callq clc cmp jmpq mov jmpq jne setns inc movzbw shr mov clc clc bt test test jmpq lea stc mov clc add test cmp cmc add seto seta bswap mov mov jmpq mov jmpq callq mov setge mov jmpq callq rcl lea mov cmc bt jmpq cmc test jmpq cmc clc stc bt testb jmpq je shld sub seta movzbw mov jmpq jb dec sbb mov add and mov movzbw cmp mov sar sub test mov adc (bad) testl movsbq sar lea or add xor add sub shld mov xchg mov shl add shld movzbw mov and sar mov cmc bt cmp add jmpq movzbw bswap not mov jmpq je rcl cmp inc mov bt bt jmpq callq movsbl mov lea xadd mov btr not shr bsf mov dec mov rol mov btr shld mov jmpq mov bswap xchg xchg xchg mov xchg jmpq jmpq movsbw mov rcl mov rcl test mov cmc clc stc test jmpq jmpq inc jmpq jmpq callq jmpq add je jmpq je clc cmp cmp jmpq lea mov jmpq je jmpq callq mov movl sets ja mov jo mov setl mov movzbw setg mov jmpq callq cmc shrd test mov mov shrd rcl mov cmc stc xor jmpq jmpq jmpq movl jmpq test jmpq jmpq and bt test cmp jmpq bt test jmpq je jmpq je movsbl lea or jmpq cmc bt test jmpq cmp clc cmp jno jb shl lea cmc clc cmc sub jmpq jmpq mov jmpq movzbq lea jmpq jmpq nop jmpq jmpq mov setp mov jmpq jbe mov jmpq jmpq callq bt stc cmc cmp jmpq callq stc sub lea mov jmpq cmp jmpq je sub movzbw mov cmp stc neg neg mov data16 repnz not mov btc mov test add neg mov cmc bt add dec (bad) icebp bsr cmc mov bt cmc cmc add cmc cmp jmpq bswap mov jmpq je test cmp bt clc cmp jmpq jmpq jmpq mov jmpq cmc stc test jmpq jmpq jmpq je movzbw mov bt test test jmpq jmpq setne mov jmpq mov movsbq movsbw mov not mov movsbw movzbw movzbl lea lea jmpq je jmpq je or mov stc bt bt test jmpq cmc test jmpq je cmp cmc cmp jmpq jns callq cmc movzbw mov cmc bt test jmpq cmp cmc sub jmpq cmc test add setg bswap mov jmpq jb not mov lea dec movzbw data16 cmc or retq cmp neg mov test or inc adc mov bts bsr not neg add xadd shld rcl xor dec inc cmp mov mov stc repnz inc bswap dec not dec dec sbb shld or rcr mov cmp clc jmpq xchg not mov movsbl mov jmpq callq clc jmpq callq jmpq jmpq je not bswap bswap lea mov jmpq je clc stc cmp jmpq mov jmpq jmpq jne rcr bswap xor add inc neg or clc adc mov clc jmpq jmpq jmpq je jp bt bt stc cmp jl je or sbb bswap movsbl sub not bswap not lea mov jmpq jmpq mov jmpq jmpq rol seto xor movsbl movzbw mov jmpq jmpq cmp test jmpq jmpq je add mov clc test jnp je cmp stc add cmc cmc add cmp cmc jmpq lea not setb movsbw lea mov movsbq mov lea jmpq je cmc cmp js je movzbw not bswap mov jmpq callq add (bad) icebp add (bad) clc cmc cmp cmp jp jne sete mov sete mov xchg lea bswap mov jmpq jne bt cmp jmpq je btr xor not mov jmpq mov jmpq je test bt bt cmp add stc cmp add stc cmp add cmp clc cmp jmpq callq btr test shr mov clc stc bt test jmpq je adc stc rcl adc mov ror shrd mov btc bts mov clc add jmpq jmpq jg callq mov rcl sub lea test cmc test jmpq jmpq jmpq mov test test jmpq nop jmpq je jmpq cmc mov cmc cmp test jmpq jmpq je bt and not jmpq movzbl jmpq jmpq jmpq je clc cmc xor jmpq mov not mov jmpq mov movzbw mov jmpq jmpq jmpq jne sbb cmc jmpq add sahf (bad) cmpsl and cmc mov cmp cld rcl adc sub sbb imul retq adc mov hlt stc je and xor (bad) xor push pop cmc (bad) pop adc add add movsbw mov lea jmpq jmpq jmpq je cmc cmpl jmpq jmpq jmpq jbe sbb bts shrd adc lea cmc xor jmpq mov jmpq callq clc mov xor sar bswap cmpq jmpq jmpq mov shrd inc mov bt jmpq jb pushq jmpq movl jmpq callq bt sub add ror mov or mov jmpq callq bt jmpq mov bswap (bad) imul push (bad) add not mov jmpq jmpq jmpq jmpq jmpq nop jmpq jne shrd lea btc shl clc sar sub xchg jmpq cmp stc xor jmpq jmpq jg pushq je pushq jmpq lea setae movsbw setb lea jmpq jmpq jbe movsbl mov adc setne shld mov cmp cmp sub stc bt add cmc jns add jmpq jmpq jmpq jmpq cmc test jmpq mov bswap lea jmpq callq test jmpq jmpq je jmpq movzbw shrd neg mov cmp clc bt clc test jmpq je bts add and mov btc stc mov cmp clc bt clc cmp jmpq jmpq bt cmp jmpq jmpq stc test jmpq jmpq jmpq callq not lea movzbq lea lea jmpq bt test jmpq bt test cmc jmpq jb data16 repnz movsbq setg lea test sub jmpq je jmpq cmc test jmpq je jmpq jne shrd bt lea bt add cmp cmc xor jmpq jmpq jmpq je xor shrd rcl mov test test jmpq jmpq jmpq jmpq je jmpq mov jmpq stc cmp jmpq jmpq je shl mov rcr shl rcr bsr mov xadd mov mov setae rol ror xor movsbw bswap mov jmpq mov jmpq callq cmc stc test jmpq jmpq movzwl lea mov lea mov jmpq jmpq jmpq dec mov mov rol shld or dec inc mov cmc btc shl bts xchg rcl and xor jmpq jmpq jmpq je jmpq jmpq jmpq add bswap lea bswap mov jmpq callq jmpq mov jmpq jmpq callq cmp test test jmpq jbe adc ror inc mov adc shl movzbl movzbw mov ror movsbw add mov cmc test jmpq callq lea not movzbw setne mov setno setp xchg mov lea bswap movzbq mov not movsbw lea bswap mov jmpq ja jrcxz jge in fisubrl std lret rex.WXB cld test insl pop xchg push mov fisubr outsb rex.WR fsubrl adc lods jg,pt imulb sub xor lods retq adc or movabs mov incb stc (bad) sbb jae in faddp fadd ds loop scas test xchg mov fistl (bad) sub xor (bad) jbe jmpq mov movabs adc xchg test xchg xor cmp outsb sub rcrl (bad) jb mov scas adc or adc or add rolb sarl (bad) imul cld sub fsubrs jmpq out cld xor rex.WRX xchg data16 outsb (bad) sbb or mov jno sbb rex.X gs insb cmp movabs movabs rorl adc sub jmpq sbb add (bad) fsubl sub fisub xchg (bad) jo,pn jne clc mov jno movslq fcoml test lods je xchg (bad) (bad) pop cs (bad) rex.W (bad) (bad) jno stc mov movabs xchg mov xchg scas callq sbb push jp sbb rex.RB imul (bad) pushq jrcxz fiadd or pop sbbl rolb (bad) sahf insb rex.RX int (bad) xchg test rex.WB rex (bad) (bad) mov lret jmpq xor sti enterq jbe andb jp nop xchg leaveq jp xadd add je (bad) fcmovnbe (bad) sbb adc movabs stos (bad) lods mov or pop idiv ds ficompl or mov pop cltd (bad) jmpq je test jmpq jl callq setae lea mov bswap sete lea bswap mov movzbw not movsbw movsbq mov jne mov jmpq jmpq jmpq jne bt mov and mov stc add jmpq jmpq jmpq callq cmp bsr mov bts clc cmpq setg mov jb je jmpq jmpq jmpq jmpq jns mov mov mov jmpq callq lea setge bswap mov jmpq callq test stc stc cmp cmp jmpq jmpq cmp jmpq jmpq jmpq jmpq mov jmpq jmpq callq cmp test jmpq not mov setge seta movzbw lea mov jmpq jmpq jmpq je not cmc clc mov rcl clc xor mov adc shr bsr rcr lea bt cmc cmp jmpq test cmp jmpq callq cmc bt stc stc test jmpq je jmpq mov jmpq jmpq cmp test jmpq jmpq jns setae movsbw bswap movzbl mov jmpq callq clc stc cmp test jmpq not movzbl movzbw mov jmpq je jmpq cmp test jmpq jb cmc cmp jmpq jmpq je rcr inc mov (bad) lock xor mov js clc cmp jmpq test test stc cmp jmpq callq btr movzbl mov stc jmpq clc cmp jmpq callq test test jmpq callq sbb movzbw adc inc mov clc cmc test jmpq callq jmpq jmpq sar mov clc test bt test jmpq mov mov bswap lea lea jmpq cmc add clc test add stc xor cmp clc cmc add jmpq je xor ror neg mov test cmc test jmpq jmpq test cmp jmpq cmp jmpq jmpq jmpq jmpq je lea setg movsbw mov jmpq jmpq mov add shld movzbw mov mov cmc mov cmc clc cmc test jmpq bswap mov movzbl movzbw mov jmpq je cmp cmp clc clc cmp jmpq movsbw not inc not movzbl dec cmc jmpq je add mov sar test mov clc cmc test jmpq nop jmpq add stc add bt test cmc sub jmpq bswap jmpq mov jmpq je btc bsf btr mov mov cmp stc cmc cmp xor jmpq mov jmpq pushq jmpq jmpq jmpq callq not mov setg setb sub test sub xchg bswap mov mov not lea mov jmpq cmp jmpq jmpq mov jmpq je test bt cmpl jmpq rcr lea bt cmp bt jmpq jmpq jne jmpq jmpq movzwl jmpq callq movzbw lea jmpq jmpq jbe adc bswap movzbw mov lea ror mov adc mov test add clc clc add cmp add bt clc sub jmpq mov jmpq je movsbq bswap not mov jmpq jmpq jmpq bt add bswap lea mov jmpq xchg not mov jmpq je cmc stc cmc cmpq jmpq callq bswap not je mov bswap jmpq jmpq je jmpq jmpq je bt cmp jmpq jmpq jmpq test xchg cmp test clc test jmpq jmpq cmp jmpq jmpq je setge mov mov jmpq callq jmpq jmpq ror mov mov add and btc dec test lea dec shrd sub bsf mov jmpq je or sar movzbl bt test cmp test jmpq sub cmc add jmpq cmp cmp jmpq cmpb jmpq je adc rcr bsf mov jmpq jmpq mov jmpq je lea sete lea movzbl bswap xchg jmpq callq neg not mov jmpq jmpq seto bsr bt mov rex.W lock (bad) mov btr bswap shr mov xadd rcl cmc add inc movsbl lea inc mov test bt add jmpq callq clc clc rcl mov xadd btr bsf btr xor movsbw setp mov not bswap movsbw mov jmpq jmpq not lea xchg not lea lea jp movsbw lea lea not mov movzbw mov mov jmpq jne rcl adc xor mov bsf inc mov cmp clc rol lea adc add not not jmpq seto not mov jmpq callq bt cmc xor jmpq jmpq jmpq bsf adc dec mov test cmc add shr mov cmc test cmp cmp add (bad) hlt add xchg (bad) xor shr mov clc add cmp add shrd mov cmc clc bt cmp add jmpq callq mov not xchg mov xchg lea movzbw mov setg movzbw movsbw jmpq cmp cmc add cmp stc clc add clc cmc clc test cmp jmpq jmpq jmpq jmpq callq cmp clc test test jmpq callq sar xor mov bt test jmpq jmpq jmpq callq stc bt stc cmp jmpq jmpq stc clc add adc mov test clc cmp cmp add jmpq jmpq je dec sub movzbw mov mov jmpq stc mov setne mov cmp sub jb callq setb neg shr adc mov stc cmp cmp jmpq jmpq je setb lea xchg jmpq je clc sub jmpq lea jmpq test jmpq je jmpq jmpq jmpq mov jmpq jmpq jmpq callq clc add cmp cmp mov stc clc jmpq test bt clc test jmpq inc stc cmp add clc clc bt jmpq cmp jmpq callq sar neg shr shld lea clc test stc test jmpq jmpq jmpq je not movzbw not mov jmpq jmpq jmpq sete lea mov lea jmpq jmpq not mov jmpq bt stc stc add test clc clc cmp xor jmpq jmpq callq setns mov jmpq lea mov setle jmpq cmp jmpq callq mov movzbl movzbw mov seto lea mov jmpq jmpq jmpq callq or mov cmp test jmpq jmpq jmpq callq jmpq jmpq jmpq jmpq test jmpq cmp jbe jne bt stc xor cmc cmp clc cmp xchg cmc clc cmp test jmpq je jmpq jmpq jmpq callq jmpq jmpq je movzbl bsr movsbw or jmpq mov jmpq jmpq callq rol sar and mov cmp test test test jmpq jmpq xchg lea not bswap jmpq clc add clc add clc stc add stc cmp jmpq mov bswap movsbw bswap sets mov jmpq callq bt clc clc test jmpq bswap jmpq callq dec mov inc mov jmpq incl movzbw movsbw movsbw mov jmpq jmpq jmpq mov rcl bsf mov cmc stc add shr mov jmpq stc test cmp cmpl jmpq jmpq jmpq lea jmpq jne clc bt clc cmp jmpq jmpq jmpq xor jmpq jmpq jmpq stc mov cmc bt jmpq jmpq jmpq jmpq jmpq clc test jmpq je rcl dec and cmp mov cmp test jmpq jmpq not movzbw mov cmc clc test jmpq movl jmpq je cmc jmpq xor jmpq je sar mov sar mov xadd mov (bad) testl jmpq jmpq callq xor stc mov jmpq callq seta lea jmpq cmc add test jmpq je shrd mov movsbw sub shr ror mov neg mov stc clc test add jmpq callq bts inc rcl mov bt clc clc jmpq jmpq rol neg xor bswap not jmpq jb xor btr test sar lea test xor jmpq test cmpq jmpq je test clc bt cmpq jmpq mov mov movzbw jmpq callq test cmp jmpq jmpq callq or shrd mov test cmp jmpq jne bt cmp jmpq pushq jmpq jmpq jmpq add lret in sub lods fwait test (bad) and mov (bad) (bad) sbb js insl fstpt mov and (bad) mov mov rcr (bad) stos (bad) or pop and and add je shld mov add btc mov bsr inc lea test clc stc test cmp jmpq stc cmpb jmpq je (bad) hlt lea mov bt cmc test jmpq callq cmc bt test jmpq je bswap not mov bswap mov jmpq je cmc btr xor movsbw mov jge callq jmpq stc test jmpq jbe jmpq jmpq mov jmpq jmpq jmpq jmpq sub mov not movsbw mov jmpq add not movzbw jmpq jmpq je jmpq jmpq jmpq jns lea bswap bswap mov jmpq callq clc test jmpq callq rcr not shrd mov jmpq jmpq je shl and mov shld btc bt mov cmp cmp jmpq cmp jne jne sar mov stc test js jmpq je or cmp lea movzbw bswap xor lea xchg bswap jmpq cmc jmpq callq adc mov stc test jmpq callq jmpq movzbl jmpq jne clc test stc jmpq jmpq jmpq jmpq cmc cmpl jmpq callq sar cmc sub not movsbq mov jmpq cmc cmp jmpq je jmpq callq stc ror mov jmpq mov jmpq callq movzbq adc bsr mov jb clc stc cmc test jmpq jne lea mov mov jmpq cmp jmpq jmpq jmpq je not inc mov jmpq jmpq jmpq xchg mov mov jmpq callq cmp dec btr lea mov mov cmpq setbe movsbw movzbw mov jmpq callq not jmpq dec xor jmpq callq cmp test jmpq dec jmpq je movzbw shld mov bt sub movzbq mov lea setne mov jmpq bswap mov jmpq pushq jmpq cmc jmpq jl pushq jmpq not movzbw mov lea mov jmpq je jmpq jne clc cmp bt xor jmpq je cmp jmpq jmpq callq mov setl movsbw lea lea jmpq test jmpq je stc sub adc and movzwl setge data16 lock lea movzbl bt shl clc shr cmp or ja mov jmpq cmp jmpq je bts bt not mov stc test jmpq jmpq jne test clc cmc bt xor jo callq sar rex.B hlt mov bt test jmpq jmpq jmpq cmp add bt jmpq jne setle mov bts mov xor bt bsr mov bts clc rcl add movzbl movsbw lea mov rcr ror movzbw mov test cmc add cmc cmp add setnp jmpq jne movzbl not mov jmpq jmpq pushq jmpq jmpq mov jmpq jmpq jmpq callq jmpq mov test stc stc cmpw jmpq jmpq callq movsbw mov xor mov cmc test cmp bt cmp jmpq jno callq bt neg mov shl mov add cmp xor mov stc btr test and mov ror adc btc bswap mov shld mov jmpq jmpq jmpq callq jmpq jmpq jmpq stc cmp sub jmpq je jmpq mov jmpq je movzbw rcr movsbw xor setle movzbw bswap movsbw mov jmpq jmpq callq stc stc cmp jmpq je bt lea lea sar sub movzbw mov lea movsbw mov mov jmpq jmpq je neg clc btc xchg mov rcl rcl clc btc mov jmpq xor movsbl mov jmpq jmpq je cmp shld shld mov stc jmpq jmpq test jo jmpq jmpq callq movzbw movabs lea jmpq je rcl data16 repnz lea btr dec bt xor seto mov movsbw movzbl mov jmpq mov not stc mov bswap or bt add jmpq callq jmpq callq cmp cmp jmpq je jmpq jne ror lea btc mov movzbw shrd jmpq callq shld mov clc bt mov cmp test jmpq jmpq mov jb callq lea movzbw movsbl lea mov jmpq jne or jmpq callq cmp stc test jmpq jbe jmpq jns movzbw seta bswap mov jmpq lea jmpq callq shrd jmpq je test cmp jne je jmpq jmpq jb clc cmp cmp test cmp jmpq callq stc cmc xor cmp clc stc jmpq jmpq callq not lea not not jmpq jmpq jb rcr test adc lea clc jmpq jns jb shl sub lea cmc stc stc sub jmpq jne stc movsbl bsr mov or dec clc shld mov cmc stc stc add cmp jmpq jmpq jmpq mov movzbw sete lea mov jmpq jmpq jmpq jmpq test stc cmp jmpq je jmpq jmpq je test cmp jmpq jmpq bt cmc bt mov stc bt jmpq xor not bswap mov jmpq jmpq mov not not ja movzbl mov not not mov not lea jmpq jmpq setge jmpq test stc sub jmpq add jmpq je shld mov inc lea clc stc xor jmpq mov sete jmpq je jmpq ror lea mov jmpq jmpq bt cmc add test not lea bswap mov bt jmpq je bts bts clc xor jmpq jmpq jmpq sbb bswap sar shrd xor seta mov jmpq jne ror dec add bsr lea jmpq jne movsbq movzbw mov lea mov mov mov jmpq jmpq je stc stc bt cmp jmpq jmpq callq add neg rcr mov sub neg rol mov xor lea not lea bswap mov jmpq callq bt mov shl xor ror xadd sub xchg lea mov bswap movsbl mov jmpq callq stc cmp jmpq jmpq jmpq je sbb mov sub not mov movsbl mov jmpq callq and mov test cmp sub jmpq jmpq es mov cld xchg mov (bad) mov or or xchg movl pop pushq push je js (bad) hlt rex.RX pop cltd scas nop popfq cmp rex push (bad) jae mov movslq cmc mov je cmpsb push push pop imul mov jnp andl movabs rex.WXB icebp (bad) or outsb fwait add adc and mov add repz push sti (bad) rcrb (bad) mov sbb push sbb jnp (bad) mov jno outsb add nop jb leaveq ds sbb stc (bad) xor sub (bad) mov cmp out lods cmpsl jl or (bad) out (bad) mov movabs clc adc (bad) js int jge xchg loopne callq btc clc not inc mov sar xor not bswap lea mov jmpq jmpq jmpq jmpq sub setge movzbw not lea mov jmpq je stc cmp sub jmpq callq xadd sar inc bsf movzbl dec inc bswap neg xor setp movzbw not jmpq je movzbw sub movsbw movsbw movsbw jmpq callq cmc movzbw movb add setb clc shld mov clc jmpq cmp jmpq callq test cmp jmpq callq jmpq jne btc stc shld and mov dec not neg mov stc add bt jmpq callq or movsbw cmp xor movsbl mov jmpq jmpq setnp movsbw jmpq movsbw xchg lea mov lea bswap movsbq mov setae mov jmpq jmpq je sub add inc mov jno mov add mov clc clc jmpq jmpq movl jmpq jmpq je jmpq xor bswap mov jle bswap mov jmpq jmpq jmpq jmpq jmpq callq bt add jmpq jmpq bt stc test jmpq inc jmpq not mov jmpq callq rol movsbw mov stc mov sbb inc shr stc mov not test mov ror movsbw or xor mov adc inc jmpq jne bswap not bswap mov jmpq jmpq add jmpq nop jmpq mov jmpq je cmp cmc cmp jmpq add cmp sub clc add jmpq je bswap bts add mov movzbl mov movzbw bt mov mov and mov cmc test add stc test test add stc add lea movsbw mov jmpq add cmp stc clc clc sub jmpq callq jmpq jmpq callq cmc cmc cmp cmp jmpq mov jmpq jmpq je sar inc bt shl xor mov mov jge callq movsbw mov jmpq jmpq movl jmpq je clc cmp jmpq jmpq jl jne not movsbw movzbl sete mov jmpq je cmp cmp jmpq callq test stc clc jmpq jmpq test jmpq bswap mov jmpq je rcr movsbq mov inc rol mov and cmp mov movsbq adc sub movzbw mov jmpq cmc test jmpq jmpq cmc cmp cmp jmpq stc setle movzbl shl xor jmpq pushq jmpq jmpq jmpq add bt cmc cmc add not not bswap mov jmpq callq bsf xor lea mov xchg mov bt dec dec or btc mov xor shl bswap data16 hlt or shl repnz not movsbw not movsbw dec inc rcl shl rol mov bt test jmpq callq test bt and test mov stc cmc stc bt test jmpq jmpq jmpq je jmpq jb jmpq inc not incl not setno mov jmpq test jmpq je rol rol rol mov bt mov movsbw lea bt cmp jmpq je test cmp jmpq je not neg dec sub mov not lea movsbl movzbl xchg not mov movabs lea jmpq pushq jmpq je cmc cmc bt cmpq jmpq nop jmpq callq test stc test jmpq jmpq jmpq jbe bsf bswap btr stc mov jmpq callq test jl test test jmpq je setns shrd bt mov cmp sar bsf mov stc shl movsbl neg lea jmpq je sete movzbw mov jmpq not mov movzbl mov lea movzbq mov jmpq jne test mov (bad) lock movsbw inc mov btr dec sbb mov test stc cmp stc add btc shr neg bt mov cmc cmc clc clc add cmc add clc add bswap bswap mov mov jmpq jmpq je jmpq jmpq callq movsbl xchg mov setno mov jmpq stc test stc cmp je jne clc bt stc cmp xor cmp cmp xchg cmc cmc test jmpq jmpq cmp stc jmpq bswap jmpq callq clc stc test jmpq pushq jmpq jmpq jmpq je and cmc test mov btc bswap movsbw mov shr lea clc jmpq add cmp test add cmc cmp test bt xor test add jmpq je shr test rol stc mov and bt shld mov xor dec cmc lea jmpq jmpq jns movzbl lea mov jmpq mov bt mov sar bts and mov cmc cmc clc clc add test adc mov bt add bt cmc add jmpq callq or btr bswap mov bsf xor rol bswap sbb data16 repnz or cmc mov rcr test repnz rcr shld not cmc xadd lea (bad) repnz stc not sar mov bt cmp xor jmpq jmpq jmpq je jmpq callq setle stc bsf mov shrd rcr xor or or movsbw shr mov rol setbe repnz shl not rcr bsf ror lea rcr ror rcr movsbw mov clc test clc sub jmpq callq jmpq movsbw not lea movzbw movzbl lea jmpq jmpq jmpq jp je rol mov bt clc xor jmpq add shrd inc mov stc cmc js add stc cmc test clc add test bt jmpq jmpq test jmpq nop jmpq jmpq callq jmpq mov jmpq je jmpq jb bsf dec rol lea stc cmc xor jmpq jmpq je bt cmc cmp bt cmpl jmpq jmpq jmpq cmp jmpq mov jmpq stc cmp jmpq jmpq jmpq mov jmpq mov jmpq jmpq callq cmc cmp test cmp jmpq jmpq jmpq cmc stc xor jo callq clc mov cmp cmp jmpq je lea bswap movsbq mov jmpq jne bswap movzbw lea mov jmpq callq test clc jmpq cmc test jmpq callq shld bt or or mov jmpq jmpq pushq jmpq callq cmc cmp jmpq je je sete bsf mov sar or sbb sbb lea bts shrd xor jmpq jne sbb sbb stc mov rcl rcr jmpq shld cmc adc repnz rex.WB hlt movsbw mov bts not rex.WB hlt lea cmc or jmpq jb bts ror cmc lea bt clc cmp xor jmpq jns callq test test test cmp jmpq callq test test jmpq jmpq jne cmp btr mov adc rol movzwl clc cmc test clc cmp jmpq je bts mov rcl bsr shr mov lea shld bt lea stc cmp jmpq jmpq bt test cmc cmp jmpq jne shl clc sbb mov stc stc bt test test jmpq jne bswap ror adc mov bt cmp xor jmpq sub jmpq callq add rol and mov cmc test jnp je bsf btc mov bsf mov bt lea dec xadd mov xor bsr mov test stc add adc not mov cmc stc bt add ror or mov stc stc cmp add bt add bt jmpq callq test test cmpb jmpq jmpq bt test cmc test jmpq callq jmpq callq stc sar (bad) testl lea bt test bt stc test jmpq jmpq jmpq jmpq je bt stc stc jmpq jmpq callq clc shl shrd mov rcl test bts mov bts cmp mov cmc bswap mov stc test add cmc test stc jmpq callq test bt bt clc cmp jmpq callq not jmpq callq bswap jmpq jne btr lea lea cmc cmp add test xor jmpq jmpq inc jmpq mov rex.W rex.WXB repnz (bad) add sbb imul cmc rex.RB jno adc sti add data16 loopne lock (bad) repz insb pop pushfq (bad) js (bad) lods rex.RB jrcxz (bad) mov movslq (bad) sbb ja cmp (bad) mov sbbb push adc movslq mov rex.W (bad) outsb xlat cs lea mov sub sti shr xchg mov xor cmp xlat gs xor jle pop xchg movsb and (bad) loope movabs lock leaveq (bad) or jle cmpsl pop nop push sbb (bad) insl retq (bad) lods or (bad) rex.B (bad) adc pop fmuls rex.RXB mov cmp lret and roll mov jb hlt retq fnsave movabs mov nop jmpq je cmc bt mov test test cmp jmpq mov jmpq jne bswap mov mov setno movsbq setg mov jmpq cmp cmp xor jmpq pushq jmpq je movzbw mov mov mov jmpq cmp cmpl jmpq mov not not not not mov jmpq not bswap mov lea not mov jmpq jmpq jmpq jmpq callq clc rcl movzbl sub clc shr mov stc cmp jo cmova jmpq callq test add neg movsbw mov test test jmpq jmpq jmpq je bt bt cmpw jmpq jmpq je xchg seta not mov mov mov movzbl lea lea mov jmpq jmpq jmpq jne je sar (bad) mulb rolb mov btc rex.WB lock adc bts inc mov sar mov add setge not rcr sbb mov jmpq cmp jmpq bt test jmpq jmpq je clc test clc cmpw jmpq jl je jmpq mov jmpq jmpq jmpq jne shr mov shr bswap bsr mov movzbl cmp mov bt sub add rcr lea mov xor mov clc bt bt jmpq jmpq jmpq callq bt test cmp cmc cmp jmpq mov jmpq js jmpq jmpq dec jmpq jne jmpq callq jmpq je jmpq sar btr not sub rol mov btr cmp repnz not inc dec not dec jmpq xor jmpq jmpq clc jmpq pushq jmpq je jmpq callq mov bswap mov bswap bswap mov jmpq movl jmpq callq not xchg lea jmpq lea jmpq callq sar mov mov stc stc test jmpq jmpq jmpq je clc cmp cmp jmpq movsbq lea movsbl mov jne mov jmpq mov not mov jmpq callq inc movzbl adc sbb sub movsbw xor lea setns clc mov not or movzwl jmpq jmpq callq btc btr bt bsr mov test bt test jmpq jmpq jmpq jmpq callq adc rcl jmpq callq neg cmp mov clc cmp clc test jl je cmc test bt clc sub jmpq sub jmpq cmpq jmpq jmpq jmpq add jmpq callq rcr not btc lea lea stc clc clc cmp test jmpq mov jmpq jmpq dec jmpq mov jmpq mov jmpq jmpq jmpq mov jmpq cmp jmpq jmpq jmpq jne btr bsf sbb mov neg bswap mov bt add test bt test cmp cmp jmpq jmpq je test cmp jmpq jb cmp clc cmp jmpq jmpq mov jmpq jb movsbq setb bswap bswap incl not sete mov jmpq je sbb stc cmp bswap movzwl rex.W lock shr adc movzbl jmpq je jmpq jmpq jmpq je cmc clc cmpw jmpq jmpq add jmpq mov stc test stc test jmpq jmpq callq jmpq jmpq mov jmpq stc testb jmpq jmpq movsbw mov bswap mov movzbw ja mov sets movzbw movzbw bswap mov jmpq jmpq jmpq jmpq jmpq callq lea mov movzbl mov jmpq je bt cmp jmpq add test cmc jmpq bswap not mov jmpq je test jmpq mov je callq bswap sets lea jle callq jmpq add cmc add jmpq js cmc stc stc test test jmpq jmpq jmpq jmpq callq add neg rcr shr mov clc cmc jmpq jmpq je mov mov jmpq jb shr mov stc mov bts shrd not mov sbb neg xchg mov rcr lea lea test sub lea shrd add add or mov adc cmc cmc sub mov movzbl movzbw bsr movsbl add bts bts mov btr mov stc cmc jmpq jmpq jmpq jmpq nop jmpq (bad) (bad) (bad) testb push (bad) cwtl retq add rex.WRX or rex.WX (bad) jnp imul in mov pop cmpsb xchg (bad) and enterq pushq xor jp cmpsb mov jle (bad) cmp or bnd and jb lods (bad) lock rol cmpsb or mov xchg mov enterq (bad) mov add or adc add mov cmp sub (bad) in mov pushq push adc lret mov xor rex.RB fmuls data16 add sbb cmp rex.X (bad) rex.RB lods mov (bad) cmp (bad) stc jle repz or jno jl cmpsl xchg (bad) gs mov xchg jmp (bad) in mov iret adc clc lea jmpq (bad) in (bad) jmp movabs mov imul int3 (bad) jg rol loope fimul and stos movsb (bad) imul test sbb jrcxz,pt fnstcw in jae frstor sub mov adc push movsl rex.RB outsb jne mov cmpsb sbb adc sub data16 rex.XB (bad) add popq out (bad) loop (bad) rex.W jp leaveq idivl xor jge pop mov fwait pop mov insl jp jbe js (bad) punpckhbw icebp adc imul add mov test sarb adc and outsb mov cmp movabs popq in (bad) repnz jl rex.WX sub cltd or cwtl pop add rex.WRXB jb adc adc repz sbb xchg jae movabs (bad) jne in pop mov cmp (bad) mov mov (bad) int rex.WB (bad) xchg mov movslq mov cmp pop mov rex.R cwtl cmp mov or push mov jrcxz sub cmpsl cmp mov ja cmp loope pop pop add retq addr32 sub and rorl stos test mov adc (bad) (bad) or jb cwtl repz rex.R rex.RXB je mov rex.WX sbb push hlt sub jl hlt cmp add sub or stos pushfq jle pushq cmp push push xlat mov xchg and (bad) add sub movslq roll rex.RXB rex.X and sbb fisttpll out mov jg (bad) sbbb mov testl stc rex.RX and jmpq pop rex.WXB rex.WXB xlat rex.WB push mov xchg (bad) stc fucomi stos cmp js gs jns cwtl sete jbe rex.WB fwait lock nop test fwait rex.W mov rex mov and mov pop mov lahf push repz (bad) cmc push pushq jns shlb cmpsl test jl fiaddl pop push rex.WXB loope mov jbe mov rex.XB rex.R es pushfq rex.WRXB lret jne fdiv fnstsw cmp xor faddl add (bad) add push (bad) test fxch lret (bad) cmc outsl mov cmp pushq (bad) add repnz ss ds add sub add cli lods popq mov xchg cmp imul mov xchg (bad) rex.B (bad) xchg lea fnstcw mov mov imulb (bad) (bad) (bad) out hlt sub adc test data16 mov stos adc adc and pop lret lock push lods flds mov sbb xchg iret jl push fs fisubl enterq and cld fiaddl (bad) sbb (bad) retq retq stos cmp push pushq loopne (bad) jmpq fwait or stos mov insb cs (bad) roll stos add je sbb sarl (bad) and sahf test jbe ja pop and scas int3 xchg xchg data16 enterq cmpsl fyl2xp1 or loope ror pop fsub rex.WRX and cltd clc (bad) cli mov stos xor (bad) cmp sbb xchg push fptan mov (bad) rex.B data16 pop test fnstsw add pushq loop out xor hlt push xor (bad) mov lods movabs imul int rex.W rex.WXB movsl divq mov cli add xchg mov mov mov ja jle push nop rolb jp push mov mov rex.WR or xor pushq jmp addr32 fild sbb shrb lods callq sub and xchg (bad) xlat movabs pop (bad) adc xlat shrl (bad) jbe jmpq (bad) pop mov mov fisubrl (bad) mov scas frstor popq or (bad) or lahf in jge rex.W rex.X xchg cmp stc rex.RB clc rex.WRX insl cmp pop cld and sbb enterq rex.WRB jne mov cmp rex.XB in sbb rolb (bad) repz rex.W jp mov cmp (bad) sbb xchg pop movabs mov push push movabs callq int3 xor jnp pop cmpsl imul std insb or (bad) jae (bad) mov imul mov and es (bad) jae xchg fsubr xor insl jne (bad) data16 rex.R repz jbe or imul (bad) sbb xchg rolb sub (bad) insb jrcxz popfq and outsb rex mov or rex stc rcrl jns pushq in movsb imul sbb jl sbbb in push xchg rex jmp loopne stc gs pop push addr32 pop mov cli lods xor movsb cmp in movb rex.X adc pushq rex.WXB sbb push cmp cltd (bad) fs cmp mov andl rex.X jb pop pushq pop push rex.WRX rex.W addr32 rex.X nop movabs mov pop jb (bad) test pop callq jp (bad) pop xchg icebp jo jrcxz mov lods adc jns retq scas cld mov sub xchg and in divl pop pcmpgtb (bad) add (bad) movslq add mov jmpq rex.X (bad) sbb adc test lret mov loopne (bad) rclb test fild (bad) rolb xor mov pop jp push xor fisub add in fwait push mov xor leaveq negl movabs or xor pop mov xchg (bad) (bad) or lods movl outsl movslq ds lods xor sarb cmp movsl (bad) and xor (bad) loopne loope xor push sahf sub sub pop xchg icebp jbe fnstenv mov lret add mov movslq stc mov push lods push adc cltd cmpsb pushq mov (bad) jp insl sbb (bad) rex.W movabs push icebp (bad) rex.WRX xchg rex.RX jl (bad) (bad) or fdivs mov adcl lahf and lods mov pop or mov (bad) and cmp hlt sbb lods jb cmp fmuls andl xor (bad) rex cmp movabs (bad) jl adc xlat roll add stc rex.WX lahf and (bad) test je (bad) repnz scas rcl adc and sbb adc fs sub scas jne (bad) es xor mov cmp (bad) outsb (bad) movabs clc idivl lods adcl rex.RXB rolb adc imul repnz mov paddq lock (bad) andb push (bad) sub mov sub insl rex.WRXB pushq jno add in fldcw (bad) test adc or adc loope mov adc xchg sbb sub fwait movsb nop jrcxz jae sub pushfq inc (bad) loopne jmpq rex.R lock movsl addr32 psubsw mov cmp (bad) jmp rex.WRX gs (bad) fdivr mov movabs mov sub enterq cld repnz mov imul push stos fsubrs nop xchg insl clc push mov jo imul push and test out cvtpi2ps ds test adc fsubr fmull rex.W xchg enterq sbb ja loop and loop loopne adc and (bad) mov (bad) pop fwait jo jl mull or push add rex.RB jl js mov fnstenv int3 fistpll push jno jb pop sti mov xchg xor (bad) sbb rex loop mov and or add (bad) mov (bad) jl or sahf fdivp cmpsl (bad) fldl (bad) (bad) cmc rex.X jrcxz mull mov xor cli lods cwtl cmp incq fild xchg retq test and cmp in jno fdivs push jmpq and xor cs and add iret sbb (bad) jrcxz imul adc movabs movsb or push movabs mov int3 (bad) jb (bad) pause mov lods sbb mov jno and enterq mov fisubrl lea (bad) or jnp xchg fcompl sti or stos (bad) (bad) callq ror repnz nop mov loope adc mov retq iret pushfq (bad) decb adc jmpq xor rex.R sarl cmp (bad) jbe movsl or sbb cvtpi2ps pushq (bad) retq (bad) movslq pop xchg push (bad) rex.W repz lock mov adc xchg movl pop (bad) addr32 jns (bad) (bad) ss mov add or xchg pop sti jns fsubr (bad) in repz movabs adc sub cmpsl imul jae lret (bad) out xor mov adc sub rex imul mov pop jmp adc or pop cltd mov or cmp stos cmpsb add push fbld mov add imul push xchg int3 stc jae jno push mov and jnp jg int3 xchg fcomps jno cmp (bad) retq lret pop mov (bad) rex.RX jne xor mov cmpsl and in imul mov mov xor or xor out (bad) sti leaveq xor xlat stc rex.WR fdivrl rex.WXB pop roll jl mov (bad) sbb rex.R push mov out jmpq je lea mov jmpq callq jmpq jmpq setp lea movzbw not lea jmpq cmc xchg cmp clc test jmpq pushq jmpq callq lea cmc mov stc test test jmpq adc neg mov jmpq jmpq jmpq jmpq jmpq je bsr cmp bts bsr lea sub jmpq mov mov jmpq jmpq movsbw lea movsbw mov lea setp mov not mov jmpq xchg shrd shrd stc nop not mov jb or clc mov mov dec btc movzwl cmc cmc mov test sub jmpq mov jmpq xchg jmpq jbe mov lea jmpq mov jmpq callq stc shr lea cmp test jmpq jmpq nop jmpq callq (bad) repnz bsr jmpq callq sar ror mov stc cmc jmpq jne cmp test jmpq je and shrd lea test ror jmpq je jmpq callq jmpq add jmpq je jmpq cmp cmp jmpq mov setl mov clc xchg jmpq pushq jmpq callq clc jmpq rcr bts bsr mov clc cmp test jmpq rcl clc mov xor not shld lea mov neg bt mov test clc cmp cmc test jmpq bswap jmpq sub inc dec mov bswap mov dec bswap mov jnp dec jmpq xchg mov dec xor cmc mov mov ror rcl or cmc clc add mov stc shl sar and movzbw xor clc add sar mov btr lea cmc repnz lea not jmpq je cmp bt cmp cmp jmpq callq and shl mov cmc test clc cmc test jmpq jmpq jmpq jmpq jmpq jmpq jmpq callq movzbq shrd rcl mov mov cmc jmpq je jmpq jmpq jmpq jne jmpq callq and shr add shld mov btr mov bt clc or jmpq jbe jmpq je test bt clc cmp jmpq jmpq add rol mov bt add dec jmpq je cmp bt cmc bt test jmpq jmpq mov jmpq ja stc stc test jmpq jb cmp cmp jmpq je shr sbb bsf mov mov cmp bt cmp bt test jmpq jmpq je stc xor jmpq nop jmpq pushq jmpq jmpq je bswap mov bswap jmpq bt jmpq jmpq callq stc test jmpq test stc test jmpq jae callq mov test mov not mov ror sub adc mov sub xchg clc mov ror mov inc mov mov sar sbb mov test jmpq jmpq jmpq not lea jmpq je cmc cmp jmpq jmpq jl pushq jmpq jmpq je bsr sbb xor mov seto mov jmpq callq cmc cmp jmpq stc test jmpq je or sar mov jmpq test jmpq mov jmpq clc stc cmpl jmpq jmpq callq clc mov btc mov cmc stc sub setb movzbq jmpq add clc sub jmpq callq test bt test jmpq callq cmc jmpq test jmpq je jmpq jmpq mov test jmpq mov mov jmpq jne clc test jg cmp test jmpq cmc mov cmc cmc jmpq jmpq jmpq je jmpq jmpq movzbw movzbl jmpq cmp clc add ror not mov mov test add clc add stc sub bt stc test bt add jmpq jmpq jmpq je test stc clc cmp jmpq callq clc test cmp clc test jmpq test jmpq callq data16 (bad) shld rcl mov cmc bt test jmpq jmpq bt test jmpq jmpq callq not jg movsbl lea not lea jmpq callq lea lea mov jmpq callq movzbl not movsbl movzbw mov jmpq jmpq jmpq callq bswap mov not lea jmpq callq cmp xor test test jmpq pushq jmpq jmpq movzbw mov jmpq nop jmpq jne clc sub jmpq je test bt cmp jmpq pushq jmpq jmpq jmpq jmpq jmpq jmpq jmpq jmpq jb bsr shr cmpb setb xchg not jo mov not movzwl bswap xchg movsbw mov not mov jmpq jne shld mov dec btc xor test mov bt inc rcl or mov bsf stc ror cmp add cmp sub lea bsr mov jmpq jg repz push jo xor data16 and loopne add fiadd rex.RX sti loopne insb pop rex.XB jmp (bad) jg rolb pop (bad) push pop (bad) pop and (bad) jp jae add lret pushq mov adc pop mov (bad) outsb (bad) in push or test hlt out rcrb jl rex.WXB xor sbb cmpsl mov rclb jl pushq sahf cmp (bad) mov push xchg push out (bad) lock retq stos fwait sbb cmc (bad) (bad) movabs jrcxz test rex.WRB out sub jnp jle insb andl or jrcxz js leaveq rex test std lret or (bad) mov cwtl sbb movabs xor mov rex.X rex.WR shrb rex.R addb add scas movabs jmpq jmpq je movsbw bswap jmpq lea jmpq xchg jmpq callq cmp test cmc test jmpq clc test jmpq inc jmpq jmpq jmpq jmpq je rol shld add movzwl bts movzbl cmp shl test clc cmc shr bt or jmpq jmpq callq bts or mov stc clc test bt test jmpq callq jmpq jb jmpq jne and stc add cmp mov lea rol test mov cmp jmpq callq cmc mov jmpq callq stc shl movzbw or mov jmpq pushq jmpq jmpq movzbw setl mov jmpq jmpq jne clc xor jmpq jmpq jmpq je btc (bad) negl sar seto lea xchg movsbq rol xor not setae mov mov movzbw movzbl bswap mov jmpq jne jmpq callq jmpq jmpq je movzbq lea mov jmpq jne sbb mov rcr bts mov cmp xadd bts lea btc add lea movzbl mov jmpq callq jmpq jmpq callq bt test mov cmc bt test test jmpq jmpq callq cmp movzbl bswap btr mov bt xchg jmpq je jmpq callq cmc cmp cmp bt test jmpq pushq jmpq je clc cmp xor jmpq jmpq je setbe stc mov cmc cmc stc cmc test jmpq jmpq test clc cmc test jmpq jmpq je cmp xor sbb mov bt test jmpq clc cmp jmpq not lea mov mov mov jmpq cmp clc cmp sub jmpq cmp add clc add stc add cmc cmp cmc stc add test cmc clc cmp jmpq jmpq je jmpq jmpq callq add mov stc jmpq mov lea jmpq jmpq mov jmpq jne sub mov movzbw mov bt bt stc add jmpq jmpq jmpq bt cmp jmpq jmpq jmpq jne jmpq mov mov movsbw lea lea js mov jmpq callq cmc test jmpq jmpq jmpq jmpq cmc test jmpq jns movzbw jmpq jmpq je clc bsr mov neg bsr clc setno mov sbb add shl rcl lea test test cmc bt cmp jmpq dec jmpq callq jmpq nop jmpq mov jo movzbl jmpq cmp test cmpw jmpq bswap mov rol mov mov or shrd sub mov sub movsbl sar add shl sbb xor xchg mov and neg or not repnz inc not jle dec inc not dec shld xor js mov test clc stc cmc test jmpq mov not mov movsbw bswap mov js callq bsr cmc bt sub sete lea mov lea mov jmpq jmpq mov jmpq callq jmpq bt jno cmp jmpq test jmpq nop jmpq callq ror movzbw mov stc clc jmpq mov jmpq callq cmp test cmp cmp cmp jmpq inc movsbl not movsbq inc dec test cmc clc mov cmc test jmpq cmp test jmpq nop jmpq add jmpq test add cmc cmc test cmc add cmc add cmp add cmc bt bt bt add stc cmp jmpq cmp jmpq jmpq jmpq je callq jmpq jmpq movzwl movzbw movsbw lea mov bswap movsbw not lea mov jmpq jmpq jmpq mov btc xchg sbb or or and mov inc inc movsbw add btr test xchg xadd xor clc test mov shl btc sar bsr repnz jmpq jne jmpq je bswap bswap mov mov jmpq callq ror mov cmp xor movzbw mov jmpq bswap movsbq lea mov jmpq callq jmpq jno nop jmpq mov bswap bswap movsbw movzbw mov jmpq jo nop jmpq mov jmpq callq bt jmpq cmp add test clc cmp mov bt cmpl jmpq jb rcr cmpb bswap mov movzbw mov movzwl jmpq jmpq je shl shld mov clc test jmpq callq jmpq jne add rcl bswap bsf lea jmpq je ror xor rol mov inc inc shrd mov stc data16 lock xor btc mov clc cmc add jmpq jne setg bswap mov mov movzbw mov not mov lea mov jmpq lea movsbl lea jmpq je jmpq movzbl jmpq clc jmpq callq ror sub rcr movzbl shld btr bswap shrd sub and btc mov shr sub cmp movzwl clc stc jmpq mov jmpq mov jmpq je jmpq jmpq je stc cmp stc sub jmpq callq lea movzbl mov jmpq jmpq jmpq jl jns jmpq jmpq je neg mov seto lea ror or cmp (bad) (bad) or leaveq movzbw movzbq mov mov jmpq mov sete mov jmpq jmpq jmpq jmpq mov mov movsbw mov jmpq callq adc not shld mov xor lea or shrd xor clc jmpq jmpq jmpq mov jmpq mov jmpq pushq jmpq jmpq setne setp mov bswap mov mov jg not movabs mov not jmpq jmpq callq jmpq jmpq test jmpq jmpq jmpq movl jmpq callq stc jmpq jmpq js xchg xchg lea mov bswap lea movzbw lea movsbw not lea movsbl movzbw not setg lea jmpq jmpq jmpq jmpq jmpq add stc jmpq jmpq test stc bt mov jmpq stc add jmpq je jmpq callq shl mov bt cmc jmpq jmpq je cmc bt cmp jmpq not mov lea lea jmpq jne bt cmc clc stc sub jmpq je bt cmc jmpq callq or mov cmc clc jmpq je rcl and mov stc cmc jmpq jb xor sar bsf rol lea bt sub jmpq pushq jmpq jmpq jmpq cmp clc stc cmp jmpq movzbw movsbw mov jmpq jmpq jmpq jmpq jmpq callq jno nop jmpq jmpq jmpq je jmpq jmpq jb adc xor bsf sar lea clc stc sub jmpq test jmpq je movsbw mov jae callq cmc test jmpq jmpq stc cmc cmp jmpq jmpq callq cmc cmp jmpq lea sete movzbl bswap movzbl lea jge callq bt mov jno test cmp stc test jmpq cmp cmp jmpq jmpq not xchg mov jmpq jmpq jmpq je jmpq mov rol mov movsbw lea rol rcr mov cmp test add stc cmc cmc sub bt cmp add jmpq jmpq je bt clc cmp jmpq jmpq mov je callq stc bt cmc clc cmpl jmpq mov movsbq mov mov lea mov jmpq jmpq mov jmpq jmpq jmpq jb jmpq callq inc rcr bswap btr mov cmc stc test bt mov clc test clc clc movl jmpq mov jmpq callq cmc bt jmpq mov jmpq jmpq callq bt bt cmc stc xor test bt sub bt bt xchg test cmc cmp test jmpq jmpq jmpq add add add mov xor cwtl jmpq lret cmp (bad) and pop (bad) mov outsb and (bad) xor in mov and lret xor cld sub (bad) cmpsl sbb mov insl nop xchg mov rex.B sbb sub lret rex.X (bad) gs movabs mov mov sbb (bad) mov and xchg out adc or jmpq push rex.WR sbb pop stc insl test pushq add (bad) setns rex.WR cmp xchg movsb out sub imulb fcmovnb sarl xchg test mov and sub xor jge or sub mov movabs add mov pop mov jo fiaddl insl rex.WR rex.WX pop ja js pop js test sub mov jns pop jns pop lret (bad) and mov jbe jne xor cmp nop cmp mov jp movabs jo (bad) sbb out ror xchg cwtl cmpsb xchg in cmpsb movabs fisttp (bad) add jb add jns,pt (bad) (bad) push insb adc (bad) push stos movabs adc lods (bad) (bad) popfq jae mov mov retq movslq nop in adc (bad) push sub add and shr xchg in in xor mov out rex.WR jg jrcxz or push ja subl xchg fmuls rolb sub pushq mov and adc sub pop mov out (bad) (bad) mov mov hlt sti retq and xchg fisubrl xor leaveq push pop sbb xchg pop pop (bad) pop (bad) mov jae in jne jle jnp push ds ror addr32 lret movsl ficoml int cmp (bad) xor jmpq movl jmpq pushq jmpq callq clc btr lea cmp bt cmp test test jmpq callq jmpq bt test xor ja add jmpq je ror btc mov setns mov (bad) mull mov xlat xor and movzbw mov mov seta jmpq mov jmpq add jmpq jmpq mov dec jmpq jmpq add jmpq nop jmpq je lea mov jmpq test cmp jmpq adc movzwl rol jmpq nop jmpq mov movsbw movzwl jmpq je inc shld mov test stc jmpq not lea jmpq callq jmpq test jmpq callq jmpq je movsbw not movzbw mov jmpq jmpq callq jmpq jmpq jmpq jmpq je not bt cmp xchg mov xor setbe ror bsf mov clc rol and movsbq jmpq je clc clc stc cmp jmpq mov jmpq stc cmc jmpq je clc rol mov movsbl shld shl mov bt bswap bts (bad) (bad) mov not rex.WB lock mov cmp add clc add cmc bt clc add movsbw movsbl mov jae jmpq callq bswap mov lea lea jmpq cmc bt add cmc clc cmp jmpq jmpq jmpq callq test test add jmpq callq jmpq je jmpq jmpq jmpq jmpq callq xadd or dec mov shl rol or adc mov mov mov neg btc btr mov rcr not mov stc bswap mov test stc cmc test jmpq jmpq btc lea sbb sbb bt and mov test cmp jmpq stc lea stc add bt cmc or rcl mov xchg xadd shl mov rol rol add and bsr movzbw test mov test mov bt jmpq callq sar ror movzbl test clc jmpq je neg bsf btr xor mov mov jmpq stc movabs add lret sub rex.WRX cmp (bad) jnp pushq in addr32 sbb sub mov xchg pop xor jns sub rex cmc in mov sarl gs sbb mov push cmp (bad) rex insl fsubrp xchg ficoml jle vaddsd xchg fnstenv xchg push or xchg icebp imul lret retq clc js rex.B retq int ss push mov jmpq stc cmp mov sar bsr movzbl stc cmc cmc mov sbb btr shl movzwl clc stc mov sbb mov stc clc mov test movzbl bt mov xor mov cmc mov clc movzbl test jmpq mov test jmpq je cmp test xor jmpq movzbl mov jmpq je btr lea xadd rcl add sub bswap movzbl not xchg mov movzbw mov jmpq jbe add ror mov bsf btr mov stc test stc jmpq callq setbe not mov xchg movsbl xchg mov jmpq jmpq jmpq callq mov setge movzbl mov movzbw lea not mov movzbl mov jmpq jne jmpq jmpq jmpq jmpq mov jmpq callq lea not not mov jmpq jmpq jl je jmpq jmpq jmpq jmpq je add or sub jmpq jp callq cmc test jmpq xor jmpq callq lea movzbl movzbl movsbl mov jmpq mov jmpq callq test clc cmc test jmpq bt testb jmpq jmpq jmpq jmpq jmpq jnp xchg jbe nop jmpq cmp clc sub jmpq callq jo test cmc clc cmp jmpq jmpq jo callq jmpq callq adc bt not mov cmp bt jmpq jmpq je and dec shr setge xor lea mov jmpq callq shl dec inc mov cmp stc stc cmp jmpq je xchg xchg lea mov movsbw lea movsbw mov jmpq mov add shl neg ror mov clc add test clc bt cmp jmpq jmpq callq cmp cmp jmpq test jmpq callq jmpq jb pushq jmpq jmpq je clc mov jno cmc test jmpq je bt cmp jmpq jmpq je cmc stc cmp jmpq callq xchg mov not lea movzbw movzbw bswap lea jmpq jmpq mov jmpq callq not movzbl bswap lea jmpq mov jmpq jne stc stc cmpb jmpq stc cmp jmpq jmpq jmpq jne jmpq callq bt clc and cmp stc cmp cmp jmpq jmpq jle callq test bt jmpq jmpq jmpq jmpq add jmpq jmpq callq shrd sub jmpq jb sub or lea lea cmp sub jmpq callq jmpq jmpq jmpq jmpq movl jmpq je bt mov setb mov cmp stc mov adc cmp ror mov rcl bts add setg mov bt add jmpq callq test add sbb lea stc jmpq je jmpq bswap jmpq callq movzbw test bswap mov jmpq callq clc btc bsf mov stc clc test jmpq jmpq je jmpq cmp test sub jmpq cmc add jmpq je bts sub sar xor mov not lea bswap mov js jmpq jmpq jmpq jmpq jmpq jne cmc bt cmc bt cmpb jmpq jmpq ror add adc mov movsbw inc lea mov stc add jmpq callq not adc clc bts mov jmpq add cmp cmp cmp jmpq je jmpq callq or xor mov jmpq je rol shl or mov cmc test jmpq jmpq jmpq je jne mov js clc cmpb jmpq jns movzbw dec mov jmpq pushq jmpq je btr mov dec mov bsf mov bts inc add bsr mov test bt cmc bt add jmpq je or test adc lea cmc xor jmpq bts mov cmc clc test jmpq callq clc cmp cmp jmpq jmpq jmpq not xchg mov not setle mov movzbw mov jmpq jmpq jmpq callq rcr stc bt lea test jmpq jmpq xchg js nop jmpq bt test jmpq mov mov lea mov jmpq mov mov jmpq callq movsbw bswap lea lea mov jmpq not movsbl bswap mov seta not lea jmpq mov bswap mov jmpq stc bt cmp jmpq je shl dec dec xor mov cmp test mov neg bt sbb (bad) (bad) and bswap lea not movsbl mov movzbw lea mov jmpq je bt bt cmp jmpq (bad) mov mov in push jbe jb xchg pop stc pushq out add (bad) adc rcrb (bad) jmpq sbb sti leaveq (bad) sarb mov in fisubrl jns add callq mov (bad) in add jo lret gs adc (bad) pop xchg int sub stos rex.WXB movabs add callq bswap mov test cmp test jmpq jmpq je movsbl mov jmpq jmpq jmpq jmpq jmpq callq bt cmp jmpq jmpq jmpq callq mov lea lea jmpq jb setbe inc dec jmpq bt test jmpq je bt bswap mov stc stc clc test jmpq callq lea inc setnp sub movzbw mov jmpq jmpq jne shr shrd mov cmc cmp sub jmpq je test clc cmp cmc cmp jmpq je stc cmc jmpq callq jmpq jbe lea shld btr and lea jmpq jmpq callq clc cmp test mov bt cmc clc bt cmp jmpq jmpq test jmpq mov jmpq test test jmpq jne not mov stc cmp test jmpq je shld bsf xor jmpq je jmpq movb jmpq jmpq test jmpq jmpq jmpq jmpq jmpq mov xor shld not bts or shrd mov shr rol or ror add rcr neg data16 hlt xor shrd bts lea rcl mov movzbw rol btc repnz movsbl movsbw lea mov not dec dec dec bswap add bt test mov test stc cmc test jmpq mov jmpq jne movzbq bswap mov setne mov jmpq callq movzbw mov lea bswap lea mov jmpq nop jmpq test bt cmp jmpq callq bt cmp jmpq je jmpq jne xadd rcl cmp mov xchg bts clc neg mov bswap shrd mov and movabs dec add and ror bsr xor lea sub mov bt bt cmp add jmpq jmpq mov mov jmpq jmpq jmpq jmpq test xor jmpq je jae callq movsbw mov lea jmpq je jmpq jmpq cmp in fisubrl xor mov cmpsl rex.WRXB lock movabs (bad) jp mov rcll mov jae xchg (bad) adc push sysenter xchg sub mov jrcxz add jno je sbb mov addl jl cmpsb test push or lahf nop imul popfq stc xchg shlb cmpsb rorb lahf (bad) mov rex rex.RX test rex.B rex.RX xlat (bad) mov retq and (bad) mov jns and push out cmpl scas mov movabs leaveq fs cmp (bad) je idivl or rex.WR pop (bad) mov xor rex.RX jge mov insb nop nop (bad) cmp (bad) iret (bad) pop loop retq rex.XB mov (bad) xchg fildll test bt test jmpq jmpq add test clc jmpq jmpq xor jmpq add clc clc cmp stc add bt jmpq callq jmpq jmpq jns je ror rol mov stc shrd mov rcl data16 lock btc mov cmp cmc add test clc stc add stc jmpq jb jmpq jmpq je test cmp jmpq callq cmc jmpq jne cmc stc stc bt sub jmpq callq rcl rcl bt mov rol mov test cmc jmpq jmpq je jmpq jmpq jb movzbl setae movsbq jmpq setb bswap xchg jmpq jmpq jmpq jmpq callq cmp cmp jmpq jmpq mov bt movsbw sar mov stc test mov bts movzbl cmp stc mov bsf movzbl test test cmc jmpq lea movsbw movabs lea mov lea setb jmpq cmc cmp jmpq callq stc clc test jmpq jmpq jmpq je inc shl shl bts mov setp stc bsr inc mov ror sub add and lea movsbl movsbw bswap mov movsbw not mov not mov jmpq jmpq add jmpq out cltd jne jbe mov outsb pop xchg movsl pop loope gs test mov pop in ja adc mov push movsb sti leaveq addr32 movabs fstl mov lea mov add fwait mov rcrb (bad) (bad) sahf push xor cmp mov adc insb (bad) callq bt mov jmpq je jmpq jmpq jmpq jmpq jmpq callq test cmc and stc bt cmp jmpq mov jmpq callq jmpq je stc clc cmp jmpq jmpq callq stc mov stc test test bt test jmpq jmpq js movl jmpq jmpq jmpq callq bswap jmpq and test cmp jmpq jmpq jmpq jmpq jmpq pushq jmpq je jmpq mov jmpq jmpq callq cmc cmp jmpq jmpq callq jmpq jmpq rex.B or nop nop xor pop outsl (bad) adc adc movsl xchg xchg xor pop add addb cmp rex.WB repz outsl cmp xor pushq (bad) pop jno push (bad) fwait movabs (bad) mov leaveq (bad) rex.WXB cmpsl iret and xchg int3 repnz xor xor (bad) xor clc sub in or or in mov jno sbb xchg add mov rex.RB subl movabs jnp test mov (bad) (bad) sub sti leaveq imul cmp mov fidivr rex.WXB rex.B jmp ficom mov lock jne add pop (bad) lret push (bad) (bad) fadd rex.X sti sbb pop enterq (bad) sbb (bad) xor (bad) xchg fwait (bad) lods pop xchg sub mov add pop rex.WRXB mov lea jmpq jmpq jb jmpq je cmc cmp stc cmp jno jmpq jmpq je shr mov stc mov clc jmpq je clc test bt clc cmpq jmpq jmpq callq adc xchg cmp mov sub sub movzbw movzbw mov jmpq jne btc mov shl xor bsr cmp mov inc not sub mov ror adc inc add xadd lea sar lea bswap movsbw mov clc test add clc cmc test add setge mov jmpq clc test jmpq callq clc mov cmc bt test jmpq jmpq xor movzbw bswap mov jmpq je shrd bsf bts mov bt cmp bt test jmpq lea lea jmpq je cmc cmc bt test cmpl jmpq jmpq jmpq shr rol bsf lea clc clc cmp jmpq movzbq mov bswap mov jmpq jmpq je and clc rcr sar mov bts dec dec mov data16 repnz and shr mov stc shl or mov cmp jmpq callq stc jmpq jmpq jo jmpq je add dec bt not xor jmpq je test test jmpq jmpq mov jmpq jmpq jb inc movsbw movzbl jmpq je rol sub movzbw movzbw bswap lea lea bswap mov mov mov jno movzbw lea jne callq movsbw movzbw not sete mov setb mov not bswap setge mov jmpq jb movzbq movsbw dec clc add mov xor movzbw or shl mov sar shr clc movzbw add jmpq jmpq jns jmpq jmpq jmpq jmpq je cmp stc cmc cmp cmp jmpq je bswap movzbw stc not mov jmpq jmpq jns je sbb setno sub lea movsbw lea mov mov not jmpq clc test test jmpq je bt jmpq jmpq jbe rcl movsbl data16 icebp mov stc sbb mov bswap shrd ror bsr mov clc clc add jmpq jne lea movzbl lea movzwl shrd test mov movzbw xadd shl dec lea data16 icebp and xor mov clc cmp or bswap mov lea jmpq je adc sbb clc sete mov clc test jmpq jmpq je test cmp test cmpq jmpq jmpq inc jmpq callq test rex.B hlt not bts mov xadd xor shld cmc not or jmpq pushq jl pushq jmpq callq test cmp cmc test jmpq not setg mov xchg xchg movabs movzwl not setno setbe jmpq jb dec inc dec rcr rcr mov bt shl mov dec or bsf mov ror shl btc neg bswap xor bts mov shrd repnz dec not not mov lea mov inc dec mov not sbb neg mov test bt test jmpq je stc test stc cmc sub jmpq je stc clc cmp jmpq jmpq not lea bswap lea jmpq je jmpq jmpq callq cmc cmc jmpq test jmpq movzbw mov jmpq jg jne jmpq jmpq jmpq callq test test test jmpq callq dec shl mov shrd adc shr jmpq jmpq jmpq jmpq jmpq jmpq pushq jmpq jmpq jmpq clc jmpq jmpq callq rcl lea cmc bt bt cmc test jmpq clc cmp test jmpq xchg nop bswap jmpq jmpq jmpq callq clc jmpq je lea mov lea bswap setae mov not bswap mov jmpq je clc cmp jmpq jmpq jmpq callq jo mov jmpq jmpq jmpq lea movzbl jmpq jmpq callq or mov jmpq jmpq cmp jmpq xchg mov mov jmpq jmpq je clc stc clc cmp jmpq bt test jmpq callq setno setle not lea mov jmpq callq cmp cmp jmpq jmpq jmpq jmpq cmp jmpq pushq jmpq jmpq je inc sub lea movsbl sete bswap mov jmpq js mov bswap mov jmpq test jmpq bswap bswap jmpq jmpq jmpq pushq jmpq callq btr sar or mov movzbw and shrd mov add dec cmp mov mov bsf sbb rcr mov cmc bt cmc bt add bt jnp stc sub bt cmp bt add jmpq clc cmc test jmpq callq mov movsbq not lea jmpq jmpq nop jmpq jmpq jmpq jmpq jmpq je mov mov jmpq jmpq callq bt clc jmpq callq rcr btc bt rol mov bsf xor adc or neg bsf mov shrd mov test xadd ror repnz neg or not shr sar setge lea btr inc bsr xor mov js xor jmpq mov jmpq jmpq jmpq clc xchg cmp cmc test jmpq jmpq jmpq jmpq stc sub jmpq callq cmc test cmc cmp cmp jmpq jmpq lea mov movzbw movsbw movzwl jmpq cmc stc add cmc stc add mov lea lea mov jmpq callq cmc clc test stc test jnp js movsbw mov jmpq je not bswap mov lea mov jmpq jbe jmpq seta not bswap movsbl mov jmpq movzbq bswap jmpq jmpq mov jmpq setne lea mov jmpq jmpq test cmp cmp jmpq jne setns xor movsbl mov sbb rcr movsbw stc mov and jmpq test jmpq je inc shr test btc mov jmpq cmc stc sub jmpq test and cmp test cmp jmpq jmpq jmpq jmpq jmpq jmpq jmpq jmpq clc add jmpq callq movsbl mov jmpq clc sub jmpq incl jmpq je jmpq jmpq jmpq cmp add jmpq jmpq mov movzbq seto mov jmpq pushq jmpq test jmpq jne jmpq cmp jmpq jmpq callq bsr dec mov cmp cmp jmpq jmpq jmpq cmp add stc stc jmpq incl jmpq je cmp jmpq jb jmpq jmpq xchg jmpq mov lea mov jmpq jbe lea mov lea stc cmc clc cmp sub jmpq callq jmpq lea jmpq je jmpq jmpq pushq jmpq bswap setno mov movzbq xchg bswap movsbw mov sete movzbw mov jmpq jmpq jmpq callq test clc cmp jmpq add jmpq callq movsbq mov setne setg lea jmpq je bt cmc test cmp jmpq je cmc jmpq jne or bts ror (bad) repnz push or cmc jmpq jmpq bt test jmpq jmpq callq jmpq jrcxz insl test or test pop jns gs sbb addr32 shll (bad) xchg stos cmp jge int3 mov addb cwtl rex.WB adc mov movslq or cli push xchg mov (bad) out rex.RB add pushfq or mov or shr insl (bad) scas jo clc js stc test pop in and out scas fs fwait (bad) xchg pop mov int adc iret cmp (bad) sub andl jle stos sahf sahf in addl pop test scas popfq sub and xchg mov mov rex.WRX rex pop adc jp push (bad) nop jmpq (bad) rcrb push jl adc jo jmpq sub insl loopne sti push rclb sub rex.WRXB rex.WB pop mov mov cmp and xchg adc cmp (bad) (bad) (bad) rex.WRXB enterq (bad) sub sbb repz subl lock pushq ss push sub cmp lret and sbb mov sub or push movabs mov and sbb cmp (bad) mov adc pop (bad) ds pushfq mov repz or pop jae retq sub stc rex.RXB xor cld out rex.XB (bad) mov and lods mov or mov neg movsl sub in jo (bad) adc jns mov test jrcxz pop (bad) outsl pushfq (bad) mov psllw adc repz cmp imul xor es xchg xor adc sbb callq rex.WX jns movsl shr xchg test jno pop gs jg repz (bad) mov movsl mov sbb scas nop popfq pop and or rex.WRX (bad) push jns sbb loope xlat retq movslq (bad) or pushfq (bad) cwtl adc rcrl (bad) cmpsl mov (bad) mov movsb (bad) sub rex.X cwtl pop push loope sub pop movsb cvttps2pi nop jmpq rex.WRB leaveq jp cs outsl rex.XB (bad) (bad) add mov popfq sarl outsl xor cltd retq xchg rex.W sbb rex.WR rex.WXB rex.RB adc js jmpq jmpq xor cmpl out (bad) loop,pt (bad) cmp rex.WR (bad) (bad) insl pop rex.RX repnz sahf cmp loope mov ficomp repnz stos mov loope xor (bad) xchg (bad) test mov movabs and (bad) mov rex.W rex.X lods mov jg pop or xchg push (bad) (bad) sbb jmp pop (bad) sbb stos sbb pop xchg mov sbb jge pop xor rex.RB jl mov or and jmpq xchg bt clc jmpq cmp clc stc add jmpq callq stc cmp test jmpq jmpq callq movsbw (bad) icebp bsr bt sub seta jmpq jmpq je cmc jmpq je cmc bt cmp jmpq jmpq je jmpq bt stc jmpq jmpq cmp jmpq jmpq jmpq mov jmpq bts and mov shrd bsf xor ror lea jmpq test cmpq jmpq jmpq je test jmpq jb jmpq jmpq xchg cmc test jmpq callq sar bts mov cmc test jmpq jne shr or lea neg mov jmpq nop jmpq jmpq mov lea dec bswap mov jmpq nop jmpq jne jmpq jmpq stc test stc jmpq callq lea mov jmpq callq ror btr sub bswap setge bswap mov jmpq jbe inc adc stc mov sbb ror mov shrd mov bt stc jmpq jmpq jmpq jmpq test adc bsf mov clc mov rcr mov add bt adc cmc add xor lea rol movzbw shrd lea mov jmpq pushq jmpq test (bad) fucomp mov sti pushq and int3 outsb push jb (bad) mov mov and mov or jbe and pushq mov movl loope loop (bad) fist loop jg test lea pop pop rcr pop pushq (bad) test test int (bad) push shlb add je jmpq bswap je mov bswap jmpq mov shl add btr lea inc add neg mov jae add js callq stc cmp test test jmpq je bt jmpq je shr adc lea mov bt xadd clc xor movsbw xchg movsbq mov mov lea bswap mov jmpq jmpq je btc xor movsbl bswap mov jmpq jmpq jmpq jmpq cmp jmpq callq jmpq callq cmc test jmpq jmpq mov jmpq mov jmpq nop jmpq jmpq jmpq jmpq inc jmpq jmpq mov jmpq callq jmpq jmpq jmpq bt add bt add cmp clc xor jmpq mov movzbw movsbw not bswap movzbl jmpq jmpq cmp test jmpq jmpq jne test jmpq bt and cmp stc clc bt cmp jno jb bswap lea xchg dec movsbw mov rol or cmc bt mov xor bts xadd shl not bsf stc sub shrd shr mov not adc add movsbl repnz dec bswap not jmpq lea clc sub jmpq je sbb or data16 icebp mov sub jmpq jmpq lea jmpq jmpq mov jmpq jmpq jmpq jl jb lea not jmpq mov jmpq jmpq jne cmc xor sub mov sbb and mov bts dec clc bsf mov rol movzbw or add sub lea data16 icebp inc rcl mov cmc add jmpq callq test clc test jmpq callq stc cmp btc dec mov cmp xchg clc test jmpq mov jmpq jmpq or jmpq callq jmpq jne movzbw bsr mov clc sbb bt movzwl jmpq add clc test add test cmp sub jmpq jmpq je setl mov rcr (bad) lock jge sbb xor iret bt cmc clc cmp jmpq callq jmpq jne bsf cmc jmpq jmpq test stc cmp jmpq jbe incl jmpq je jmpq jmpq jmpq jmpq je shrd (bad) icebp (bad) sub bswap not bswap mov jmpq jmpq callq bswap movsbw mov mov jmpq jmpq add clc je add stc test add test clc jmpq jmpq je jmpq mov jmpq jmpq callq setg mov setp setl movzbw setp mov jmpq jmpq stc test add jmpq je jmpq je bt clc cmp xor jmpq callq not jmpq callq jmpq btc data16 lock rcl mov cmp clc clc cmc mov shr and mov sbb mov sub bswap mov cmp test jmpq je lea mov lea jmpq jmpq jmpq jmpq jmpq jmpq callq bt cmp jmpq mov jmpq jmpq jmpq callq bswap mov movzbl jmpq add jmpq je movzbw sete lea lea lea mov bswap jmpq clc clc add not test mov cmp jmpq jne bsr btc cmp mov bt clc clc cmp jmpq mov bt jmpq cmc cmc clc mov cmc cmc bt cmpl jmpq je test cmc cmc cmp jmpq bt cmc cmp jmpq callq bsr mov and shl or rcr xor movsbw jmpq je bswap sub seta not mov jmpq jmpq jmpq nop jmpq jbe ror movsbw add bsr mov mov xchg shr mov lea movsbw dec not mov bt add cmp add bt clc stc add test bt clc xor jmpq callq lea movsbl movzbw jmpq je jmpq nop jmpq xchg jmpq callq rol (bad) hlt add callq add cmc test jmpq jmpq jmpq jmpq jb setae movsbw seto inc dec clc mov shl test or shr mov stc xchg lea add shl bts bsr xor sub mov jmpq jmpq je cmc test cmp jmpq clc clc clc test jmpq je jmpq jbe rcr sar bsr btc mov cmc test cmp jmpq callq jmpq jmpq dec jmpq dec jmpq jmpq test jmpq je rcr mov test cmc test jmpq test jmpq jmpq jmpq je stc btc (bad) lock mov not mov mov and not and mov mov movsbw lea mov jmpq movsbw dec rcr mov stc cmc jmpq callq not bsf adc ror mov cmp bt test jmpq movl jmpq jmpq jmpq cmp jmpq jmpq jmpq je cmp cmp jmpq mov not mov jmpq je test jmpq je dec shrd neg cmp lea bts add rcr lea sub lea xchg movzbq mov movsbw mov jmpq je sar xor mov lea xchg movsbw movzbl mov bswap lea jmpq jmpq adc mov seta bts shrd clc mov bsr bsr neg add and mov cmp jmpq je jmpq mov jmpq jmpq stc cmc add jmpq callq rol mov rol rcr xor mov cmp test stc test je je bt stc cmc cmpl jmpq jmpq stc cmp jmpq cmp jmpq je sbb cmc clc sub lea jmpq jmpq callq bswap xchg lea mov setge setb bswap not mov movabs lea mov mov mov jmpq jne jne jmpq jmpq jmpq je shrd bt btc not sub movsbw setg jmpq callq shr lea mov clc jmpq jmpq jne clc jp bt cmp testb jmpq callq movsbl sub mov shl test adc mov movabs mov mov not mov bt cmc clc add cmp clc test sub jmpq jmpq callq rcr or mov cmp jmpq jmpq movl jmpq je clc jmpq jmpq jmpq callq cmc cmpq jmpq jmpq jmpq jmpq jmpq jne movzbw mov mov jmpq jmpq lea jns callq not lea jmpq callq jl test jmpq je bts sbb btr rol mov not mov (bad) cmc add mov mov bts xor rcl lea cmp ja test test cmp jmpq jmpq jmpq callq shrd movzbl seto neg sar clc xor rol jmpq jne inc xor mov bt cmc bt clc test jmpq jne cmp xor jmpq callq jmpq jne cmp test test cmpq jmpq je bt bsf mov jmpq jmpq je jmpq jmpq cmc add cmp stc stc jmpq jmpq je shld (bad) hlt mov cmp test jmpq je bt cmpl jmpq je stc cmp cmp jmpq mov jmpq jbe movzbw mov not mov ror mov bt add test add test stc test add test test xor jmpq cmp cmc cmp jmpq jae je and rol sub mov mov jmpq jmpq callq shld bsr sub seto mov jmpq callq movsbw xchg movzbw jmpq js not movzbw mov movsbw mov lea bswap jmpq callq jmpq jmpq test jmpq inc movzbl jmpq jmpq jmpq je clc btc neg lea xchg setns xor not bswap mov bswap bswap jmpq mov mov mov not xchg setge mov jmpq bswap movsbw bswap mov movsbl not mov mov mov xchg lea setbe mov lea movzbl jo mov jp mov jmpq je cmc cmc js cmp jmpq callq bsf ror clc bts mov test test clc jmpq jmpq jmpq test jmpq je cmc clc cmc cmp jmpq je jb inc jmpq callq jmpq cmc test js jne jmpq pushq jmpq bswap lea jmpq setae mov mov jmpq shrd sub bswap movsbw mov jmpq bt mov stc add and mov cmp jmpq jmpq je jmpq je rcr mov stc mov rol data16 lock cmc mov jmpq je jmpq je cmc clc test cmp jmpq sets xchg mov inc movzbw dec mov jmpq je btc bswap or mov cmc cmp cmc jmpq je jmpq callq not xchg bswap not mov bswap mov bswap mov jmpq callq sar not bsr mov stc test jmpq callq mov mov jmpq or (bad) (bad) mov movzbw setbe xor inc repnz mov mov rcl not add cmp shld btr lea neg mov jmpq jmpq jmpq jmpq je sub mov jmpq jmpq jmpq jmpq mov mov jmpq lea jmpq pushq jmpq movzbw mov jmpq callq xchg setne lea lea jmpq mov jmpq mov ror stc bt neg mov xadd bswap lea btc bt xor lea add sete not btr add lea bsf not mov movzbq xchg sbb mov sbb add bsf mov not shl mov test bt add jmpq mov bswap movzbl lea jmpq jmpq je cmp stc jno test xor jmpq je jmpq mov not bswap mov jmpq jmpq callq cmc mov clc clc clc clc cmp jmpq jb not incl jmpq callq jmpq add add add add (bad) popq rex.WX outsl (bad) retq test jae (bad) adc and (bad) (bad) (bad) sbb (bad) mov add not movsbq mov jmpq jmpq mov sets movzbl jmpq je rcl or stc mov cmc mov stc lea cmc cmp jmpq jmpq jb xchg dec btr setno mov or bsr sbb or xor neg mov xor dec sub add inc shld xor rex.W mull mov clc xor repnz movsbw not bswap not bswap dec rcl mov clc jne test stc test jmpq je stc not lea movzbw mov stc jmpq jmpq callq stc clc jmpq callq bswap mov mov jmpq jmpq jne jmpq mov shr mov stc test mov bts dec bswap and movzbl stc mov stc bt mov bt test mov stc movzbl jmpq jb mov lea mov lea not mov movzbw jbe bswap mov mov not mov not lea mov jmpq mov jmpq jmpq add btc dec shrd mov cmc jmpq enterq mov and fdivl je cld and out (bad) mov (bad) dec adc nop sarb or js adc cwtl fwait sub add fdivs (bad) xor movabs out es (bad) rex.W rex.WRXB sbb (bad) rex.WB movslq pop cmp outsl jge insb out pop (bad) in fucompp cwtl pushfq or mov jge out cltd mov mov jno (bad) and in repz and jno push cmc cmpsb and (bad) shrl ja mov out adc leaveq xchg cs repz jo jmpq cmp rex.RXB mov mov cmp rex.WB sarb pop (bad) movabs rex rex.RXB (bad) jl add add (bad) push jge int (bad) mov jrcxz callq stc test cmp jmpq jmpq callq jmpq callq shl test mov bt stc cmp cmc test jmpq out (bad) xchg and scas lods sbb sub orb movsb cwtl and mov jne loope cmc rcrb sti leaveq xchg retq jmpq lods (bad) mov outsb rex.WB pop nop jnp sbb out fmuls (bad) es (bad) movabs cmpsb lret adc mov jg mov (bad) shlb sbb test mov add jmpq add jmpq callq cmc cmc cmp jmpq jmpq jmpq callq jne nop jmpq mov mov movsbw jmpq jmpq jb clc cmpb movsbl jmpq pushq jmpq xchg jmpq jmpq jmpq jmpq dec inc mov cmc cmc test jmpq jmpq movsbq movzbw mov jmpq callq btc (bad) cmc mov jmpq jmpq jne cmp and movzwl adc mov bt cmp xor jmpq movabs bswap movzbw lea movzbw lea jmpq je clc stc cmp jmpq jmpq rcl stc mov setae mov jmpq mov jmpq je bts movsbw mov jmpq jmpq jmpq bt jmpq and bt cmp jmpq je js bt test cmp jmpq jb jmpq jne setge lea jmpq je jmpq jmpq je cmc cmc cmp jmpq jmpq jmpq je dec or not cmc test lea movzbl rcl bt sub add rcl bts movzbw repnz movsbl mov movsbw bswap mov lea movsbw not jmpq je cmc mov adc cmc inc rol mov cmc or ror mov test add jmpq jmpq nop jmpq callq cmc test cmp cmp jmpq mov not setne setnp movzwl jmpq stc cmp jmpq je rcl rol mov stc test jl je bt cmp jmpq callq movsbw bswap adc mov cmc test stc test jmpq jmpq jmpq jmpq jmpq callq bsr mov lea shl cmpq jl movzbl movsbw mov jmpq jae pushq jmpq xchg jle nop jmpq jne sub mov cmc cmp movsbw bts mov rol shr sbb mov jmpq jmpq jne jmpq jmpq jmpq callq not setge xchg not mov seta not setp mov jmpq pushq jmpq mov jmpq add callq in (bad) sbb fsubr mov (bad) sub out jne lahf xchg xor (bad) rex.WR jg mov (bad) in callq xchg mov xchg and outsl pop punpcklwd (bad) sub jb mov push (bad) popfq fsts mov insl cltd push sub gs jbe xchg adc cmp mov adc adc js bswap lea mov mov lea bswap lea bswap mov lea lea lea not mov jmpq lea lea lea movzbl mov lea movzbq mov jle lea jmpq jmpq js mov movsbw mov jmpq callq movzbw bsf cmp inc mov clc test jmpq jmpq je ror neg (bad) repnz mov movzbl movsbw xchg mov and mov stc jmpq callq mov jmpq jne stc cmpq je je xchg lea xchg setns lea lea setne mov jmpq jmpq xchg not jmpq jmpq jmpq and movabs (bad) jo pop imul rex.W fwait rex.RB clc iret movsb and cmp rex.W stos mov lods mov retq lea (bad) in repnz xchg sbb test rex.RB addr32 cmpsb sbb sar ds imull repz loopne lods xor (bad) repnz movslq sub rolb lea or fs cwtl sti int3 sti sub sub sbb (bad) xchg idivb push (bad) (bad) xchg (bad) jmp adc leaveq fwait (bad) sti rex.WXB retq sub leaveq es jae movabs mov add insl jae xor movabs adc sub xchg pop sub cmpsb lret movsb int3 jrcxz int lock mov jmpq adc sub bswap movzbw movsbw seta mov jmpq callq clc cmp mov jmpq jmpq je jmpq callq cmc cmc test jmpq jmpq jmpq add jmpq je shl movabs xadd lea data16 repnz setl lea lea lea mov jmpq bt cmp jmpq mov movzbw movzbw mov jmpq jb jmpq jmpq jmpq stc test jmpq jmpq lea jmpq pushq jmpq jne setnp movzbw mov jmpq je shl sub xadd shl sub lea bswap xchg lea movzbw not jmpq pushq jmpq movzbw lea jmpq mov not lea jmpq pushq jmpq jne shrd dec btc mov bt jmpq xchg test cmc test jmpq mov movsbq lea mov jmpq je or bswap test inc mov shld lea mov sete mov clc data16 lock neg rcr mov jmpq callq stc jmpq jmpq jmpq add cmc cmc add movzbw movsbw mov jmpq cmp jmpq je jmpq movsbw mov jmpq callq stc test sub jmpq jmpq jmpq callq bsr sub mov mov jmpq clc sub jmpq je xadd movsbw xchg mov xadd adc mov xor mov btc rol mov stc add cmc bts mov cmp jae add cmp mov cmc test add jmpq je test cmc cmp jmpq jmpq callq movzbw bswap bswap mov jmpq je xor stc mov btr cmp mov dec lea cmc jle cmp jmpq jmpq bt test jmpq jmpq je test clc test cmp jmpq cmc stc test jmpq dec ror mov test bt test jmpq jmpq setbe mov jmpq jmpq cmp cmp jmpq nop jmpq movl jmpq callq and lea stc test test jmpq jmpq add jmpq callq bswap inc sub mov mov cmp test test jmpq jne test xor or movzbl dec movzwl adc dec (bad) icebp shl mov bts rcr shl bts xadd neg lea shr shld mov jmpq callq rcl movsbw shld mov mov test bt stc test cmp jmpq jmpq movsbw setae mov mov jmpq je clc jmpq jmpq js mov bswap bswap lea mov jmpq je neg and mov cmp dec rol mov lea mov rcl mov stc jmpq jmpq jmpq jmpq callq cmc jmpq je jmpq test jmpq mov setne bswap mov jmpq je jmpq jmpq nop jmpq jmpq movzbw not lea jmpq jne stc not mov xchg mov stc lea mov stc jmpq jmpq nop jmpq je jmpq add cmp add jmpq jne bt cmp jmpq jmpq jmpq callq stc clc cmp test cmp jmpq jmpq cmc clc add test stc add bt bt test jmpq jmpq jmpq je cmc xor jmpq mov jmpq je clc sbb rcr mov bt inc cmp inc mov movsbl mov jmpq je add add movzbl sub mov jmpq callq clc jmpq cmpl jmpq je jmpq jmpq callq add jmpq jns mov mov jmpq callq bsr mov adc adc bsr xor shr or movsbq lea mov inc clc repnz bsf not shrd or btr xchg lea bswap rcr shl mov cmp cmp clc cmp xor jmpq callq and sar mov clc bt test jmpq je inc add sar lea mov cmc jmpq callq cmp bt stc cmc cmp jmpq jmpq callq lea rcr bts shrd sub jmpq callq movzbw setle mov mov movzbl jmpq nop jmpq jmpq callq cmp cmp cmp jmpq jmpq jb jmpq je (bad) lock int3 lea bts mov cmp test jmpq jmpq jmpq jmpq pushq jmpq callq add shrd mov jae cmp cmp jmpq je stc cmc cmc test mov bt clc cmpb jmpq je bswap movsbw movzbl mov jmpq jmpq callq not lea jmpq jmpq jmpq jmpq jmpq callq shrd rol setns rcl mov rcr xor clc dec or shr movzbw shrd mov xchg test repnz or clc shr setge not mov lea inc mov cmp jmpq jmpq jmpq jmpq jmpq test jmpq jmpq js mov clc stc clc test jmpq jmpq jmpq je movzbl not jmpq je je cmc cmpq jmpq movzbw mov mov lea movzbl lea mov jmpq incl jmpq jmpq je neg shr lea xadd jmpq movzbw mov jmpq lea jmpq callq clc cmp cmp jmpq jmpq jmpq jmpq jmpq bswap test btc mov stc add cmc add btr mov cmp bt cmc cmc add jmpq movzbq jmpq bt sub stc bt jmpq jmpq mov jns callq stc clc test cmp jmpq je mov mov cmc cmc jmpq callq add stc mov neg mov cmp cmc jmpq jmpq jmpq je clc clc add mov stc jmpq dec rcr mov cmp bt test test jmpq dec jmpq pushq jmpq jmpq add stc jmpq jmpq je btr jmpq pushq jmpq jmpq jmpq jmpq jmpq jne clc stc cmp cmpq jmpq jmpq nop jmpq jmpq jmpq jne bt cmpb jmpq callq btr dec clc movsbw mov rcr bsr dec mov cmc or jmpq callq cmc cmc cmc cmpq jmpq btr mov rcl not xadd mov clc mov test jmpq jmpq inc cmp clc cmc stc add stc jmpq jmpq jb pushq jmpq nop jmpq add callq test cmc mov clc test jmpq jmpq jmpq jne ror shl add jmpq jmpq callq bsf dec shl sub mov sub test stc cmpq lea setp bswap mov jmpq jmpq jmpq mov jmpq jmpq jne jmpq js bswap mov not mov jmpq jmpq callq xchg movzbw mov jmpq nop jmpq add movsbw mov jmpq je clc clc test cmp jmpq callq btc mov jp cmp bt test jmpq bswap movabs movzbl mov mov not movzbw mov mov lea mov jmpq jmpq mov jmpq callq bt and mov cmc jmpq callq sbb shl and dec lea bt jae bt test jmpq je jmpq jp je add mov stc clc test clc test jmpq test jmpq jmpq callq movsbw jmpq je neg or and bt mov rcl sub or mov test cmp bt test jmpq mov bswap movzbw bswap bswap mov jmpq js lea mov jmpq callq jmpq jmpq jmpq callq inc sbb rcr cmp mov cmp cmp test test jmpq movsbq lea lea movsbw not movzbl lea jmpq jmpq sub jmpq jmpq jmpq jmpq mov jmpq mov mov not mov jmpq jmpq rcr mov xchg ror test xor lea btc or clc mov btr repnz rcl btc stc btr not xor lea or mov test sub jmpq jmpq test jmpq jmpq callq jmpq xchg not mov jmpq callq bswap mov jmpq bt not mov stc test test test jmpq inc jmpq callq lea lea jmpq cmovns cmc clc test jmpq cmc clc bt test jmpq callq lea mov mov jmpq jmpq jmpq callq cmp stc add stc mov bt cmpl jg je stc cmc cmpq jmpq jmpq jmpq jbe je cmp jmpq clc cmp jmpq callq lea lea jmpq je test clc jmpq jmpq jmpq jmpq jmpq jb btc bt xor shl mov bsr shrd btr mov btr mov xadd mov cmc cmc lea ror stc stc lea xor rcl bswap shl add test rol rcl rcr mov shr cmp mov mov bswap dec add bt jmpq cmc or jmpq jmpq mov setge bswap mov jmpq cmp cmc mov cmp test jmpq pop sub ja (bad) xor out pop loope push hlt outsl xor rex.WX jno std movslq testl xchg in sar leaveq lods rcll xor mov sbb mov (bad) iret and rex.B or lret and out rex.B rex.XB std jae sub add int fidivr ror mov jmpq callq not shld lea jmpq jmpq jmpq jmpq test jmpq jmpq callq bt add bt cmc test mov bt cmp cmpl jmpq jmpq callq sbb btr bsf lea xor bswap mov jmpq mov jmpq jmpq je clc cmp sub jmpq lea jmpq je clc cmp jmpq stc jmpq jmpq jmpq jmpq mov jmpq inc test cmc bt test add cmp cmp cmp jmpq callq clc test cmc cmp test jmpq callq or inc ror mov jmpq mov sar shld mov clc test mov cmp bt cmpb jmpq callq setb or movzbq bsr mov jmpq movsbw mov and and xchg shl mov shl neg mov rol sub mov cmc bt clc clc test jmpq jb jmpq mov cmc clc test jmpq jne stc cmp cmc bt test jmpq jb rcr mov clc inc rcr mov adc bsr or mov cmc mov cmp lea add and or lea btc test bswap add jmpq cmp jmpq stc test jmpq je jmpq cmp jmpq jmpq jmpq not bswap movsbw lea dec shrd sar jmpq callq jmpq cmc cmp jmpq jmpq jmpq cmp jmpq callq test cmp bt test jmpq callq rol clc clc sub mov jmpq mov lea jmpq data16 lock movzbl bt bt shl bt clc stc jmpq not setbe movsbl setle mov jmpq clc cmc bt mov adc dec mov jmpq jb xchg bswap jmpq mov jmpq cmovns cmc test jmpq jbe jns callq stc jmpq jmpq mov jmpq clc bt cmp jmpq je movsbw lea jmpq callq mov mov cmp sub btr mov cmpq mov lea mov jmpq stc cmp jmpq bswap mov jmpq callq cmp stc test jmpq mov mov mov jmpq callq test stc test jmpq jmpq mov lea lea mov movzbw mov jmpq callq jmpq jmpq movsbw lea jmpq jmpq je clc bt xor jmpq jmpq jmpq pushq jmpq add clc jmpq callq clc stc jmpq callq btc mov bsf cmc mov jmpq jmpq jne bsr mov clc jmpq jmpq jmpq jmpq pushq jmpq jmpq callq test cmp jmpq test test jmpq jmpq bswap mov movzbw jmpq callq cmp test jmpq cmp jmpq mov jmpq jmpq cmp test jmpq test jmpq nop jmpq callq mov cmc btc clc mov shl cmc cmp sub movsbw movzbl xchg xchg mov jmpq not movzbw dec not movzbw dec bsr mov stc test jmpq jmpq je jmpq jmpq jne test testb jmpq mov setns movzwl jmpq bswap lea dec not bswap dec movzbl bswap dec sub dec mov dec mov clc clc test jmpq jmpq jmpq jo callq bts mov bt stc cmp bt mov test stc movl jmpq callq setle dec mov cmp test cmp test jmpq jne adc clc xchg mov bsr movzbw mov shld clc bts xchg mov sub adc shl add rol btr add lea cmc data16 icebp or lods loope sbb mov jmpq jbe jmpq test bt cmc test jmpq je jmpq jmpq jg bt cmc cmpl jmpq bt cmc test jmpq bt bt cmc xor cmp jmpq test jmpq mov lea jmpq jmpq jmpq jmpq cmp jmpq pushq jmpq js setp jmpq jmpq callq jmpq cmp jmpq jmpq jmpq je stc clc cmp jmpq jmpq je cmc cmp clc bt cmp jmpq callq lea jmpq mov jmpq je rol lea test add mov test cmp xor jmpq jae mov setp bswap movzbl jmpq bt mov cmp cmp cmpw jmpq setae inc mov mov bswap mov bswap dec movsbw lea movzbl jmpq lea mov jp je setno mov jmpq jmpq jmpq jmpq mov jmpq jmpq jmpq mov jmpq jmpq mov not movsbw mov jmpq test jmpq jmpq test jmpq bswap mov mov jmpq inc cmc clc clc clc add cmc jmpq je xchg mov stc sbb mov movsbw rcl mov lea bt cmc stc cmp jmpq je rcr shl mov mov jmpq mov jmpq jmpq callq bt test cmc cmp jmpq movsbw mov jmpq callq jmpq add test jmpq callq jmpq bswap movzbw mov jmpq clc bt test jmpq bt test jmpq cmp sub jmpq callq stc test jmpq jns sets movsbw lea not mov jmpq jmpq callq test xor jmpq lea bswap mov movzbw nop lea movzbw xchg movsbw mov jmpq je jmpq je sub shld sub xchg lea not movzbw bswap mov movsbq movzbw movsbw movsbq mov bswap mov movsbq mov jmpq je jmpq nop jmpq jmpq jb cmp bt cmp jmpq jmpq je clc cmp jmpq stc clc jmpq je shrd xchg mov bswap dec mov btr btc mov lea cmc cmp jmpq cmc mov shl mov jmpq jmpq jmpq mov jmpq not btc rcl cmpb bswap xchg not mov lea bswap setae lea movzwl bswap seto mov mov movsbw setno movzbw not mov jmpq jmpq jmpq je shld mov shld not mov neg rcr bsf mov or rol not sub movsbw mov jmpq je movzbw bswap xchg mov not mov movsbw movsbw movzbq not mov not jmpq mov jmpq jno callq ror sar jmpq cmc clc stc mov clc bts sbb mov bt bt clc xchg bt js cmp cmp jmpq cmp jmpq je jmpq callq cmp test jmpq jne jmpq callq bt stc clc test test jmpq movzbw movzbw movzwl movzbl bswap mov movsbw mov movzbw mov movzbw bswap mov jmpq jmpq jmpq jmpq jmpq je jmpq jl pushq jmpq js clc bt test test jmpq mov jmpq clc jmpq mov not jmpq bswap mov jmpq callq test clc test jmpq je test cmpw jmpq jmpq jmpq jmpq jmpq jb jmpq callq cmp clc cmp jmpq jmpq jmpq jmpq jmpq jae jmpq callq add movsbw and mov clc stc test jmpq bswap bswap mov jmpq callq xor rex.WB hlt data16 hlt or bt test jmpq je jmpq je not mov movsbw not xchg movsbl setle bswap mov jmpq jmpq movl jno callq stc test cmc cmc test jae jns jmpq je xchg setae mov mov movsbl lea lea not mov jmpq cmp jmpq je jmpq jmpq jmpq nop jmpq callq rcr bsf and neg mov rcl dec bt sub sete mov movsbw mov bswap movsbw mov jmpq jne stc xadd btr shrd mov movsbw bswap ror cmp mov test bt cmp add jmpq je jmpq bswap lea not movsbw mov bswap movzbw mov movsbw mov jmpq callq jmpq mov jmpq jmpq jmpq je jmpq je adc lea neg xor bsf sub sub mov movsbw movzbw jmpq callq test clc cmp test test jmpq jmpq je jmpq sub jmpq callq clc clc test jmpq callq jmpq je je jmpq jb cmp stc test cmc cmp jmpq jmpq jne neg ror lea lea mov jmpq mov movzbl movzbw mov jmpq jmpq je add sar btr sub movsbw mov jmpq je lea mov sar shr dec bt mov bsr dec neg mov movsbw btc mov cmc cmp cmp stc add bswap btc mov stc test test add bts and movsbw mov cmc clc test test add cmc cmp add neg rcr mov cmp cmc jmpq pushq jmpq jne jmpq cmc sub cmp cmc cmc xchg jmpq xchg seto movzbw bswap mov jmpq jne add and jmpq callq adc adc mov stc js cmp test test jmpq je jmpq callq jmpq je clc cmp jmpq callq jmpq mov jmpq mov mov mov jmpq xchg jmpq ja mov jmpq callq jmpq jmpq pushq jmpq jmpq movzbl mov jmpq jmpq mov jmpq je mov shrd add bswap sub setne setns not mov jmpq jmpq jmpq jmpq setns jmpq jmpq test jmpq cmp sub jmpq jmpq je and cmp ror mov cmp test jmpq jmpq cmp jmpq jmpq jne not bswap bsf mov bsr neg movsbl btc movzwl cmp cmp jmpq jmpq je stc sub jmpq jmpq jmpq inc jmpq cmp mov cmc cmp jmpq je cmp btc rol stc sub movzbw setns mov mov jmpq callq clc test test jmpq bswap mov bswap movzbw jmpq callq stc inc dec sub xor jmpq je bswap mov mov jmpq outsb sbb (bad) jle rex.X mov lret mov fidivrl mov imul ljmp fistp shlb fstl fs (bad) je movsl or out sbb cmp shlb fsts add pushq fidivl stos lock rex.WRXB xor mov (bad) (bad) stc loopne cs (bad) pavgb rex.W leaveq ds jne outsb adc sbbl push jne scas mov mov push popfq iret fldcw pop xlat (bad) outsl mov movsl rex.X jae movabs (bad) movsl mov sbb movsb xchg rex.WR mov xchg jo mov iret mov icebp pop xchg sub callq xchg push adc pop xor adc test fildl or rex.RXB jnp (bad) rex.WB jnp rex.WR cmpb scas adc jb gs loopne add jp jbe jle adc add cwtl push movsl lods jae xor enterq iret int test (bad) add lods mov (bad) rex.W retq jl (bad) (bad) rex.WXB std movabs int3 push enterq add rol retq (bad) outsl rex.RX sbb cmp test repz or mov jne add enterq and in ljmp mov and iret xchg in cmpsl movabs jl cmpsb shrl fiadd jno (bad) pop fisub sar (bad) pushq mov callq in cmp sbb mov in pop fcom cltd bnd movabs leaveq (bad) cmp rex.R sti andb stos mov (bad) sbb movsb int (bad) test mov test or add cmp jmpq pushq jmpq mov jmpq jmpq jmpq jmpq jmpq callq cmp cmp cmp test jmpq callq lea movsbw lea lea jmpq test jmpq jmpq jmpq jne mov rcl mov data16 lock lock rol mov jmpq mov bswap mov jmpq callq not rcl bsf movsbl mov cmp test cmp sub jmpq sub shrd lea test ja cmp jmpq jmpq mov bt clc clc stc test jmpq bt clc stc cmp jmpq jmpq jb movzbw jg dec shl shld mov inc xchg xor or movzbw dec rol mov bsr shl bsr xchg adc rcl xor shl clc mov inc repnz jmpq jmpq jmpq je not not movzbw mov jmpq test test jmpq lea jo callq movsbw clc rcl btr mov clc test test jmpq jmpq jmpq bswap mov lea jle mov jmpq test test jmpq jmpq callq jmpq je je adc add shl sub movsbq movzbl seta bswap mov jmpq je bsf test lea mov rol bts shld bswap mov bt btr shrd lea cmc clc test jmpq rcll lods sbb mov repz nop ja sub adc (bad) sbb nop lret cld add pushfq int3 jo jl (bad) mov xchg or rex.WRX callq push sbb (bad) jns rex cs scas add loop out mov sub sti movb cmpsb or and push test leaveq (bad) cmp rex.R fwait (bad) mov push (bad) or adc and out scas callq cmp cld je rex.B (bad) rex.RB jl callq clc cmp bt cmpl jmpq test jmpq jbe jmpq jmpq jmpq jmpq mov jmpq jmpq je bts not data16 repnz mov and (bad) icebp xchg mov lea movsbw add btc mov bsf data16 lock stc bt clc clc add jmpq callq cmc and cmc cmc cmp jmpq je mov inc test sbb mov jmpq callq jbe mov movsbl mov bswap mov movzbl mov jmpq je jmpq jmpq callq jmpq je stc lea lea sub not setne bswap movsbw mov jmpq jb jmpq bswap movsbq lea jmpq jmpq jmpq jmpq jmpq repnz inc bswap mov bswap not not inc lea movsbw dec btc bswap cmc stc mov test jmpq jb inc xor cmpb xchg bswap movzbw xchg mov movzbl seto not seto movzwl jmpq jnp pushq jmpq jne stc cmp jmpq mov mov jmpq setno sub lea bt mov bts or sub bswap movzbw not lea jmpq test jmpq mov jg callq rcr movzbw ror (bad) icebp (bad) mov cmp jmpq jmpq callq test cmc cmp jmpq jmpq callq cmc stc mov bt cmp jmpq jne bsr sub mov mov (bad) repnz xor xchg (bad) testb xor mov btc btc adc stc sub not lea lea jmpq jmpq jmpq je cmc sub jp callq setle movzbw mov movzbw movsbw lea mov jmpq callq jmpq setne mov movzbl not not bswap mov lea bswap setnp bswap lea bswap mov mov jmpq je bsr mov shrd xor dec mov inc rcr bt xor lea stc cmc cmp stc cmp jmpq je sar test mov cmc clc test jmpq jmpq callq jmpq movsbl mov bswap adc ror rcl xor lea lea not mov jmpq jmpq bt test jmpq pushq jmpq jmpq add or mov cmc cmp add setno movzbw mov jmpq je bswap test mov clc clc test jmpq je stc shrd movzbl lea rol lea xor mov movsbl not mov jmpq jmpq jmpq mov sbb btr rcl movzbq mov movzbw rol and mov jmpq callq bt jmpq pushq jmpq jmpq clc cmp jmpq setge mov setl mov jmpq je cmc mov sar mov test lea setb data16 icebp mov cmp cmp cmc add jmpq jmpq je not bswap mov lea setne mov bswap mov lea mov jmpq xchg xor add sub xadd sub movzbw shr mov mov repnz lea inc not not movzbl dec lea sub mov jmpq callq jmpq mov seta not movzbl jmpq shrl (bad) mov rex mov rex.R rex.WRXB retq rex.WXB mov xchg xor mov pop outsb fisubl rex.R movabs sbb test rex.WRX divl sub (bad) rclb shlb mov fild sti (bad) rex.B lock fild jle mov (bad) in add add jl icebp cmp popfq xchg in mov cs cmp (bad) mov xchg fcoml xchg pop sbb or cmp je bswap mov jmpq callq movzbw mov movzbq lea lea jmpq callq jmpq jmpq je not mov mov mov jmpq jmpq jmpq callq movsbq mov mov jmpq mov jmpq add je shrd sbb shld mov bt ror cmc mov stc cmp sar lea sub movzbl not movsbw lea jmpq jmpq callq bswap lea jmpq mov jmpq cmp stc cmp test jmpq callq jmpq add jmpq cmp jmpq jmpq add cmc cmp jmpq bt test test jmpq jbe mov mov sete shl add rex.W repz cmp stc cmp js jne xor rol adc mov test cmc stc jmpq callq sub rcl jmpq jmpq callq sar neg shr bts mov clc mov clc clc movl cmp jmpq callq cmp movzbw mov jmpq jmpq stc cmc jmpq callq rol mov jmpq mov jmpq callq bswap mov jmpq mov lea mov jmpq jmpq stc test jmpq lea jmpq jmpq jmpq callq shl (bad) hlt add mov dec cmp btr bswap mov movsbw test sbb rol mov rcr clc or mov cmp test not shr mov rex.B lock rolb movabs mov cmp stc bt test jmpq cmp add rex.W out sub loop mov cli xor mov pop or rex cmp mov cli mov (bad) add add add add test outsb add btr (bad) hlt shrd mov bt jmpq callq btr sub dec bswap mov jmpq cmp jmpq mov jmpq callq jmpq callq cmp test jmpq je clc cmc cmc cmp jmpq jmpq mov lea jb mov jmpq jmpq callq bsf xor movsbw mov mov jmpq xor jmpq callq mov mov mov movzbw mov jmpq jmpq sub bt test xchg cmp cmc test test jmpq callq jmpq callq not not lea jmpq je jmpq cmc test jmpq jmpq jmpq je shr dec inc add xor bswap lea sets movsbl mov jmpq jmpq jmpq je bt cmc clc cmc cmp jmpq add bt jmpq jne jmpq je shld btr mov xchg add jl stc mov cmc dec not mov dec add bswap sets shl shrd mov stc jmpq callq seto bswap lea mov jmpq lea mov jmpq callq shld btc movsbl mov clc jmpq jmpq jmpq sub jmpq test cmp jmpq jmpq jmpq jmpq jmpq callq jmpq add je rcl lea dec sar mov stc xor not mov jmpq jmpq not xchg not mov not jmpq not bswap mov lea mov jmpq callq jmpq jmpq not mov mov jmpq jmpq mov lods rex.WRB movslq adc mov mov mov movslq retq push xchg test mov fnstsw mov (bad) mov (bad) or mov rex.WRXB rex rex.WRXB xchg mov jbe pushfq (bad) cld (bad) sub rex.WRB cmp mov cli cwtl mov callq (bad) movb movabs movabs and rex.WB rex.RX rex.WRB (bad) insl retq sub (bad) icebp xor or mov rex.R mov add xor jmpq callq rol bsr lea test jae cmc test jmpq test jmpq jb cmc cmp jmpq jmpq jmpq or or cmc sub not movsbw lea mov jmpq jmpq jmpq jb jmpq jmpq test bt sub cmp cmc bt add jmpq je not jmpq js mov setp mov lea not lea lea not movzbl not not lea lea lea movzbw lea jmpq je bt test ja je movsbw lea lea jp mov not mov movzbl jmpq je cmp stc cmpw jmpq jne bsr btr sar mov shld ror test add mov stc lea test add movzbw mov jmpq lea lea jmpq je rol bsf jmpq callq ror mov bt test jmpq jmpq callq movzbl not movsbl mov lea jmpq callq jmpq jmpq jge callq clc bt test jge je clc bt cmc cmp jmpq jmpq pushq jmpq jne bt sub test jmpq callq stc clc cmp jmpq jbe lea jmpq callq jmpq callq inc movsbw shl neg mov cmc bt test jmpq lea mov jmpq and cmc clc cmp jmpq jmpq mov rol movzwl cmc mov movsbw jg movzbl cmp cmc test bt mov sar and movzwl test mov clc stc adc mov cmc bt cmp clc mov sbb movzbl test mov shr mov bt mov cmp mov shld adc movzbl stc mov shrd sub ror movsbw movzbl stc mov dec btr mov jmpq mov movzbw mov jmpq jmpq jmpq not mov jmpq movzbw mov jmpq je movsbl setbe sete lea jmpq jae jmpq callq clc not adc not mov stc test jmpq je xor xor setbe mov jmpq callq bswap jmpq callq and btc mov clc stc cmc clc test jmpq mov jmpq test cmp cmpq jmpq jmpq jmpq callq neg shld shrd movsbw lea clc clc test jmpq test test jmpq jmpq callq setbe test stc movzbl bswap and je shrd mov jmpq je test jmpq je clc stc clc cmp jmpq callq bt cmc cmp jmpq pop xor lahf sub lret in loope std lret repz rex.WX rex.WR (bad) fidivl in fldz lea lods jmp mov rex.R add out fildl push adc es cmpsl xchg rex.R sub mov rex.W popfq sarl (bad) lea mov fs cs in rex.R sub (bad) int mov addr32 popfq xchg jmp cmp scas addl rex.WRXB test lods fldl jne xor xor push jo lods out fcomp mov fist and cmpsl xchg add (bad) nop in or adc jp outsl imull rex.R (bad) rorb push mov int3 repnz (bad) in pop mov lret mov jrcxz hlt pop (bad) sub imull cmc jno fwait loop sub test push mov movabs nop mov (bad) (bad) adc xchg (bad) gs insb or sbb (bad) (bad) pop movabs adc test cmpsl loop fdivrl add (bad) cli stc mov repnz mov sub mov test incl xchg movsb lods or orl pop push pop rex.WB xchg mov mull and rex.RXB gs or outsl jge rex.B (bad) gs imul lahf rorb movabs or adc sbb enterq and adc test and sbb (bad) (bad) icebp (bad) mov sahf jrcxz test fdivp cmpsl loopne jge movabs sti push idivl add push push and pop and jle insl shrb mov cmp push ds adc in xor rex.WRXB adc mov xor add (bad) fsubrl (bad) jmpq and ss (bad) mov (bad) adc adc xor ja rex.WXB sub jb leaveq fnop stos rex.WB xorb cs and out jg lcall adc rex.RX jle (bad) sbb shl mov js sub mov (bad) retq xchg std imul pop jno enterq rex.WXB xchg push out pop or in jb outsl cld xchg imul add mov movabs xchg mov (bad) rex.WXB or pop in adc (bad) xor repz (bad) jmpq and mov or adc mov jae xor out imul lret mov enterq leaveq rex.WRX mov rex.R (bad) callq icebp rex.WX (bad) mov push sbb in test sbb add cmp push sbb or mov rex.X (bad) orl add leaveq mov jmpq je jmpq jmpq pushq jmpq movzbl movzbw mov movsbq mov movzbw mov jmpq jmpq callq xchg mov mov bswap mov movzbl bswap jmpq lea movzbl lea mov jmpq jmpq jmpq je jmpq callq mov lea movsbw lea jmpq nop jmpq je bt cmc sub jmpq test add cmp stc bt clc add lea mov jmpq xor mov cmc stc add clc bt clc cmp cmp jmpq callq movzbl mov clc clc jmpq callq jmpq jmpq callq bt cmp clc cmp jmpq pushq jmpq jmpq cmc stc test test jmpq callq movsbw lea not mov mov xchg jmpq je sub shrd setg lea rcl test sub not lea movsbw lea mov jne mov mov mov jmpq callq sbb sbb adc mov jmpq movl jmpq jmpq pushq jmpq (bad) jl sub sub rex.WRB rex.RXB stos mov (bad) cmp je loope sub movabs mov or rex.WRB test in (bad) fiadd xor (bad) cmpsl stos (bad) idivl (bad) cmc and (bad) sub xchg sti (bad) (bad) cld and mov js leaveq loope mov adc sub rex.WRB rex.WRX retq mov rex.WX (bad) pop cmc jnp hlt mov cmp (bad) add mov fld ror stos (bad) fcomps xchg mov clc bsf lea rcl mov test shld shld movsbl mov clc add jmpq mov jmpq je jmpq jb cmp lea cmc test sub jmpq bt test test jmpq je cmp lea bt bt clc sub jmpq callq movsbw ror sub inc not jmpq jb movzbq xadd rcr cmpb jmpq je sar not inc lea (bad) imulb leaveq mov mov jmpq jmpq jmpq mov jmpq je stc clc cmp jmpq test test jmpq callq bt stc cmc test jmpq jmpq xchg setae mov mov not bswap mov movzbw jmpq jmpq jmpq je cmc cmc clc jmpq jns setns mov mov jmpq test jmpq jmpq jmpq cmpl jmpq js bswap mov movsbl mov mov movzbw bswap movsbw lea lea not bswap lea setp jmpq jne bt cmp stc test testb jmpq callq sbb mov cmp test jmpq add fnop cmp (bad) xchg iret fldl add add cmp jmpq jg pushq jmpq jmpq je bswap ror rcr or sub setnp lea xchg movabs xchg setg mov jmpq jmpq callq bt clc cmp test cmp jmpq jmpq jmpq jmpq jmpq dec jmpq je bt sub setp lea xchg jmpq callq movzbw xor sub rex.W (bad) mov cmp test stc test jmpq jmpq movb clc jmpq jmpq callq clc bt jmpq jmpq jmpq jne bsr xchg jmpq callq jmpq mov movzbw not movzbw mov jmpq je stc shr dec lea test sub bswap lea movsbw mov jmpq mov lea movzbl not seto mov jp mov jmpq jmpq callq cmc cmc cmp jmpq jmpq mov mov movsbq setg movzwl movsbw movzbw lea not mov lea mov jmpq mov jmpq lea jmpq je cmc mov stc stc cmc cmpb jmpq je not xchg movsbw mov not bswap bswap xchg setge mov jmpq je jmpq jmpq jmpq jmpq jmpq mov bswap mov jmpq test test jmpq callq clc clc clc cmpb je je rol neg btr shl mov jmpq jmpq setne lea jmpq callq bt and cmp cmp jmpq test cmp jmpq jmpq callq bsf shr movsbl lea clc jmpq jmpq callq movsbl lea movsbl jmpq je jmpq jmpq jns mov bswap dec mov jmpq movsbl setne mov jmpq mov jmpq je mov mov jmpq mov movsbl bswap movsbw jmpq mov mov movsbw bswap mov jmpq callq adc bsf mov test clc stc cmp sub jmpq add cmp cmp bt test add lea jmpq jmpq jmpq cmp jmpq jmpq jmpq movsbw movzbl not lea lea jmpq jne lea mov jmpq jmpq jl callq jmpq jmpq jmpq mov jmpq cmpb jmpq add bsf (bad) cmc mov bt test cmc bt add shld inc inc not mov clc jmpq jne clc cmc bt cmpq jmpq je cmp clc cmpl jmpq je setg lea movzbl mov sets movzbw xchg lea bswap mov jmpq rcl lea adc shr add clc lea stc cmp cmp sub jmpq je shld mov neg mov jmpq mov jmpq test jmpq clc cmc add stc mov clc cmp bt mov test add jmpq jmpq movzbl jmpq jne inc adc xor mov cmp neg shld movzwl clc stc cmp jmpq je jmpq xor not setne jmpq ja je test mov sub bsf mov movsbw xadd mov mov (bad) icebp rcr shld xor setb mov jmpq callq jmpq add jmpq je test jmpq jmpq callq clc bt cmp mov clc clc test jmpq je bt bswap movsbw xor setae movsbl movzbw movsbw mov jmpq jne test mov xadd sub test and mov test mov xadd add and ror add adc xchg lea sbb add rcl mov stc clc test clc add cmp test jmpq xor bswap movsbq bswap not mov jmpq jne jmpq callq cmc and jmpq jmpq mov sar adc movsbw sub mov clc cmc clc cmp mov bsr rcr shrd btc mov cmc stc jmpq jne bt bt cmp jmpq mov clc movzbl jmpq jmpq test jmpq callq not not movzbw setbe mov lea mov lea setae mov jmpq jmpq movl movzbl movzbl bswap lea movl setge xchg bswap movzbw lea jmpq jmpq callq stc test clc test jmpq callq not mov movzbw not movzbw mov jmpq je or rex.WB lock test mov test stc test jmpq je cmp test stc cmc cmp jmpq jmpq je jmpq je bt stc test cmc cmp jmpq je and sub not setg mov jmpq jmpq callq test xor jmpq jmpq shld rcl not mov btr mov repnz dec dec not movzbw not movsbl dec lea dec cmp shld mov jmpq callq cmp cmc cmp test test jmpq jmpq jmpq lea mov lea jmpq not movsbw dec dec bsf jmpq jmpq jmpq mov jmpq callq rol mov cmp bt bt test jo je cmc test stc cmp jno je jmpq pushq jmpq callq cmp stc bt cmp cmp jmpq jb mov incl not movzbw jmpq mov not movzbw mov jmpq je rol xor lea and stc xadd xor mov jmpq jmpq je jne stc test bt cmc test jmpq callq adc mov clc test test jmpq je btr btc bt cmp xor movzbl mov jmpq jmpq mov bswap not movzwl not mov lea mov jmpq callq jmpq jmpq jb bts movsbw cmp lea mov or sub lea bswap jmpq je not xchg lea xchg mov bswap xchg mov movsbl mov mov jmpq jge callq jmpq jmpq mov setl btc mov stc clc mov bsf and inc bsr mov cmp clc stc cmp xchg test cmp jmpq jmpq je callq bt jmpq jmpq jb clc jmpq je test cmc sub jmpq je cmp stc cmpq jmpq mov jmpq jmpq movl jmpq jmpq movzbl mov mov jmpq jmpq movb cmp cmpb jge je movsbl shld mov jmpq je inc ror rcl shr mov cmc test jmpq jne sbb mov adc mov clc test bt add jmpq je jmpq jmpq jmpq bt jmpq jmpq test jmpq jmpq mov jmpq mov jmpq jmpq bswap movsbw setns mov mov mov jmpq je xchg test shl shr mov clc sub mov clc stc cmp cmp jmpq jmpq je cmp setle mov cmc setp clc mov sar test sbb xadd mov movsbw mov bt stc add jmpq movzbw movsbw lea jmpq jns not mov mov jmpq jmpq pushq jmpq je cmp jmpq incl jmpq cmp jmpq je add shr mov bt bt clc sub jle callq rcr mov mov cmp test jmpq test jo je rol sbb xor setnp movsbl not bswap mov jmpq callq stc cmp test jmpq jmpq jmpq bt cmp test jmpq callq movsbw dec mov clc cmp test jmpq jmpq cmp movl bt test mov cmc inc xor mov cmc bt cmp cmp mov test stc stc cmpb jmpq jmpq je jmpq jmpq test cmp adc (bad) scas pop or (bad) not (bad) gs mov ss movb rex.WRB ja fcmovnu out int3 sti push pushfq lret push pushq mov nop (bad) (bad) fmull test mov rex.WX roll sti cmp mov sbb out sbb sti leaveq icebp adc pop insb rex.WXB mov cltd xchg xlat sbb rex.RB (bad) sub mov or fs test or mov mov rex.WRB and (bad) sub add je cmp stc cmp jmpq callq movsbw movsbw lea jmpq jmpq je bts bsr rcr mov test test test jmpq movl jmpq callq jmpq pushq jmpq test jmpq mov data16 lock xchg mov mov ja cmc xadd btr add movsbl shld btr clc lea clc bsr add bts mov clc jmpq jmpq mov bswap jmpq je movsbw lea movzbl jmpq je test cmp jmpq je jmpq je inc mov cmc cmp bt test jnp je jmpq callq cmp cmc cmp test jmpq add clc test mov test cmc mov jmpq jne cmc clc test jmpq callq movzbw mov cmc stc sub jmpq je movsbw mov jmpq jmpq callq cmp cmc cmp stc test jmpq mov mov movabs mov jmpq jmpq jmpq bswap lea jmpq jmpq jmpq je setnp not lea lea jmpq bswap mov jmpq jge jne bt bt bt bt xor cmp xchg clc stc cmp stc test jmpq nop jmpq jmpq lea inc not bswap mov jmpq jmpq mov jmpq jmpq stc cmp test test add bt cmp jmpq jmpq jbe ror clc rcr mov add mov cmc stc sub test add cmp cmc cmp cmp add jmpq callq bsr or test cmc xor bsf movsbq mov bts repnz bswap not mov mov movzbw movsbl lea jmpq add nop jmpq jmpq stc cmp jmpq mov jmpq callq mov mov setns lea jmpq test jmpq jl je bt sub jmpq add add add add mov test pushw xor fildl mov rex.W jge sahf adc scas adc rex es cmp (bad) stos and mov scas out jo imull or (bad) rex.WXB mov scas jno (bad) push cmp loope enterq in mov jne rex.RB rolb (bad) int imul mov lahf lods iret and (bad) add je bsf cmc movsbw inc mov sub setne shl mov cmc jmpq jmpq and jne out lret (bad) mov pop sti sub rolb repz or add movslq movslq retq xchg mov movsl pushq (bad) (bad) icebp xor (bad) mov pop rex.WX cmpsl stos rex.WB xor movsb push test (bad) xchg sti retq add sbb shrl or in loopne leaveq clc adc add add (bad) mov pop (bad) pushq (bad) in xor hlt jl jge adc int mov (bad) movsb int xchg loop cmp (bad) callq sti mov xor mov bsf mov test bt clc add stc cmp clc cmp jmpq callq stc jmpq jmpq callq cmc test cmp jmpq jmpq jmpq jbe je jmpq jmpq jmpq jmpq jmpq jmpq jmpq bt cmc cmp clc cmp jmpq je movzbw bswap lea bswap xchg mov jmpq callq not movzbl shrd xor rcl cmc mov lea movzwl clc bt mov btc btr seto movzbl cmc bt cmc cmp mov shr bt or movzwl test stc test cmc mov ror rcl dec mov jmpq inc jmpq jmpq jmpq (bad) jg lret (bad) xchg mov test mov (bad) xchg sahf mov test cmp pop adc xchg xor add out adc and push or sbb je or jrcxz shlb or es sub mov and push shr push cltd std xchg adc mov pop add sub pop or cmc mov xlat cltd (bad) cmp test sub xlat jns retq addb lods (bad) fwait (bad) jp lods cmpl rex.WR xor mov fs fwait mull mov rex.W (bad) (bad) lods (bad) fs in lret notb adc outsb (bad) mov pop pop adc xchg mov sbb adc push out xchg or sti sub mov setns mov jmpq jmpq jmpq lea mov jmpq jmpq cmp xor jmpq callq stc btc clc xchg mov shr movzbl sub mov jmpq jmpq jmpq callq movsbl not jmpq jmpq jmpq jmpq jno test jmpq callq bt cmp jmpq jmpq jmpq jmpq jmpq jmpq callq jmpq setno xchg mov not mov lea mov jmpq jmpq movabs not lea dec jmpq callq adc mov jmpq callq bswap movzbw movsbl mov xchg mov lea mov bswap movzbw mov setbe mov jmpq jne cmc jmpq jmpq test test jmpq clc cmc test jmpq je cmc stc stc stc cmpl jmpq mov bsf bsf setle movzbl cmc mov cmp bswap movzwl cmp mov setae mov stc mov movsbw shrd lea movzbl bt cmc mov inc (bad) lock and mov bt stc stc bt mov rcr and movzbl clc mov (bad) hlt shld adc adc movzbl cmp mov sar mov stc mov sar bsr mov bsf mov test test test cmc xchg cmc cmc cmc jmpq jge jmpq callq dec lea cmp stc stc test jmpq callq cmp test jmpq movsbl jmpq clc cmp bt test jmpq je movsbl jmpq mov jmpq mov xor sar adc bts mov test cmp cmp cmp jmpq jmpq je cmp shrd clc cmc mov lea mov neg mov bswap jmpq mov movzbw movsbq setne movsbw mov lea mov jmpq mov jmpq jb seta setbe lea movsbw dec stc xchg xchg shl mov or or stc mov neg shl rcl xor bt bsr mov bsr shr neg repnz movsbw dec not movzbl dec shld cmc shr or mov cmc test test jmpq jmpq add not stc sbb setnp mov jmpq je sub or mov stc bt test jmpq je xchg movsbl lea setnp movsbl xchg lea mov lea lea jmpq callq stc sbb or mov clc cmc bt jmpq mov stc bt cmp test jmpq je test bt bt stc xor jmpq jmpq je cmc cmp jmpq cmp test jmpq mov movsbw movzbl jae mov jmpq je (bad) lock lea movzbw bsr adc sub jmpq callq movsbw movzbw mov bswap mov jmpq jmpq mov jmpq jmpq clc test cmp xor jmpq jmpq callq cmp bt cmp test jmpq je not xor bswap setae movzbl mov jmpq jmpq je jmpq jmpq callq mov movsbw mov mov mov not mov movzbl mov jmpq jmpq jmpq jb inc dec bsr rol mov shr btr adc or rcl btc xchg sar mov shrd bswap sub add xadd sub test sar shrd rcr mov shrd not adc repnz movzbl not lea bswap lea jmpq cmp jmpq jmpq callq cmc cmp jmpq jmpq add jmpq je btc mov and sar cmp btc mov clc test jmpq movzbl jmpq je cmc clc cmpl jmpq jne callq bt cmp jmpq not lea movzbw mov jmpq callq stc jmpq jmpq callq clc stc mov clc stc cmp test cmp jmpq cmp jmpq je jmpq je btc (bad) icebp (bad) xor jmpq jmpq callq shr jmpq jmpq movq jp callq jmpq cmc cmp jmpq movzbw mov jmpq callq not not movsbw jmpq je xchg rcr cmc mov adc btc sbb neg mov shl and not movzbw not mov jmpq callq bts add inc mov clc cmp bt test jmpq callq lea mov mov bswap sete mov jmpq jbe callq xadd xor mov xor or xor mov bt test jmpq callq bts sbb bsf mov clc xor jmpq bswap not movsbw mov jmpq jmpq lea rex.RX jb outsb in ficompl insb not add out mov (bad) data16 xchg (bad) sarb (bad) mov xor lock out or lret ss mov cmp rex.XB fs push pop (bad) mov lret fs xchg jle test or (bad) rclb rex.WX fldl cld int mov sbb push (bad) add jmpq jmpq callq cmp jle test jmpq cmc jmpq mov mov jmpq jmpq jbe jmpq test jmpq movsbl bswap mov jmpq jmpq jmpq callq test cmc test jmpq jmpq jmpq mov jmpq callq movzbq bswap mov cmp cmp cmc test jmpq jmpq rcr movsbq sub and data16 testl or mov data16 hlt jmpq je jmpq jmpq jge mov jmpq sub jmpq jmpq jmpq jmpq callq shr movsbw add sub lea mov mov dec movsbw movsbw mov jmpq jne shl inc movzwl movzbl bswap not mov clc bt cmc test xor jmpq jbe jmpq jmpq adc push adc std je movsb and sbb add je clc iret or cwtl (bad) (bad) jns xchg xor pop imul icebp rex.WXB icebp xchg (bad) jmpq fadd sti lret mov mov xor mov rex lock movabs mov mov jo movslq (bad) insb lock jbe fstl xchg cmpsb push pop jmpq je dec btc neg neg mov (bad) lock bt cmp test cmc cmp jmpq jne stc cmpb jmpq je clc mov test bt bt stc test jmpq jmpq je not sbb and rcr or movsbw movzbw not rcr lea rcr sub adc rol shrd repnz setno mov movsbw mov not movsbl not not mov lea movzbw lea lea lea jmpq mov mov movsbl mov jmpq jmpq mov jmpq pushq jmpq callq not xor cmp ror mov shl mov or mov test xor jmpq callq cmp test jmpq callq not mov lea bswap bswap movsbl mov jmpq callq jmpq jae je adc add mov bswap dec add mov shrd movzbq xor movsbl mov bt cmc add xor and mov cmc bt bt stc add bt bt stc add jmpq je neg jmpq callq xchg sete mov bswap mov movzbw mov mov jmpq xchg movsbw mov movsbl lea mov jmpq jmpq mov jmpq je clc setl adc shrd xor jmpq lea movzbl setno not lea lea not mov jle movl jmpq jmpq jmpq jge mov ja nop jmpq jne ror movsbw or mov mov bsf mov shld bswap shr movsbl lea bswap inc or add movzbl movzbq mov jmpq jmpq jmpq jmpq jmpq jb lea dec rcr adc bsf sbb mov add sbb btr or bts sbb rex.B hlt or std mov movsbl add jmpq jmpq jmpq callq test bt clc test jmpq jmpq jmpq callq test cmc cmc bt test jmpq jb jmpq jmpq jmpq jmpq je not bswap mov jmpq je jmpq jmpq cmc bt cmc add cmp stc jmpq jmpq je jmpq pushq jmpq jmpq jmpq jmpq jmpq pushq jmpq callq clc test jmpq lea jmpq mov bswap mov jmpq jmpq jmpq jmpq callq dec mov cmc bt test jmpq nop jmpq inc cmp clc cmc add bt bt cmp jmpq jmpq bt jmpq jmpq jl je and movzbq jmpq je jmpq jmpq je lea setl setle lea xchg setnp sets mov movzbq movsbw mov jmpq bts stc rcr lea lea rcr rcr rol bswap not mov mov mov lea movsbw lea movsbw lea movzbw setb lea movzbw mov lea mov lea movzwl movzbw not setl mov mov jmpq jmpq callq cmp stc clc test jmpq jmpq mov bswap xchg movl bswap setne movzbl lea jmpq je jmpq jmpq jmpq je jmpq mov jmpq test jmpq callq cmp cmp cmp cmp test jmpq not setno mov jmpq callq rcr cmc rol movzbw mov rol clc sub bswap movzbq jmpq callq cmc test jmpq je bt clc cmpq jmpq and movntps fistp (bad) rex.RB mov jae push lret repz xor (bad) mov leaveq icebp (bad) repz (bad) js xchg push jrcxz xchg and rex loop jl punpcklwd xchg in and (bad) sbb ds test retq mov sbb (bad) lock mov (bad) jle rex rex.RX decl and rclb cmp jp or pushfq xchg jmp mov mov jg iret (bad) mov cmp sbb xchg cmp std jno sbb (bad) (bad) idivb mov cltd addr32 and scas decl rex.W xchg loopne (bad) out rex.RXB movsb mov add (bad) popfq faddl xor sub pop cld push movabs jbe push repnz (bad) movslq and (bad) jge (bad) (bad) mov callq jg rex.RB icebp (bad) outsl rex.WXB rex.B fldt mov (bad) add (bad) mov popfq (bad) add out (bad) xor or lods xor push in xor (bad) cmp test es or push pop push fsubrs xchg cmpsl xchg sub fnstcw xchg mov cltd mov jp or xor clc movabs cmc sub retq pop fcompl jno gs movabs (bad) sub test movsl jmp mov outsb retq adc adc rex.R xor adc sbb pushq mov or mov in test sbb cmp mov lock mov std (bad) lods rex.WRX es pushfq sbb rex.WRXB xor xchg or sbb pushq sub mov (bad) add test pop adc mov sub nop pop pushfq and and sub xchg mov leaveq jo cld pushq pushq (bad) (bad) movabs xchg popfq jne (bad) xlat es out jb js sahf xchg mov adc or xchg out (bad) leaveq pavgb sar or pop (bad) adc std movabs callq shrl add in clc (bad) lahf fsubrl lods xchg cmpsl icebp mov faddl xor push or (bad) sbb mov movabs lock add (bad) push (bad) push mov jmpq mov mov jmpq jmpq callq not jmpq callq shrd rcr sar jmpq jne neg mov setbe mov xor mov mov rcr movzbw movsbw add btr add lea shr rcr rcr mov bt test test test add jmpq jmpq jmpq je movzbw cmc mov stc stc mov adc shrd lea clc cmp jmpq jmpq mov jmpq mov jmpq stc cmp jmpq mov jmpq clc add clc cmp jmpq jmpq cmc cmp test xchg stc clc cmp test jmpq je btc add mov cmp shrd mov btc bt and movzbw movzbw jmpq jmpq cmc sub jmpq jmpq callq bt jmpq callq shld test rcr btr lea clc bt test jge test jbe je test jmpq jmpq callq movzbw mov not mov jmpq callq movsbw lea mov jmpq bt cmp add jmpq bt cmc test jmpq jmpq not mov jmpq jmpq mov js callq add movzbq ror dec lea jmpq jne bts dec movzbw mov jp test jmpq jmpq jmpq jmpq pushq jmpq dec btr bswap add lea jmpq jmpq jmpq callq setae or sub not jmpq jmpq je test cmpq jmpq jmpq jmpq jmpq callq stc cmp test jmpq jmpq jmpq callq inc mov jmpq callq or setns add mov cmc stc bts mov adc bsf sbb mov btr mov shr adc neg mov jmpq jmpq je movsbl lea movsbw mov mov mov jmpq jmpq je bt stc bt cmp jmpq callq shrd mov bt test test ja cmovne jmpq test jmpq jle je jmpq test sub jmpq jmpq jmpq add cmc clc jmpq lea jmpq bt cmc cmp jmpq jne not sets mov movzbw mov lea bswap xchg movzbl mov setns movsbw jmpq adc clc shl mov sub dec or mov and mov cmp clc add not mov sar neg mov test bt add dec mov jmpq jmpq jmpq mov jmpq mov and inc xor sub movzbw movsbw movzbw mov movzbw bswap mov jmpq movabs and (bad) mov pushq shrl rex.WRB ljmp cmp add add xchg stos jae jmpq adc getsec (bad) sti jae out rex.B or out jnp (bad) (bad) fstl iret (bad) rcrl adc jge fcoml movslq rex.WRX int js (bad) xlat js test xchg in (bad) (bad) jmpq cmp test cmp jmpq jmpq jmpq jmpq je sar mov lea lea shld dec xor xchg mov bswap movsbl movzbw not mov jmpq jb lea mov lea bswap dec adc bswap lea mov (bad) cmc sub or xor dec mov bsf ror bswap add shl neg ror xor btc bsf stc mov shr shld repnz movsbw bswap not bswap dec bswap bswap neg rcl mov test bt test jmpq jmpq jmpq callq lea lea not lea movzbw not lea jmpq js jmpq cmc cmc and cmp cmp jmpq test jmpq callq cmp cmp test jmpq jmpq jmpq jb lea movzbw dec bswap mov adc sbb sub or sbb sbb shr mov rol movzbl rcr dec add rcr bts sub shld mov xadd rol mov inc rex.WB hlt shld sar repnz not movsbw bswap dec not not dec adc btr mov bt test jmpq jmpq jmpq jne bswap mov jmpq test jmpq cmova jmpq jmpq not mov bswap lea lea jmpq jmpq clc stc add clc cmp jmpq movsbw mov jmpq jmpq movzbw lea lea mov jmpq jmpq jmpq jmpq callq jmpq add cmp add clc bt add cmc add cmc cmp jmpq bt xor jmpq jne btr mov cmp and mov jle mov sub not add rcr and adc xor lea lea rcl mov jmpq movsbq movsbw mov jmpq jmpq xchg jmpq cmp test jmpq je btr cmc sar mov btr xchg mov movzbw movzbw mov mov stc mov test jmpq jns movsbw movsbw lea seto mov jmpq cmp xor cmc xchg cmc test jmpq je clc test test test cmp jmpq jmpq mov jmpq je cmp sub bts ror mov seta mov stc dec mov jmpq jmpq jmpq callq cmp test jmpq nop jmpq cmc add test jmpq movsbw movzbw jmpq callq bt cmp clc test jmpq je setp mov btr mov shl xchg movzbl bswap mov (bad) icebp sbb add movzbw mov mov stc cmc test add jmpq jmpq callq stc cmc test stc test jmpq jne test cmc cmc jmpq je test bt mov bt bt test cmp cmpb jmpq jb jmpq je movzbw mov jmpq jmpq cmp cmp jmpq jmpq je dec mov mov bt cmc cmp test jmpq callq jmpq jmpq callq clc clc test jmpq jmpq jmpq jmpq jne not setle mov jmpq lea mov jmpq callq rol shl neg mov mov jmpq jmpq cmp jmpq callq cmc cmp jmpq callq cmp stc clc cmp jmpq cmc test jmpq je jmpq jne callq jmpq jmpq cmp mov stc test jmpq jmpq jmpq callq cmp cmp jmpq callq xchg mov setl setp jmpq jmpq mov cmc cmc test jmpq nop jmpq jmpq jmpq jmpq test cmc test jmpq jmpq je or mov clc cmc test test jmpq jne lea mov movsbw mov movsbw seto not setg mov jmpq jmpq dec jmpq jmpq jb bsr bts rcl inc mov bsr neg btc mov jmpq mov jmpq add jmpq callq test jmpq je inc xor setnp setbe lea xchg mov jp movzbq mov jmpq callq bsr dec mov cmp clc xchg bt stc clc test jmpq add add add pushq fimul js (bad) ss mov std push (bad) not mov lea mov jmpq jmpq mov movzbw not bswap jmpq je cmp data16 idiv (bad) mov movsbq mov rcl xor mov cmp cmp cmp jmpq jmpq jmpq callq clc test clc cmpq jmpq jb stc test cmc cmp jl jmpq jmpq jne inc cmc xadd mov jmpq clc add stc add jmpq jmpq jmpq jmpq jmpq jne jmpq je seto lea jmpq je jmpq callq setp xchg not jmpq pushq jmpq mov not movzbl jmpq cmp jmpq jmpq je movzbq mov cmc bswap (bad) icebp neg mov or and not movsbq mov movsbw mov jmpq callq stc cmc xor jmpq jmpq je cmc stc cmp jmpq add movsbw je movsbw movsbw mov jge callq movzbl js mov jmpq test jmpq mov jmpq jnp callq stc cmpb jmpq jmpq jmpq je xor not ror mov stc movsbl movsbw mov data16 icebp movsbq xor mov add movsbw test bsr sub not movsbw jmpq jmpq jmpq js mov movsbq mov jmpq callq cmc test jmpq callq test test jmpq jmpq je movsbw lea sets sets movsbl lea bswap jmpq jmpq bt cmc add jmpq nop jmpq jg mov jmpq je ror mov jmpq jmpq je cmp cmpl jmpq cmc stc mov clc clc test stc cmpw jmpq jne bswap jmpq callq cmc cmc cmp jmpq je jmpq jp pushq jmpq js movzbw bswap mov movsbw setno mov lea mov movsbl xchg lea movzbl mov lea jmpq jmpq jmpq jmpq jmpq callq (bad) hlt ror add sar mov cmc test jmpq jmpq je bt bt test cmpl jmpq callq adc mov cmp cmc jmpq jmpq mov mov jmpq jmpq jmpq callq seta bswap movzbw jmpq jbe mov jmpq jmpq jns je cmp bt stc cmp ja jne cmp cmp test jmpq jmpq jmpq jmpq jmpq test bt cmc mov jmpq pushq jmpq jmpq jmpq jb shr mov cmp movzbw mov stc stc mov test shl not mov add rcr inc lea shr ror (bad) repz lea shld bsf dec add add mov xadd bswap xor mov neg ror clc bswap add lea and mov cmc bsr mov jmpq xor jno callq movabs rcl add cmc mov clc stc cmc mov clc jmpq je bt bt bt cmpl jmpq callq rol mov stc bt clc test sub jmpq je cmc stc stc cmpq jmpq jne jmpq mov stc stc stc stc mov bt jmpq jmpq jmpq mov movzbw mov movsbw movsbl mov jmpq test test jmpq jmpq pushq jmpq mov jmpq jmpq jmpq movabs movzbw lea jmpq clc test jb jne jmpq jmpq callq btr mov clc dec mov cmc test jmpq jmpq bt stc add test stc test test add cmp clc cmc jmpq jmpq mov lea lea jmpq je rol bt lea lea jmpq incl jmpq callq xchg movzbl xchg movsbw mov movsbw mov bswap mov not mov mov jmpq callq bt clc test jmpq mov jmpq jns mov movzbw bswap mov jmpq and cmp clc stc cmp jmpq ja pushq ja pushq jmpq jmpq jne jmpq jmpq je neg mov test stc test jmpq jmpq mov jmpq cmc cmc test jmpq callq bsr mov test clc test test jmpq callq cmc cmc test jmpq jmpq jmpq test bt add jmpq callq cmc jmpq jmpq adc imul xor mov mov gs xor or mov cli loope clc rex.X jbe mov jl movabs movabs hlt mov jrcxz outsl hlt xchg retq sub sti retq push push mov jbe rex.WRX jmpq mov xlat cld rex.WX xchg fbld out idivb sti mov and (bad) fs (bad) icebp out or lea pop movslq jrcxz int in xor sub jmpq mov mov mov jmpq callq cmc bt cmp test and jmpq jno mov jmpq jne jmpq callq xor add mov btr mov rcr not rcr mov shrd mov sbb shl shl mov shld btc bt mov test cmp test jmpq jmpq jmpq mov jmpq jmpq jmpq jmpq callq cmc cmp jmpq je test sub jmpq je shl mov shrd (bad) icebp add xadd mov add cmp mov ror inc btc bt mov shl mov stc add jmpq jmpq jmpq clc test cmp test jno jns jmpq callq stc test cmpq jmpq jmpq je btr setb mov not or neg movsbq lea rol not ror xor rcl repnz bswap not mov movsbw not movzbl not bswap lea jmpq jmpq jmpq pushq jmpq cmp stc bt cmp jmpq jmpq jmpq movsbw mov jmpq je je neg not mov shrd shl bts bswap mov setg shrd movzbl dec lea bt jmpq callq jmpq callq lea bswap bswap lea jmpq jmpq jmpq mov jmpq callq cmp clc cmc test jmpq test sbb sub sets mov jmpq je jmpq callq btr shrd sbb cmc mov add bsf xadd ror xor shr bt neg mov or bsr sbb shrd mov neg shrd repnz bt not bts bsf xor lea jmpq stc jmpq jmpq movsbw not movsbw dec movsbw dec inc test rcr shrd mov cmp jmpq movzbw mov jmpq je stc cmpl jmpq mov jmpq pushq jmpq jne clc bt stc cmpb jmpq mov jmpq jmpq stc mov stc clc bt cmc cmpw jmpq cmp jmpq jmpq jmpq jmpq jmpq pushq jmpq jmpq test jmpq xchg xor pop or mov rex pop (bad) and int (bad) data16 lock lret rex.W mov (bad) xor pop add (bad) jns mov mov cld rex.XB loopne sti xor and lret movsl out rcll mov imull rex.RXB test retq xor cmpsb add jge bswap movzbw dec rol mov test ror stc xchg or movzbw mov bswap btc add sub xor bsr mov xor repnz mov bswap jmpq mov lea mov jmpq not jmpq jne movzbw not lea mov mov jmpq mov movzbw lea not mov jmpq jmpq jmpq mov not mov movsbw setg lea mov mov mov bswap mov jmpq mov lea not mov mov jmpq callq movsbw not movsbw lea jmpq mov lea lea setno lea mov jmpq test cmp jmpq mov jmpq callq and ror btr mov jmpq jmpq je bsr lea lea add add bsr sub movsbw mov movsbw mov mov bswap mov mov jmpq jne jmpq jne jmpq callq shrd bsr clc mov test test test jmpq jne rcr clc (bad) repz inc mov adc mov jmpq nop jmpq jmpq callq stc stc cmp test cmp jmpq callq add mov bt add test shld mov clc jmpq jmpq jmpq jmpq je xor movzbw rcl rcr mov test rol mov rcl bt add or mov stc jmpq je jmpq jmpq cmp add cmp clc bt bt cmp jmpq jmpq callq jmpq bswap sub xor jmpq cmovne jmpq je shld mov cmc cmp jmpq jmpq sub cmp repnz out jae adc jp (bad) mov and mov cmpsb xchg lahf sub sbb and es js xor idivl cltd repnz (bad) lahf fs push (bad) push gs retq and and jne jrcxz hlt sti lret cmp rex.WRXB and sbb lock popfq mov pushfq (bad) sbb cmp sbb xorb mov mov mov sarl pop jmpq jmpq jmpq test jmpq jmpq test jmpq mov bt bt cmc test jmpq not lea jmpq test test add cmp add stc xor bt add jmpq jmpq jmpq movzbw mov jmpq jmpq jmpq je bsf mov stc mov shld mov rcr dec rcl and lea movzbq mov lea mov movzbw mov jmpq jmpq je jmpq jae jmpq pushq jmpq mov jmpq jmpq jmpq callq add shld cmp mov rcr sub movzbq xchg mov setno mov jmpq xchg movsbq not lea lea mov jmpq callq jmpq jmpq js not not bswap mov jmpq xchg (bad) sub jnp xchg lea lods (bad) stos cmp imul retq or mov (bad) adc mov add jo adc (bad) popfq sbb (bad) sub scas mov adc js cltd cmpsl je repnz jb jmpq out or cmpsb jl (bad) jl clc jle mov sub fwait (bad) add (bad) (bad) mov push sti insb cltd add fist (bad) pushfq fidivr enterq callq mov (bad) xchg sub push jae cmp sbb mov rex.WRX jg rex.W and adc mov cltd scas nop (bad) sbb (bad) mov cmp insb sub or mov lahf (bad) jmpq cs gs sub movsb mov movsl push (bad) lock mov xchg (bad) out fsubr gs add callq jmpq test jmpq inc jmpq je jae callq bt cmc cmp jmpq je test bsr bt cmp mov bsf sub cmp setb mov clc lea jmpq jne stc cmp testb jmpq callq and btr btr adc lea bt test jmpq je rcr movsbl jmpq jmpq mov mov jmpq jmpq callq bt test test jmpq jmpq clc test stc add stc clc cmp jmpq jmpq jmpq jne movsbw seto mov jmpq jmpq jmpq jmpq callq shr jmpq jmpq je jmpq callq jmpq callq add neg lea jmpq jmpq pushq jmpq jmpq add add add add or (bad) xor xchg mov rex.WB (bad) jnp callq movslq add jae int cmp (bad) loope mov rex.WRX rex.WX rex.XB ja lods or (bad) mov cmpsb sbb xchg popfq sub (bad) sbb (bad) or adc mov (bad) xlat jne xlat cmc rex.WRX test (bad) adc (bad) decl (bad) fidivr add push mov movsbw lea mov jmpq jmpq je mov xchg mov mov mov mov jmpq jmpq jmpq je rol rcl bts xor mov jmpq jmpq jmpq jne inc bsf mov bt cmp jmpq callq lea mov jmpq jmpq callq inc js btc mov bt stc test je jne jmpq bt mov test bt movl stc stc clc stc mov bswap cmc stc not mov clc clc jmpq lea mov mov movzbw jmpq jmpq callq movsbl bswap movsbw mov jmpq not mov jmpq jmpq je sar bsr mov bt btr adc shl mov adc cmp mov mov shl mov bt test add jmpq jmpq xchg mov bswap lea lea jmpq lea bt stc cmc cmc xor jmpq jmpq callq lea shr or movzbw mov cmp clc test jmpq jmpq jmpq jmpq jmpq mov jmpq callq jmpq jmpq movsbl setne mov jmpq je jmpq jle callq jns cmp test test jmpq repnz or bsr bsf xor ror bt nop mov data16 lock mov or add bt cmp bt cmc mov stc cmc test jmpq mov not movsbw lea bswap movzbl jmpq clc add jmpq jmpq jmpq cmc cmp jmpq jmpq bt bt cmp cmpw jmpq jne bswap bt lea lea mov cmp dec shr sub data16 lock cli lods es xchg bsr test bsf movzwl bt jmpq cmc clc xor cmp add jmpq jb bswap movsbw lea not dec clc adc stc neg mov bsf rcr stc or bswap test mov sub shld adc jmpq btc sub mov mov jmpq jmpq callq stc mov or neg bswap cmpq movsbw lea mov jmpq cmp add jmpq mov sets setno mov bswap not jmpq sar xor not bswap mov jmpq jmpq jmpq jmpq jmpq callq stc clc cmpb jmpq jmpq callq clc cmp jmpq test shr rex.B lock shl mov clc cmp test jmpq je jmpq je bt clc cmp jmpq cmp clc bt xor clc bt bt add jmpq movzbw setns mov lea seto jmpq jmpq jmpq jmpq add rcl inc add and mov cmp cmp jmpq je cmc bt stc clc test jmpq test cmp cmp cmp add dec movzbl bt clc cmc clc xor test cmp clc cmp setno seta bt shr bswap not sub bsr test mov mov mov sete cmc cmp test lea mov lea bswap not not mov jg cmovne jae mov jmpq jmpq pushq jmpq pushq jmpq jmpq jne neg add not mov lea jmpq js movzbw setnp not mov jmpq mov jmpq lea mov jmpq jmpq nop jmpq jmpq jmpq nop jmpq je btc btc dec mov stc test jmpq jmpq movsbw not dec movsbw movzbw mov lea xchg data16 (bad) and or btr movsbw neg mov cmp bswap btc lea shl neg neg xor xchg shl mov bswap mov bsf shld sub repnz movzbl jmpq jmpq jb mov mov not bswap mov jmpq jmpq je sar bsf adc mov ror mov data16 lock clc shl mov bts and mov stc add rcl adc mov test clc je add stc bts bt shrd mov test cmc add test cmc jmpq pushq jmpq jne inc add not movzbw lea jmpq mov not mov lea jmpq jmpq jmpq callq bswap mov lea mov not mov jmpq stc test jmpq movzbw mov jmpq jmpq mov jmpq callq test cmp jmpq mov jmpq cmovne jmpq sub clc xchg stc test jmpq jb xor bsr mov stc inc xor setg movzbw movsbw movsbl mov jmpq test jmpq mov cmc jno jmpq or sub rex.WXB rex.X (bad) xchg add fstpl rex.XB rex.W add (bad) cmp out add add rolb add retq add xchg pop std (bad) stc clc bt test jmpq mov bswap lea lea jmpq jmpq movzbw lea jmpq callq cmc stc bt test cmp jmpq callq jmpq jmpq jb setp dec jo shl btc mov not xadd or rcr sar test mov mov adc xor xor add ror xor bsr mov sbb shrd repnz movsbw jmpq callq bt cmp test jmpq mov bswap mov jmpq je bts lea clc mov movzwl stc movzbl stc stc test jmpq js bswap jmpq je sbb add mov jmpq jmpq je inc movzbw btr mov jmpq callq jmpq jmpq callq rcr rol dec btr mov cmp test jmpq sub jmpq je jmpq jmpq callq cmp adc xor sbb mov stc clc cmp test jmpq callq movsbq mov jmpq jmpq jmpq jmpq jne rcl or mov cmp stc cmp jmpq je jmpq je cmp xor jmpq btr sub xchg lea cmp sub mov setle lea mov jmpq test jmpq callq adc ror sub or bsf rol bts mov cmc cmc test cmp test jmpq lea lea mov jmpq jmpq clc cmp jmpq movzwl movzbw jmpq xor clc clc clc xchg test test cmp jmpq je jmpq je movsbl bswap mov lea bswap not mov movsbw mov jmpq test jmpq je cmc clc bt test jmpq callq mov mov jmpq jne jmpq je neg inc mov clc test test test jmpq jne xadd sub inc mov xadd (bad) icebp add leaveq mov mov mov bsr mov cmp cmp cmp stc add jmpq jne jmpq jmpq callq rcl mov jmpq jmpq test jmpq pushq jmpq je test test jmpq jne jmpq clc add bswap bsf cmc shld mov stc test bt add cmp test add bts mov cmp cmp test cmp add jmpq callq rol sub bt mov test bt test sub jmpq je lea not movsbw lea not jmpq je jmpq clc cmp jmpq jmpq jne bt cmp cmp testb jmpq je test mov test stc test jmpq je bt jmpq je cmc jmpq xor jmpq jno callq clc cmp jmpq jne shl not lea stc jmpq jmpq je clc jmpq jmpq callq dec or mov mov mov rol cmpq bswap setp mov movzbl mov jmpq movzwl movsbw movzbw mov jmpq callq shld btr test mov lea neg test jmpq je bt stc cmp jmpq je test cmc cmp jmpq je jmpq jmpq callq (bad) hlt xchg cmp mov not shr bsr bt mov test bt cmp xchg test cmp cmc test jmpq jmpq mov bswap xchg not movzwl lea seto mov mov bswap setg lea mov jmpq jmpq jmpq ja jmpq jmpq jmpq nop jmpq jne seto mov cmp stc bt test jmpq callq stc clc test cmc test jmpq callq cmc cmp stc cmc test jmpq jmpq mov jmpq jmpq cmp jmpq je jmpq jb lea cmpb mov not not mov setns jmpq loop (bad) mov cmp pushq faddl add pop movsb mov rex.WB iret insl rex.B (bad) sti pushfq jrcxz cmp stos outsl sub mov and (bad) leaveq cmpsl xor mov (bad) insb jnp ja or or mov mov sbb sbb xchg xchg cmc add rex.RXB (bad) lret movabs iret int rex.WX (bad) sub ss add sub fadd jl callq mov mov idiv imul xchg rex.WB (bad) (bad) outsb jno adc je cs rex.WR mov adc sbb mov pop std adc test test push js jne pushq cld mov add shll fiadd mov push nop callq fistp xor pop movsl cwtl imul pop insb (bad) xchg movabs es xchg jnp test rex.RB and gs push cmp (bad) (bad) or mov (bad) rex.WRXB jnp xor sbb movabs lock in mov cmp add cmp mov gs (bad) vucomisd mov popq rex.RX rex.WB fwait lods (bad) flds (bad) mov loopne rclb gs (bad) out (bad) adc jno push or negl pop in xor (bad) loopne in xchg xchg sarl (bad) xchg lret add in (bad) rcll icebp retq rex.RB rex.WX movsl mov iret jo test insb adc mov push (bad) icebp fistp pushq push in callq mul cmpsb cltd adc insl cmpsb pushq test (bad) (bad) cld (bad) sub out mov push (bad) or rex.XB mov fwait jo (bad) jo cld mov (bad) cwtl sti mov mov rex.RX roll mov fist add xchg xchg jmpq movsl add lret std rex.WB js mov movsb int3 sub xchg (bad) imul lahf ror sbb out (bad) imul lret insb mov jb push xor and push and (bad) scas std (bad) jmpq mov jmpq mov mov shr adc mov sbb mov not movzbq sub jmpq callq clc jmpq clc add jmpq setg mov mov jmpq movl jmpq inc cmc bt bt test add clc cmp cmp jmpq jmpq jmpq mov jmpq je bt sub jmpq je bt test jmpq movb jmpq jne shl mov clc cmc bt test jmpq jmpq jmpq cmp clc cmpq jmpq callq add movzbw btc ror mov bt clc test jmpq jmpq jne setns movsbw mov jmpq jmpq jbe jmpq jmpq dec jmpq mov jmpq stc jmpq jb stc ror mov inc shr mov sbb and or jmpq jne bsr bts rol mov bsr cmc mov cmp btc xor data16 icebp (bad) lea shl bsr add movsbw mov jmpq jmpq jmpq mov movzbw movzwl jmpq je stc cmp jmpq jmpq jmpq jmpq jmpq ja jne not setbe lea bswap mov jmpq jmpq jmpq je bswap mov jmpq jmpq mov not mov jmpq jmpq jmpq mov jmpq jmpq jmpq mov bswap jmpq dec dec bt not rcr sbb mov cmc jmpq je not mov lea mov jmpq callq jmpq mov seta mov jmpq callq bswap mov shl xchg xchg clc xor mov inc or movsbw btr mov shld mov xchg and repnz xchg not jmpq and bt bt cmp jmpq je cmp xor bswap movsbl bswap mov jmpq jmpq jmpq jmpq stc cmp cmp jmpq cmp cmp js je clc clc cmp cmc mov clc cmpb jmpq jmpq jmpq jmpq je jmpq callq not movzwl movsbl jmpq jne jmpq callq lea jmpq jmpq sub jmpq jmpq mov not jmpq callq not setl mov bswap mov mov movzbl movzbw bswap jmpq nop jmpq add bt jmpq pushfq in and rex.RX test jbe loop add callq movabs mov loopne movabs gs sarl xchg (bad) loope loop mov mov xchg outsb jg sub mov leaveq (bad) retq adc rex.WB addr32 out sti mov sbb sub leaveq and pop add or xor in out mov movabs ss or mov je push adc out shll pop or retq orl jo (bad) out repnz jg popfq in pop in rep not cwtl lret stos (bad) jb rex.X xchg (bad) std xor jl outsb cmc mov int3 sti mov jbe ss xchg sub rex.WR in pop add cltd xor xchg pop push adc stc stos mov xor mov int3 in xchg enterq repnz jb stos (bad) push lods pop imull rex.WRXB jrcxz retq push outsb repnz cmc in fwait xor and (bad) ror insb (bad) out (bad) add nop or mov jne adc pushfq ror (bad) sbb rex.WRX clc rex.XB lods cmpsb push rclb push add scas push in stos mov push cmp rcrb adc lahf and sbb rcrb icebp sbb ja test fistpll fwait rex.WRX rex.WB rex.WRX hlt insb mov (bad) pop (bad) movslq ds cmpsl and mov jns cmpsl enterq rex.WR sbb movslq rex.X scas push retq loopne pushfq shlb pop pop loope fwait pushq retq (bad) (bad) lock frstor sbb add push sub and sub (bad) (bad) xor (bad) movsl xor mov negl cmp or mov sub and rex.RB shrl cmpsl sti push jle callq mov push rex.R es pop divb rex.RXB fiaddl hlt leaveq fisttp jno imul stos int3 push cwtl stos in rex.WRX rex.WRX xor pushq push push sarb push mov rex.RXB adc sub fs (bad) test imul lods mov (bad) mov mov pop cld addl and cmp mov add (bad) test cmp jmp out (bad) (bad) rex.XB ds rex.RXB (bad) fnstsw out out test sbb mov ficompl addr32 iret enterq jle cltd mov jb lahf and int3 fistpll xor (bad) xchg cltd mov ror (bad) (bad) xchg lea pop push incl test (bad) cwtl rex.RXB rcll cmp sbb jg cmp mov jo mov push (bad) jl cmp xorl (bad) jl push rex.WRB or and push shlb mov adc jg sahf movabs xlat jno repnz out shlb (bad) iret mov mov mov insl cli in (bad) rex.WXB pushfq negl adc insl xchg pop and pushfq adc (bad) out repz mov mov or cltd stos hlt nop mov rex.WR int jo (bad) sub rex.RXB stc jbe (bad) or (bad) adc sbbb rex.WRX sub xor cmc and mov icebp mov jmpq jno cmp es stos xchg mov lahf orl rex.RXB cmp (bad) cli (bad) repnz pop pop (bad) cld push rclb rex.R add rex.WRB sub cwtl enterq lock xor rex.WX movabs jl jno (bad) sub mov xchg repz pop (bad) xchg rex.RB int3 (bad) push mov jb adc jne repnz addr32 and cmc cli enterq mov lret jne ficom mov mov sub lock out or mov decl (bad) push jb cmc (bad) rex.WRXB fdivrl sbb movslq adcl cmc scas retq fwait or rex.RXB mov stos pop jo repnz pop iret outsb shll sahf icebp cs js jmp fstpl sti jl xor stos sub cmp xchg sub xchg xor mov and ficom or push je rex.RXB mov test (bad) lods cmp lret lods rex.RXB jl jmpq callq (bad) xchg jno push (bad) lret adc pushfq adc in retq sub and mov push add mov jnp and mov mov push mov adc push insl (bad) cmp (bad) test adc lret xchg (bad) pshufw xchg sub retq (bad) movabs in cltd stos cmp pushq rex.WRXB push xor sub jnp retq or (bad) (bad) mov stos int3 scas rex.RB and add xchg idiv fidivrl and xchg mov rorl and and (bad) jne pop sbb (bad) decb rex.X and pushfq and rex.WRXB push sub in scas mov scas push rcll push (bad) jns test xlat jp adc xchg jns jp jns (bad) fidivl scas nop xor enterq rex.WRXB xor insb cmp imul repz push repz in (bad) jle nop jp rex.WRX rex.WRB cld xchg outsb lret and mov mov cmpsb and cmpsb rcr mov subl out xor fs js test add or repnz (bad) (bad) std mov stos mov icebp loopne (bad) fcoml fnstenv jnp (bad) rex.RXB (bad) (bad) pushq insb (bad) (bad) jle lods (bad) cmp insb (bad) pop fucom xor (bad) (bad) out (bad) mov (bad) sbb ja lods xchg rex.WB sti sbb sub jb (bad) cmp shlb add jrcxz imul xchg rex.RX (bad) test ja or jrcxz lret add sbbl sub jl or jb retq mov or shll xchg add data16 out lret push xchg xlat (bad) movabs lock jg jmpq stos retq sti imul rex.WRB rex.WX cltd and add cmp fwait adc cli and callq fisttpll leaveq adc sub mov xchg rex.WXB rex.RB out add (bad) in pushq imul and sbb movslq mov sbb rex.RXB in cmp insb jno icebp xchg sub fs out add stc xchg clc sti test mov add callq (bad) sub jns test in push popq mov adc scas adc loop mov cmp insl retq push sbb rex.WRB adc and lods mov jmpq add add (bad) loop adc (bad) push addb (bad) (bad) retq jbe jno movabs jbe mov rex.RXB and (bad) jne adcl jne movabs sub xor popfq jbe jmpq rex.RB mov sbb rex.WB leaveq rex.WRX or jnp clc xchg loope rex out and add add scas callq test retq pmulhuw (bad) xchg in sti gs xorps adc jno adc mov (bad) mov (bad) in pushq loopne repnz push gs out mov test xlat sti pop outsl (bad) (bad) push test adc xchg xchg in pushfq xlat mov (bad) fbld xchg jle push cmpsl mov or (bad) cwtl jo sub movabs mov (bad) (bad) cmp sub rex.WR xchg cmpsb jge mov movabs mov sti mov rex.X sarl push sbb rex.WB jmp push pushfq adcl xor (bad) jno add sub xor scas rex.WRX pop (bad) jl sub mov rex add icebp cmp jp (bad) clc test notl lods sbb mov mov mov (bad) jmp push js ja cwtl rex.RXB movabs sbb pop or icebp cmp movsl lahf (bad) mov xchg out (bad) lahf cmpsl repnz cmpsl mov movabs (bad) lods xchg icebp adc rclb (bad) cmp in fidivl xor rex.B mov test mov (bad) ja or (bad) or movabs lods insl mov xorl ja insb mov cmp (bad) ss xchg or xor mov je jne in (bad) pop ror pushq (bad) sbb mov mov push cmp rex.WB sub mov cld (bad) sub (bad) leaveq cmp pop adc (bad) in (bad) rex.WRXB in pop test mov mov (bad) jmpq push lret push jmp (bad) stos (bad) shrl pushq sbb cmp repz mov jmpq jmpq mov jmpq je jmpq callq or dec mov stc clc cmc cmp jmpq je add and sbb add mov mov or mov bt jmpq mov movzbl sete lea mov jmpq cmp cmc stc test test jmpq callq cmp stc cmp and stc bt stc cmp jmpq callq cmc btr sar mov shl shr sub movzbw setne setp mov jmpq jbe movzbl movsbl setno not mov jb callq jmpq jmpq mov jmpq shl mov bts add mov adc shrd cmp mov stc clc stc cmp jmpq jmpq sub jmpq jmpq lea mov not movsbw mov jmpq stc xchg clc stc clc jae test jmpq cmc jmpq test jmpq jmpq jmpq jmpq callq shl neg bsf mov bt test jmpq cmp cmpw jmpq callq movzbl mov cmp bt test jl je btc cmp lea movsbl xor not jmpq je and shl xor and mov sbb shl bt mov shl lea shrd rcr mov lea add add cmp bt mov bt jmpq jmpq jmpq nop jmpq jmpq test stc test jmpq jbe and bt stc add lea clc cmc test cmp xor jmpq movzbw not mov not movzbl dec bswap mov jmpq jmpq callq jmpq callq cmc cmp jg jne movsbl sbb xchg mov shl add data16 lock mov jmpq jmpq jmpq jmpq callq rol mov clc bt stc bt test jl je sets setge bsr mov mov neg or mov bsf xor mov clc add jmpq ja inc jmpq jmpq jmpq jmpq test jmpq callq test bt sar lea cmp test test stc test jmpq in rex.WB clc sbb imul jns pop loop (bad) jnp jrcxz (bad) jb (bad) mov ja cmpsl and sub movabs rcll idiv inc rolb bswap movzbl cmc jmpq jmpq je bswap jne movabs bswap mov jmpq mov not adc mov bt mov stc cmpb jmpq jmpq je jmpq mov jmpq jmpq callq test cmp jmpq jmpq je adc and mov adc lea shrd xor not mov jmpq callq jmpq je jmpq clc bt cmp jmpq jmpq jmpq mov movsbq mov jmpq setl mov jmpq jg callq stc ja cmp bt test jmpq jmpq xor jmpq mov jmpq lea mov mov sets movsbw not jmpq jmpq je sbb lea clc cmc test inc sub lea mov not mov jmpq jb jmpq mov jmpq jmpq jmpq not jmpq nop jmpq mov movsbl bswap movsbw mov jmpq je rcl movzbl movzbl jmpq jmpq callq jmpq jmpq callq bswap bswap xchg lea movzbw lea jmpq jmpq mov setle bt mov bswap lea jmpq jmpq bswap mov jmpq jmpq je jmpq jne movzbw bswap mov jmpq jnp nop jmpq mov jmpq je movzbw mov jmpq mov jmpq jmpq jmpq pushq jmpq cmc cmc shr test cmc stc jmpq callq movsbw seto movsbw mov xchg mov mov not mov jmpq add add add add add outsb xlat rex movsb and fwait xchg jne push repz movabs sbb enterq fwait rclb jbe add jmp sahf xor cmc (bad) pop add add callq insl rex.WXB pop data16 data16 rex.WB (bad) lret loope,pt clc (bad) and sub pop (bad) and outsb rex.WR (bad) or mov test jmpq callq seto lea jmpq jmpq setbe dec sar rol not mov movzbq or not mov or sub cmp sub shl lea sub sbb rcr mov mov bts not repnz movabs je not movsbw not not mov mov jmpq movzbw movzbq lea jmpq sub not mov seta mov jmpq shld btr rcl mov bsr sbb mov bsf dec clc jmpq callq jmpq jb clc clc stc cmp jmpq jge je sbb add btc mov shr mov inc btr clc mov cmc btc bt mov jmpq jmpq callq bt cmc stc jmpq callq lea movzbl mov lea lea jmpq jmpq callq mov bswap lea mov jmpq jmpq js mov mov jmpq callq cmp cmp clc bt xor jmpq movzbw lea jmpq jb setg mov movzbq bswap jmpq mov bt bt add jmpq jmpq jb clc bt clc cmp jmpq incl lea movzbl movzbl lea mov jmpq jmpq cmc stc test jmpq sete mov jmpq je lea neg sbb mov jmpq jmpq xor jmpq callq clc cmc cmc cmp jmpq callq xor clc sbb mov cmp clc jmpq je clc cmc bt cmpl jmpq test jmpq jmpq jmpq jmpq jmpq jmpq jmpq jmpq jmpq jmpq nop outsl bnd jae out xchg stos enterq lret adc or push sbb pushfq sub movsb and outsl pop push sbbl test (bad) (bad) in sbb repz rex.X sbb shr add xchg sbbb insb mov loop xor (bad) fs stos rex.RB xor insl adc rex.WB rex.RX rex.WRXB repz push in xor mov sbb enterq add mov xchg (bad) mov (bad) (bad) xor data16 (bad) stc mov cwtl (bad) movslq mov iret (bad) je int3 repz jg and pushq cmpsl out (bad) notb incb pop cwtl stos cld (bad) loop xor (bad) pop fs jmpq fldl popq (bad) sahf lods sarb insb push icebp nop fsubs fdivs addr32 shrl or jle out cmpsb xchg rclb fcomps adc jge jbe (bad) callq scas adc jmp out xchg (bad) adc loop xchg mov xchg mov (bad) sub cmpb or orl icebp push stos mov sarl int3 jae ficom fwait jle leaveq sahf lods int3 insl scas jno rex.R adc mov cmp xor (bad) insb pop rex.WX jbe rex.WXB xor test fiadd mov pop rex.WRB rex.RB addr32 (bad) icebp jno pop addr32 (bad) sbb xor sub add in sbb (bad) scas adc out movabs mov and movabs imul retq callq xor xchg movsb test jnp movabs mov (bad) pushq pop cmp adc fs scas xchg rex.WX cmp jno ja (bad) and cmp (bad) callq pop cs (bad) mov loope xor jbe sub xchg popfq shrl (bad) je rex.WX mov cmp lods sbb add test cmp add stc setge ror mov shrd mov bsf movzbw mov and add neg cmp inc mov stc bt test add jmpq jge mov jmpq je cmp clc cmc test jmpq callq add rcr bsr mov cmp bt lea mov neg shrd bswap sub or bt stc bt bsf xor lea repnz lea bswap lea mov not movsbw inc inc dec lea mov bswap mov jmpq jmpq je bt cmp jmpq callq shr mov shl sub bswap not mov jmpq jb dec dec not bsr or sbb mov bsf or rol inc data16 testb (bad) mov stc shl shr xor mov mov add sub shrd repnz not not lea not movzbl mov dec movzbw dec sar cmp clc movzbw mov clc cmc test jmpq je cmp bt cmpq jmpq callq shrd bts mov jmpq jmpq mov jmpq js stc stc bt test jmpq jmpq je jmpq mov jmpq je jmpq jmpq clc cmc test jmpq stc bt cmc test jmpq je movsbl bt btc inc mov stc cmc cmc jmpq jmpq jmpq add setae mov jmpq jmpq je stc cmp jmpq jb shr sub xchg stc mov shl btc mov jmpq jmpq jb rcl movzbw lea cmc cmc clc sub jmpq bt bt cmp jmpq movzbl mov jb mov jmpq jmpq lea jmpq callq cmc test jmpq movzwl lea jmpq xor cmp stc stc xchg jmpq je bt clc stc cmp jmpq je sar mov shld bts mov stc xor jo callq jmpq je cmp mov test test jmpq not mov movsbw mov jmpq callq mov mov jb movzbl mov mov movzbw not mov jmpq cmp add lea or neg seto mov jl cmc cmp cmp add jmpq callq not xchg mov bswap setle lea jmpq nop jmpq je jmpq callq adc rcr shrd mov bts or shrd test jmpq jmpq je bt test xor jmpq je stc stc bt clc cmp jmpq jmpq xchg jmpq bt mov sar btc neg bt mov stc mov not setge btc mov test cmp bt mov test btr rcl neg mov stc test test mov add dec mov cmp mov clc mov clc stc mov shr rcl mov test cmc mov shr add movzbq mov cmc stc cmc mov inc test neg mov stc clc cmc jge mov sar (bad) hlt add sarb mov stc mov adc mov clc bt bt mov movzbw rcl mov clc stc cmp jmpq jmpq jle je jmpq je rcl add adc and mov inc cmc shl mov inc test shrd mov and mov mov cmc add rcr neg bsr stc mov cmp cmp add sbb mov mov bt add jmpq je bswap lea or add lea or sbb setle sub data16 repnz clc repnz setbe mov bswap movsbw not lea movzbw not mov lea jmpq jmpq callq dec rol sbb btr xor mov jmpq jmpq callq clc cmc cmp test jmpq mov jmpq jmpq je jmpq callq cmc test jmpq popfq rex.WX test xchg repz int3 test adc js and imulb (bad) cld lret (bad) addr32 repz mov imul ss xchg (bad) in mov cmpsl and xchg movabs and (bad) out (bad) ds sar (bad) (bad) sbb adc popq rex.XB cmpsl mov (bad) test out (bad) cmp jns rex.X jae (bad) or cwtl mov out jno in jno mov fadd xor jmpq pushq jmpq xchg lea setno mov bswap lea mov mov jmpq je shr bt lea xchg shl sub lea not xchg lea mov bswap jmpq callq bt cmp test jmpq lret xor rcl (bad) rex.R rex.RXB cmp xor pop insb std data16 mov adc rex.R mov (bad) mov movabs or enterq pop js mov cmp or repnz and (bad) rex.R xchg insl and decb (bad) pop jo cld cmp rex.WB adc ss or cmp sub sub and loop mov xorb rex.RXB mov mov in cmc mov mov stos test and insl (bad) fstpt leaveq and (bad) gs mov movsl xchg or or xchg add es mov lret mov retq jne add or mov (bad) mov sahf xor rex.WRXB in xor int mov movabs and movabs out and movsb pop push sbb jrcxz fs repz rex.WRB enterq roll out out std mov add and add pop push sbb pushq xor stc (bad) callq shrl pushfq (bad) addr32 jge and movabs movabs fmulp mov add mov (bad) mov (bad) rex.WB repnz jbe mov (bad) stc push xor sbb sbb jge xchg jmp movups mov movabs cmpsl stos movabs mov cmpsb movabs (bad) (bad) lret fwait lods xor cltd rex.RB stc pop imul rorl mov sbb cmp xor fs (bad) rex.WR jnp es ror xor jle cmp jg nop movabs sti lret callq xchg rex.R loope pop mov rex.WR mov pop rcrb mov out stos test (bad) rex.WRXB mov mov fidivr jns rex.RB rclb mov negb xlat test movslq movabs mov mov test (bad) (bad) clc bt bt clc cmp jmpq cmp test test jmpq jb adc neg mov bt sbb mov shl bts jmpq jmpq jmpq mov movsbw movzbw mov jmpq clc cmc test jmpq xchg jmpq jmpq mov jmpq mov jmpq jmpq je test cmp jmpq jmpq jmpq je sar shld inc xadd mov sbb bts mov bt jmpq jmpq lea mov not movzbl lea mov mov jmpq je jmpq jmpq callq test cmp jmpq jmpq jmpq setle movsbw mov bswap lea setae bswap mov jmpq jmpq je neg mov jmpq nop jmpq callq clc test jmpq je inc adc jmpq mov bswap movsbw jmpq jmpq jmpq neg btc bts mov rcr test sub movzwl clc cmp mov cmc xor jmpq cmp cmp add jmpq jmpq je rcl mov bt jmpq jb data16 lock shrd sbb sar sub mov lea movzbw movzbw mov jmpq je stc jmpq jmpq stc cmc test jg je rcl bsr mov cmp bt mov bsf jmpq callq btr lea cmc bt cmp test test jmpq callq seto mov mov jmpq bt mov test bt test add clc add stc cmc cmp jmpq jb jmpq jmpq jmpq mov setb bswap setp mov jmpq jmpq jmpq callq jmpq js jne jmpq jmpq callq movsbw rcl shrd lea not sub shr lea xadd xor xchg mov not bswap mov movabs mov lea mov lea jmpq jmpq je jmpq jmpq test jmpq jne jmpq mov jmpq jmpq jmpq je mov mov lea bswap movsbq not mov jmpq jl je bswap movsbw not lea mov jmpq dec jmpq jmpq test jae je cmc bt jmpq mov jmpq jmpq callq jmpq jmpq callq jmpq mov jmpq mov jmpq pushq jmpq setae lea mov jmpq je clc bt cmpw jmpq jmpq jmpq mov jmpq callq test test cmp jmpq jmpq cmp jmpq clc cmc bt test jmpq mov je mov jmpq jmpq not movsbq mov setne mov not mov movzbw mov jmpq jmpq jmpq stc test jmpq add bt mov stc cmp add jmpq jmpq jne neg sbb shl mov cmc mov add bswap shrd mov stc stc cmp cmc add test bsf mov stc cmc test stc add test add clc jmpq je test bt bt jb cmp jmpq jmpq sub jmpq jmpq jmpq ja sbb not mov ss stos sbb mov mov (bad) cmp push jne shrl (bad) incl cltd (bad) insb cli rex mov stos rex.WR int push mov cmc xor fist jo xchg sbb add imul (bad) xor fwait mov cmp fsubl mov test (bad) lea mov sbb movslq es xchg (bad) subb outsb xor xchg sahf jmp mov jno sub and stc mov jne adc in jo pop (bad) nop rex.WXB callq and (bad) rex.XB adc sti fcomps cld (bad) pushq js lret cmp xchg and fld xor out (bad) movsl stos mov rex.WRXB int iret add test stos (bad) rcl (bad) or andl shrl jnp cmp js (bad) fnstsw push xchg mov (bad) nop mov xchg (bad) enterq outsl cmp adc rex.RB data16 add adc jmpq movabs or xchg push (bad) and and clc rex.WRB sub jp (bad) (bad) js (bad) pop (bad) (bad) movabs cmpsl test in mov (bad) addr32 and mov sbb or sbb xor pop (bad) (bad) (bad) (bad) out mov fldcw fidivrl or mov in cs leaveq sbb hlt mov or push and je add jns adc mov stc popfq (bad) nop callq movabs cmpsl test or lods (bad) imul sbb scas sti (bad) cmpsl mov xor pushq in cli fcoml lret fs cltd stos mov mov (bad) and movslq fildll (bad) ss mov nop fwait int3 outsl test cmp rorb or (bad) (bad) rex.WXB or pop stos jne push sbb out rex.R xor jno mov (bad) sti jbe sbbl stc fisttpl xor fs sbb add xchg mov gs gs sbb movsl rex.X cwtl rex.WRXB sbb xchg movabs (bad) jp cli cmpsb out sub test test lock movl inc add add fnsave (bad) (bad) jmpq xor sti lret sub movabs mov (bad) rcrl fs jp stc ja sub push std repnz (bad) jo sub xchg movabs scas (bad) or mov rclb xlat clc js push int sbb mov jmpq callq xchg rcr not mov and rol mov sub bswap setp setge lea mov not not movzbw mov jmpq nop jmpq jmpq jmpq bt cmp cmp jmpq bt add jmpq callq movzbl movzbl bswap jle mov movzbw bswap jb mov jmpq callq jmpq jmpq callq clc and stc cmp bt clc cmp jmpq mov jmpq jne sub mov bsf mov shld mov shrd cmp movsbl add inc not shl lea xor not sub clc mov jmpq jne btr jmpq jmpq jmpq cmp mov add btr clc mov clc cmc cmc mov stc test jb clc cmpb jmpq callq not btc movzbl bts mov test stc cmp jmpq callq shr seta mov shr mov add mov movzbw jmpq callq ror mov jmpq test cmp add mov bsf mov cmc bt jmpq callq movzbq not bswap mov bswap not mov jmpq jmpq callq clc cmp jmpq callq bt test jmpq pushq jmpq lea not bswap lea jmpq clc cmp rorl or sahf (bad) and sub (bad) mov adc rex.X icebp test test bnd xor (bad) (bad) add add nop jb cmc clc clc add lea jmpq jmpq callq clc cmc bt clc test jmpq jb movsbl jmpq jmpq callq adc shld mov test bt bt test jmpq callq cmp cmp jmpq je test sbb lea setno mov ror lea mov cmc cmp test jmpq jmpq callq jmpq jmpq je jmpq je lea bts sub mov stc cmc test jmpq je cmc cmp jmpq callq jmpq je adc add jmpq jb bt lea bt bt xor jmpq add stc cmp bt sub jmpq mov cmp clc stc clc mov ror not mov movzbl cmc cmp mov not shl bt shl mov cmc mov ror clc (bad) lock clc clc mov jmpq jmpq je add shr and mov stc jmpq callq ja movb jmpq jmpq callq bswap lea bt cmp test jmpq jbe callq rcl rcl mov bt jmpq jmpq callq rcr btc bts mov cmc sub bsf sbb cmpq lea mov jmpq callq setge sbb dec clc mov jmpq jmpq jp fistl orb or movabs add add pushq jmpq mov jmpq xchg jmpq callq bsr or mov rcl cmpq setbe bswap mov mov mov jmpq jmpq jmpq callq bt cmpq jmpq jmpq lea jmpq jmpq callq movsbl mov lea mov jns nop jmpq jb stc lea cmc stc jmpq movzbq lea mov jmpq jmpq callq cmc stc bt cmc test jmpq callq neg clc movsbw lea cmp bt cmp test jmpq bt sub jmpq js movsbw not mov mov not lea jmpq je bt cmpq jmpq jmpq jmpq mov jmpq callq stc test stc test cmp jmpq js mov jmpq jmpq je shrd data16 lock (bad) test add add and mov clc test jmpq callq movsbl movsbw movsbl mov bswap mov movzbq mov jmpq callq cmp bt test jmpq jmpq not sets xchg movzbw mov bswap jmpq jmpq jne shld mov stc clc stc test test jmpq callq shrd mov jmpq je cmp cmp jmpq jmpq jmpq jo callq adc shld mov cmc bt cmp jmpq add jmpq jmpq je dec mov (bad) hlt add stos sarb cmp add cmp add jmpq xchg movsbw mov jmpq jmpq cmp jmpq je rcr bsf mov jmpq js movl xchg mov movzbw lea bswap movzbl movsbw mov jmpq jmpq jb setns setp mov and jmpq callq cmc cmp jmpq jmpq pushfq (bad) insl pop icebp (bad) imul adc cs and out mov mov stos sbb mov rex.X xchg int out jae test push jge retq fwait pop (bad) adc mov jne andl xchg push pop mov pushq jl (bad) adc outsb fsubs out pop rex.R lret add imul stos rex.W frstor gs shlb add callq xor mov fistpll rex.WRX mov decl sub rex.WR (bad) jmpq test cmc test jmpq jmpq mov lea setnp lea bswap movzbl jmpq jmpq jmpq jne shrd bswap mov cmc cmp cmc clc cmp jmpq bswap bt rcr mov btr mov bt jmpq jmpq jmpq jmpq bswap mov jmpq callq movsbw lea lea movzbl bswap movzbw bswap lea jmpq callq not rcr mov jmpq jmpq jmpq stc clc and cmp bt jmpq mov movzbl setg movzbw movzbl jmpq jmpq bts cmpq bswap mov jmpq jmpq jmpq jmpq jmpq jmpq jle jne jmpq je sar rcr not sar sub lea bswap movzbw mov jmpq mov mov lea movzbw bswap movzbl mov jmpq jne sets sar bsr mov bsr mov ror bt test mov clc cmc clc add cmc bt add test test add jmpq jmpq cmp cmpb jmpq mov mov jmpq jmpq jb jmpq je clc mov sbb jmpq jmpq je clc stc cmp cmc cmp jmpq je jmpq js cmp stc test jmpq pushq jne pushq jmpq jbe xchg jmpq jns je not adc shld bts sub movsbl not lea lea xchg sets not mov movzbw jge movzbw lea mov not lea lea jo mov not bswap lea jmpq test clc test cmp jmpq callq not jmpq jns inc lea not mov jmpq je movsbw mov test stc jmpq callq jmpq pushq jmpq test cmpq jmpq jmpq jbe jmpq callq bswap xor mov bt cmc test jmpq pushq jmpq cmc clc test jmpq jmpq callq stc lea bt jmpq movsbw mov jmpq jb add rol lea cmc jmpq jbe jmpq je test jmpq cmp jmpq jmpq jmpq callq shrd mov inc sub shr btr sub inc bts sbb or or rcr rcr rol mov movzbl repnz not bt not or adc lea dec ja mov test cmp stc jmpq je rol not bt neg mov ror add dec dec mov ror bsr or bsr mov rcl sub lea lea movzbw mov mov jmpq jmpq mov jmpq jmpq jne neg setbe shld cmp mov not bt rcr sub mov movzbw rcl jmpq mov shr shr mov stc cmp cmp xchg cmc test cmp jmpq inc jmpq jmpq jmpq callq cmp cmp jmpq not mov lea movsbw mov lea mov mov bswap movzbl not lea jmpq jbe stc test jmpq je bswap lea jmpq callq setb mov test test bt test jmpq js not xchg mov bswap not movzbw movsbw lea not xchg mov lea bswap jmpq callq test xor jmpq callq data16 repnz shrd or ror ror movzbw sub cmc mov movsbl movsbl stc lea btc mov clc add repnz jl bswap mov movsbl not lea lea movzbw lea mov mov jmpq je clc cmc cmp jmpq jbe jmpq jmpq clc shl test cmc stc shr clc cmp or jmpq js bswap jmpq cmc add setg mov jnp callq movzbw mov bswap movsbl movsbw movsbw mov jmpq cmp jmpq jmpq jmpq movb jmpq incl jmpq cmc test jmpq je jmpq callq cmp clc test jmpq cmpb jmpq jmpq callq jmpq je test cmc bt cmc cmpq jmpq test jmpq callq btr ror and xor mov cmp cmp cmp jmpq callq jmpq test cmc cmp jmpq je shr movzbl jmpq callq neg mov clc test test jmpq jmpq test test cmp jmpq jmpq not and nop sar jmpq callq data16 lock movzbq mov clc cmc jmpq jmpq lea lea jmpq jb bt jmpq jmpq jmpq jo je and mov rcr sub sbb adc mov stc bt cmp jmpq jmpq jmpq jmpq je jmpq jmpq cmc cmp test jmpq repnz bswap lea not not lea dec shr mov test bt jmpq je not xor setg jmpq je rcl mov cmp bt test jmpq je movabs not lea mov jmpq mov movsbq jmpq jmpq je bswap mov jmpq jmpq callq jmpq mov lea movzbl jmpq jmpq je shrd cmc mov jmpq cmpsl rex int3 movl pushq mov xchg xor movabs stos (bad) testl mov fistpl (bad) jbe or (bad) lods pop xorl (bad) pop js and test gs hlt lea jae fwait repz xlat mov icebp movsl cmpsl push xchg pop jge rex.WXB and rclb loope rex.WRXB jl pushfq out rex.B xor rex.WXB mov lods sbb xor jne xorl movsb sahf and loop in lret xor (bad) (bad) movabs rclb xor mov (bad) gs fwait rol sub int3 movsb mov xchg mov cltd stos xchg (bad) jno and (bad) cmp mov adc rex.WX movsbq movabs movsbw lea jmpq jmpq bswap not movzbw movzbw mov jmpq je btc test lea add cmc setnp sub movsbw lea bswap mov bswap movsbw lea mov jmpq jmpq callq add lea sub movsbw movzbq bswap mov jmpq callq shld sub lea mov jmpq bt test add cmp add movsbw bswap mov jmpq callq clc test bt and jmpq pushq jmpq callq bswap setle setge not mov jae callq stc cmp jmpq lea jmpq btc clc mov xor mov jmpq pushq jmpq callq neg bswap mov xadd xor setae not not mov jmpq jmpq bswap mov jmpq jmpq btc lea bt test test cmp add clc cmc jmpq test jmpq jmpq callq (bad) mull movabs mov test cmc test jmpq mov stc cmc cmp sub jmpq bswap lea mov movsbq mov jmpq bts or mov inc sete mov test cmc cmp test test jmpq jmpq je cmc test jmpq jmpq callq bswap adc mov bsr rcr mov movzbw rex.WB lock adc sbb cmp mov sbb mov rex.B lock std incl movsb enterq cmp clc bt test jmpq jmpq inc stc cmp add jmpq pushq jmpq je bswap rcr and sub mov test test jmpq jmpq jbe jmpq clc add mov movsbw mov mov jmpq sub jmpq jmpq jp je stc cmp stc clc xor jmpq jmpq inc btc mov cmc bt jmpq (bad) cmc add test jl add (bad) not mov mov lea mov jmpq jne jmpq callq jmpq jmpq je movzbw mov jmpq test cmp test jmpq je not mov mov jmpq add lea rcr mov jmpq callq rol bts data16 icebp (bad) bswap mov cmp clc cmp test jmpq je cmp cmp test cmp jmpq je jmpq jmpq jmpq je not mov jmpq callq movsbw mov bswap bswap mov lea not mov mov jp callq shr shr mov bts rol stc lea test cmc cmp jmpq jne cmp mov jmpq jmpq callq test test test jmpq jmpq jmpq jne movsbw shl rcl adc mov sbb mov neg bt lea sbb jmpq jmpq callq jmpq bt test jmpq je jmpq jmpq jmpq jmpq callq cmc cmp mov clc stc jmpq jmpq jmpq jmpq callq and shl mov (bad) cmc shrd bsr xor sub not bswap mov jmpq jmpq mov jmpq jmpq callq clc clc cmp jmpq jmpq mov jmpq bt test jmpq jmpq callq cmp test jmpq callq jmpq jmpq nop jmpq jmpq lea mov mov jmpq je jmpq jb jmpq jbe adc cmp lea jmpq jmpq je mov jmpq mov jmpq callq jmpq pushq jmpq jne sar mov stc rcr bswap stc mov clc cmc cmp jmpq nop jmpq add jmpq mov jmpq jmpq je lea clc or rcr cmc btr lea test sub movsbw repnz movsbw movzbw jnp mov mov mov jmpq bt cmp jmpq jmpq jmpq mov jmpq jne lea lea bswap mov mov jmpq jne btc xchg lea mov test (bad) icebp or and imull bsr mov test mov stc cmp jmpq je jmpq jmpq je cmp clc jmpq movzbw mov jmpq cmp jmpq movsbq mov movsbw movzbq mov setnp lea movsbl bswap mov jmpq jmpq jmpq movzbq mov jmpq mov btc setp bsf bts mov cmc stc stc cmp xor jmpq jmpq jmpq jne jmpq cmp clc clc cmpq jmpq je shr rcr bt xor movzbl mov jmpq test add clc clc xor jmpq callq movsbw lea not movzbw mov movzbl movzbq mov lea setno mov not mov jmpq jmpq test jmpq je bswap lea mov mov jmpq jmpq callq stc cmc sub jmpq jne movzbq movsbl not mov jmpq jmpq jmpq jmpq jmpq callq dec mov xchg mov shr jmpq callq jmpq jne movzbw xchg mov shrd bswap mov btr not clc btr lea rcl add jmpq jmpq cmpl jmpq jmpq callq cmp bt test jmpq jne stc clc clc jmpq test jmpq je clc cmp jmpq jmpq jmpq je or mov bswap adc adc mov or xor not not mov jp callq shl movsbw inc and sub movzbq mov jmpq jmpq bsf bsf add shrd bsf shld lea btc sub xor mov jmpq jne rcr lea cmc stc cmc stc add bt stc cmp sub jmpq jmpq test jno je jmpq jmpq jmpq jmpq je add mov bt cmc cmp test jmpq jmpq je rcr rcr mov jmpq je rcl (bad) cmc sub setle setg movsbq mov ja callq cmc test test jmpq callq lea bsf bsf mov cmp stc cmp cmp test jmpq mov jmpq jmpq je bswap lea setb lea lea not not bswap lea setg mov jmpq callq cmp jmpq jmpq callq neg lea bt jmpq add not movsbw jmpq rol mov bsr test add ror adc lea shl sub data16 mull mov xadd not mov rcl jmpq jmpq jmpq sub (bad) gs jo push mov xchg lahf xor clc jae outsl pop or and jo jl (bad) loop or xchg stos mov (bad) out stos jmpq (bad) sub out adc mov ja rcll stos movsl (bad) mov xor ja rex.RXB mov enterq mov xchg jns pushq and cmp out push sti retq (bad) icebp mov and (bad) or mov orl jle (bad) cmpsl rex.W icebp cmpsb sub rex.WX (bad) enterq jmpq xor push and fadds retq mov rex.WX in rex.B clc js mov xchg pop hlt jl insl sbb rex.XB fwait (bad) jb leaveq cmpsl pop (bad) or test scas testb push xchg jmpq jmpq cmp test jmpq test jmpq jmpq callq bt stc xor seto mov jmpq callq mov jmpq jmpq jmpq jmpq jmpq cmc add jmpq jmpq jmpq jo jbe cmc test bt cmp jmpq jmpq bt clc cmp jmpq jmpq jmpq mov clc bt cmp clc cmp jmpq incl setns movsbl jmpq jmpq add jmpq jmpq bswap bswap mov jmpq jmpq cmp jmpq bswap setae not mov jmpq jmpq mov adc dec cmc repnz jmpq je bswap movzbl lea mov jmpq jmpq clc add jmpq je not jmpq callq clc cmp test jmpq mov jmpq pushq jmpq je jmpq jne clc testb jmpq callq jmpq add jmpq je setns mov mov jmpq jmpq callq bts btr ror mov bsr mov add btc adc bts mov clc neg movsbl mov jmpq je shr sbb jmpq callq shr not btc mov cmp test jmpq test cmp jmpq pushq jmpq add adc mov stc add cmc stc add stc clc cmp cmc add movzbw movzbw movsbw mov jmpq je bsf btr bsr dec mov cmp cmc test jmpq jmpq jb shld test jmpq jmpq jmpq jmpq jge js lea jmpq callq shld rol mov clc test jl je add shr or bswap btr xadd bsr lea bt bts bsf bts xor btr clc bsf repnz xchg mov lea movzbw movzbw not jmpq callq movsbw cmc inc lea test test jmpq jmpq jne cmc stc cmc jmpq callq shr not adc mov clc test test jmpq inc bt add cmp bt cmp jmpq jmpq pushq jmpq jmpq callq jmpq jmpq callq shrd mov jmpq cmp jmpq inc jmpq callq inc btr test mov test clc test jge jne jmpq jmpq callq jmpq add bswap movsbq setae lea jmpq jmpq jmpq jmpq jmpq bsr add neg sar lea rcl test mov clc jmpq callq bsr bswap mov test mov stc cmc bt clc sub jmpq jmpq cmp js jbe jmpq cmp add cmp cmp jmpq je stc sub jmpq test clc jmpq jmpq jb xchg rcl rcr sbb cmpb not movsbw xchg movsbw mov bswap not movzwl lea mov movzbl mov jmpq mov movsbw not lea mov movsbw mov not mov jmpq callq xchg seto not movsbq mov lea xchg mov jmpq cmp jmpq jne rcl sbb shr bts mov jmpq jmpq movzbl not setge mov bswap mov seto movzbl lea mov jmpq jmpq jmpq callq clc rcl jmpq not mov mov movabs bswap lea bswap lea mov mov jns callq movsbw mov lea jmpq je jmpq jmpq callq stc jmpq bswap mov jmpq test mov bt clc cmc cmpb jmpq jmpq jmpq stc cmp test jmpq je jmpq movzbw mov jmpq jmpq pushq jmpq je jmpq bt cmp jmpq je add shr shr movsbl xor not not mov mov jmpq je clc sar sbb sub mov cmp test jmpq je not sar not bt xor movsbw mov jmpq movzbw lea jmpq jmpq callq cmc stc test jmpq je and or setns shl mov clc mov sar xor lea clc cmp jmpq jmpq jmpq jne inc rcr mov clc and mov or mov dec add rcr cmc bt lea bsr mov cmp bt add test jmpq callq test test clc cmp cmpb jmpq jmpq callq stc jmpq stc bt xor jmpq jmpq jmpq jb btr lea clc bt cmc xor jmpq jmpq jmpq jmpq je jmpq mov movzbl mov jmpq lea jmpq movzbw lea jmpq jmpq callq jmpq jmpq je cmp cmp jmpq callq lea mov jmpq jne sbb mov stc stc test jmpq bt add jmpq jmpq je clc cmpq jae je mov not not mov jmpq jmpq jmpq jmpq jmpq je ror stc neg movsbw movzbl test cmc test test jmpq jmpq stc cmp jmpq mov jmpq sub jmpq callq bt mov bt cmp cmc test jmpq jmpq jne jmpq je cmc nopl jmpq callq bt stc jmpq callq not lea jmpq je adc cmp sar movzwl rcl movzbl cmc cmp cmc test shl cmp bt clc test shr cmp or jmpq lea movsbl mov not movzbw lea mov jmpq jmpq callq cmc cmc clc test jmpq je jmpq jmpq je clc sub jmpq jne jmpq jmpq callq jmpq je mov mov movsbw movsbw jmpq bt cmc stc xor jmpq je cmp cmp clc stc xor jmpq callq and movzbw shl stc lea stc bt test cmc test jmpq cmp jmpq jne bsr add movzbw setns not lea jmpq callq bt test cmp jmpq callq jmpq movsbw mov jne callq jmpq jmpq cmp test test jmpq mov jmpq jmpq setg jmpq jmpq movsbq not mov mov bswap movsbw lea mov lea movzbw mov lea jmpq callq cmp stc cmc test jmpq callq bt bt jmpq je cmc cmp stc cmc cmpw jmpq stc jmpq cmovne jmpq jmpq not not dec bsr rex.B hlt data16 hlt rcr mov clc test stc jmpq mov jmpq bt cmp cmpq jmpq jmpq jne ror inc movzbl cmp cmp or rex.WB lock (bad) cmc bt cmp mov shl shl sub lea cmc mov test or movzbw bswap lea jmpq jmpq dec rol dec dec dec mov xadd cmp data16 (bad) or lea lea mov data16 mull decb btc shld add data16 hlt cmovs mov sub movzbl mov rex.WB hlt adc mov movzbl jmpq jmpq jmpq jbe cmp clc stc mov adc shr mov test (bad) repnz mov clc add stc stc jmpq mov bswap bswap movzbw mov lea mov mov bswap lea jmpq test cmc bt cmpq jmpq je jmpq jmpq callq setno lea setg not mov jmpq jmpq je mov mov mov jmpq callq jmpq callq lea lea jmpq jmpq test jmpq callq not jns mov jmpq callq jmpq bt xor jmpq mov bswap bswap mov jnp mov jmpq jmpq clc cmc test jmpq jmpq je bt clc test jmpq jmpq jne add mov movzbq shld adc mov data16 icebp or shrd btc mov xor bt and bsf add bsf jmpq test cmpq jbe je bt cmpw jmpq js je not sub movsbw mov mov jmpq clc bt add jmpq callq adc bsr movsbw mov not neg rcr sub mov mov lea movzbw mov jmpq jne setle btr sar mov clc test jmpq jmpq mov jmpq je bswap bts shrd test mov movsbw btc movzbl ror mov shrd stc (bad) icebp add shrd xor lea mov jmpq add ror bsr neg lea data16 icebp xor shrd inc mov clc clc add jmpq cmp clc test jmpq jmpq movzbw jmpq jmpq callq sbb bsf inc mov shl shld mov clc clc xchg jmpq mov not movzbl jmpq jmpq callq jmpq mov or and shl sbb mov cmc stc bt jmpq bt test cmp jmpq jmpq mov jmpq je btc xor sub cmp lea bt btc cmp sub sete mov not mov jmpq jmpq jmpq xadd xor movsbw mov lea jmpq test jmpq callq jmpq je cmp cmp jmpq callq movzbw mov lea jmpq jb and lea cmp xor jmpq callq xor neg rol mov sub adc mov jmpq jmpq mov jmpq jmpq jmpq pushq jmpq jmpq jb jmpq retq fs adc and idivl out rex.WRX add hlt outsl adc (bad) rex.X lea jg jmp mov stc mov test movsb movabs jo rex.WR add (bad) loope (bad) leaveq add vpunpcklbw in and cmp enterq rex.X cs (bad) (bad) sub test rex.RB rex.RXB xor (bad) sub sub xchg (bad) int jrcxz xlat mov cld decl movabs cmp (bad) callq bts sbb movzbq mov clc clc test jmpq lea jmpq callq shr neg bt sbb lea stc test bt test jmpq jmpq jmpq cmp jmpq je btr bts sar adc mov test clc test jmpq stc test jmpq je clc stc cmp jmpq bswap not lea mov jmpq xchg movsbl movzbw jmpq callq shl mov stc sub mov inc movzbw movsbq or inc or not bsf sub shr sar bts repnz mov lea jmpq jmpq test jmpq je sub stc mov bt test jmpq jmpq jbe jmpq je xor dec sub setbe movzbl mov mov jmpq inc jne inc jmpq callq movzbw not mov bswap setl jmpq jmpq lea jmpq je rol or mov stc cmc clc test jnp je cmp clc test cmpl jmpq jmpq jmpq jmpq callq stc bt clc and stc cmp jmpq jmpq jmpq jmpq mov jmpq jmpq jmpq jmpq jmpq callq bt test jmpq cmp jmpq callq xchg lea mov xchg mov lea mov jmpq mov jmpq jmpq jmpq jb mov ror shrd btr mov bts sub seta not mov jmpq je sar movsbw mov neg mov bts mov cmc jmpq jmpq jmpq jns lea mov mov jmpq je test sar movzwl sbb shl and sub movzbl clc clc shl stc cmp stc shr jmpq add bt stc jmpq jmpq jmpq jmpq jmpq jmpq callq bt cmc stc stc and test cmp cmp jmpq jmpq jbe je clc btr rcr shrd mov jmpq jmpq pushq jmpq je bsf shr movzbl jmpq mov jmpq jmpq callq jmpq jmpq bt test xor jmpq clc test test jmpq lea jmpq callq jmpq jmpq callq not lea bswap lea lea jmpq mov jae callq not mov mov movzbw jmpq jmpq jmpq cmc add adc sub not mov bt clc test test add movzbq shld mov clc jmpq jmpq je bt cmc test cmp jmpq mov jmpq jne clc test jmpq jmpq stc test jmpq callq clc jmpq je stc jmpq jmpq jmpq test jmpq je lea seta jle mov mov xchg jmpq xchg jmpq jmpq jmpq jmpq jmpq jmpq je cmp cmc jmpq callq jmpq add fisubr jnp xchg test xchg xchg xor cld ja adc (bad) xchg (bad) mov movabs mov (bad) addr32 push sbb sti lret jp xchg add mov pop (bad) cli jbe (bad) xor add rcrb rex.WXB xlat cltd scas retq add or mov scas fstpl (bad) callq setne mov setne lea not mov jmpq jmpq je je setns jmpq pushq jmpq jmpq mov mov not lea jmpq jmpq callq or mov stc stc test jmpq test jmpq jne jmpq xor jmpq pushq jmpq jmpq je bt movzbw mov stc test test jmpq je bt test cmp cmp jmpq mov jmpq xchg movzbw bswap movzbw mov jmpq test jmpq setg movsbl seta mov lea mov mov lea movsbl mov jmpq mov jmpq jmpq callq test bt test jmpq jmpq jmpq lea bswap movsbw mov bswap movzbw mov bswap movzbl mov jno callq stc stc stc cmc add jmpq sub mov cmp cmc jmpq callq setno rcl sub mov rol mov cmp cmp test xor jmpq pushq jmpq callq test xor jmpq jmpq jmpq je adc add mov test bt jmpq nop jmpq jmpq jmpq callq jmpq clc add test bt jmpq mov btc seta not shl mov clc add jmpq mov jmpq jmpq mov movsl jmpq (bad) sahf pop cmp out je add in rex.RB push jb scas retq movabs sbb jb out (bad) push rex.WB xorl fildll andl cmpsl rex.RXB cs (bad) sbb (bad) movabs mov rorl mov rex.RX js icebp rex.RB lods retq rex.XB lret movsl (bad) pop xor test (bad) and pop mov test jne neg xchg xor int ficompl (bad) jne sbb neg shld stc or bswap rcl sub bt lea mov cmc data16 hlt stc data16 hlt repnz data16 (bad) or xchg mov or shl cmc rcr not cmc rex.B hlt or lods hlt (bad) sar lea cmp or cmc stc repnz xor not add test lea stc cmc cmc add jmpq je ror test test mov clc cmc cmp cmc test jmpq mov in fisubrl (bad) rex.XB cld test mov loopne or rcll lret cld (bad) mov (bad) movl (bad) (bad) (bad) push sti lret jmp sub (bad) icebp repnz (bad) xchg sbb insb (bad) rcrl mov xchg fnstcw nop (bad) cmp rex.WRX cmp lea or scas fnstcw lret clc jmpq jmpq callq test stc cmp test jmpq je jmpq jmpq jmpq callq rcl mov add shr add dec ror mov adc mov sbb movzbw jns cmpq xchg xchg movzbq mov movsbl movsbq lea mov jmpq jmpq jmpq je cmc cmc cmp jmpq callq test and bt cmp jmpq je xadd shl shr shl mov rol shld bsf mov stc jmpq jmpq mov jmpq mov setnp bswap movzbl jmpq je jg test test cmp jmpq jmpq bt test mov jmpq jmpq jmpq je cmc test stc cmp sub jmpq adc mov rex.WXB mov (bad) add jle xchg xor (bad) idivl sub jrcxz jg repz mov xchg lea mov jb (bad) (bad) loopne jns jo in cmp (bad) rex.RX lahf sarl out sbb mov rex.WXB rex.RX sti (bad) and retq adc lock icebp mov test xor rex.RB fidiv push and xchg fimull (bad) push fldt ja data16 orl in loop fcmovnbe test int xlat (bad) (bad) push rex.WRB jmpq jmpq mov clc add jmpq jmpq jmpq je bt cmp bt cmc cmp jmpq callq dec bsf jmpq movzbl bswap movsbw nop movzbw mov setb xchg bswap jmpq jmpq jmpq je cmc jmpq jmpq jmpq jmpq jmpq jmpq je lea jmpq callq mov movzbl seta lea jmpq callq cmp test jmpq callq cmc bt test jmpq jmpq not setge movsbl mov jmpq test cmc sub jmpq callq jmpq jmpq je jmpq je je movzbl lea mov not mov jmpq jmpq js bswap mov mov jmpq je lea movsbw mov jmpq jmpq jmpq mov jmpq je not mov shl bsf inc adc mov shr movsbq lea bt cmp jmpq cmpb jmpq callq jmpq add stc nop cmc cmp jmpq jb rol sar and lea bt bt cmc clc sub jmpq je jmpq je bsf xor setns jmpq jmpq test jne je btc shr mov bt cmp bt test jmpq callq test clc stc test test jmpq movsbw setbe mov not movzbw movzwl movzbw mov not bswap mov jmpq mov jmpq jne add and mov cmp bt test jmpq mov movsbw mov mov jmpq jne btc clc btr mov test inc shld lea dec data16 testb add retq or add cmp xor jmpq jmpq jmpq bt cmc jmpq bt cmp bt add jmpq lea jmpq movsbw mov jmpq movsbq not mov jmpq add jmpq jb js not setae movzbw bswap mov jmpq je jmpq jmpq jmpq jmpq movsbl bswap mov jmpq je jmpq clc cmc cmc test jmpq jmpq movsbw lea not mov movsbl not not mov jmpq mov lea mov movzbl jmpq jmpq je shrd lea dec shrd sub jmpq je rol sbb lea mov stc jmpq sub jmpq jmpq jmpq setl mov mov jmpq cmc cmp jmpq jmpq callq mov mov movzwl mov mov mov movsbl mov not mov lea mov mov jmpq ja je lea lea movsbq bswap mov setle bswap mov mov lea mov jmpq jmpq test jmpq add clc clc clc jmpq pushq jmpq movzbl jmpq jne bsf adc xchg mov inc bsr js mov adc xor mov jmpq sbb xchg sbb push je pushq rex.R shll (bad) cmp (bad) (bad) xlat lock cmp data16 fucomip (bad) (bad) mov (bad) callq mov sbbl push sbb pushfq repz cli (bad) rex.WR repz xchg and clc pushq adc shrb xchg pop incl and add out frstor add (bad) (bad) std jmpq mov setle movsbw mov mov xchg not mov movsbw not movzbl mov movsbw setno mov jmpq jmpq callq add rol mov stc mov bt movl cmc clc bt mov xor or btc shrd mov bt cmc cmp cmc mov cmp clc cmpb jmpq incl je callq bt cmp jp jb movsbw incl lea bswap sets mov jmpq jmpq clc clc cmp jmpq jmpq jmpq callq jmpq mov jmpq jb jmpq callq bsr add cmp mov cmc cmp jmpq bt cmp jmpq bt cmp test jmpq jmpq jmpq jmpq pushq jmpq je mov lea bt neg xchg clc xor lea not mov movsbw mov jmpq jmpq jmpq callq cmp cmpb jmpq jmpq callq jno bt bt test test jmpq jne jmpq jmpq jmpq or mov stc stc jmpq jmpq nop jmpq je jmpq je rex.B lock btc xor sub bswap lea not lea not mov mov movzbl bswap not movzbw mov not jmpq je mov or bsr add mov bt xor je callq shl inc bsf not mov jae test jmpq jmpq mov jmpq jns movsbl movzbw not mov jmpq movsbw movsbw bswap mov bswap movzbw xchg lea mov jmpq nop jmpq jmpq xchg jmpq callq xchg xchg jmpq mov mov setbe lea mov jmpq jmpq jmpq test clc test test jl je not mov jnp mov movzbl bswap mov lea bswap movzbw mov jmpq xchg jmpq jmpq mov lea jmpq jmpq callq jmpq add movzbw mov not jmpq jmpq jmpq js movzbw mov jmpq je btr clc clc lea bswap sub setb jmpq jmpq jmpq je lea not jmpq movsbl bswap mov jmpq jne jmpq jmpq xchg jmpq xor jmpq callq shl rol sar dec mov clc bt cmp test jmpq pushq ja pushq jmpq cmp cmp test jmpq bt jmpq je cmp cmp jmpq je jbe mov jmpq jmpq jmpq bswap mov jmpq cmc test jmpq jmpq je bts mov bts mov neg shl mov mov btc btr xor lea mov jmpq jmpq jmpq mov jmpq callq rol cmc mov clc cmc stc clc test jmpq cmpw jmpq je test bt mov clc jbe cmpb jmpq je bt test cmc stc add clc stc add jbe cmp add test cmp jmpq jmpq je rcr movzbw mov cmc jmpq jmpq jmpq sub cmp clc cmp bt cmpl jmpq jmpq jmpq callq jmpq add jmpq jmpq jbe jmpq je jmpq callq rol mov rcl or cmpq bswap not jmpq callq bswap mov mov movsbq mov jmpq nop jmpq jmpq bswap mov jmpq nop jmpq shl mov cmc test jmpq callq cmc test test jmpq js bswap movzbw mov jno jmpq add add xor (bad) mov rex.RB rex.WR out sarb mov in sub faddl mov add je callq xchg xchg mov movzbw mov mov mov not mov not bswap bswap mov jmpq jmpq jmpq mov movsbw mov jmpq jmpq lea jmpq jmpq clc cmp jmpq mov jmpq jmpq je dec movzbl shrd adc clc movzwl stc shrd neg bsf mov shl mov jmpq jbe mov jmpq callq not movsbw lea lea jmpq rex.RB outsb (bad) and mov xchg xor scas movsl and jl scas add (bad) data16 xchg jge mov or pop out popfq (bad) (bad) jmpq retq cmp jmpq sub xchg icebp imul pop sarb adc adc movabs sub movslq int leaveq and je movsbw mov not mov setle mov jmpq mov jmpq mov jmpq callq test and cmp clc test cmp jmpq jmpq jmpq mov cli int jae movslq jae mov xchg iret (bad) out mov mov fstpl (bad) hlt rcrl (bad) repz mov (bad) test pop add add add fdivs mov std inc (bad) sbb bt jmpq callq lea bswap not mov lea movzbw lea jmpq je shl sub movsbw setle mov jmpq jmpq cmp mov rex sahf sub movsl xor cmp (bad) gs ja retq and gs jne scas sbb add (bad) (bad) bnd sti lret (bad) jb (bad) fsts mov sahf rolb mov rex.R rcrl sub icebp cmp mov enterq ficoml (bad) pop sbb add scas (bad) rex.WB xor (bad) scas add jmpq clc mov cmc test test jmpq jbe jmpq nop jmpq jmpq mov jmpq callq not not mov jmpq jmpq callq jmpq clc test test jmpq jb xchg xchg bswap not mov bswap lea movzbw mov xchg mov movsbw mov mov mov movzbw mov jmpq mov jmpq callq not xchg movzwl not jmpq add cmp test add cmc test stc xor jmpq setg mov setl lea not mov jmpq bswap mov jmpq callq cmp jmpq jmpq jmpq jmpq jmpq jmpq jmpq jmpq mov shld movzwl clc cmc cmp jmpq add clc test cmp bt add clc bt cmc clc add clc sub jmpq jne jmpq cmp test jmpq je jmpq movb jmpq jne jne clc movsbw movsbw mov adc not mov mov movzbw neg mov neg mov jmpq jmpq jmpq callq btr mov test test test jmpq jmpq pushq jmpq jmpq callq clc test jmpq jmpq jb mov dec rcl add mov btr bsf or shrd mov cmc add xchg shr neg inc xor lea btr mov bsf mov mov jmpq je cmp mov bt clc clc cmpb jmpq test jmpq jmpq je jmpq jmpq callq sub jmpq jne sets neg inc mov test cmc cmp jmpq jne jmpq jae pushq jmpq jb cmc cmp cmp jmpq jbe callq bsf shr mov clc jmpq callq add bts ror sbb mov cmc jmpq jmpq callq jmpq jmpq je jmpq jmpq test cmc test jmpq jne bts xor xor lea mov lea jmpq je bt mov bt test clc clc test jmpq jmpq mov jmpq jmpq je rcr movzbw btr lea mov cmp test jmpq movzbw movzwl lea mov mov lea jmpq callq movzbw not mov jmpq add jmpq jmpq je stc jp bt add test add cmc add cmp cmp jp jne bt test clc bt cmp jo jne adc ror add stc mov clc test jmpq jmpq add movzbl btc bswap mov cmc clc clc add clc add jmpq test jmpq callq ror rcr mov cmp cmpq sets movzbw mov not mov jmpq je clc stc clc sub jae callq mov sar stc mov btc btr rol mov mov sbb mov sar mov mov jns xor sar bts mov bsr ror shld sbb mov bt test jmpq callq clc bt test bt cmp jmpq cmc stc bt bt cmp jmpq jmpq jmpq mov jmpq jmpq jae movl jmpq mov jmpq jmpq callq rol stc btc clc mov and mov sbb jmpq jmpq jmpq callq neg mov clc bt test jmpq jmpq jmpq callq shrd sar stc sub movsbw mov dec mov inc dec mov jne dec jmpq jmpq callq mov jmpq je shld mov shr not neg mov xor test mov adc setns movsbw rcr xor not mov jmpq jmpq je xor movsbq sub movsbw mov jmpq jmpq jmpq rex.WRB mov and or cltd cmp movsb and xlat in (bad) gs adc movslq push adc jmp int (bad) add out add push (bad) cmp cs addb in cmp cpuid mov sub sti retq cld pushq jmpq mov xor xchg xor cmpsl (bad) pop sub (bad) xchg fbld (bad) rex.RX insb (bad) xor or xchg ficompl rcrl cmp scas mov jmpq jmpq callq movsbw not mov mov not mov lea movsbq jmpq jb shl bswap sbb bsr lea stc cmp cmp cmc sub jmpq jne jl nop jmpq xor rol mov cmp test jmpq stc test add jmpq jmpq jmpq jmpq jmpq jmpq mov clc test cmc cmp jmpq callq shl sar shl shr mov test clc data16 lock cmp clc bswap jmpq mov movzbw lea sete mov jmpq je jmpq jmpq jbe setp bswap mov xchg movsbw bswap not mov setp jmpq pushq jmpq jmpq jmpq jmpq bt cmp jmpq jmpq jmpq sete mov jmpq callq adc lea cmc test jmpq jmpq jmpq cmova jmpq jmpq jmpq jmpq mov jmpq jmpq cwtd pushq loope cmp mov sarl rex.R rex.WRXB add add sbb pop outsl hlt rorl and sti lret (bad) rex.WR (bad) xchg xor cmc rex.RX movsl lret or rex movabs mov mov subl rex scas mov jmpq clc bt test jo je stc clc cmp clc sub jmpq callq bts sbb rcl btc mov stc test stc test jmpq callq bsf jmpq je not lea mov movsbl mov setno mov seta xchg sete mov bswap movzbl mov jmpq test jmpq jmpq mov mov jmpq jmpq je lea mov not movsbl lea bswap xchg bswap not mov jmpq js pushq jmpq add add bts bsr sub or ror sub mov add bt repnz inc bswap movsbq movsbw not not jmpq jmpq jmpq jmpq bswap lea jmpq jmpq lea rol lea jmpq je lea movzbw movsbw lea bswap bswap mov bswap lea movsbw mov mov jmpq cmp stc clc test jmpq jmpq je jmpq pushq jmpq jmpq jmpq callq cmc bt test jmpq cmpq jmpq jb cmc cmpb jle mov not movzwl setbe lea mov movzbl mov jmpq callq xor mov shl or bt inc sub jno mov mov not mov jbe jbe jmpq jmpq test jmpq jne jmpq sub jmpq and stc jmpq jmpq callq cmc stc cmc cmc cmp jmpq jmpq mov jmpq stc cmp jmpq callq stc mov sar shrd mov test cmp test stc test jmpq mov jmpq je ror lea neg bt bts sub jmpq callq movsbw xchg jmpq mov movzbw mov jmpq jmpq jmpq mov bswap movsbw mov mov jmpq jmpq cmp jmpq jmpq jmpq dec jmpq jmpq jmpq jmpq je jmpq cmp cmp stc test jmpq pushq jmpq jmpq clc test jmpq jmpq jmpq jb xor inc clc sar lea stc xor jmpq not not mov not bswap lea movsbw not movzbw lea jmpq (bad) mov fs (bad) jmp sbb mov (bad) xchg xor movsb (bad) cwtl lret cld pushq mov (bad) cmp sub adc lret jge out je test fdivr test xchg cld scas rex.RXB in mov jne rex.B or adc retq movslq mov xor loop mov lret cld rex.WX es insl pop cmc jnp cld cwtl push sbb iret jne sbb rex.W mov mov sub bnd addr32 rex mov sub scas mov rex.RX iret clc cmp jmpq dec rcr bswap mov inc not cmc stc or cmc mov inc jmpq jmpq callq test stc cmc test jp je bswap mov setg movsbw mov jmpq callq inc jmpq nop jmpq lea lea cmc ror rol movzbl jmpq callq cmp stc jmpq je mov xchg movsbq mov mov bswap jmpq jmpq jmpq jmpq mov setge lea not jmpq je js movsbw mov jmpq jb bswap xchg movsbq movzbw mov bswap movzbl lea bswap mov jmpq jmpq callq mov movsbw mov jmpq jmpq callq cmc xadd xchg neg mov shld mov rcr inc btc bsf mov clc shrd not mov cmp jmpq jmpq callq movsbl xadd jmpq js lea mov mov jmpq ja pushq jmpq jmpq jmpq jmpq callq stc cmc sub jmpq jmpq mov jmpq jb lea mov movsbw lea mov jmpq jmpq test test mov bt cmp clc mov bt stc bt add jmpq bswap add lea clc cmc stc cmp jmpq pushq jmpq jmpq test add jmpq jae je xor (bad) cmc mov neg adc rcl rol mov cmc lea test cmp jmpq callq lea mov lea jmpq add cmc add bt clc stc bt add jmpq je inc mov movsbw or mov bswap bswap sub and mov movzbq mov lea mov jmpq jmpq callq sub inc adc rol mov bt test jmpq callq setl setne jmpq leaveq mov push jae test or add mov (bad) sub clc iret (bad) ds pop mov jg (bad) hlt (bad) pop sarl cmp adc lock mov cmpsb and cmp movabs or mov cmp sti and adc test shrb pushq scas mov adc pushq orb xchg xor int xchg xchg mov (bad) (bad) fsubrs in xchg idivb (bad) sti mov movabs rex.XB push jmp sbb and mov sub lea push adc lahf retq add pushq sbb add jmpq xor stos mov pushq sub rex.B popfq ror out rol js,pt sbb fbld mov in mov movabs stos jns (bad) es (bad) stos movsb sbb movabs js pop ficompl rex.X cmp callq cmp stos cli shll adc jle rex.WX add rclb mov pop gs mov mov sub cmc int jne jnp cmp and cmc xor cld jae or movabs lods jae callq loopne add xor movabs mov cmc out iret lods (bad) jrcxz insb add shl or nop xlat pop movabs or xorl scas stos xor adc ficomp and movsl jnp lods (bad) fs in (bad) gs retq (bad) mov pop push add mov pop (bad) outsl mov in and in rex.WRXB gs cmc movabs add or jo (bad) stc lods lahf (bad) pop rex.WX out (bad) xor and rex.WRXB jb xor adc and xor icebp mov sub mov out lods jg mov fcoms jg xor (bad) (bad) mov movabs (bad) push (bad) rex.W rex.XB ss jrcxz rex.WRX mov negb adc lock callq rex.WR (bad) adc mov sbb rol movabs gs movabs mov (bad) rex.WB out gs negb jno (bad) xor lods (bad) callq jno int rex.RX rcr (bad) adc outsb sub hlt out sub lods cmp out xor lods movsb jns or pop mov fidivr scas fisub movabs es pop adc push je hlt pop pushq cmpsl sbb (bad) rex.WB gs and or outsl mov (bad) stos pushfq (bad) mov addr32 cli and imul hlt mov outsb cmc (bad) movsl xchg mov sbb add mov mov xchg (bad) data16 mov insl (bad) mov cmpl movabs rex.WB add shl in or jnp and lods xchg jno pop clc cld (bad) out movslq (bad) cmpsb rex.WRB cmc sbbl gs xor (bad) lret (bad) lahf fdivl xchg hlt xchg or mov (bad) (bad) in jne xchg callq loop sub andl cmc loope mov push fadds jp movabs rex.W (bad) or (bad) (bad) sahf jmp (bad) cli insb push xor gs idivl or movabs fwait mov mov push (bad) fs fbstp sub in mov mov outsl hlt imul adc movabs (bad) sbb jo adc (bad) fldl gs jrcxz cmp sub rcll retq movslq (bad) cmp add xor fisub fcoml movslq stos mov fsts cmp cmp (bad) outsl (bad) pop (bad) jl adc gs cmc sbbl mov data16 (bad) shll mov sub cmpsb roll divl movabs ss popfq xchg (bad) rcrl movabs movsl lahf (bad) pop and callq sbb and in push jne or lods rex nop cld push add mov (bad) (bad) or ja rex.XB push jmp or lret or jbe fisttpll xchg test loopne (bad) add sti popfq lret pop (bad) lret leaveq lods out rex.WRXB retq adc pop and (bad) and (bad) adc jmpq rex.WRXB sahf idivb gs imulb pop rex.WXB insb hlt out out push std imul pop (bad) adc (bad) (bad) rclb (bad) in rex.RXB lret cld fisubrl rex.B in idivl sub xor mov movabs movslq test shrl (bad) mov movabs adc (bad) (bad) repz popfq or imul scas sbb imul je jmpq jmpq jmpq je mov xchg movsbq mov movzbw not bswap mov mov lea movzbw mov jmpq jmpq callq shr xor movsbl inc mov jmpq callq mov mov add stc shld test bswap not mov jmpq jmpq jmpq pushq jmpq jmpq mov jmpq sahf mov repnz popfq es jb (bad) pushfq sub mov (bad) repz xor lea or cmp and mov mov adc lods mov rex.WRX jg jmp adc sti imul or iret xor sub rex.WX out and fs popfq push in sahf ss xor rex.WB cmp out test sbbl sub push loop sbb push jne xchg enterq frstor mov in in fnstenv decb out xchg lock mov jb loop push sti lret pop add or jmpq fldt iret leaveq xor out xchg shl mov fstl pop loope xor cmp cli fstl fsts fsts stos out int lods pop mov jmpq je bt test test jmpq callq bts not cmc lea cmp jb test jmpq or shl sub dec lea mov jmpq jmpq je movsbl movsbl mov jmpq jmpq bt clc test jmpq bt cmp jmpq jmpq mov mov jmpq mov jmpq pushq jmpq test jmpq callq clc stc test cmp jmpq mov not mov jmpq callq bt test stc cmp jmpq jmpq mov bswap movsbw movzbq bswap movzwl jmpq je jmpq jmpq jmpq mov jmpq jmpq jmpq je or xor lea xadd bswap bt and xor bswap not mov movsbw not mov movzbq mov jmpq jmpq jmpq mov jmpq callq cmp cmc test jmpq jmpq bt bt testb jmpq jne bts jl mov rcr shrd xchg shr mov xadd lea cmc mov not add lea rcl not sub lea adc neg stc dec mov stc stc cmc add jmpq jmpq dec jmpq jmpq callq cmp cmp test jmpq mov bswap lea mov jmpq je xor dec sub bswap jmpq jmpq jmpq movzbw mov jmpq mov jmpq jne pushq jmpq jmpq callq cmc add shl mov jmpq not setno mov jmpq jmpq je and mov cmp bt test jmpq jmpq jmpq je jp lea not lea jmpq jb bt test cmp jmpq jmpq jmpq mov jmpq jb movabs inc mov dec adc mov bts or movsbw mov clc shl cmp shrd test xor sar sub rcr mov stc shrd data16 (bad) lea repnz lea not not dec shr test clc mov test stc cmp stc test jmpq jge callq lea bswap mov movzbw lea jmpq movzbl jmpq je inc mov stc jmpq mov jmpq jmpq jmpq bt cmp jmpq jmpq callq stc bsr cmc btr mov test test test jge je bts mov or setae mov movsbw neg sbb mov bt test add ja callq jmpq xor neg mov cmc or bswap lea btr mov bts movsbw add or add sar bsf movsbw xor bt sub sbb mov dec repnz jmpq jmpq callq test clc jmpq jmpq callq test cmp jmpq callq bt rol or jmpq je shld shl cmp xor seto lea mov mov jmpq jmpq jmpq jmpq jmpq jmpq jnp callq cmp stc stc cmpq jmpq lea movsbw not jmpq nop jmpq jmpq jmpq setns mov jmpq add jmpq jmpq bswap xchg lea mov movzbl mov setl mov jne jmpq je rcr mov movzbw movsbl dec rol mov btr mov rcl setg adc neg sub bswap movzbw mov jmpq callq dec lea jmpq jo add cmp jle test cmp jmpq callq sete mov mov mov jmpq callq clc cmp jmpq movsbw mov jmpq cmp jmpq mov lea movzbq mov jmpq jmpq jmpq jmpq mov and lea stc test cmp jmpq jmpq jmpq jmpq jmpq jmpq jne jmpq mov bswap movzbw bswap movsbl mov jmpq je jbe callq stc test jmpq jmpq jmpq jmpq clc mov ror movsbw mov test clc stc mov cmc cmc clc cmpb jmpq callq clc test jmpq jmpq nop jmpq jmpq bswap movsbw jmpq je seta mov jmpq mov jmpq jmpq je clc cmpl jmpq je shrd sbb mov stc stc test jmpq mov movsbw mov jmpq jmpq callq jmpq je mov sbb rol lea btr btc bts btr sub not not movsbl mov movzbq movzbw movzbl not mov jmpq je not movsbw mov jmpq callq sar sub add mov clc test jmpq jmpq jmpq jmpq callq sub stc rcr and mov test cmp clc xor jmpq jmpq jmpq mov jmpq je clc cmc jmpq jmpq callq bt jmpq jmpq cmp cmp jmpq jmpq mov bt test jmpq jmpq jmpq jmpq jmpq sub test xchg jmpq jmpq mov jmpq jb stc jmpq mov bswap not movsbl movzbl jmpq jmpq sub repnz lea bswap not dec dec inc bsr add mov bt jmpq je btc test xadd stc mov neg bsf clc mov bt lea clc cmp jmpq (bad) sahf pushfq in cmp rex.WB loop (bad) gs push or (bad) xor jb xchg (bad) nop sbb xchg or xor add frstor mov adc movabs (bad) (bad) js rex.RX loope mov outsb insb repz mov pop hlt int3 rex.W (bad) insb (bad) stos (bad) test pop adc xor test or scas movabs and xorb mov (bad) cmp push jne or push or movabs js rex.RX test mov insl xchg cmpsb sbb sbbl sbb xchg movsl (bad) xor push (bad) jmp xchg gs jmpq movabs cwtl pop faddl negb cwtl loopne xor (bad) jne or or nop mov xchg mov mov pop retq fwait pop cltd mov rex.RXB jl and xor jmpq rex.B mov in jne out push adc ss mov jb or (bad) (bad) jmpq outsl movabs jrcxz mov fild or xor push movsl sarb sub add insl sbbb mov (bad) outsb jns callq adc xlat push cli gs fneni(8087 movabs fadds outsl sub loope sbb jo faddl test iret xor notb jnp push xor cli ds fidiv test sbb ss or (bad) mov mov jrcxz (bad) cmp sbb fistpl cltd int (bad) rex.WRX (bad) sub rex.WR out sbb jb or loopne in jo pushfq add rcr rex.WXB mov test or fcomps mov rcll sub xchg (bad) xor pop rex.W xor (bad) pushfq out (bad) sub xor xchg movabs push mov (bad) rex.WXB rolb xorl sbb sub (bad) es rex.WXB or sar enterq xchg jmpq sub jns fs (bad) mov sub stc mov js pushq mov rex.W (bad) pop repnz or rex.RB mov rex.WB mov mov lret xchg mov (bad) out or jle (bad) idivl (bad) pop movslq scas rorb or cmp or and test pushq jne (bad) cmc scas (bad) fst xor and or cmpsl mov loope out add or and out sub movabs lock mov out divl repnz subl xchg test fsts mov (bad) mov leaveq (bad) jle xchg add mov ja (bad) rex.RX xor sahf and pushfq mov mov test movmskps in mov push out sbb xchg lcall rex.WB jmpq adc pop add pop cld rex.XB xor outsl xlat jrcxz or repz cmp cmc ja add cld movslq cmp mov iret nop sub pop xor out (bad) outsb mov (bad) pop fdivl outsb or loope movslq cld (bad) mov mov jns fs jne addr32 outsb adc ds fxam lods jno rcll enterq and and mov xorb xchg jnp out sbb (bad) mov (bad) cmp jno add jl (bad) test mov mov (bad) jne pushfq paddq icebp rolb outsb (bad) lods (bad) (bad) xchg jns sbb adc rex.WX cld adc andb mov mov jae movslq (bad) popfq (bad) out (bad) outsl (bad) (bad) je push std xchg mov (bad) cmp rex movabs sbb mov (bad) push xchg xor std std je,pn js cmp sbb sbb movabs mov scas mov mov outsl js (bad) rclb lods xlat rex.RB data16 or (bad) rex.WRX in out loopne lret subl mov repz stos std jae nop jbe int xchg lahf in add jbe imul fucomp int sahf fwait add movsb jmpq jmpq jmpq jmpq jmpq cmpq jmpq jmpq je jmpq callq jmpq cmp jmpq je jmpq je cmc cmc jmpq clc cmp jmpq callq or rcr movsbw mov jmpq jmpq jns movsbw not mov jmpq jmpq pushq jmpq movl jmpq stc add jmpq jmpq not adc or rcr shrd shrd mov xchg repnz (bad) mulb cli negl xadd not bt ror add lea movzbw inc mov test clc jmpq jmpq push (bad) jae out shl scas sub xor pop and out rex.RXB lods mov loop push sub mov (bad) rex.WB mov lods insl je,pn (bad) add add add scas or (bad) callq cmp lea bt jmpq ror adc rex.R sub cld xor ss xor mov test jl rex.WRX rex.WXB xchg xlat sbb sub ja pop outsb rex.WRB or loope loop fwait mov xchg outsb jg flds popfq xchg mov stos mov pop (bad) icebp mov cltd xor jle movabs mov mov rex.WRX ffreep mov pop or xor int fwait out (bad) test cltd lret xorb add loopne (bad) jae mov scas stos mov je es stos mov lahf xchg rcrl xor mov cmpsb retq adc sbb xchg clc iret (bad) jns movslq test rex.WB lock (bad) movsl jb and xchg xchg out loop cmp je and mov sub mov or mov jb fildl notl jge jne cmp rex.WR (bad) leaveq or retq rex.WR rex ds outsl xor std cmp (bad) xchg stos sub mov adc ds push sub mov imul test rex.RB movslq mov (bad) add movabs imul retq add std loope movslq in rex xchg (bad) ds xor out in (bad) xlat mov (bad) mov rorl insl cmp sbb xchg rcrb ds mov cltd mov sub andl movabs int3 pop rex.WX jg (bad) pop or jle jnp es (bad) rex.X popq sarl jb cli gs movsl mov gs (bad) in sti sbb xchg fsubr shll add push retq ror (bad) popfq mov iret rex.WRB cs cmp cmp (bad) rcrl (bad) jmpq icebp mov fsts cmp (bad) pop jl (bad) add test mov sub push xor jns movsl sub jle mov rex.XB popfq out rex.X sbb clc sub rcrb int (bad) (bad) pop xor sbb lcall xor stc mov bsr seta bsf adc mov cmc cmp xchg bt jmpq jmpq callq and test jmpq je stc bt cmp jmpq callq or data16 hlt or not lea bt bt bt clc test jmpq jmpq jmpq cmovns test stc test jmpq pushq jmpq je bswap and mov movsbw bsf sbb mov bt test bt test jmpq je cmc test jmpq lea inc not bswap dec not dec jmpq je cmc jmpq callq movsbl jmpq jne rcl mov clc jmpq callq btr inc sbb mov clc mov clc bt test jmpq jmpq jmpq callq shrd not sub mov neg shld not mov stc jmpq jmpq callq stc test cmp jmpq callq movsbw movzbw bswap lea movzwl jmpq stc stc test jmpq je add rcr mov xor mov lea mov clc test add jmpq cmp jmpq not movsbl mov jmpq pushq jmpq je bt shrd ror mov jmpq callq sets adc dec mov mov jmpq test jmpq jmpq jmpq jb setbe setb dec sub adc jmpq jmpq cmp bt test mov stc sub mov cmp mov test shr movzbl clc mov (bad) lock stc mov jmpq jmpq jmpq jmpq mov sets not movzbl jmpq jmpq bswap mov mov movsbw bswap not mov jmpq pushq jmpq jl pushq jmpq callq jmpq jmpq jmpq jbe bswap movzbw mov jmpq callq movzbl lea jmpq cmp cmc cmp cmc test jmpq jmpq movzbw lea lea lea sete mov lea movsbw lea mov movzbw mov movzwl bswap movzbl mov jmpq jmpq jmpq js not xchg mov lea movsbl movsbl lea not movsbl lea mov movzbw movsbw not lea jmpq jmpq xchg jmpq movzbq lea mov mov lea jmpq callq mov mov jmpq mov jmpq je cmc test cmp jmpq add shr bswap mov clc jmpq bt test jns je btc mov cmc sar rol mov movzbq and lea jmpq callq bt test jmpq inc jmpq je bt jmpq jmpq jmpq je rol cmc cmc mov shld sar mov bsr and mov bt lea clc cmp jmpq movzbq mov xchg bswap bswap lea lea not mov mov jmpq mov not jmpq inc cmp cmp bt add cmp cmp jmpq je mov movzbw mov lea mov not mov jmpq pushq jmpq callq add mov not rcr rcr mov mov cmc stc bt test jmpq jmpq jmpq jmpq je neg xor inc lea (bad) mulb rorb bt sub bswap movzbl bswap mov bswap mov jmpq jmpq je cmc dec rol bswap movzbl cmp cmc stc cmc test jmpq jb stc cmc clc cmp jmpq setns movzbw jmpq mov jmpq movsbw bts mov shl bts add add sar shr inc sub bt mov btr repnz jmpq callq cmc test je je sar jmpq jmpq movsbw setne mov bswap mov movsbl mov jmpq sub rex.WB cli rex.RXB loopne enterq mov movsb lahf sub in out push loope stos mov fwait enterq loopne push xlat lock (bad) nop movabs add jmpq callq dec movsbw xor ror mov cmc clc test jmpq jmpq jmpq jmpq je test test bt test je je movzbl mov lea not lea xchg xchg mov setno mov mov je callq ror movsbw bt mov cmp test jmpq imulb cmp lods cli jnp jg (bad) cmp mov mov pop outsl cmp (bad) gs shlb sbb add nop jmpq callq adc shrd bt mov shrd mov shrd lea movsbw xor or mov xor shr bts shr repnz mov not not mov dec mov mov lea bswap mov jmpq jmpq sub jmpq je jb movsbq dec bswap lea dec movzbw ror ror bts mov and or movzbl mov bsr add ror and xor not rcr bswap shl mov movzbw repnz movzbw movsbw not not dec dec lea test shr mov cmp clc bt test jmpq jmpq jmpq jmpq mov (bad) lock mov xor or jmpq mov jmpq jmpq jmpq jmpq jne clc clc clc cmc cmpb jmpq xchg movzbq sete mov mov mov movzbw movzbl lea jmpq jmpq jb cmp jmpq je jmpq test jmpq callq cmc test clc cmp jmpq inc jmpq jmpq jb dec not setne jmpq jmpq bt jmpq bt test cmp jmpq ja callq clc test xor jmpq jmpq jmpq jmpq jne mov not mov jmpq jmpq fisttp add sahf stc ds lock rex sbb rex.RXB push out rcl (bad) (bad) movabs rex ja fwait movabs imul mov mov mov lea fs out sbb fdivr (bad) (bad) jo and jmp (bad) sti lret rex.WB (bad) (bad) fstl xor sbb cltd xlat jo jbe mov xchg retq lods or jae callq int (bad) rex.WRXB rex.WRXB pop rol clc mov xchg dec stc clc mov cmc btc rol rcr lea sub lea neg inc xor bsr add bsf btc mov not inc btr data16 cmc mov bswap sub (bad) repnz add adc mov stc dec mov cmc stc add jmpq je bsr lea add dec adc sub setg lea xchg mov jle mov jmpq je jmpq cmp cmp test jmpq mov jmpq jmpq jb clc jmpq je stc cmpw jne je jmpq test mov shld sub movsbq and mov btc dec neg mov clc add cmc sub cmp cmc jmpq jmpq xchg bswap setg mov jmpq callq cmc test cmp test test jmpq jmpq jno je shr or movzbl ror lea mov add sub neg repnz mov movsbw setp mov movsbw movsbw mov not movzbw mov lea lea setne not not lea jmpq mov jmpq jmpq je (bad) lock dec clc neg mov cmp test jmpq je cmc jmpq callq movzbw bswap setl neg mov jmpq jne movzbw shl cmc add mov cmc test bt cmp mov jmpq cmp jmpq pushq jmpq jmpq mov jmpq movsbw movzbw bswap movsbq mov jmpq je bsf clc (bad) lock mov dec mov rcl bswap cmc btc mov btc not lea add jmpq clc cmp clc test jmpq callq test cmp jmpq jmpq jmpq jmpq jmpq seta not cmp lea jmpq jmpq lea jmpq not mov not cmc repnz test not neg lea mov bsf mov stc sub jmpq jbe jmpq jmpq jmpq jp nop jmpq add jmpq jmpq inc sub jmpq movsbq lea jmpq test cmc test jmpq jmpq nop jmpq pushq jmpq jmpq je cmc clc stc mov stc jmpq jb xadd mov shl and mov cmc add shrd mov neg rcr not bsf mov rcr movsbw lea xchg lea mov lea btr sar add bt dec movsbw mov xadd shld xor mov cmp add bts clc add sub cmp ror mov movsbw movzbl mov stc jmpq jmpq callq shld cmp and mov cmp test jmpq nop jmpq callq sbb dec mov jmpq je movsbw xor movsbw mov jmpq jmpq bt test cmp jmpq jns jne bt btr bswap mov cmc cmp cmc mov test cmc bt clc add stc jmpq cmp jmpq inc jmpq test jmpq jmpq movzbq movzbq mov jmpq mov bt cmc test test jmpq movl jmpq jmpq jmpq jmpq jmpq div xchg xor outsb imul mov popfq or (bad) imulb and jge movabs rex.RXB data16 ja cmp adc lock push jae ja cmp jnp loopne lret movabs leaveq mov loope pop loope cmp out mov sti (bad) ss adc jmpq (bad) enterq jno cmpsl sarl cmpsl mov (bad) in andl imul rex.RX mov mov (bad) fdiv jns rex.X jg int mov movabs cmc add clc cmp bt add bt jmpq jmpq pushq jmpq jmpq clc cmp jmpq lea jmpq callq bt test jmpq callq movzbw lea mov jmpq test jmpq jmpq je jmpq jmpq jmpq not movzbw dec jmpq jnp callq stc cmc bt clc cmp jmpq je test test test cmpq jmpq not movsbw mov jmpq movsbw jmpq je clc bswap test cmp mov test clc test jmpq callq test stc cmc jmpq jmpq callq stc clc clc clc test jmpq callq xchg lea not mov bswap jmpq jb jmpq callq rcl sar add bsr mov rcl xor not xchg setns movsbw mov mov mov jmpq jmpq jmpq mov jb callq setle lea mov btr lea btr mov cmp bt xchg cmc bt test stc test jmpq jmpq mov movsbw movsbl mov jmpq jmpq jo je jmpq jmpq mov not lea bswap mov jmpq je clc bswap sub mov jmpq mov mov jmpq lea cmc cmp sub jmpq callq clc stc cmp jmpq callq cmp cmc cmp bt mov test test jmpq jmpq jne inc shrd mov bswap mov btr cmp lea bts add jmpq cmp movzbl sar bts mov rcl xchg movzbl xchg sub ror or stc mov data16 lock and inc dec bts not rol neg btc lea cmp cmc js stc xor jmpq jmpq jb bswap lea movsbl movsbl incl movabs bswap movsbw mov jmpq jmpq je mov not jmpq mov jmpq callq bt jmpq jmpq lea mov jmpq mov mov bt xor movzbw xor not lea jb callq test clc cmc cmp jmpq jmpq test jmpq jmpq callq jmpq je shrd movsbl setns mov jmpq movsbl mov bswap mov jmpq callq movsbl or stc mov jae bt test jmpq je bt bt cmc cmp jmpq mov jmpq jmpq jb bsr stc sbb bsr mov cmp test clc test test jmpq dec jmpq callq clc bt clc cmc test jmpq jne xor bts xor mov stc test cmc clc test jmpq add bswap mov mov lea jmpq jmpq jne stc movsbl lea bts lea cmc jmpq callq stc cmc test stc test jmpq test jb je cmp jmpq bt cmp jmpq mov movsbw bswap mov mov jmpq test jmpq jbe mov sub shr rcl mov sbb cmp mov rol adc ror cmc mov stc clc jmpq jmpq cmp jmpq jmpq jmpq je bswap mov jmpq jmpq je bt clc cmpq jmpq jbe cmp shl btr mov shl mov rol not mov cmp cmc clc jmpq jmpq jne btc data16 lock add sub movsbl mov mov movsbl lea jmpq movsbq jg lea js callq xchg lea mov lea lea jmpq je lea jmpq callq jmpq add jmpq callq cmp test cmp jmpq jmpq jmpq jb setbe lea lea dec bt jmpq mov dec stc or adc mov neg neg mov or add data16 (bad) (bad) sub test xadd mov clc repnz lea bswap mov not mov dec dec clc rcr mov jmpq movzbl mov jmpq je clc jmpq jne lea setae mov jmpq mov movzbl mov jmpq callq jmpq bt cmp cmc test jmpq lea lea setg mov not mov mov movzbw jmpq callq sbb mov cmc test jmpq je test test stc clc cmpl jmpq callq xchg mov movsbw mov seta lea bswap mov jmpq callq sub and sub bswap mov cmp xor movzbw bswap xchg mov mov bswap mov jmpq jne setg inc sub mov cmc jmpq je dec xchg shr bsr mov mov mov movzbl movsbw mov adc movzbw shld movzbl sub jmpq clc xor jmpq jmpq mov jmpq jmpq jmpq jmpq callq test clc cmp jmpq callq clc clc cmc stc cmp jmpq js lea mov movsbl bswap jmpq jmpq lea bswap bswap lea mov jmpq setp bswap mov mov jmpq je movzbl mov cmp mov shl and lea bt cmc cmp jmpq stc stc test jmpq jmpq callq shrd ror btr inc mov cmp bt test jmpq callq clc stc cmp xor jmpq jmpq callq shld mov bt test stc test jmpq callq dec bswap rcr rcl mov bsr ror neg rol mov jmpq callq bt clc test jle jns mov jle movsbl mov jmpq movsbw bswap mov movsbw bswap lea movsbw mov jmpq jmpq not movzwl jmpq jmpq je xchg movsbw lea mov xchg bswap mov lea movsbw mov movsbw bswap bswap mov jmpq je jmpq callq jmpq jmpq callq bswap bswap mov mov xchg mov bswap mov not mov movzbw setle mov jmpq jmpq jmpq callq cmc stc cmc test test jmpq callq cmc cmc jmpq nop jmpq je sub shld xor sub movsbw setb bswap mov jmpq jmpq loope (bad) mov rclq and stc and cmp out (bad) xor mov cmc pop (bad) cmp scas mov rex.WB and movsb movabs jmpq je jmpq callq clc sbb mov cmp jmpq callq bt test jmpq jmpq jmpq jmpq mov jmpq jmpq jmpq jmpq jmpq jmpq xor rcl cmp movzbl or adc sub setne bswap mov movzbw movsbw jmpq jmpq jne jne stc cmc jmpq je jmpq bswap incl setb setbe mov jmpq je jmpq jmpq cmp jmpq je rcr inc sub not mov jmpq callq add inc mov jmpq je cmc clc stc sub jns callq movzbl setno mov lea mov jmpq jmpq callq setp not mov jmpq test jmpq jmpq jmpq callq bt test cmp clc test jg je jmpq je test cmp cmpq jmpq jmpq jmpq jmpq jne not shrd not add movsbw bswap jmpq mov jmpq jmpq je lea neg xor movsbl lea mov jmpq lea bswap mov mov mov jmpq jmpq callq dec sar or mov shl xor shl sub jmpq repnz xchg xchg mov not not mov movsbl bswap lea movzbl mov lea lea jmpq mov not bswap mov jp setp bswap lea mov jmpq jmpq jmpq je cmp cmp jmpq callq inc not not mov jmpq cmovns test bt test bt test jmpq pushq jmpq jmpq jmpq jb movsbl dec btr cmc mov shl shld cmp rol or add or lea rex.B hlt adc shld shr add inc xchg sub add neg mov and cmp repnz movzbl not movsbw not mov dec lea or bsf mov jmpq cmp jmpq jmpq jmpq je cmp stc jmpq jne cmc mov xor cmp mov bt btc shrd mov mov xchg bt cmp cmp add mov inc cmc mov lea bswap rex.WB icebp not mov stc cmp clc jmpq mov sbb mov cmp cmp clc add cmc cmp jmpq lea mov jo callq jmpq bt clc test jmpq sub bt jmpq jmpq callq test bt test test jp je clc cmp jns jb movsbw data16 icebp add leaveq mov movzbw xor jmpq jmpq jmpq mov cmp clc cmp test jmpq mov movzbw movzbw mov clc cmc test jmpq mov jmpq test xor cmc bt test xchg cmc clc test jmpq jmpq callq lea not mov cmc cmc test cmp test jmpq jmpq callq cmp test jmpq jmpq jmpq jmpq add stc sub clc stc cmc add jmpq callq test dec neg btr mov jmpq callq sbb shr jmpq add test test add test test cmc clc xor jmpq jmpq jmpq jmpq callq jmpq jmpq jmpq jmpq mov mov movsbw movsbl xchg setge mov jmpq callq cmp not sbb dec mov jmpq je jmpq jmpq je data16 lock stc mov movzbw mov bswap btr lea bt bt cmp jmpq jmpq jne mov dec xor shld mov sbb or movsbw bsf not mov stc cmp repnz bswap xor rcr nop rol bts rol movzwl jmpq je shrd (bad) icebp mov movsbl rol mov setp lea btr cmp lea cmc jmpq jmpq jb xchg dec or cmpb jmpq jmpq callq xor not and mov jmpq je setl mov btr ror test movzbw mov jmpq jmpq callq movzbw and sar mov lea test test jmpq je test cmp cmp jmpq jmpq je test stc clc cmpl jmpq jne seta mov jmpq je adc shld neg mov bt rcr mov and shrd bts mov test stc add bsr dec mov cmc clc add clc test test test add jmpq jmpq callq test jmpq callq sub rcr cmp mov shrd bsr test sub not mov mov jmpq jmpq jmpq jmpq je cmc stc cmp jmpq pushq jmpq jmpq add bsr xadd mov dec or dec shr mov btc shl bts neg sub shld mov movsbl repnz movsbw bswap not inc lea dec cmc rol btr mov cmp test jmpq jmpq jmpq mov and sub in sub adc fild shlb lahf mov (bad) fstl sub in xor retq and add subl sub js and shll pop adc test or add gs jne movsb rex.WXB notl xor cmp rex.WB es add or out js (bad) ficom jb rex.RX (bad) adc cld push cwtl addb xchg movabs (bad) fucom loope rex.RB or int retq movabs add push xor cltd mov and and xchg icebp rex.WXB sbb (bad) pushq cmpsb test in ja outsb xchg jg lret lret pushq push jne (bad) cmp (bad) fldln2 icebp and loop and out xor jno jb (bad) mov or cmp cli jmpw pop and and movslq pushq sbb xchg rolb rex.WB mov sub retq push in push pop sub ss cmp jle xchg cmpsl (bad) and push movsl sub out xor (bad) (bad) add and rex.R mov lret xor xor rex.R jne (bad) and cmpsl leaveq (bad) movabs jno movabs sbb je xorb (bad) (bad) in in int3 cmp sbb (bad) fisttpl push stos add mov and (bad) sbb (bad) sbb (bad) jrcxz in movsl cli jbe (bad) or scas jb rex.WR mov cld jmpq mov leaveq bswap lea jmpq callq lea mov stc clc stc xor jmpq je movsbl mov bswap setge mov jmpq mov lea mov jmpq jmpq je bsr (bad) repnz test mov adc mov movzbw bt rcl or mov add mov cmp stc add bswap rcr rol mov stc cmp add setge mov test cmc add cmp cmp cmp add jg rcl sub mov jmpq jmpq bts stc (bad) hlt add add bt jne stc test jmpq jmpq mov jmpq jmpq callq test bt cmc bt cmp jmpq jmpq jmpq jmpq mov jmpq je mov not movsbq mov jmpq jmpq mov mov jmpq jmpq mov jmpq jmpq jmpq callq btc cmp shrd sbb mov test test jmpq movsbw mov mov mov mov bswap mov jmpq xchg movsbw not mov mov jmpq jmpq jmpq test jmpq jb mov mov incl seta movsbq setg setno mov jmpq jmpq jmpq jmpq nop jmpq jmpq callq shr btr mov jmpq je movzbw mov setne xchg lea bswap mov jmpq callq cmc cmp and bt bt cmp jmpq jmpq callq dec mov mov shr lea cmp clc cmp jmpq mov cmc cmp cmc cmpb jmpq cmp test clc test jmpq jl jmpq jb movzbq not lea dec jmpq jmpq je not mov jmpq jmpq callq dec bsr mov bt cmp bt test jmpq sub jmpq jmpq callq bswap movsbq movzbl lea jmpq jmpq sub rol bts shld sbb xchg inc ror movzwl jmpq je bswap movsbw mov bswap jmpq jmpq je cmc stc stc stc cmp jmpq jmpq jmpq callq jmpq bsr shld mov btr xor mov and rcr and lea sete jmpq je jmpq jmpq jmpq jmpq jmpq jmpq cmc add jmpq callq test cmc test jmpq jmpq je shld mov inc mov clc mov lea cmp cmp jmpq jns je jmpq setb lea mov lea jmpq jmpq jmpq mov mov mov jmpq callq cmc test jmpq jmpq mov jmpq callq bswap btr and bsf sub movzbw mov mov movsbw not dec inc mov jmpq callq sub lea clc mov dec shr adc jmpq mov jmpq jmpq callq movsbw bswap mov stc test jmpq jmpq jmpq je movzbw movzbw mov jmpq je xchg movzbw lea seta bswap xchg lea movsbw movsbw mov jmpq jmpq jmpq jmpq add bt btr mov test bt add rcr mov cmp cmp test add clc cmc test add cmp neg and inc mov jmpq jne setnp movsbl lea jmpq je jmpq callq jmpq jmpq jmpq jmpq jmpq lea lea jmpq callq neg shrd mov btc dec neg movsbw mov stc bt sub jmpq jmpq js mov movzbw not movzbw mov jmpq mov test stc mov jmpq je bt cmp cmc test cmp jmpq lea mov jmpq lea lea jmpq jmpq jmpq jmpq jmpq jne clc test testb jmpq jmpq je cmp stc jmpq je test cmp cmpq jmpq jmpq jmpq callq sub clc mov test jmpq js nop jmpq jmpq callq cmp xor jmpq je cmp adc mov cmc clc ja jmpq callq cmp cmc test test test jmpq callq stc sub lea clc cmc bt test jmpq jmpq and clc (bad) sbb mov pop or (bad) xor fsubrp xlat gs or or je push adc lods ss lock test and lods push pop (bad) pop cmp cmp lods adc es (bad) fisttp lret mov mov sti (bad) xchg data16 and sti lret and mov xchg xor cmp cltd jp sub mov (bad) pop (bad) js retq insl imul push fist sub scas imul decl cwtl (bad) rorl rex.RB mov retq not mov lea jmpq callq jmpq movb jmpq cmc stc mov and and shld sar movzbl cmc mov btc mov test cmc bt mov bsr setns shl mov cmp xchg clc cmc test cmp cmp jle je clc test clc cmp jmpq je mov mov jmpq jmpq je bswap shld rcl xor not jmpq je jmpq jne bswap shl xor movsbw mov mov bswap not movzbl lea jmpq jmpq jmpq movl test cmc mov bts btr bswap mov stc bt mov cmp jmpq je clc cmpq jmpq cmp test je je and rol bsf neg mov cmp cmc jmpq callq jmpq jmpq callq bt cmp clc stc cmp jmpq jmpq je movzbl mov movzbw mov jmpq jmpq mov jmpq bt seta bt movzwl bsr inc bswap sub rol xor mov cmc test test add jmpq xchg jmpq je movsbw jmpq jmpq jmpq mov movsbw not bswap mov jmpq cmpq jmpq jmpq callq setge sub lea mov jmpq callq cmc cmp jmpq jmpq jmpq mov jmpq stc cmc cmp jmpq mov movabs not mov movzbq lea lea jmpq jmpq jmpq jne jmpq clc cmp sub jmpq test (bad) repz int mov mov (bad) pushfq sub ljmp sbb lahf fsubr in cmp push out sub gs (bad) jmp sbb lret and js std or adc (bad) cli ss mov pop ss rex.WRXB add sbb clc fist sub leaveq out std jae cwtl int data16 or movabs sub (bad) jmpq jmpq jmpq jmpq je stc stc cmp cmp jmpq jmpq jmpq mov test add jmpq sti lahf fistp ja test rex.WB xchg leaveq (bad) gs jns test add (bad) repnz divb sub sahf or callq pop pushq xchg shrl (bad) sub (bad) mov jo lods jl add cmp adc pop and (bad) rex.WRXB rex.W rex.X jmpq (bad) loopne lret (bad) (bad) xchg lret (bad) sbb sub (bad) jns adc (bad) outsb add add jnp mov (bad) xor cli rex.R clc cmp int fs fimul (bad) pop mov add test movsb clc (bad) decl test (bad) decl push (bad) (bad) decl test (bad) decl mov rex.WB lock xadd mov xor btc mov cmp add jmpq je not movzbw jl jmpq callq test cmp stc test jmpq lea jmpq jmpq or jmpq callq lea movzbw mov jmpq jmpq callq test test cmp jmpq shld mov clc test jmpq callq setl not setns lea mov lea jmpq add divb add add add add xchg jmpq jmpq bt test jmpq clc nop clc bt test jmpq callq rex.B lock mov bt jmpq jmpq jmpq jmpq jmpq jmpq callq jmpq jmpq lea jl callq mov bswap movsbw movzbl lea jmpq callq movzbw not lea mov cmp test cmc jmpq callq btr mov clc movzbl (bad) repz shr cmpq jmpq jmpq jmpq je test clc cmp jmpq jmpq jmpq movsbl mov jmpq jmpq nop jmpq jmpq callq jnp test cmc clc and jmpq callq mov not bswap bswap mov movsbw mov jmpq mov jmpq jmpq jb movsbw xadd mov cmpb mov jmpq sub stc add jmpq je stc js cmp jmpq callq jmpq mov mov not movzbl jmpq callq jmpq callq bswap movsbw not mov bswap mov mov movzbw bswap mov jmpq jmpq jmpq callq cmc rcl mov cmp bt clc test jmpq dec movsbw shl bsr mov xor bts add shl or sub cmp data16 not fisttp bts add jmpq cmp clc cmp jmpq callq stc test jmpq callq clc inc mov cmc rcl xchg or mov ror stc mov btc movsbw mov jmpq test test jmpq jmpq callq jmpq jmpq jmpq callq stc cmc test jbe je shr mov movsbw mov shr rol rcr sar mov movzbw bt mov cmc add btr mov bt add lea not mov jmpq je test mov jmpq mov jmpq jmpq add stc clc cmc cmc sub cmc test test add jmpq callq xor mov or rol inc rcr mov shl or jmpq callq ror rcl bsr lea cmp jmpq callq bts or sub mov test cmc cmp test jmpq pushq jmpq jmpq jmpq jmpq callq lea mov mov movsbl movsbw mov jmpq je data16 lock clc test jmpq mov jmpq callq xchg mov xchg mov seta mov lea mov jmpq je shr dec sub bswap not mov jmpq je cmc cmc cmpw jmpq lea lea movzbl movabs movzbw lea jmpq jmpq mov not jmpq (bad) (bad) movsl and xchg cmp jns (bad) jmpq stos addb rex.X icebp mov scas sbb sti and mov repz ja mov je scas je mov movabs callq rex.WR (bad) out mov lods fsubrl rex.RXB outsb pushq movslq sti lret cs mov rex.WB repz mov ss push callq lods mov rex.X (bad) or loope (bad) rex.WR rex.WR cmp rex.W pop add test sbb push (bad) pushq xor (bad) or add jg out xchg add (bad) jmpq jmpq jmpq stc and cmc cmp test cmp cmp jmpq je ror mov movzbw bts data16 icebp dec mov clc test test test jmpq and ja and pop pop (bad) and xor ror je rex.RX rex.RB pop outsb vmovhps or sbb enterq out jp xlat jmp (bad) add fiaddl je shrd mov test stc test jmpq jmpq jmpq movl jmpq callq shl mov rcl inc shr mov sub rex.B hlt sbb cmp xor btc not bt repnz movzbl lea lea not movsbw dec bt mov cmp test test jmpq callq movzbw movzbw not mov setne jmpq jne not movzbw mov jmpq je jmpq jmpq jmpq xadd bsr mov sbb data16 lock rcl add mov cmc bt clc test add cmp add cmc cmp test add movzbw lea bswap mov jmpq jmpq jmpq jb bt cmp jmpq callq btc rcl mov bt bt test jmpq jmpq jmpq movabs mov mov jmpq jmpq jmpq jmpq jb lea setg lea mov dec shrd ror movsbq mov btr cmp or jmpq je bts movzbl cmp clc ja stc test jg je stc clc cmc stc test jmpq callq jmpq jmpq lea lea bswap mov lea jmpq je cmp lea not rcr (bad) divb leaveq mov xchg mov mov movsbw mov jmpq je bswap lea movzbq mov jmpq jmpq callq jmpq callq test cmp jmpq jb clc xchg sub ror mov rcr setl bsf setns xor setnp jmpq bt cmpl jmpq je jmpq test add or mov test cmc stc add inc mov bswap bt mov stc jmpq je test test bt cmc cmp jmpq bt clc cmp jmpq je jmpq jmpq je test cmpl jmpq clc stc bt add bt mov stc cmc stc add jmpq mov not mov jmpq jmpq mov mov setne setns setp mov jmpq je xchg xchg mov movzbl movzbl mov mov setp not jmpq jmpq mov jmpq jmpq callq test shld xor lea movsbw mov mov jmpq jmpq jmpq jmpq callq test test mov jge cmp cmc stc cmp jmpq callq bswap mov movzbl xchg xchg mov mov mov bswap mov mov jmpq jmpq pushq jmpq jmpq add add add add pop cmpsl (bad) (bad) cmp xchg (bad) stos cs cltd fcomip adc xor xor push jmpq bt clc test jmpq jne movzbl adc clc mov bts movzwl bt stc stc cmp jmpq bt bt test jmpq je clc clc cmpq jmpq mov jg bswap mov jmpq jmpq pushq jmpq jmpq movsbq mov jmpq callq cmp sar mov bt bt test test jmpq jmpq callq jmpq je sar mov test xchg lea seto sub mov mov bswap mov jmpq cmp test jmpq (bad) jnp pop sbb loopne movsb (bad) or cmc repz cmp xlat in (bad) addr32 mov scas mov mov movsl xchg imul sbb pop loopne rclb fisttp mov fs pop push pop and mov out add sbb mov in lret rex.WR out outsl fidivr test pop sarb xchg cmp adc mov xor jge add jne pop jp (bad) retq fstps (bad) movsb sti (bad) and or clc cmp sub clc sti fs pop sbb mov cltd rex.WR mov fdecstp flds push rex.RB (bad) jmp movabs rex.WRB (bad) push sbb popfq out rex.X ss mov pop sbb scas push rex.X std cmp add jmpq je test cmpq jmpq je movabs lea mov jmpq jmpq xor bt cmc jmpq mov rcl mov not bt or lea mov shld lea or mov add sar rcr and movzbw mov rcr test mov sub bsr test shrd add bts cmp shl neg mov clc rcr mov test test add cmp jmpq jne stc sub stc clc jmpq movzbw mov mov movsbw bswap movzbq jmpq jmpq jmpq callq clc cmc cmc cmp jmpq jmpq jmpq lea sbb or or sub adc xchg mov bt xor repnz add not xadd not (bad) repnz sete bt lea mov mov test xor jmpq nop jmpq clc cmc test cmp test jmpq lea mov jmpq clc test cmp jmpq callq cmp cmp test xor jmpq cmp test jmpq jb xor rcl cmc stc lea test cmc stc stc sub jmpq test js js lea bswap jmpq callq movzbw xchg jmpq mov mov jmpq cmp test jmpq callq add mov cmc xor jmpq je clc sub adc lea sub movsbq sbb shr sub not lea movzbw bswap mov lea not mov jmpq jne jmpq cmp cmp mov mov rol shld bts mov clc bt mov and movzbl jmpq dec and mov btc or rcr inc sbb mov dec shl sbb sub data16 (bad) or mov mov bts not repnz not mov jmpq callq rol rcl bswap mov stc test jmpq mov jmpq mov jmpq jmpq je not bswap xchg jp lea movzbw movabs xchg mov mov lea movzbw mov lea mov jmpq jne rcr sbb xor lea cmp cmc test cmc add cmp cmc cmp xor jmpq callq cmc clc jmpq jmpq jmpq jmpq jmpq callq test ror mov clc bt cmc clc test jmpq jmpq jmpq callq jmpq add jmpq je bt stc cmp bt cmp jmpq callq test cmc cmp stc test jmpq jmpq callq and mov jmpq jmpq je setae jmpq jmpq jmpq jmpq jmpq bswap mov movsbl mov jmpq callq inc cmc stc mov rcr cmpq mov seto jb mov jmpq je jmpq add add cmp or (bad) xor sbb add add jne btr movsbw mov bsr lea mov cmp cmc add jmpq lea lea mov jmpq jmpq js jmpq add cmc cmp cmc cmp jmpq jbe jne setge movzbw setb setle mov jmpq dec jmpq add jmpq jmpq jmpq callq xor mov clc cmc test jmpq lea mov mov jmpq jne jmpq jmpq jmpq shl bswap sub not lea lea lea mov jmpq jbe jmpq jmpq je btc rcl mov test test test jmpq jmpq callq clc bt stc cmp jmpq callq rol add lea cmp test jmpq cmp jmpq jmpq lea mov movzbw bswap sete mov mov bswap movsbw mov jmpq mov mov movzbw movzbl jmpq jmpq jmpq jmpq je dec or lea test sub rcl sub mov movzbw bswap bswap mov jmpq je setb xor movsbl mov bswap mov jmpq js movzbw mov mov bswap lea mov lea movzbq mov lea bswap lea jmpq je jmpq jo jne jmpq je test stc cmp xor jmpq jmpq xor jmpq je bt cmp jmpq callq jmpq je cmc stc jmpq jbe inc movzbw add lea bt test test sub jmpq jmpq jb rol sub shl lea stc xor jmpq shll add and jl (bad) add hlt add ja add hlt push add xor add int add sub mov add cmp add add or add xchg add mov add jl (bad) add (bad) setle mov setb bswap mov jmpq jmpq (bad) mov (bad) mov xchg rex.R rex.WX push sub faddl test (bad) mov push mov (bad) sar lret cmp retq mov (bad) lea mov (bad) sub push (bad) pushq or xchg popfq movabs adc xor stc outsb add cmp push fcmove scas rex.WRX lret cwtl jne jmpq jmpq callq cmp cmp test and bt clc test test cmp jb jb movzbw lea mov dec dec sar mov (bad) (bad) or mov bswap or bswap sub rcr mov neg lea sbb add adc stc sub bts btr rol test mov clc repnz lea movzbw dec not not not jmpq callq jmpq jne movzbw mov cmc mov sets shl mov bswap rcr mov stc clc cmc add cmp add cmc add stc add clc stc stc add jmpq jmpq je not not movzbw setge mov jmpq je movsbw movsbl mov jmpq jne jmpq je shr xor lea movsbw jmpq jo je bt jmpq callq clc test bsf shl mov bt test jmpq mov jmpq callq mov jmpq jmpq mov jmpq je jmpq je lea or and mov mov clc jmpq movzbw mov jp inc movsbw mov jmpq lea setle setbe mov jmpq jmpq pushq jmpq jmpq jmpq mov jmpq jmpq jmpq je jmpq mov mov xor lea lea lea mov jmpq je shrd data16 (bad) pcmpgtd decl leaveq decl mov rol lea rcr not xor movzbw shr adc repnz jge mov bswap not movsbw lea bswap setb setb movsbw lea jmpq callq ror neg cmp mov jmpq jmpq jmpq mov setae mov bswap bswap bswap mov mov lea setg mov jmpq incl jmpq callq stc mov xchg mov shld rcr dec or xor mov rcr shr sub sub movsbw repnz jmpq callq clc test test jmpq jmpq jmpq add test stc cmc add lea movsbw bswap mov mov jmpq callq cmp btc mov cmp test jmpq jmpq callq bswap adc mov bt jmpq movsbw movsbw not mov jmpq jmpq jmpq jns bswap movsbw mov jmpq jmpq jl mov movzbw movzbw movsbw movzbl jmpq je not inc mov test test bt stc test jmpq not mov jmpq je cmc test test jmpq je cmc bt bt cmc cmp jmpq clc stc bt add cmp cmp clc test cmp jmpq jbe mov jmpq stc cmpq jbe je cmc add rcl mov shl ror stc mov cmc cmp jmpq jmpq jmpq jmpq jmpq je test cmp stc cmc cmpq jmpq lea jmpq jb shr btc xadd setge mov bsf shrd movzwl test bt cmp jmpq jmpq mov jmpq jmpq jmpq jmpq xor jmpq jmpq jmpq jmpq mov not mov jmpq jmpq jmpq jmpq je cmc cmp stc cmp cmpl jmpq callq bsf rcr mov test cmp test jbe je jmpq jmpq cmp cmpw jmpq mov movsbw lea mov mov bswap mov movsbl lea jmpq bswap mov lea lea jmpq movzbw lea jmpq add mov test test jmpq jmpq jb bswap jne movsbw mov jmpq jmpq jmpq jmpq callq cmc mov test jo cmp test jmpq jmpq callq lea not lea lea jmpq jle jmpq mov lea mov jmpq clc test test jmpq test jmpq jmpq je stc sub jmpq cmc test jmpq jne stc test stc cmp cmpb jmpq stc jmpq callq bt test jmpq not setp jmpq pushq jmpq callq inc mov or sar sub mov lea not not mov jmpq mov jmpq stc stc test jno jmpq jmpq jne jmpq jb jmpq jmpq jmpq inc jmpq jb test cmp jg jb mov shld jmpq jmpq add lea cmp movsbw mov jmpq callq cmp cmc jmpq incl jmpq callq mov bswap lea movzbw lea jmpq callq bt cmc test jmpq jne movsbw mov mov lea mov jmpq mov mov jmpq je cmc sub jmpq jmpq je jmpq jmpq callq movsbw movzbq mov jmpq je sar mov clc jmpq jmpq mov jmpq add callq lea lea lea jmpq mov test shld mov rcr shr xor add mov cmp stc cmc bt add jmpq jmpq pushq jmpq jmpq js jne cmp bt clc stc cmpq jmpq stc test jmpq mov lea movsbl movzbw mov jmpq jmpq incl not bswap mov jmpq jmpq bt clc add test add stc sub jmpq jmpq mov not bswap lea lea mov setae sete movzbw lea jmpq je test jmpq jne sub shl mov rcl stc movzwl jmpq jbe jmpq jne rcr sub lea mov jmpq test jmpq jmpq pushq jmpq mov clc movzbl bt cmc mov cmp mov jmpq callq bswap lea jmpq je cmp sub jmpq jmpq callq btc test sar mov bt test jmpq test stc add jmpq mov cmp clc cmp stc sub stc add bt bt clc jmpq shl sbb stc sub clc sub and repnz movsbw lea dec not movzbw lea lea dec not shl mov jmpq callq lea shrd sub mov mov jmpq test jmpq jb callq add rol bsf mov test cmc test jmpq callq mov mov lea dec mov jmpq callq not jmpq je dec mov lea rol not rol sub bswap jmpq clc cmc stc cmpl jmpq callq btc movzbw shl xadd mov btr rcr shld bsr mov bt test test jmpq callq bts shrd mov and mov bt jmpq cmp cmp jmpq je setl sbb mov rol or sbb jmpq jmpq mov jmpq jmpq jmpq jmpq callq shrd data16 lock bsr mov sub ror mov inc jmpq callq clc jmpq jmpq jmpq mov jmpq jmpq pushq jmpq je jmpq test test jmpq je cmp bt cmp test cmp jl jne clc shrd and mov clc cmc jne bt cmp jmpq jmpq je clc clc cmp jmpq mov jmpq jne setp movsbw mov jmpq jmpq jmpq jmpq cmpq jmpq callq dec and mov cmc test jmpq cmp bt xchg cmc stc stc test jmpq jne jmpq jmpq jmpq js movsbw mov jmpq je bts test and rcl xor not lea jmpq callq bts add data16 mull mov cmc cmp test test jmpq test jmpq jnp callq adc bswap shl mov cmc cmc test jmpq jmpq callq shl bt jmpq cmp jmpq jb cmp clc cmp jmpq add add add jp xor clc adc mov push xchg xchg pushq jmpq jmpq jmpq jne not movsbl mov mov bswap mov not lea not mov jmpq jmpq jmpq nop outsl xchg shll nop (bad) jl lret outsl vfmsubaddpd sub mov (bad) test mov xchg test jmpq sbb lret rex.WRB push (bad) lods scas jrcxz or jae pop (bad) pop rcrl adc je pop adc rcrl out jg rex.WR rex pop shl rex.WRXB jae (bad) out stc repz ds xchg jrcxz callq movzbl mov bswap movzbw bswap mov jmpq jmpq callq cmc jmpq mov setb movzbw lea mov lea movsbw mov jmpq callq stc bt test jmpq jmpq je jmpq jmpq callq test test jmpq callq bt test jmpq jmpq je movzbl mov movzbq rol data16 lock loop shl jmpq jmpq jmpq mov bswap mov movzbw jmpq je stc test cmp cmp jmpq add jae mov sbb mov cmc rex.RX (bad) cli int leaveq test fistpl stos movslq callq sti xchg sti lret rex.WRXB insl imul jnp add movsl div xor or test mov pop adc cmp (bad) xor rex.X ror int cmp imul decl test movzbl xor mov jmpq callq cmp clc jmpq callq bt jmpq je movsbw btc mov test cmc cmp clc test jmpq jmpq jmpq and cmc jmpq jmpq jne btr add jmpq bt cmp cmp test jmpq jmpq jmpq jmpq cmc shrd xor shrd repnz bswap mov mov movsbw not mov bswap jmpq jmpq jmpq cmc clc cmp jmpq jmpq cmovne ja mov jmpq callq sbb movsbl bswap mov clc bt clc bt test jmpq callq ror clc mov bsf movsbq sub not movsbw movsbw lea mov jmpq jmpq je stc clc bt jmpq pushq jmpq jmpq jmpq movsbl mov jmpq movzbw mov jmpq js movzbl bswap seto mov jmpq jmpq cmpb setp mov mov movsbw movzwl setp setp bswap mov movsbw mov jmpq jmpq jne test cmp jmpq jmpq jmpq jmpq mov jmpq bswap mov mov jmpq je jmpq cmp jmpq callq cmp mov btr sbb mov bt test jmpq jmpq cmc jmpq je bt cmp jmpq jne inc rol shr mov xchg adc mov movsbw clc shrd mov clc jmpq setl movzbw mov jmpq jmpq callq or xor sar btc mov test stc cmp test jmpq je sub mov cmp jmpq sbb (bad) push mov adc cmpsl xchg fxch cmpsl fsubr pop outsl lahf fwait mov mov push adc idivl (bad) sub pop imul xor xchg test rex.RXB and fld or imull cli movsl ja rex.WXB fcmovnbe leaveq cmp (bad) pop and push cltd in pushq ljmp outsl hlt lea xor mov ss loop jrcxz stc push std in enterq (bad) ja cmp cmp cmp sti (bad) jb mov xlat movabs js sti lret push pushq rex.B lret movsl (bad) sbb add cmp and mov loope jae lods lods rex lret callq fadds xchg fidivrl je movslq mov scas rcrl scas (bad) repnz cmp inc test add jmpq jmpq mov jmpq je jmpq jmpq mov jmpq je mov rol mov cmp mov rcr sub rcr sub lea cmc cmp jmpq callq bts mov stc bt test jmpq jmpq clc test jg je not mov bt cmp test test jmpq pushq jmpq mov bswap bswap bswap mov jmpq bswap mov jmpq jne jmpq jmpq callq cmc jmpq callq clc stc cmp jmpq jb btc cmp dec xadd mov btc mov not data16 testl fs or xchg xor mov bt btr shld lea setnp lea sar add sub mov add mov lea shr movsbw sar add movzbw mov dec shrd sar mov stc add jmpq jmpq jne cmc stc clc cmp cmp jmpq jb movzbw not dec rcl mov shr add or inc stc adc mov and stc add dec dec xor data16 hlt mov bt data16 hlt repnz movzbw mov lea dec not movzbw jmpq xchg not movzbq mov jmpq jmpq lea bt stc test sub jmpq je clc clc xor mov jmpq jmpq jne cmc cmp clc jmpq cmp test test jmpq callq not lea not mov lea jmpq bt cmp cmpb jmpq clc mov test cmpb jmpq jne test cmp stc test ja je cmp inc clc mov dec sbb jnp cmp mov bt jns clc cmp jmpq jmpq pushq jmpq mov jmpq add je cmp clc stc cmpl jmpq callq cmc cmp test jno je data16 lock sub mov clc cmp cmp jmpq callq jmpq jmpq je cmp bt clc clc mov bt cmpb jmpq bswap jmpq jmpq jb cmp cmc cmc stc cmp jmpq jmpq rex.W xor (bad) mov cltd shrb xchg sbb jge popfq sub data16 adc and hlt rex.RX cmp push sbb sub pop mov pop push xor test pop movabs add out add pushq fisubl jne (bad) int mov lock mov sbb push fsubr sti std sbbl negl sti (bad) jo andl rex.B pushq pop mov lret pop xor out mov push xchg push and cmp or push mov add push pop jmp js pushq out adc (bad) rex.X rex.WRB sub add adc scas orl jl push bnd int xor jnp ds clc cmc clc cmc cmp jmpq sub not mov bt test jmpq bt cmc cmp nop stc cmp stc cmp test jmpq jmpq callq bt mov stc test jmpq mov movsbq not lea lea mov jmpq jmpq callq test lea jmpq movzbl mov bswap jmpq clc jmpq callq bts shr lea cmp cmc test jmpq mov jmpq clc cmp cmc cmp jmpq cmp jmpq mov lea sete bswap mov lea jmpq jmpq je shl dec rcl mov stc bswap inc rcl mov clc clc lea cmc test clc bt cmp jmpq jmpq jmpq lea jmpq movsbq movsbw jmpq pushq jmpq jmpq nop jmpq cmc mov test cmp clc xor jmpq callq bswap movzbq movzbl bswap lea jmpq jmpq jbe jmpq jmpq mov not movzbq mov mov jmpq jmpq jbe jmpq jmpq je cmc cmp cmp jmpq callq bt jmpq jb pushq jmpq mov jmpq je movzbw jmpq mov jmpq jmpq mov movzbw lea lea mov jmpq jmpq je seta lea or bt sub rcl xor xchg mov not mov mov not mov jmpq sub stc jmpq stc mov not add shrd or mov cmc jmpq callq test jmpq jmpq jne clc stc testb jmpq je cmp clc test jmpq jmpq clc cmp jmpq je bt test test cmc cmp jmpq movsbw not mov jmpq jmpq callq clc stc stc cmp jmpq bt cmp jmpq test jmpq jns movzbl jmpq jmpq xor data16 lock mov sub bsr lea bts cmp and cmp repnz not not jmpq cmovns stc test cmc test jmpq jmpq jmpq jmpq je sbb adc jmpq lea lea mov jmpq jmpq mov not movsbq movzbw mov jmpq jmpq mov movsbw setne jmpq nop jmpq je btr rol mov mov cmc lea cmc bswap rol seta movzbq lea mov bswap jmpq mov jo mov movzbw not mov jmpq xor jmpq jb movzbw xor adc mov btc movsbw clc shrd xor mov jmpq movzbw mov jmpq jmpq jmpq jmpq mov jmpq jmpq jmpq mov jmpq jmpq jmpq setb mov jmpq jmpq jmpq jmpq jmpq callq clc add shl mov clc test jmpq add rex.B fucom rex.WX jg ja mov pop rex.RXB rex.W out mov rex.R xchg rex.WRX in jge add add add rex.RXB shlb mov rorl rorb shlb (bad) decl test bt cmp jmpq clc cmp clc clc cmp jmpq jmpq callq clc test jmpq callq not bswap mov jmpq bt cmc cmp jmpq jmpq jmpq callq shrd rol bsr not mov jmpq jmpq jne jmpq jmpq cmp jmpq jne rcr data16 lock jmpq nop jmpq test cmp test jmpq je setp (bad) cmc test sar xor bswap mov jmpq jl jne stc cmpb jmpq jmpq jmpq jb dec movsbq not incl movsbw movsbw mov jmpq jmpq jno movl jmpq jmpq pushq jmpq jmpq jmpq jne cmp stc cmpq jmpq je movsbw bswap setae mov jmpq bt clc cmp jmpq callq test test cmc test cmp jmpq callq jmpq mov jmpq cmp test jmpq jb data16 lock movzbl mov bswap or shl shrd xor mov movzbw sets not mov jmpq jmpq shld mov clc mov test jmpq je jmpq stc mov shrd bt mov bt bt xchg test jmpq bt cmpw jmpq mov jmpq jne xor movzbl shr dec jno movzwl ror setno mov sub shl sar lea inc mov cmp cmp stc or jmpq je lock jmpq outsb sub add test (bad) lods xchg push sub sbb rolb pop rex.WRB scas mov (bad) shll sbb enterq jl sti (bad) jmpq jmpq jmpq jb clc jmpq mov jne lea movzbw mov jmpq jmpq jmpq je inc clc btr mov shld inc btc xor mov adc mov test stc add jmpq mov jmpq je lea bts adc sar mov stc stc cmp test jmpq callq jmpq xchg jmpq je test jmpq inc jmpq je cmc cmc cmp jmpq jmpq je bts cmc mov setp xor shld mov adc movzbw lea test cmp jmpq callq stc stc test jmpq je bsf ror data16 lock mov stc test mov cmp cmc cmp jmpq jmpq je bswap xchg lea xchg sete bswap mov movsbl mov jmpq movzwl lea mov setb mov jmpq jmpq je cmc bt cmp cmp jmpq je jmpq jmpq cmp jmpq callq test clc bt test jmpq jmpq jmpq mov jmpq test sub jmpq jne bts jmpq callq jmpq jmpq jmpq callq bsf mov sar not neg xor bswap sets movsbl lea mov not jmpq jmpq je stc cmp jmpq jmpq callq stc test jmpq jmpq jne btr bt bswap setb add not seta lea lea jmpq jb test cmp jmpq je sbb sar xor not movsbq lea bswap mov jmpq callq stc cmp test jmpq lea bt jmpq callq bsf test rol mov sub not xor not mov bswap jmpq test jge je jmpq movzbl mov mov jmpq mov jmpq jmpq jmpq add xchg out movb rex.WRB and stos (bad) ja mov (bad) push adc mov add fimull push jne repnz pushfq mov rex lret xchg pop mov xchg ficom pop or push pop adc fs movsl add sets loope cmpsb sbb loope fcomps jrcxz xor rep loope cli jbe movabs int (bad) (bad) (bad) outsl lock and ss rex.WB (bad) lods sbb scas sbb cmp jno movabs (bad) fwait hlt and (bad) (bad) sub adc sub lahf cld lret jo test insl sub fstpl rex.B xchg in add adc js cmp rclb popfq rex (bad) je movb insl rex.RX loop,pt retq mov or xchg mov add vunpcklps stc jo rex.WRXB mov sbb adc rex.WRXB movsb (bad) (bad) hlt rex.X test mov xchg (bad) xor retq faddl test in mov cmp (bad) je mov outsl scas retq stos pop jno fmull (bad) lea retq fiaddl rex.W cmpsl shlb jl pop jrcxz xchg (bad) mov jl jae imul cmp mov xchg mov rex.WR jb out xor mov in xor mov pop ds mov add (bad) iret (bad) pop jnp xchg add mov callq movabs xor jbe push or xchg xchg add (bad) in nop gs movabs test add movabs int3 rex.WRXB (bad) lret fisttpll mov mov movsb mov mov (bad) push pushfq cmc loope jg outsl imul sbb jae and pop (bad) lret insb scas retq std push mov loopne xchg (bad) jae cmp jnp (bad) lock cmp sub push sub pop xor in (bad) retq in push sub rex.RX xchg outsl xchg sahf rex.WXB popfq add (bad) hlt clc rex.WRB sub push lret callq loop and stc push mov rex.XB movslq sub mov add (bad) add pushfq scas mov retq pop xor add adc retq (bad) (bad) sub mov repz (bad) rex.B movabs sbb js retq fmuls rex.WRB xchg pop (bad) jmpq adc testl test rex lods lea ss callq lods je xor ror lods rex.X pop rex xchg add rex.WRX sub xchg (bad) in es sti xchg sub cmpsl cwtl jp rex sti sahf movabs rex.WRX rex.W push sbb push (bad) mov (bad) sub retq sti rex.WRXB fs fstpt pop (bad) pushq jle mov (bad) lahf rex.WR mov mov (bad) add (bad) cli rex.RB jg insl xchg sub jle lods loopne movsl rex.WRX and jb or popfq (bad) jns (bad) pop rex.WRXB sahf divb sbb (bad) movsl stos (bad) (bad) cmpsl in xchg outsb (bad) mov (bad) xor cmp loope clc push xchg mov xor out jae rorl add (bad) add xchg punpckhwd sbb jp xchg flds cmc rex.WRXB sbb sbb jrcxz push pushq pop add loope jmp fldenv (bad) icebp (bad) jmp mov xor stc rex.WRXB xchg in mov rex.RB (bad) fcoml (bad) (bad) (bad) in adc rex.RB mov out (bad) or out jno insl stc neg sbb mov adc cmp mov movabs add (bad) sar add xor fldenv imul mov sbb (bad) adc rex.XB out jmp rex.WB (bad) pop clc cld lea jnp sbb in sub lahf and adc repz mov cmp push cwtl xchg sub jb movslq sahf push (bad) sbb pop xchg sbb or jo (bad) ss add rex test repz push jnp cli jg fnstcw (bad) sub rex.RX mov (bad) movabs data16 insl sbbb cmp rex.WX (bad) (bad) fmul mov and xchg xlat (bad) (bad) (bad) pop sti sub (bad) (bad) or int test (bad) cwtl cmpsb sbb sub add (bad) fbld jp sahf (bad) or rorl (bad) mov fsubs pushq shrl (bad) cmp fsubl (bad) adc sar (bad) cmp sub js test out rex.WXB pushq cli (bad) adc mov sbb mov gs loopne rolb jo pop jne scas push xchg (bad) xchg (bad) adc xchg mov mov mov xchg mov int3 cmp pop (bad) fistl movabs nop cs out fldenv sti lret insb jnp mov fisubrl hlt (bad) add mov pop mov int outsb adc callq mov iret iret (bad) and test lea movzbw movsbl jmpq jne sub setnp shr mov cmp mov jmpq je cmp not xchg mov rol not shrd mov xadd mov not xor mov test bt jmpq jmpq test stc add jmpq jmpq jmpq test test test jmpq add add add gs sub or rex.XB jge rex.W xchg adc sbb stc loop stos loop (bad) in mov add pushfq mov (bad) callq hlt repz rex.WXB xor (bad) cli jmpq (bad) mov and add loop subb pop sahf pop insb loopne xchg sti std mov add sti add hlt sub pushfq sub (bad) xlat jg out (bad) or cmp cld repz (bad) fld sub rex.X jmpq (bad) mov cs jmp sub adc (bad) lods movl mov (bad) pop (bad) js jne (bad) je adc cmpsb jb out mov pushq outsl rex xchg pop lea int sub addl sub cwtl cs add add jmpq not mov jnp movzbl not lea jmpq jmpq jmpq jmpq stc test jmpq mov movzbl lea jmpq movzbl bswap lea jmpq seto movzwl setb lea xchg mov jmpq cmp jmpq test cmc jmpq je movzbl lea mov jmpq je shl sub mov cmc test jmpq callq movzbw mov cmp stc test test jmpq jmpq callq test stc bt test jmpq test rcr mov lea sar xchg mov cmc add xor xor bswap movzbw jmpq jmpq jmpq movl jmpq jmpq callq stc cmc clc cmc cmp jmpq jmpq jb add mov lea rol btr mov shld not mov sar mov movsbw or lea inc xadd lea bsr rcl jmpq callq test cmp stc bt add jmpq jmpq callq btr rcr movzbw neg mov stc jmpq jmpq callq jmpq jb bt xchg movsbq mov sbb xor jmpq stc stc cmp jmpq jmpq callq movsbq movsbw sub mov bswap mov jmpq jmpq jle incl jmpq jmpq je inc mov jmpq je jmpq test jmpq mov movsbw mov jmpq callq cmp cmp mov test cmc cmp jmpq jmpq callq jmpq not mov jmpq jmpq jmpq callq bt stc test jmpq jmpq lea mov mov not jmpq jmpq callq jmpq je bsf or bsr mov rcl bswap mov stc lea test bt test cmp cmp jmpq jmpq je jmpq not movzbq not movsbl movsbw lea jmpq add jmpq je lea mov jmpq jb je not mov movsbl mov mov jmpq je mov stc mov jmpq xor jbe callq jmpq add mov not movzbl jmpq callq or xor inc stc mov bt clc test jmpq jmpq jne shrd btc adc mov sbb data16 lock cmp bsf cmp mov clc clc test bt add bt test cmp cmc add test test add clc bt jmpq jmpq callq bt test and jmpq jmpq jne sbb sbb jmpq cmp jmpq jmpq movzbw lea neg xor setae movsbw mov jmpq pushq jmpq clc jmpq jne shrd btr mov bswap bsf mov stc jmpq stc stc jo mov lea mov stc cmp clc mov shr clc clc sub mov stc stc mov sar shrd neg mov clc jmpq jmpq callq movzbw bswap xchg lea bswap not lea jmpq je and movzbw mov mov cmc bt test jmpq xor bt test add jmpq test stc mov test jmpq callq movzbq movsbw mov lea mov mov jmpq clc stc cmp test jmpq callq ror cmc mov or xor bts mov bt clc test jmpq jmpq jb setl not dec not dec mov movsbq mov ror shl btr inc or btr rcl sar movsbl mov jmpq callq btc lea sbb shrd mov setbe cmpq not movzbl mov jmpq je btc xadd mov sbb not mov shl shl mov stc stc bt test add jmpq test mov test jmpq jmpq callq jmpq lea jmpq callq clc add jle clc mov jmpq jmpq jmpq clc cmc jmpq jmpq jmpq jmpq (bad) mov fcom hlt jge insl pop (bad) sub js jl cwtl xchg xor ss pushq (bad) or xchg push out or or jmpq rex.RX add cld (bad) movabs (bad) xlat (bad) imul (bad) pop rex.WX and in outsb (bad) addps rex.WR or callq xchg bsr xchg mov btc movsbw sub lea movsbw setno bswap mov lea mov jmpq not jmpq jmpq callq lea movzbw not movsbw lea jmpq callq bt test bt cmp jmpq cmp bt mov jmpq jmpq jne test test cmp cmp testb jmpq cmp jmpq je movzbl lea movsbq mov lea movzbw lea mov jmpq jmpq jmpq xchg jmpq cmp add movsbw jmpq je je test stc cmpq jmpq je shr mov mov sub bsf mov stc bsf lea stc cmc test cmp cmp jmpq jne dec sar btr mov clc cmp jmpq clc cmc test cmpb jmpq jmpq test ror rol adc nop sbb mov clc clc stc test cmp jmpq je bsr (bad) lock mov stc bt cmc test test jbe je jmpq mov jmpq jmpq jnp je bt clc cmp sub jmpq jmpq callq cmp cmp xor stc jmpq callq jmpq jne callq cmp bt clc cmc test jmpq jmpq jmpq cmpw jmpq cmc test jmpq jmpq adc cwtl (bad) jb mov and rex.WR mov mov fldl cmp pop loopne sbb jnp fimull (bad) sti cltd (bad) sti lret jbe add jb jae xlat pop (bad) or mov out mov cmp sub jmpq lret and movsl sbb sti mov rex.WX sub and adc int adc callq inc mov inc not dec mov jmpq test clc test jmpq mov jmpq movsbl mov lea mov lea not mov jmpq jmpq lea jmpq cmc mov clc bt stc test jmpq pushq jmpq jmpq je stc cmc cmp jmpq pushq jmpq lea jmpq jmpq je cmc xor jmpq jmpq callq xadd mov ror btr stc xor jmpq test jmpq add btr xor mov cmc cmp test stc add btc movsbq rol movsbw mov clc clc add test add stc bt jo xor stc bt add jmpq nop jmpq bswap lea mov jmpq je xadd dec data16 lock cmc mov shr bt mov rcr mov bt bt stc clc add jmpq jmpq callq btr mov stc cmc cmp clc test jmpq nop jmpq setbe mov jmpq jmpq jne movsbw movsbw lea seta mov lea bswap movzbq mov movsbl movzbq mov jmpq je clc sar cmc data16 lock xor rol stc shr mov clc cmp jmpq jmpq inc jmpq callq lea bswap mov movsbw lea jmpq jmpq jne jmpq jb not sub mov sar stc sub jmpq jmpq seto shld sar adc movzbl bt cmp mov xor ror movzwl stc jmpq jmpq jmpq jmpq jmpq jmpq jmpq bt clc test jmpq callq jmpq add movsbw mov sets mov jmpq jmpq je rcl lea bsf add xadd sub xchg xchg mov mov mov jmpq jmpq xchg cmc cmp test jmpq jmpq jmpq callq bswap jmpq je jmpq je bswap movzbw mov jmpq jmpq mov jmpq je inc sub lea shld mov clc bt test jmpq callq shrd add movzbw mov bt cmp jmpq jmpq jmpq je movzbq mov jmpq movl jmpq jmpq jmpq je rcl xor movsbl mov jmpq jmpq jmpq je sbb cmc rol and mov jmpq jmpq callq shr not (bad) testb rolb loop int3 pushq rex.R add pop in mov jnp callq sbb (bad) loope mov enterq test sub mov rex.B std (bad) rex add add cs push bt bt cmp sub jmpq callq adc bsf btr mov movsbw shl test bswap mov jmpq ja pushq jmpq jmpq jmpq callq jmpq mov stc scas test xor imul xor push jo mov fmul (bad) add jnp loopne not xchg movsb xlat lock add mov rorl xchg jmpq jmpq mov mov bswap movzbl jg mov jmpq movzbw movzbw lea lea mov movzbw bswap mov jmpq jmpq jmpq lea movzwl jmpq callq clc bt test cmp jmpq jb pushq jmpq setl mov movsbw not setne jmpq stc cmp jmpq test clc cmc cmp jge jne bt lea mov clc bt stc test mov clc jmpq inc dec and mov clc jmpq jmpq je mov bswap mov jmpq js not mov mov jmpq je shl (bad) icebp sbb shlb leaveq setno setbe mov jmpq callq bt bts stc rcl rol bswap mov lea lea not mov lea mov mov movzbl bswap mov movzwl jmpq jmpq je stc jmpq test jmpq jne lea mov mov jmpq je lea not mov jmpq mov not movsbw movzbw mov jmpq jmpq mov lea jmpq jmpq bt cmp jmpq jb stc cmp jmpq callq lea jmpq callq test clc test test jmpq je bsf rcr bsr lea not btr xchg sub lea mov bswap movsbw movzbw movzbw mov jmpq jmpq test jmpq je shl setg mov cmc jmpq pushq jmpq cmp jmpq mov jmpq je rcl shrd shl mov test mov sar sub and mov lea mov jmpq je test test cmpq jmpq test jmpq mov jmpq jmpq jmpq rex.RX rex.X clc jo xlat lock fdivrs rex.WR nop lret cld push jo sub scas int xchg ss cwtl (bad) clc and scas popfq (bad) xor jg (bad) cmp insl add xchg lock clc js test (bad) add test mov sub pop stos (bad) movsb js fs retq insb mov mov mov (bad) fimull retq or push (bad) test int or sub pop xchg jg stos jne cmp movb test mov adc fnstsw pop stos (bad) xchg test or ror subb (bad) jnp jae (bad) cmp or rex fwait sub jo cld test mov mov (bad) xor ficomp rex.RXB rex.W jle sbb in enterq mov pushq mov add loopne scas rex.W test rorb xchg fucomi stos xor or mov stos (bad) push (bad) hlt shrl cwtl icebp pop movslq (bad) lock xor pushfq push scas loop retq (bad) rex.WR mov fimul icebp lret pop cmpsl imul add pop xchg rex.WR adc (bad) rex.RXB jge rex.RXB add shrl rcrl sub ja outsb push pop (bad) rorb mov in lea (bad) cwtl frstor scas outsl xor cmp xor jns hlt scas in (bad) test (bad) cmpsb shll js pop (bad) test in pop cmp rex.WB (bad) sub jp (bad) or mov mov int3 ss outsl div mov sub int sub (bad) movabs mov add cmpb (bad) jle cld rcrw stc (bad) push (bad) lods jmp movabs mov sahf and adc imul xchg xor cld popfq push jge lods adc es lods rcrl (bad) xchg mov cwtl jmpq je callq rol jmpq test cmp clc (bad) icebp mov retq fsubl xchg lahf adc xor stc rex.RXB retq clc cmpl repz adc (bad) (bad) cmp (bad) test cmp imul scas push test (bad) mov mov pop adc pop mov and sbb cmpb movsl xchg and push shrb sub or je test mov pop (bad) fs divb rcrl ja (bad) sbb sub and mov (bad) fimull rex.X (bad) add (bad) xchg jrcxz lock rex.WRX repz xchg (bad) sbb (bad) out insl in test movslq mov cwtl xor (bad) fmuls imul (bad) pop (bad) cltd jnp rex.X ffreep (bad) repz rcl cli outsl popfq repnz (bad) mov or fmuls test gs std jmp mov xor or mov pushfq test (bad) mov repnz nop cli and enterq (bad) (bad) or rcrl rex.XB xor rex.WX or jp add (bad) or xchg mov std xor shl outsl and rex adc jne add int3 mov (bad) movabs rex.WX xchg (bad) pop sti mov xor shrl pushq rex.RX mov sarb test add (bad) rex.WB test push adc sub and lahf cmp cmp shl mov rex.WRX out jae (bad) movabs nop and add movabs (bad) jp hlt xor mov imul and addb imul add fistpll jno pushq rex.RX and pop mov rex pop cltd adc add or rex.B xor jrcxz out sub movabs or jne cmp mov pop jmpq cwtl xor fmul imul imulb rex.WB mov retq rex.W movabs mov sub sbb jns push popfq rcl pushfq movabs sbb cmp or shr or movabs push outsl int3 fs xor fldcw adc cwtl xchg int (bad) hlt pop sub adc bsr neg mov mov btc sub data16 mull xor cmp rcl or shrd neg mov rcl lea sbb repnz clc sar not clc lea btr btr xor mov clc cmc stc xor jmpq jmpq jmpq xor mov jmpq cmc bt cmp jmpq callq clc cmc cmc test jmpq movzbw mov jmpq jmpq je jmpq jmpq callq stc stc cmp test test jmpq nop jmpq add pushq jmpq jne not jmpq jmpq mov mov bswap lea mov jmpq jmpq push (bad) jno scas pop jl imul adc rorb (bad) pop movsl rolb (bad) add add add add sbb std decl test jmpq mov mov add lea shr ror and mov test movsbw inc xor movsbw movzbq lea lea jmpq bts shl btc mov rol adc jmpq mov jmpq je mov xchg lea setne movabs jmpq jns jmpq jmpq callq jmpq callq bt cmc xor test cmp xor jmpq mov cmc jmpq callq or bts bsf mov lea btc rol and lea shrd sub movsbw bswap mov jmpq callq cmp jmpq je movsbq not mov jmpq je jmpq je stc stc clc test sub jmpq je bts sbb and mov jmpq jbe callq jmpq setp jmpq jne xadd xadd mov jmpq test jmpq jmpq jne bsf rcr cmc movsbl sub lea bswap mov setns lea jmpq cmp add jmpq inc jmpq jmpq jmpq jmpq callq cmp bt stc clc mov test cmc stc cmp test jmpq add cmp cmp test add test clc stc add sete bswap setno mov jmpq je shrd mov bt clc jmpq mov jmpq je neg shrd mov bts bswap test ror mov jg seta lea jmpq jmpq lea mov jmpq mov mov cmp cmp cmc stc mov and movzbl movzbl jmpq jmpq jmpq mov jmpq stc clc mov cmc jmpq test jmpq je stc sar not shld mov stc clc cmp test test jmpq cmp stc cmpb jmpq jne movzbw mov mov jmpq test jmpq jmpq add cmc cmp stc add cmc xor stc jmpq callq rcr sub not not mov jmpq jmpq jmpq callq clc clc cmp jmpq incl jmpq jmpq cmp xor bt cmc cmp xor jmpq adc add mov clc test jmpq jmpq movl jmpq movzbw lea bswap bswap mov jne callq btr not bt sbb movb bts mov jmpq xchg movsbw jmpq jne movzbw mov add not setae movzbw jmpq callq jmpq jmpq jmpq callq stc jmpq je neg bsf clc mov bt mov rcl lea cmp jmpq jmpq callq jmpq callq bswap not sete lea bswap lea jmpq jmpq jmpq jnp movl jmpq jmpq pushq jmpq cmc clc cmp jg jne jmpq jmpq je jmpq test jmpq jmpq callq cmp test jmpq jmpq callq jmpq jmpq cmp jmpq mov jo mov jmpq mov bswap bswap jmpq movl jmpq data16 testb adc bt stc test jmpq (bad) lock xchg mov test jg pop jp fs (bad) cmp mov movabs pop insl ss testl jg stos movsb int3 mov rex.WRXB sbb lods imul mov lret fcomps (bad) rex.RXB sbb stc fistpl rex.WXB add mov lret cli rex.RXB test rex.RXB pushq cwtl mov pop cmp xor (bad) rex.XB test mov rex.WRB sbb cmp mov jge jmpq sub lea jmpq mov push fwait and repz jmpq adc jo mov pushq and pushq nop loop testl sub jne sti xor ja (bad) pop movabs in mov decl mov addl cltd (bad) jmpq je neg cmc sar mov stc cmp cmc test jmpq movl jmpq pop movsb jge jp cmpsl mov addl je cmpsb add cltd cs pushq cltd lret imul xchg (bad) lret add movabs fsts push sub ja rex.WX out pop sub mov xchg rcrb (bad) pop sbb rex.RX add scas std xlat jne adc std (bad) jmpq jmpq nop jmpq rcl cmc xor not setno mov jmpq je xchg xor sub lea xchg not setg lea lea lea movzbw mov mov bswap jmpq movl jmpq je mov setno mov setbe mov jmpq cmovne jmpq callq stc cmp jmpq jmpq callq jmpq jmpq jb jmpq mov not lea movzbw mov jmpq mov mov bswap lea movsbw mov jmpq jne mov shr shld sets mov cmp test jmpq test jmpq jmpq jmpq mov not lea movzbl mov jmpq and movsbw mov lea mov jmpq je cmp stc bt cmc cmpq jmpq cmc mov and clc add rcl mov cmc cmp stc mov stc cmp cmp cmpb jmpq stc cmp jmpq stc test jbe je dec dec shld xor mov jmpq callq test cmp cmp and bt bt jmpq jb inc dec lea bts btc xchg mov xor or adc jb add shrd mov neg shrd shl jmpq clc mov bt stc mov jmpq mov jmpq callq jmpq cmc cmc test jmpq lea sar bswap sub not lea setnp xchg mov lea mov jmpq jmpq jmpq jne btc movsbl test mov xadd shrd bsr mov sbb btc mov lea shr rcl add mov movsbl lea lea mov jmpq callq shr adc sbb sub jmpq je jmpq jmpq jmpq callq jmpq add callq movsbq mov lea movsbq xchg movzbl mov setp jmpq je bt sub bswap setle movsbw jmpq jns setbe bswap mov jmpq jl pushq jmpq callq bsr mov cmc test jmpq jmpq nop jmpq add (bad) (bad) push pop imul movl int3 lea cld out (bad) (bad) adc jrcxz (bad) fidiv fiadd add add add mov test and lret dec btc jmpq jmpq bswap lea movzbl jmpq movzbw mov mov jmpq callq xchg mov not jo mov movzbq mov mov bswap setl movsbq not mov jmpq add cmc cmp clc mov stc jmpq jmpq je lea lea jmpq jne cmp test jmpq cmp add cmp stc cmc cmp mov clc bt cmpl jmpq jmpq mov jmpq je btc cmc bsf ror mov test test jmpq movsbw movzwl jmpq jmpq jmpq jne lea sar lea and lea cmc bt test stc add stc jmpq movzwl jmpq test jmpq pushq jg pushq jmpq jne stc cmc test je je dec xadd btc dec mov rcr bt mov test cmp clc cmp jmpq je sar stc or bsf sub seto setbe mov jmpq test jmpq je mov bswap movsbw jmpq jne stc testb jmpq jmpq callq clc stc cmp jmpq callq jmpq add callq movzbl lea lea jmpq callq clc test bt xor test clc cmc bt test jmpq je btc mov clc cmc stc test test jmpq stc clc test jmpq jmpq jmpq nop jmpq jmpq add rol mov cmp add test jmpq je neg cmp movzwl lea sub jmpq mov jmpq shr mov cmc cmc clc cmp jmpq movsbl lea jmpq callq jmpq jmpq jmpq lea jmpq nop jmpq jmpq callq movzbl mov movsbw mov jmpq bt cmp jmpq bswap movsbw mov jmpq callq neg mov cmp stc test test jmpq jmpq jmpq test stc cmc cmp jmpq callq btr bswap mov cmc cmc bt clc xor jmpq nop jmpq jmpq jmpq jmpq callq inc sbb movzbl bsr test xor sete setge not mov bswap movzwl jmpq mov jmpq movl jo mov jmpq jmpq cmc dec mov clc cmc clc stc test jmpq shl cmp clc cmp clc shr test cmc stc or jmpq jmpq callq cmp and bt test bt stc cmp jge jb movzbw xchg lea movsbw dec rol shr mov rcr test bsf or or bts inc mov shl add rcr xor shl bts xor mov cmc not mov bswap repnz jmpq clc add clc cmc test stc add cmp bt clc cmp add stc clc xor jmpq callq jmpq jmpq je rcr cmp mov jmpq rex.RX fild outsb gs fldz in ficompl rex.WRX (bad) cld ds adc in fcmovbe iret (bad) (bad) xchg lret xchg mov imul fstl mov push lahf mov sbb xchg and sbb cmp push sbb je scas hlt adc mov decl sbbl pushq (bad) push vpmaddwd (bad) (bad) decl test imul callq bswap movsbq mov xchg lea movzbw mov bswap movsbw not bswap mov jmpq callq btc (bad) icebp mov clc sar xor inc mov cmc xadd mov jmpq jmpq jmpq jmpq test jmpq cmpw jmpq jmpq lea jge callq shrd mov test jmpq bswap mov jmpq jb bsr btc stc sbb cmpb bswap not mov jmpq callq jmpq jmpq movsbw mov jmpq jne sar xadd movzbl rcl xor lea mov mov movzbl not lea lea jmpq jmpq jmpq je bt cmp stc cmp jmpq movsbw xchg mov not mov jmpq jmpq jb stc movsbw setne (bad) cmc mov sbb movsbw rol mov xchg adc mov or test adc mov btc and adc lea shld lea bt stc add data16 repnz bt not mov add btc mov mov and and rcl add data16 bnd mov or sti (bad) cmp in (bad) jno sub (bad) mov mov (bad) shl jrcxz movsl xchg mov outsb pop lock xchg iret test sub cmpsl movslq mov pop cmpsl and mov popfq sbb add movabs (bad) outsb mov (bad) (bad) jmp loopne lret cltd (bad) jne (bad) js add enterq rex.X xor xchg outsb retq adc sbb jp cld je mov jp sub xchg sbb scas repnz lcall (bad) decl test (bad) callq stc dec cmc mov lea mov test test jmpq callq setno rol rcr mov jmpq jmpq callq movzbw mov mov lea mov jmpq stc test jmpq callq rcl mov rol mov sub mov bswap movsbq mov lea mov jmpq jmpq cmc bt mov cmp cmp cmpl jl je cmc cmp stc jmpq jmpq jmpq jb movzbw movzbw dec mov incl movsbw not mov jmpq je sets jmpq cmp jmpq je lea rcr shl setno mov cmp test jmpq mov jmpq mov jmpq nop jmpq stc clc test jmpq jge callq rol mov clc test jmpq callq cmp cmc stc cmp test jmpq jmpq lea mov jmpq jmpq callq mov movsbl mov lea jmpq jne mov bswap lea mov mov jmpq je bt stc stc test cmp jmpq callq clc inc movsbq neg lea cmc test jmpq callq mov movzbw bswap mov movsbw setno jmpq mov jmpq jmpq je movzbq mov mov jmpq jmpq jmpq je btr lea test clc jmpq jmpq je jmpq jmpq je btr setle shl sub xor setns mov setns jmpq callq shl mov jmpq in roll repnz shrb sbb xor sbb xchg sub mov std mov or xor rex.X loope and loope retq jo (bad) cmp xor mov cmp bnd mov (bad) retq (bad) pushfq rcrl es jg (bad) (bad) jmp cmp mov jns imul or xchg int out xchg xchg in cmc xchg xor cmp ss jmp xchg lret (bad) cs outsl (bad) (bad) sub mov mov (bad) je sbb and mov sbb sbb jo rex.X fadd add push jnp test add jge pop jle outsl mov rex.WR (bad) out fidivrl (bad) icebp (bad) or mov push movabs adc xor fldt mov cmp or push and (bad) jp rex.WXB bnd (bad) mov (bad) push movsl add and movabs sub cli scas outsb xor xchg shl mov (bad) fbstp gs cmp rex.WRB and nop rex.XB es or loopne xchg cli gs out cmp or out js insb fs add movabs (bad) adcl je sti stos addr32 (bad) ds (bad) mov sub stos xchg (bad) sbb or pop frstor movsb movabs adc test sbb rex.RXB movabs ss rex.B jmpq push sar sahf xchg mov scas stc ja nop (bad) push outsb add pushq lret xchg mov mov rex ror (bad) jmpq ja movsb idivl sbb in xor (bad) loope in add mov movzbw jmpq je btr mov bsr dec mov shld sub mov test jmpq je mov mov shl mov (bad) cmc mov and jmpq stc mov cmp cmp bt cmp jmpq jmpq jmpq test cmp jmpq jmpq movzbl jmpq jne jmpq lea mov btr shl not xor bsf adc xchg xor mov clc shr movsbw repnz lea not jmpq not lea lea mov mov mov jmpq callq cmp bt clc cmp jmpq jmpq jmpq not btr sub not setp jmpq jle mov jmpq je jmpq jne bswap lea setno lea mov jmpq callq cmp test jmpq jmpq add sbb (bad) lea scas mov add push (bad) xchg in ja mov iret insl xchg test push (bad) movsl xchg (bad) hlt (bad) push adc (bad) cmp (bad) pop or pop rex.RXB pop adc push pushfq repz xor fadd cmp out cmp in mov or rex.WXB outsb add cmovge sub leaveq sahf jrcxz scas (bad) pushq mov rex.X jg jns,pn and (bad) xchg shrb mov (bad) mov retq cli movl mov mov loope xlat lock xor jle stos nop cs add and mov mov adc sub gs fild (bad) in js rex.RB (bad) out (bad) mov sbb loope xor mov mov movabs cmc mov xor (bad) fs cmp rex.WRX mov jns out jmpq repz (bad) cmp cmc jbe (bad) sbb cli pushq cmc mov rex.RX rex.WRX je jbe pop clc adc imul or cmp rex.B push icebp jg add add jl fcoml sti mov loopne lret movabs (bad) push fldt mov xchg js loope jrcxz rex cmp insb rex.RXB in or push rex.WR jne (bad) lods jp sbb mov push fidivr test pop (bad) jb int jmpq movsbl not mov jmpq test cmp cmp add cmp cmp add stc add stc stc cmp stc xor jmpq jmpq jmpq jmpq jmpq jmpq jmpq callq cmp test jmpq jmpq callq jmpq pushq jmpq jmpq callq not jmpq jmpq jmpq je mov lea not jmpq pushq jmpq callq shr dec add mov cmp jmpq jmpq mov jmpq mov jmpq mov movzbq mov jmpq bt test jmpq jmpq jmpq jmpq mov jmpq clc cmp cmp jmpq ror mov mov clc mov mov mov jmpq setns or mov bts bt xadd shld mov xchg shld mov clc cmc jmpq jmpq jb jmpq test jmpq callq xadd cmp clc bts mov bswap bsr setle mov movsbw mov neg shld shl add mov jmpq je setb lea movsbl mov movzbw movsbq lea mov jmpq cmp jmpq callq inc movzbl mov inc xor bswap mov jmpq je jmpq jmpq jmpq add cmc stc bt cmp jmpq je jmpq callq jmpq jne lea jmpq jmpq jmpq jmpq movzbl movsbl not mov jmpq callq jmpq jmpq je or add mov stc bt cmc clc test jmpq jne cmp cmc testb jmpq stc cmc cmp jmpq jne cmc sbb movsbw mov stc cmp cmp jmpq mov jmpq jmpq bt cmp jmpq bt clc sub jmpq xor and mov or xor bswap shr or mov shl mov btc not data16 lock xchg test not bt bswap test btc lea xor movsbw mov jmpq je bswap bswap not mov mov jmpq movzbw lea movsbw lea lea seto mov lea jmpq jmpq cmp jmpq callq ja shld xor movsbw movzbw mov jmpq jbe jmpq add add add add lret scas mov nop movabs rex.W add mov jmpq jmpq pop movabs and push out pop (bad) xor lret xor mov adc mov and pushq sbbl out mov xchg (bad) outsl orb mov rex.R rol std mov jbe int3 adc test std jae xor cmp addr32 mov fstl (bad) and fwait pop xchg rex.XB ror int in mov (bad) out mov (bad) ss sbb je (bad) rex.XB jo (bad) (bad) add (bad) data16 xchg rex.WX rex jmp shl movabs (bad) rex.WR cmpsb mov rex.X rex.XB rex xchg lock lahf retq (bad) cmc js,pt jmp movabs jp or (bad) rex.W fsubrs (bad) (bad) rcll mov movabs sbb loopne rex.WRX (bad) repz mov in xchg mov imul fimul test (bad) mov (bad) gs movabs lahf jrcxz and (bad) hlt add mov push movsb (bad) movsb rex.XB xchg jno bnd rex.WXB sahf sbbl mov js stos loopne sbb mov (bad) xor fistl xchg out movsb stos sub adc rex.WX rex.WXB movabs neg pop (bad) gs mov icebp fstpl test mov jmp (bad) nop (bad) (bad) fwait xor pop (bad) mov push rex.XB movsb lods mov pop cli pop mov repz xchg mov xor outsb jle (bad) int3 mov cmpsl sub (bad) jns cmp (bad) insl pushq jo jno movabs sbb (bad) ss adc and (bad) pushq (bad) xchg pop (bad) imul mov cmpsl add jrcxz cmp pop (bad) jl push (bad) xchg rorl jmpq test sub or mov lret (bad) xor pop adc fstp xchg pop (bad) or rcrl int jrcxz or mov mov jmpq jmpq jbe movsbw dec mov add mov (bad) testb shr neg movzbw mov jmpq jne btc neg bts stc mov bts rol mov lea mov stc add cmp test add jmpq callq jmpq stc jmpq outsb jns mov stc or (bad) push mov push jne cmp add icebp (bad) jnp lock loopne shr rex.WRX gs stc (bad) jrcxz sub or rex.X cltd cs xor ficompl loopne,pn (bad) rex.W repz adc repnz imul subl lods (bad) mov scas (bad) jmpq pop and pop xchg rex.R cmp adc movabs mov cmp xchg stos mov rex.WR mov sub lret retq jl (bad) ss adc ja punpcklwd jp mov in push sbb rex.XB sti jne xor (bad) jmpq sub sti lret stos mov adc or vorpd (bad) fsubs callq hlt cmp test std adc rex.WRX rex.WB out loope mov scas loopne (bad) xor add (bad) jl (bad) jmpq callq jmpq je jmpq jmpq xchg lea not lea seto mov jmpq je jmpq jb add sar adc mov stc test cmc xor mov sub sbb dec mov clc inc mov setg rol lea rol shl sets lea cmp clc add lea mov movsbw mov dec data16 repnz neg bswap shl inc mov not bts adc mov jmpq cmc test jmpq jmpq jmpq jmpq jmpq jmpq clc test jmpq jmpq callq shld bt setp neg sub bsr dec mov stc test jns je test test jmpq movsbw movzbw lea mov jmpq xchg pushq retq (bad) and callq xor andb shrb or rex cmp (bad) sti sub sti lret lods lret sbb hlt jl add jmpq mov pop (bad) and rex.W xor test sub push shrl retq or mov or int (bad) (bad) stc neg lea stc cmp test bt sub jmpq jmpq jne jmpq jmpq jne sbb adc xor btr mov xchg bsf movzbw mov sub shr mov sar ror bsf adc add ror lea shr and mov cmc cmc add jmpq jmpq jmpq movzbw mov jmpq jmpq jmpq movzbl mov jmpq lea add stc mov adc lea jmpq callq mov movzbw xchg mov bswap not mov mov jmpq jmpq jmpq jmpq mov not mov bswap mov jmpq jmpq jmpq mov jmpq jbe movsbw sar stc lea cmc bt sub jmpq callq ror bsr sub dec movzbw movsbw xchg mov not inc lea lea mov jmpq jmpq jmpq movzbw lea not bswap mov jmpq cmp test cmp jmpq jmpq callq test bt sub jmpq jmpq jmpq (bad) cmp (bad) xchg pop mov retq fsubl mov movsb rex.R movabs enterq push add outsb jmpq jg rorl or rex.WRXB rex.WR add or xchg push sbb mov cmp (bad) pushq stos adc mov and mov fcmovu rex.XB mov mov jl (bad) ficom adc rorl adc (bad) pop in insl push rex.X ss xor rex.WRX rex.WXB rex.WX (bad) fs (bad) data16 lods or cltd mov cwtl retq jo fdivr xchg xchg test push xchg test cmpsl xchg sahf sub (bad) push jno retq nop (bad) cmp fsubl (bad) (bad) xchg (bad) (bad) jmp adc fstps push push ja loopne adc xchg mov addr32 jrcxz cmp stos or (bad) (bad) imul (bad) (bad) xchg (bad) mov rex outsb cmp xchg rcl or lahf sub xchg rex.WRX (bad) (bad) fwait mov movabs pop push pushq rex.W cmpsl push push cwtl (bad) adc mov sub mov cmc xchg insb idivb xchg (bad) jmp mov pop cld pushq mov sahf fimul mov rorb (bad) rex.WXB cmpsb xor (bad) es add mov push lods xchg mov (bad) sub in pop sbb pushfq (bad) rex.WX rex.WRX sahf mov (bad) ja (bad) jno shlb sti movabs jmp push and test (bad) movabs negl pushfq hlt (bad) movabs rclb jne (bad) retq popfq (bad) fisttpl movabs add (bad) mov movsb mov gs pop iret pushfq jbe and sbb gs js mov in add rex.WRX repnz je rex.WRB or out rex.B es add jmp sar mov mov subl int3 adc xchg (bad) mov movabs out xor mov in lods (bad) movsl mov stos cltd mov clc movslq rex.WXB cli out mov rex.B test (bad) rex.WB sbb jae int ficoml lods mov jmp cld incl jmpq je jmpq je cmc or sar jmpq mov jmpq inc jmpq jmpq jmpq test add bt test add stc cmc clc cmp xor jmpq not inc lea movsbw dec test cmp shl movzbl mov jmpq jmpq nop jmpq je cmp cmp jmpq rex.XB pushq vcmpss add pop (bad) rex.X add popfq icebp rex.WB in ja jae scas rclb mov jno movabs (bad) out or flds mov sub iret jp jl (bad) lock movabs lret mov loop (bad) rex.RXB mov ficom lret adc out xor cmc stos mov je rex.WXB mov push (bad) jbe lret int fnstcw clc cld std decl mov and jmpq je (bad) testb push cmp test clc sub jmpq callq cmc bt test jmpq not mov jmpq jmpq je cmc bt stc xor jmpq jmpq jmpq jmpq fisubr icebp (bad) mov or pop not pop insb (bad) cwtl pop faddl cmp insb dec xchg xor add movsl mov (bad) sti xchg pushq jbe enterq lahf (bad) mov xor add cmp (bad) cmpsq pop nop out adcl push xchg add js xchg stc (bad) lea adc cs int xlat fisttpl pop callq clc shrd mov test bt test jmpq mov jmpq js mov jmpq bswap movzbl jmpq jmpq mov jmpq jmpq jmpq movsbw mov jmpq callq cmp stc test jmpq callq test cmc cmp jmpq jb mov mov sti jp pushfq (bad) movabs fsubs lret pop add movabs jmpq movabs xchg int es xchg fs (bad) mov (bad) (bad) cmc (bad) and mov mov fidivrl sti (bad) mov int3 or add lret mov rex.X out xor and ficoml fnstsw rex insl rcrl test lret (bad) (bad) adc mov jo (bad) jrcxz int xlat pushq cmp jmpq mov jmpq jmpq je jmpq jmpq callq movsbq lea jmpq mov jmpq jmpq movl jmpq jmpq mov movsbl setne movzbl mov mov jmpq je bt mov bt jmpq jmpq jbe lea jne mov jmpq test jmpq je movzbw lea movsbq setno not lea mov movsbl lea mov jle callq jmpq movzbw movsbw mov not bswap mov mov mov jmpq nop jmpq jb callq test stc cmc jmpq jne jmpq jmpq jmpq callq jb callq cmc mov rol rol mov xor bswap mov cmp mov clc bt cmc bt add test bt sub jmpq test jmpq je cmc cmc mov bt clc cmpb jmpq jb test test cmpb movsbw not lea not mov lea bswap movzwl mov mov jnp sete mov mov mov jmpq test jmpq jmpq callq shld bsr mov clc bt bt stc xchg jmpq test jb jns bswap mov jmpq cmp test jmpq jmpq jmpq jmpq callq jmpq mov jmpq jl je cmc test xor jmpq jmpq jmpq movzbw jmpq jmpq callq movsbw xchg bswap mov lea setae mov movzbw mov jmpq jmpq nop jmpq test jmpq jne cmc sub jmpq jmpq stc test jmpq jne bt movsbw stc mov btr not add mov and bts movzbl mov mov add xor shld xadd lea cmp cmc test mov bt cmp cmc add cmc add bswap bswap mov jmpq callq lea jmpq je stc test bt test cmpq jmpq cmp test jmpq jmpq jmpq jmpq mov jmpq jns je not ror sub setp not xchg lea lea xchg mov movzbl not lea lea mov not bswap bswap mov not lea lea movsbl lea jmpq jne cmp sar shld mov not cmc rol mov and sub stc test mov lea bts xor add add not jmpq jmpq jmpq jmpq jmpq je movsbw lea mov or setg lea bswap mov bsr inc cmc shrd mov cmp clc jmpq jne seto bswap mov mov jmpq callq not movzbw not lea jmpq callq bts btr clc cmp mov bts stc dec mov bsf ror movzbq mov rcl shrd rol mov movzbq sub or not mov ror mov bt test jmpq test jmpq je clc shr test btc mov cmc bt clc test jmpq callq bswap ror lea mov stc test jmpq jmpq je clc cmp stc cmp jmpq cmp jmpq mov mov jmpq jne bt bt cmp cmp jmpq jmpq jmpq callq shld xor clc sar movzbl btr movzbw sub movzbw sete mov setb lea movzwl jmpq jmpq je jmpq pushq jmpq nop jmpq jmpq je jmpq callq bsr lea lea mov movsbq xchg test xor xchg setge jmpq jmpq callq cmp cmc cmc cmp test jmpq not not bswap dec bt shl clc mov cmp clc cmc test jmpq jmpq je sbb rex.WB lock mov mov xor mov sar mov shld lea stc cmp jmpq mov jmpq callq clc jmpq roll jae xchg push add (bad) std lret and pop pop insb (bad) cwtl mov movsl mov int lahf (bad) ja add (bad) xchg xor orl rcll mov xor test add add je or add add mov mov mov stc test jmpq je clc bt test bt cmpw jmpq je jmpq jne jmpq jmpq jmpq mov jmpq callq btc mov ror shl shr btr xor mov movzbw or adc sar shr mov ror ror bswap xchg repnz mov not rcr xchg bsf lea sar rcl data16 repnz (bad) mov test cmp test sub jmpq jmpq stc stc stc cmp jmpq je jmpq cmp bt clc test jmpq jne rcr rcr btc rcl add mov setae setge movsbw lea jmpq jmpq jbe pushq jmpq jns dec movsbw mov jmpq jmpq jne and mov rol rcl mov cmp clc bt bt xor jmpq not mov jmpq je je mov mov jmpq jmpq je sub lea rcl and xor lea movsbl movsbw not mov jmpq jmpq callq dec sbb cmp lea cmp test jmpq callq sbb mov stc shld inc mov rcl or dec lea sub adc shl repnz movsbw movzbw not inc jmpq jmpq callq cmp test mov shld bsf rol rcr mov clc test jmpq callq dec bt test mov stc bt jmpq callq stc jmpq callq jmpq jmpq callq inc shld inc mov bt bt stc stc sub jmpq jmpq jmpq jmpq test jmpq cmp jmpq je jmpq je mov xor not lea lea mov lea mov xchg mov mov mov not mov lea lea mov jmpq mov jmpq mov mov not jmpq jmpq (bad) callq lret push xor cmp out rex.WXB ja add jbe adc or insb pop mov jne xlat scas mov add jo js stos int addl xchg jns test pop pop push mov and or cmp xlat cltd pop pextrw pop mov mov xorl xor subl pop and cwtl rex.WRXB insb sub sbb mov fcompl sti (bad) (bad) divl add (bad) jns mov jrcxz in sti lret rorl add stos (bad) test rex.WB xorl loope push cmpsb cmp movsb add cwtl stos adc sub (bad) mov imul pop sbb (bad) adc xchg idivl test scas lret add lea decl test not movsbl mov mov bswap movzwl bt or lea mov bt cmc jmpq je cmc cmp jmpq mov bts btr and ror movzbl test cmc stc cmc mov sub rol movzbl jmpq jmpq je cmp bt cmp test xor jmpq callq movsbw mov mov jmpq callq stc stc mov cmp test jmpq jne movzbl movsbw mov stc bswap mov stc add jmpq bswap movsbq movsbw mov jmpq jmpq jb movzbw ror shl lea stc clc bt clc sub jmpq jmpq jmpq jmpq je setns mov jnp callq cmp stc bt test jmpq jb cmc cmp jmpq callq jmpq jmpq pushq jmpq jmpq movsbw mov jae callq movzbw mov bt bt clc test jmpq mov jmpq je bt clc jbe cmp jmpq jmpq je clc test jmpq jmpq jmpq callq cmc clc sub not mov clc test test jmpq callq setns cmp mov bt cmc test jmpq jmpq pushq jmpq jmpq movsbw mov xchg jmpq movsbq not movsbw mov jmpq ror mov cmc btc mov and shr lea mov and shld shrd test xor not jmpq jmpq je bsf mov stc test jmpq callq test stc cmpq jmpq callq shld mov bsf not test jge mov jmpq jmpq jmpq jmpq je lea setns movsbq lea mov mov lea movzbw mov mov movzbw movzbl mov jmpq callq clc clc cmp jmpq pushq jmpq mov jmpq jmpq pushq jmpq incl mov mov jmpq callq clc jae test jmpq cmp jmpq je adc xor sete not movzbl stc test test jmpq dec shr lea clc clc test test jmpq callq jmpq je jmpq pop cs ficompl or cmp sahf and adc cwtl lret cld (bad) mov (bad) mov fisubl insb push callq test xchg repnz jmpq (bad) rex.WX movsl rex.W fs sbb xor insl pop (bad) jns add push pop adc (bad) xchg stos movb xor push leaveq es xchg int (bad) mov (bad) adc (bad) jmpq test mov cmc jl test movl cmp bt jmpq cmp test jmpq jmpq cmp cmp cmp jmpq je test not mov lea lea lea sbb mov setp mov test cmc add xor bswap bsr sar mov cmc cmc bt test add cmp cmc add cmc jmpq jmpq je mov mov movsbw bswap mov movsbw jge lea movsbw mov jmpq bswap movzbq lea jmpq movzbl movsbw jmpq jle jmpq clc bt bt test jmpq jmpq je bt sar clc not mov cmp cmc bt test jmpq add cmc add stc xor jmpq jmpq je jmpq add mov adc outsb imul iret lods sbb pushfq sub pop jmp sub rex.RB xchg test rex.WR add vaddss mov mov fwait (bad) pushq lods mov cld out outsb shrl (bad) sbb pushq popfq and xchg push fidivr xchg (bad) rex.WB fwait xchg in xchg mov test jmpq rex.RB rex.WR rex.RB sti (bad) jmpq (bad) cmp stos (bad) adc rex.WRB rex.RX jne jrcxz pop rol stos fstl rex.WX es and mov rcrl imul mov add mov add in mov sti lret (bad) movabs or rex.WXB (bad) (bad) int (bad) mov iret push add jmpq pushq jmpq jmpq not movzbl mov jmpq jmpq je jmpq movl jmpq test jmpq jne shrd cmc bts jmpq jmpq je or mov clc bsr cmc mov bts xchg data16 lock mov mov shrd inc rcr mov jmpq callq test cmp clc cmp jmpq jne cmc btr rex.B lock movzwl shr shld bts mov stc clc sub jmpq je jmpq callq bswap movzbw jmpq je xchg lea not lea movsbq mov lea lea lea mov jmpq jbe bt mov stc cmp jmpq lea nop not mov bswap lea lea mov jmpq jmpq jmpq jmpq jmpq mov jmpq jne setns mov jmpq jmpq pushq jmpq je setno movzbl movzbl bswap mov jmpq jns setg mov inc jmpq jmpq je jmpq jmpq callq bt jmpq js mov movsbl mov jmpq jge jne bt bts clc mov lea shl (bad) bnd lea rol stc sar mov bswap sub movzbl lea jmpq mov jmpq je test cmp test cmpq jmpq not mov lea movsbw jmpq jmpq pushq jmpq je jmpq pushq jmpq jmpq jmpq jmpq jmpq jmpq movsbw lea mov jmpq callq cmp clc cmp test jmpq jmpq mov jmpq jmpq bt bt jmpq jmpq jmpq jmpq jmpq jmpq mov jmpq jmpq jbe shld add ror not mov cmc cmp cmpw jmpq pushq jmpq jmpq jmpq not mov bswap mov movzbw jmpq jmpq jmpq je dec rol or not and cmp lea btr jmpq je bswap shrd mov rcl btr bswap mov and stc neg lea cmc clc stc bt cmp jmpq mov jmpq jmpq jmpq jmpq jmpq bsr bt nop xor bsf adc mov bt bswap xor jmpq callq clc test jmpq js bt cmp stc test jmpq bt cmp xor jmpq jmpq jmpq pushq jmpq jmpq je setge mov shld mov cmp cmp stc cmp test jmpq mov lea jmpq jmpq je cmp bt cmp jmpq je setb mov bts xor mov rol not cmc lea lea jmpq jmpq jmpq jmpq jmpq jmpq rex.XB rex.RB cmp addb sbb add (bad) gs imul mov pop or pop cmp (bad) sti fwait sbb lret int (bad) (bad) rex.WR je (bad) sbb (bad) xchg in cmp push sbb (bad) imul add add (bad) adc sub loopne punpcklwd (bad) je int mov jmpq callq cmp bt jmpq callq stc mov bsr movzbq jmpq bt cmp cmp jmpq callq btc mov bt test jmpq callq shl inc shl stc mov cmc test jmpq ror sub movzbw setb mov not jmpq je movsbw movzbw mov jmpq jmpq mov jmpq callq bt mov stc jmpq test jmpq je and btc rcl mov xadd xadd mov shrd jmpq jmpq callq test mov jmpq jmpq jmpq stc cmp test jmpq je jmpq je rcl xor sub movzbl mov lea jmpq je btr mov jmpq jmpq jmpq callq jmpq je btc adc dec mov rcl movzbw mov shld mov mov neg and (bad) icebp add sar mov clc test bt add jmpq jb not incl seta lea mov jmpq setbe movzbl jmpq add cmp cmp jmpq jmpq stc test sub jmpq je bt lea btc stc sub not jmpq je clc cmp jmpq jmpq jmpq rol xor not bswap mov jmpq mov jmpq bt bt mov mov data16 repnz mov cmp clc clc bt xor jmpq test clc test add jmpq jne jmpq mov jmpq jmpq jne jmpq jmpq je shr mov cmp cmp test test jmpq callq stc clc test jmpq jne ror rcr seto mov rcr xor mov cmc xchg lea movsbw and cmp add not mov jmpq jne stc cmpb jmpq callq test test jmpq je bswap jmpq jns lea mov lea mov jmpq xchg clc test jmpq je lea mov test stc test jmpq jmpq jmpq jmpq shl jmpq jmpq inc jmpq lea rol mov clc xor jmpq bt stc test jmpq je bt cmp jmpq (bad) callq in (bad) (bad) sbb (bad) fistpll cli int fnstcw andl or stos sbb ja scas sbb rex.WB mov ss loopne mov or rex.WRXB lock or mov movabs or enterq (bad) push fcos repnz sti lret (bad) jne lods (bad) shrb (bad) add xorb jg sbb movsl adc mov cmp jle jl fcomps mov or int mov jmpq je mov mov setp lea movabs xchg xchg mov movzbw mov jmpq jne rcr setp rcl mov cmp sub mov cmp test add jmpq callq cmc test test jmpq jmpq stc xor jmpq bt test jmpq clc sub jmpq jmpq jmpq callq (bad) testb sti (bad) not movzbl bts mov add and xor lea not lea movzbw mov movzbw mov not movzwl jmpq jmpq lea mov movsbl mov jmpq pushq jmpq fisubrl movl (bad) fs cmp rex.WXB rclb rex.R sarb add (bad) int (bad) js cmpsl (bad) adc adc std sub cmp pop sbb cmp imul mov xorl ficom adc jae sub movsb hlt push (bad) rcrb push out (bad) adc (bad) mov mov rex.WX addr32 and xor rex.RX mov (bad) pop fldl jg rex.WRX xchg or rex.WRX mov sub rex.WRXB loopne test fsubr fmull cmpsl mov and xchg pushfq (bad) out mov rex.XB add adc insl stc mov data16 (bad) rex.RB sbb js rex.R (bad) in (bad) (bad) rex.R movabs or rclb outsb sub sub fwait cltd adc push (bad) outsb gs (bad) adc sbb xchg fisubrl insb (bad) rclb rex.WXB iret nop jb and movabs in (bad) shrd cmp sbb (bad) push mov out rex.WX fstps xor jne out movabs (bad) adc lret (bad) fcompl shr iret and adc or and loop movslq pop (bad) rex.R lods loop (bad) mov add or (bad) movabs mov push rex.WX mov adc std incl fisttpll callq sbb add lea lea jmpq jmpq je movzbw stc not mov test bt test clc test jmpq je shrd mov stc test bt clc sub jmpq je clc cmp jmpq jmpq nop jmpq je not bswap movsbw movsbl mov jmpq pushq jmpq pushq jmpq test jmpq nop jmpq jmpq jmpq bt test jmpq jnp jne jmpq callq xadd sbb adc mov bsr test sub bsr mov movzbl stc shr mov shr btr bt mov cmp mov bsr adc mov clc test jmpq cmp jmpq jmpq test jmpq callq shr bsf mov cmc clc test jmpq mov not mov mov jmpq callq setbe not bswap mov lea movzbl jmpq test jmpq je test mov stc cmpb jmpq jmpq jmpq add add add shr test js ficomp out int3 rex.WB add ja (bad) (bad) jmpq jmpq pushq jmpq jmpq test jmpq pushq jmpq jmpq cmp cmpq jmpq jmpq jmpq cmp stc test cmc test jmpq clc bt cmp jmpq je stc test test cmp jbe je jmpq cmp jl lock mov and and jle jb in ja jrcxz xlat sarl (bad) fldt cmp fsubr movabs jmp rex.RX rex.W fadd lods sub (bad) mov ficom mov mov cmp mov (bad) (bad) jrcxz rex.WXB mov in rex.RXB jnp nop movabs (bad) imul pushfq repz mov punpcklwd movabs mov ss in test (bad) jno (bad) repnz xorb (bad) rcr mov not or repz (bad) sahf loopne and (bad) test (bad) (bad) in (bad) sub out (bad) pop test xchg sbb and cmp fwait mov int3 push fildll mov or rex in add movl (bad) insl mov movabs (bad) mov cmp retq movsl pop imul or mov in (bad) icebp ss rex.WR in sbb cltd or cmpsl scas lret test gs (bad) fsubrl sbb (bad) xor icebp push in sub in pushq (bad) sub rex.WR mov icebp pop movsl jmpq (bad) out jnp cmc adc data16 (bad) mov ds psubsb sbb fisttpll out rex.XB lret fstps fcoms loopne jle xor (bad) loop rex.RX or jns cmp fdivr and lods rex.WRXB sbb rex.W fnsave adc mov ficom stc (bad) clc int mov adc test (bad) incl jmpq jmpq callq movzbw mov jmpq jne cmp movzbl bsr add mov jmpq sub jmpq cmc jmpq test stc test jmpq mov movzbl setge mov jmpq callq test cmp jmpq callq cmp or jmpq callq mov movsbl bswap lea jmpq mov jmpq sar clc sub not data16 hlt (bad) mov clc ror repnz lea jmpq callq cmc rcr mov cmc test jmpq test cmp inc mov sub cmp sub lea movsbl jmpq jne jmpq lea mov mov mov jmpq jmpq jmpq jmpq jne cltd add (bad) mov (bad) or sub movabs in pop outsl ja pushq xchg fsubrp rex.WX jno rex.WXB movsb and pop (bad) icebp cltd retq xor es rex.RX shrl pop rex.WRX pop test mov fdiv or rcrl rex.WRXB ss (bad) and (bad) leaveq push and out retq xor fist sbb pop idivl loopne lret jo mov sti enterq push in fisubl mov repnz rex.XB (bad) stc (bad) stos mov clc js or cmp push loopne or mov movslq mov je (bad) (bad) rcll or jl test cmp jb loope add xor int mov adc fsubs imul (bad) (bad) iret imul adc pop rex.XB (bad) cmc scas sbb add and mov lret add movabs (bad) push movabs rex.RX addr32 sub and (bad) sub ja callq faddl js mov push ficomp push (bad) adc lahf je lahf xchg idivb adc movsb sub retq jl sbb rex.WRX sti mov int scas pushfq add mov pop pushq out rex.WRX (bad) jrcxz mov movabs jno xchg movsb mov xor adc rolb add int3 sti xchg int and movabs push sbb movslq pushq (bad) data16 xchg rex.RXB cwtl lock mov hlt sti (bad) push push lods jne pcmpeqd sti lret (bad) scas mov jnp lret movsl fsts cmp jp fsts pop adc (bad) sub lahf xchg (bad) (bad) or popfq xor sub pushq scas scas sbb insb test mov bswap movsbw lea movsbw movzbl jmpq jmpq jmpq callq inc bt mov cmp test jmpq jmpq jmpq jmpq cmc bt bt add cmp add bt add test cmc cmc bt cmp jmpq jmpq jmpq mov jmpq jmpq jns je jmpq cmc bt add jmpq stc stc test jmpq jmpq jp callq add xor movzbl lea setb sbb not xor add lea xchg xor movzbl mov not jmpq jl pushq jmpq je cmp cmp cmc cmpl jmpq jmpq clc cmp jmpq jmpq je bsr movzbl not sar lea inc add bt stc xor movsbl mov bswap mov mov jmpq jmpq seto movsbw bswap dec inc adc mov setge cmc rcr btc or cmp inc cmc cmp mov shld shl movsbw xor shr rcl and mov shld lea repnz lea movzbw not lea inc mov dec dec mov bt cmp cmc cmc test jmpq callq clc cmc cmp cmp jmpq pushq jmpq jmpq cmc test cmc sub jmpq jne xor rcl clc sub lea jmpq callq jmpq jno mov jmpq jmpq nop jmpq add jmpq incl jmpq jmpq jmpq callq sar sub movsbw mov not mov movsbw mov bswap movzbw mov jmpq je bt clc cmp bt cmp jmpq jmpq and clc cmc cmp jmpq jmpq callq cmp stc cmc cmc test jmpq movsbw bswap mov jmpq callq btc mov bt jmpq callq sub btr test bsr or sbb lea sub sbb adc mov adc repnz bswap lea mov not lea lea jmpq add je rcr bswap xor xchg lea lea not not bswap mov jmpq stc cmc test jmpq callq test clc test test jmpq callq test cmp cmp test js jmpq callq jmpq shl dec neg mov adc neg rol shl bsf bsf rol shld xor ror adc bt mov mov jmpq bt test cmp bt mov stc cmp cmpb jmpq jmpq jmpq jne test add cmp ror mov shld cmp setae lea bsr jmpq add jmpq je cmc cmp jmpq callq jmpq mov jmpq je movsbw mov jmpq mov movsbw cmc movzbw cmp mov cmp cmc test jmpq jmpq jmpq jmpq pushq jmpq shl rol cmpq bswap mov jmpq mov lea not mov mov jmpq stc add jp callq cmp cmp clc jmpq jmpq mov bt test bt cmp movl cmc jmpq callq sbb bsr mov stc sbb mov bsf bts lea or neg btr bt mov inc shld movsbw movzbw lea clc clc jmpq callq stc clc clc cmp jmpq jmpq jmpq callq not not bswap mov jmpq jmpq add cmp add jmpq je jmpq jmpq clc test jmpq pushq jmpq pushq jmpq je and not shld shrd mov rcl xchg bts sar mov movsbl or bts shld mov sar seto neg add ror cmc ror stc mov bt add jmpq jmpq bt test cmp jbe jne bt sbb xadd mov mov cmc stc rol mov clc jmpq callq sets not movsbl movzbl lea jmpq jmpq callq movzbw setg xchg jmpq je lea bswap movsbw lea mov jmpq callq cmp jle cmc cmp and bt cmp bt bt cmp jmpq inc jmpq callq lea lea jmpq stc bt jmpq jmpq jmpq jmpq jmpq callq clc jl sub jmpq bt mov test cmc test cmp test jmpq jmpq jb jmpq callq jmpq not movabs movzbw mov not not sete movsbw mov jmpq mov jmpq jmpq je jmpq jne jmpq lea xchg mov not lea jmpq jmpq callq dec btr not mov test test jmpq je jmpq inc stc stc cmp mov jmpq callq jmpq je jmpq dec jmpq jmpq jmpq bt cmc stc test jmpq jne stc jle cmp test sub jmpq jmpq jmpq pushq jmpq je jb movzbw bswap lea movsbw incl mov jmpq cmp cmc test jmpq je jmpq cmp cmc stc xor jmpq pushq jmpq jmpq stc clc add bt cmp jmpq jmpq je shrd sub movzbw mov mov jmpq jmpq callq test mov or mov clc cmp bt cmp test jmpq test add cmp clc add bt add mov not mov jmpq jmpq callq movsbw shld rol shrd mov jmpq cmc test jmpq jmpq callq cmc cmp jmpq mov jmpq callq bt clc mov jmpq pushq jmpq jmpq je clc shl dec inc mov clc clc bt cmp test jmpq jmpq je shl clc test mov bt btr btr mov and test rol or mov xor sub not lea movsbl mov jmpq jne cmc shld jmpq lea lea jmpq je sar btc mov test test cmc bt test jmpq je cmp stc cmc cmp cmp jmpq je shl sub mov sub mov xor btr dec shld xor not mov mov jo callq cmp sub seta setae not mov jmpq jmpq callq rcl bsr cmc data16 (bad) or lock test jmpq not mov jmpq rol mov btr cmp bswap mov jmpq nop jmpq jmpq jmpq test jmpq bswap mov bsf xor bsr sub movzbw bswap bswap setle mov movsbw mov jmpq test jmpq jmpq jmpq jmpq (bad) movabs clc (bad) jne rcrb rex.WRX or mov fcomps out jge jns adc out add addl popfq xchg and pop jmpq adc (bad) fildll jnp in mov jle xor insb stos faddp and imul cld pop retq popfq push idiv (bad) sbb add pop xchg ss sub retq (bad) iret xor sub cmp xor sbb scas mov cltd repz in (bad) xchg pop (bad) and adc addr32 rex.RB xchg pushq mov rex.RX adc hlt (bad) xadd loop test xchg stos fnstsw and loop (bad) pop gs lea push test int3 (bad) mov add adc (bad) out pop or mov sarb lods rex.RXB adc shlb movsl shll pop push scas rex.RB sub data16 xor repz (bad) rex.WXB idivl popfq jno pandn lock push (bad) sbb (bad) pop in pushfq mov cmpsb enterq (bad) (bad) lock xor xchg test callq pop mov sub outsb add add add add test test mov lea not bswap setl mov jmpq je ror setae mov bt jo cmp cmp test jmpq lea jmpq jmpq callq test test jmpq bt stc add jmpq pushq jmpq pushq jmpq nop jmpq jmpq jmpq callq cmp shr lea xor setl setns movsbw mov jmpq bswap mov jmpq jmpq je btc adc mov bswap bsr xadd mov sar xadd sub mov neg bswap neg adc add btr mov clc cmc bt bt add jmpq pushq jmpq je cmp cmp cmp bt test jmpq xchg jmpq jmpq test jmpq je bswap bswap setl jmpq jne mov jmpq jb lea not not dec adc jmpq cmp clc movl clc cmc mov neg not mov clc cmp mov test cmpb jmpq setg seto mov mov jmpq cmp jmpq jne xchg bts xadd mov btr adc bswap mov lea xadd jmpq jmpq callq bsr jmpq jmpq mov mov jo movzbl jmpq jmpq jae add jmpq je seta not xchg lea movzbw bswap xchg mov jmpq callq test test jmpq js setns bswap movabs xchg mov lea lea movzbw bswap mov bswap lea bswap mov lea jmpq adc bsr ror movzbl sub mov shld rcl xor rcr adc movzbw sub mov movsbq bt bsr rcr movzwl cmc mov stc movsbw movzbl cmc stc clc stc mov sar shrd movzwl clc jmpq mov jmpq callq bt stc test test jmpq cmp cmp cmp jmpq je btc cmc mov jmpq jmpq je stc sbb mov jmpq mov movzbw mov jmpq jmpq jmpq btr bt bsr xor rol mov bt inc btr stc repnz mov movzbw movsbw mov not inc lea dec btr shl btc mov cmc cmp stc test test jmpq cmp jmpq jmpq callq jmpq je cmc cmp jmpq jmpq jae je cmp cmc cmp jmpq callq inc bts bswap mov cmp test test jmpq pushq jmpq rex.WXB xchg mov or pop rex.WXB add retq mov rex adc and sub retq sbb add rcll cld (bad) jmpq callq test test test jmpq callq bt cmpq jmpq jmpq jmpq setg lea mov jmpq mov jmpq jmpq jb bt clc adc lea jmpq jmpq jmpq jbe lea mov jmpq jmpq jmpq mov jmpq mov jmpq jb stc jmpq cmovne jmpq jae pushq jmpq jmpq lea not lea lea bswap bswap lea jmpq movzbw movsbq lea mov jmpq mov jle cmp cmpw jmpq je cmc bt cmp cmp jmpq je shrd adc stc sub mov bswap mov jmpq jmpq stc test jmpq not mov lea mov lea mov jmpq jmpq test add bts mov jmpq callq bt clc cmp test jmpq mov jp movl jne mov jmpq jmpq ror mov jmpq jb neg bt rcl mov lea cmc test sub jmpq mov (bad) and js adc jo rex.WX test pop jne xchg cwtl fwait sub mov mov movabs xlat pop and sbb leaveq sub int xor mov sub popfq xchg in imul mov ss pop mov pop cwtl data16 xchg mov mov push pushq mov mov scas xchg xor test (bad) fwait rex.XB (bad) and scas ss mov leaveq rex.WRX rex.RB add (bad) idivb (bad) lods xchg cmpsb repnz and scas sti pushq (bad) hlt xchg xor sub (bad) pop pushq rex.WR movabs popfq andb (bad) callq mov (bad) push adc outsl adc decb mull xorl callq lea int3 rex.WXB rex.RB or test imull add in push es sbb (bad) xor adc (bad) loopne pushq (bad) xchg rex.WX cmp sub or xchg rex.X (bad) addr32 movsb nop rex jnp (bad) (bad) and xchg jns test mov sbb out sub mov rex.XB movabs cltd icebp movsl (bad) mov mov jge rex.WR jp fisubl (bad) cmpsl test mov xchg push loop,pn sub xchg (bad) rex popfq (bad) (bad) movabs rex.WB mov movabs jmpq addr32 adc mov imul in movslq (bad) fmuls int3 push (bad) movabs movabs (bad) fcmove sbb jmp (bad) nop jnp retq jo test loopne fcmovbe sbb pushq cwtl mov (bad) or pushq ss mov adc test repnz (bad) (bad) sub insl jo push adc cmp xor nop rex.R out rex.WRB (bad) std xor (bad) jmp or mov scas push imul rex.WRXB lock jmp jl std jp add rex or (bad) sbb add lea clc xchg xchg mov fadds push mov mov adc or (bad) mov jrcxz int xchg test test (bad) (bad) callq loope popfq shrl jmpq je sar inc mov cmc bt clc stc test jmpq nop jmpq jb add add shr lea test stc clc cmc xor jmpq je movsbq lea xchg movzbw movsbw mov not mov jmpq mov clc cmc test jmpq jmpq callq jmpq cmpq jmpq callq cmp cmc cmp jmpq mov bswap mov jmpq je shl test bts sub mov lea movzbw movsbw mov jmpq je test stc cmpq jmpq jmpq jmpq movl jmpq movsbw mov jmpq test bsr xor mov stc add jmpq jns lea mov jmpq je bt bt jmpq test mov not shl shr xor mov bt cmc cmc mov dec movsbw mov cmc cmc mov btc mov stc cmc mov cmp jmpq jmpq jmpq callq shr test mov btc xor xadd neg xor or clc movsbw xadd mov cmp rcr setge repnz stc xadd btr not neg sar sar jmpq callq not lea mov lea jmpq stc cmp cmpq jmpq mov bswap movzwl jmpq clc test jmpq jmpq pushq jmpq cmc test jmpq mov jmpq jmpq jmpq jmpq callq stc clc cmp jmpq movzbw movsbw mov jmpq jmpq xchg jmpq cmc cmc stc cmc add jmpq bswap bswap lea jmpq cmp test jmpq jmpq callq jmpq cmc jmpq callq xadd inc bsr mov clc rcr bswap and mov (bad) mulb (bad) or btr neg clc xor bt repnz jmpq jmpq cmc jmpq jmpq cmp test jns je sar inc bsr shl mov bt test jmpq callq bsr cmc movsbw test lea stc bt test stc test jmpq jmpq rcr btc dec mov test clc stc bt add bt jmpq stc (bad) sbb nop (bad) rclb mov adc sbb cli imul add sbb jmpq repnz lret stc (bad) xor jmp movslq (bad) jb (bad) adc pop adc rcrl rex.WX xchg retq mov jb fwait (bad) pushfq addr32 xchg pop push sbb int xchg push (bad) movabs sahf out adc movups rex.R pop imul fistpl (bad) mov imul test adc rex.WRX (bad) adc cmp mov mov cmp clc xor add cmp xchg xor sbb cmp test int3 mov rex.RXB mov mov sahf sub out (bad) lock movabs push add cmp vphaddubd test in out mov imul cmpsl cmp in mov fcmovu stos jo jle stos (bad) insl sub sbb pop clc push push (bad) callq sti pushq xchg iret clc js pop sbb and in mov jrcxz pop sahf mov push sbb rex.W scas nop (bad) rex.WRXB xor leaveq sar or mov jmpq je jmpq movsbw sets mov jmpq je neg cmc mov test clc test test test jmpq inc inc sub movzwl bsf bswap cmp mov and bsf cmp shl and inc movsbl shr lea and jmpq jb cmc cmp jmpq add jmpq jmpq jmpq movsbl movzbw mov mov jmpq jmpq jmpq jmpq movzbw bswap mov jmpq callq jmpq jmpq mov stc clc cmp clc test jmpq fldcw movsb and jp (bad) cmp cltd movabs out rex xchg mov lods xchg xlat (bad) clc sub movsb (bad) mov rex.WB sbb leaveq cmpsl test mov loope jbe jo pop xchg idivb jrcxz jl jns mov subl lods rex.XB sub pop sbb scas (bad) out scas rex.RXB cli callq mov std incl add (bad) lods std (bad) callq jmpq movsbw movsbl mov jmpq je shld sbb sbb sub jmpq callq cmp test jmpq callq cmp test bt test jmpq je rcl bsf movsbl mov jmpq jmpq je stc jmpq je jmpq callq neg mov xchg bsf sbb or mov or sub sar ror mov and rcr rcr mov shld cmp data16 lock cld incl retq movsbl sub mov test test jmpq callq jmpq clc test jmpq jmpq jmpq jne dec setbe ror xor mov bt test jmpq mov jmpq callq inc lea cmc jmpq js pushq jmpq je not xor not movsbl bswap lea setp movsbw mov bswap mov movsbw not jmpq jmpq jmpq test jmpq jmpq je rcl bswap clc lea cmc setnp sub movzbw not movsbl not mov movzbw movsbw bswap mov jmpq callq jmpq jmpq cmp jmpq jb mov not jmpq mov jmpq jmpq add cmc bt add test test add movzbl mov jmpq callq bt test cmp jmpq cmc cmp jmpq jmpq callq test cmp cmp jmpq mov mov xchg bswap movsbq mov sets setnp jmpq mov jmpq callq btc movsbl bswap rcl mov rol bsf mov test bt cmc test test jmpq clc test jmpq outsl nop pop fsubrl stos mov in fidivrl (bad) xchg ss lret (bad) rcll add push (bad) ror xchg jp mov jg movsl lea mov pop (bad) leaveq cmpsl jl fistl cwtl fdivs scas retq push flds mov (bad) mov or xor rex.X (bad) mov (bad) cmp cmp (bad) fs sbb pop jmpq lea ds or cld movabs jg (bad) pop (bad) test mov rex add pop pushq (bad) movabs mov iret pop rex.WRXB cmp gs mov add (bad) cmp sahf scas and rolb data16 pushq (bad) sub rorb fstpt sbb rcrl lods jae jno mov stos (bad) rex.WRX movsb xchg jns out cld imul or rex.WB xchg rex test pop fucom rex.WB test rex.RX (bad) rex.WXB out (bad) xchg jmp adc in sbb mov mov pushq cmp cmp cmc lods adcl sub hlt jbe movsb (bad) (bad) (bad) out (bad) mov mov lahf and add mov sub rex.XB rex.XB add fbld hlt jae jno movabs (bad) sbb (bad) sti leaveq rex.WXB fimull scas sbb loopne callq movsl jmpq (bad) mov ficompl rex.W mov (bad) xchg (bad) scas shll in movabs outsb xor mov (bad) (bad) sub (bad) push retq or test (bad) sbb fs mov movsb pop and rex.RX (bad) test loopne int mov pop cmpsl movabs ja mov leaveq fdivrl shl int3 mov (bad) add loop push xchg out jne (bad) xor sti insb pop or sti sar and cmp mov or xor (bad) loopne sub jmp mov mov cmp sbb cmpl rex.W pause mov ds in ds out rex.RXB imul or scas (bad) out pop and test jp jle sub (bad) (bad) (bad) in sbb sbb jno mov mov or fcomps gs rcll (bad) push or pop adc fmul (bad) (bad) test shll out sbb ds jmpq push rorb fisubl test icebp mov pop xor jne stos jbe (bad) rex.WR (bad) rex.WB je int3 sti (bad) lods mov add pop adc in adc movabs xchg enterq (bad) (bad) int3 stos (bad) push scas rex int3 add fscale adc es push pop push (bad) mov xor add (bad) xchg movabs rex.WR mov scas mov adc je rcr neg xor mov mov movzbl lea lea jmpq jmpq mov jmpq jne jmpq callq neg shr sar mov bt test jmpq js cmp test jmpq callq bt clc test jmpq jmpq jbe mov not lea jmpq add add add jg rex.RB pushfq sub mov xor push or insl mov loop mov test fiadd add mov (bad) inc rex.R add add jmpq jmpq cmp jmpq mov jmpq jbe jmpq jmpq je clc shl ror btc mov stc cmp sub jmpq jmpq jmpq jb cmp cmp cmp jmpq jmpq jbe (bad) repnz bsf dec lea jmpq mov or mov bt clc cmc cmp jmpq bswap mov jmpq jmpq sub jmpq je movzbw not lea lea jmpq mov mov jmpq inc xor rcl neg bsf mov cmc rol mov sub movzbw neg ror mov clc stc jmpq rex.WRXB fisubrl jl scas mov cwtl or mov movabs fucomi ja rex.R movabs mov lret (bad) jo rex.WRB sub (bad) test cmp cli jbe outsl and retq movsl rex.WRX fwait scas cs mov movslq mov xchg rolb fwait jae in and lretw movsb int3 sub (bad) enterq sbb adc movsl div pop sahf int xchg mov mov sbb (bad) movslq (bad) cmp iret xor rex.WRX out scas sbb cmp gs lods cmp cmp (bad) (bad) popq sbbl imul (bad) and popfq fisub (bad) repnz icebp fcmovb mov (bad) or (bad) in mov icebp fbld addr32 xor cmp outsl sbb (bad) sbb outsl push and add scas movabs roll andl mov std (bad) loope pushq mov int3 lahf sub xchg repz callq add xchg leaveq movabs mov xchg mov (bad) dec gs pop cmp mov int (bad) shl rex.WRX hlt jl cmp outsl in xchg ficom fbld gs int xchg ja sarb lret (bad) in fnstenv cmp jmpq jmpq inc jmpq clc sub jmpq bt cmc test jmpq jmpq jb add lea stc cmp jmpq jmpq jmpq jmpq jb bswap mov not seto not movzbw mov jmpq je lea mov shld btr mov setno and mov lea mov not movsbq setge mov jmpq jmpq callq jmpq mov jmpq movsbw mov setbe jmpq jmpq cmc stc jmpq jmpq callq mov add jmpq jmpq callq or mov cmc jmpq jne bsr lea mov ror mov bt bts mov stc rcr shr mov cmp add btc mov cmc stc add cmc add jmpq sub jmpq callq movsbw movzbw bswap mov jmpq jmpq je xchg shr bt bswap mov inc mov rcr btr sbb shrd sub mov jmpq jl mov jmpq callq movsbl mov xchg setp movsbl mov cmc setl mov neg bswap add shld mov test jmpq jae jmpq jmpq mov mov lea mov jmpq jmpq jmpq jmpq jmpq jmpq callq shl mov bt mov bt stc or jmpq cmp test jmpq callq clc test jmpq callq shrd bts mov cmp stc bt test jmpq callq clc cmc cmc mov clc clc cmc cmp test jmpq jmpq callq shr lea sbb data16 (bad) mov bswap mov cmp test jmpq callq clc bt jmpq callq clc bt jae test test jmpq jne cmp clc stc cmc test jmpq pushq jmpq jmpq jmpq jne inc lea cmp clc clc add cmp jmpq jmpq jmpq callq cmp test cmp jmpq je seta mov movzbw mov jmpq jmpq callq cmp cmp jmpq mov setle bswap movsbl mov jmpq jmpq je jmpq jae jmpq callq mov lea mov bswap lea jmpq callq movzbq mov lea jmpq jmpq callq stc cmp jmpq callq bsr btr lea stc clc bt stc test jmpq callq clc test jmpq sub jmpq jmpq jmpq jmpq callq jmpq jmpq jmpq callq jmpq jne dec mov adc movsbw bsr xchg mov and sub add rol mov stc add jmpq bt stc and cmp cmc cmc cmp jmpq je jmpq clc cmc stc cmp cmp jmpq clc bt test cmp test jmpq bt mov test clc cmpb jmpq jmpq jmpq jmpq movzbl jmpq callq shr btc mov stc stc test jmpq jmpq jmpq js not sete movsbw bswap mov jmpq bswap mov jmpq jmpq jmpq callq jmpq jmpq callq jmpq je xchg shl lea bsf xor not movsbl xchg movsbw mov movsbw mov jmpq jmpq jae mov stc mov cmp clc add jmpq je rol sub rol sub movzwl or jmpq je dec not movzwl cmp inc setle movzbl stc shl stc jmpq test jmpq je movzbl mov jmpq je cmc lea lea ror sbb sub mov bswap setae movsbw mov jmpq jmpq je btc movzbw mov not bsf bts mov bt data16 lock lea stc clc cmc cmp jmpq add xchg xor mov rolb rex.XB (bad) movl rex.WB xchg repnz mov push (bad) xor stc (bad) pop xchg push rex.X add sbb mov push (bad) sub and sahf xchg shrl rex.WRX gs jne testl (bad) adc movabs cmp xor ss (bad) fwait int jge cmp rex.WR pushq adc (bad) fs iret add data16 push jmpq cltd cmp clc (bad) mov (bad) mov lock cmp xchg jmp fldcw sbb sub retq out fdivrs fcoms xlat add sbb sti mov mov lock xchg xor rex.WX sbbl icebp xchg rex.RXB mov imul (bad) (bad) rex.R rex.WX pop mov cmp (bad) sahf sub sub (bad) gs lods out (bad) (bad) pushq movsl movabs sbb mov jmpq and jbe (bad) gs rex.WB mov sub (bad) movabs mov (bad) fiaddl cmp cmp adc or pop rex.W test mov (bad) in (bad) fbld push mov (bad) pop fbld (bad) mov rolb mov lret movabs vpslld or or gs cmp insb cltd (bad) rex.WR jnp fiadd movabs retq pop xchg imul push cmp and xchg divl (bad) (bad) scas cmp cmp repz jnp cmp mov sti int3 (bad) mov enterq or push xchg xor and sbb stos lods retq mov fisub (bad) int3 sbb jmpq lock in cmpsb imul hlt push sbb (bad) lods sti jne cmp scas jge add outsb add stc cmp cmpq jmpq cmc add clc add not mov jmpq jmpq jmpq callq test test jmpq cmp clc add btr cmp mov stc jmpq mov setns seta movzbl jmpq jmpq jmpq mov jmpq jmpq callq movsbw setle lea jmpq mov clc cmc test test jae je rol ror mov test clc cmp test jmpq movsbw bswap mov jmpq jmpq callq xor rcl mov cmc cmc clc test jmpq bts xchg lea and sub ror bts stc setp repnz not xchg xchg mov mov movzbw movsbq lea not movzbw lea bswap movzbw lea jmpq jmpq jmpq callq cmp cmp test jmpq pushq jmpq jns mov lea mov mov jmpq test test add jmpq je clc jmpq movsbw mov jmpq test jmpq callq jmpq jmpq cmp bt cmpb jmpq jmpq mov jmpq je stc mov shld clc xor setns movsbw mov jmpq jne jmpq test jmpq lea mov xchg jmpq jne cmp mov bt clc clc test jmpq callq movsbw mov jmpq callq add xor setnp not bswap movsbw mov jmpq je add shrd mov test cmc xor jmpq test ja jne jmpq cmc stc mov stc clc mov test bt add jmpq je jmpq callq clc cmp jmpq jmpq jne xor bsr or mov mov clc rcr mov jmpq callq bswap lea jmpq callq bt stc cmc bt test jmpq jmpq jmpq jne neg inc btc movzwl movsbw movsbw setl mov test xor jmpq jo pushq jmpq jmpq jmpq mov mov xchg mov mov mov mov jmpq je cmc cmc test cmp jmpq pushq jmpq jmpq callq stc bt cmc cmp mov cmc test jmpq jmpq jmpq mov jmpq callq stc jmpq cmc jne test jmpq jmpq jmpq pushq jmpq callq or xchg mov ror mov xor mov bswap mov jmpq callq rol inc sub mov cmc cmc test jmpq jb btc rol mov shld add lea mov clc shl or mov xadd stc cmc movzbw mov rcr sar xchg mov lea sub lea cmc add bts mov xchg adc btc mov bswap add bswap sbb sub sub mov adc mov clc test clc add clc mov test bt mov bt add jmpq je bts mov bt jmpq jmpq pushq jmpq xchg not lea not mov movzbw mov lea bswap movzbw xchg lea xchg not movsbw setp lea seto bswap lea mov jno movl js mov jmpq jmpq je je xchg bswap bswap seta mov jmpq callq bswap jmpq je cmc clc test cmc sub jmpq lea mov mov seta movsbw jmpq jmpq lea mov jns mov jmpq bt test jns je btc bts mov cmp cmp test jmpq lea xchg movzbw mov movzbw not bswap mov not setnp xchg mov movzbq movsbw jmpq cmpw jmpq test clc test jmpq mov jmpq jmpq je sar mov shl btr mov cmp and movsbw mov movsbq movzbw jle mov jmpq je test test cmc jmpq callq not mov cmp btr shr bsf mov bt lea or sbb jmpq jmpq je bt cmp jmpq callq bt cmp stc test jmpq jmpq jmpq jmpq jno je movzbl mov mov jmpq callq mov not mov jmpq je jmpq jmpq movl jmpq jne movsbl movzbl movzbl mov jmpq movzbl bswap jmpq callq lea xchg movzwl movsbw mov movzbl bswap mov lea mov jmpq jmpq stc bt add bt bt stc jmpq jb bswap lea mov dec inc cmc shr ror mov xor movsbl or clc jmpq movsbw nop jmpq jmpq add mov jmpq je bswap movzbw movsbw mov jmpq callq bt cmp stc stc cmp jmpq nop jmpq callq clc rcl xchg mov shrd mov data16 lock xchg mov btr test mov ror mov xor mov shrd bsf mov cmc cmc cmc clc test jmpq callq clc cmc test jmpq je jmpq je xor shl xor lea mov cmc clc test jmpq jmpq jmpq bt test jmpq cmp add jmpq cmc test jmpq je movsbl not setp mov movsbl jmpq pushq jge pushq jmpq callq bt jmpq not setle not sete test bt cmc test movzbq not mov jbe mov jne jmpq jmpq jne je test cmc mov test cmp cmpb jmpq jmpq mov jmpq not mov bswap jp movzbl not mov jmpq jmpq je cmp lea sbb mov cmp clc bt test jmpq rex.RB rex.XB gs ja mov mov jmpq and repz insb pop mov sbb popfq lahf int3 sti lods pop add (bad) stos outsb jmpq callq and or or push (bad) xor iret push cmc mov pushq loope scas out imul addb test mov sbb nop loopne xchg (bad) (bad) loope popfq push es jge (bad) sub lea int jno movslq jmp ss test sub and cmp sub xor cmpb ja add imulb enterq lods xchg movabs int3 push sub fs (bad) xchg or (bad) jae pop fs jmpq rex.B and mov adc or and mov rex.WRB sbb scas out movslq shrl jmpq (bad) xor icebp rex.RX (bad) test pushq movabs (bad) and xchg mov (bad) pushfq imul mov xor movabs jmp sub push (bad) rex.W mov jmpq (bad) out and pop sbb lods xchg xor rex.X out addr32 lea pushq (bad) jnp pop lock pop mov (bad) mov (bad) fwait (bad) pushfq cmp retq insl (bad) mov enterq int outsl int and and push (bad) cmp add data16 decl test push std decl movabs out frstor decl xchg insb sub (bad) jmpq callq not mov clc bt test test jmpq test test jmpq callq test btr jmpq mov jmpq je jmpq je jmpq jmpq sar mov xor mov rcl and movzbl mov bswap mov jmpq and mov lods (bad) fsubr mov xchg rex.RB (bad) test push pop (bad) cli imul pop jno mov movabs iret (bad) int mov movabs movslq rex.RXB icebp (bad) pushfq jrcxz imul xchg pop ficompl sub in sahf xchg mov nop or (bad) mov jns xor cmp scas outsl rex.WRB sbb jg xlat shlb movb popfq (bad) mov int sbb scas sbb stos int3 push (bad) movabs sti je imul scas cmc callq shrl pop sbb movslq jo mov cmpsb movabs (bad) jo outsb push cmovg pop jge jne callq data16 (bad) lret cmpsl icebp rex.WRX pushfq and outsb sbb (bad) jl add out and jp rex mov adc adc enterq xor cli imul out push or pop movsb loope jmpq movslq sti int3 (bad) mov imul std loope rex (bad) xchg (bad) (bad) clc sub movsl or cmp xchg xchg adc mov xor cmp pushq (bad) pushq jne and mov fstps add jne not mov movzbw mov jmpq movl jmpq jmpq jmpq mov seta movsbw mov jmpq jmpq callq lea movzbw lea movsbw jmpq jmpq jmpq jmpq mov jmpq jmpq mov not bswap mov jmpq je inc mov rol xadd mov shr add mov stc test bt add (bad) lock clc test test cmc add jmpq jmpq xchg jmpq jmpq mov jmpq jmpq callq lea jmpq je jmpq jmpq bt cmp test jmpq mov movzbq not jmpq callq sar sub mov stc test test jmpq jmpq jmpq jmpq callq not mov shrd mov jns stc clc test jmpq jmpq jmpq jmpq test jmpq jmpq jne cmc stc cmpb jmpq jmpq callq jmpq jmpq jne xchg bsf inc mov btr movsbw mov bswap mov je test add jmpq bswap jmpq jmpq jmpq je bsf test jmpq je rcr mov jmpq jmpq mov jmpq bt and bt cmp cmp jmpq jmpq mov mov setle not mov jmpq mov jmpq je cmc cmp cmp cmpl jmpq callq cmc cmp jns jne jmpq je bswap jmpq je jmpq jmpq callq lea stc xchg mov lea and bt ror mov shl mov movsbw not lea mov test test cmp add clc sub bt add jmpq je rcr rol not sub movzbw jmpq jmpq mov ror bt bts lea cmc bt jmpq jmpq je bt clc cmp jmpq add test add jmpq je sbb movsbw btc mov bt cmp test jmpq jmpq clc mov lea test rcl mov cmc test clc mov bswap movsbw and mov cmc clc test test mov and mov test bt cmp mov bt mov clc cmc mov rcl mov bt cmc jmpq callq add bsr test lea jmpq jmpq callq sub xor movsbq mov jmpq jmpq jmpq jmpq je shrd xadd mov rol adc mov inc setg mov jmpq je jmpq jmpq dec not dec dec shld movsbl btc mov clc test jmpq clc add bt bt stc stc mov jmpq mov setle movsbw mov jmpq jge jb jno callq jns callq clc stc add stc stc test cmp mov test bt cmpl jmpq jmpq cmc jmpq cmp cmp jmpq jmpq callq rex.WB lock mov jmpq cmc test jmpq mov jmpq je bswap mov lea bswap xchg lea movsbw mov lea movsbw not bswap mov jmpq je cmp or and xadd add btr lea and xor jmpq callq movzbw lea jmpq jmpq jmpq jp callq test clc test test jmpq callq movzbw setp movzbl and test inc bt sub bswap not mov mov not lea movsbq movzwl jmpq callq jmpq add js jmpq jmpq jmpq jmpq js pushq jmpq mov bswap movsbw setns mov jmpq callq shrd not neg sbb mov not mov clc je cmc add and adc movzbl cmp bt sub cmp bt cmp setae seta add xor bsf adc bsf test movzbw setns mov jmpq xor jmpq mov bswap lea movzbw xchg setge mov setg not mov jmpq mov jmpq jmpq callq stc cmp bt cmc mov bt bt cmp cmc test jmpq callq btr not mov dec jmpq not not setle lea mov jmpq jmpq jmpq mov jmpq callq jmpq jge bt cmp cmp test jo je jmpq callq xor cmp bsr mov bt bt cmp test jmpq jmpq jmpq jmpq stc clc mov bt cmc cmpw jmpq cmc jmpq mov jmpq callq setae mov lea lea lea jmpq mov mov jb divb pushq rex.RB (bad) pushfq (bad) shrb test loop es fucomi hlt rex.W fnop sti int3 es cmp pop fsubl iret clc js cmc movabs rex.XB (bad) rex.X xchg and cmp scas gs sbb cmc jbe jmpq jmpq jne jmpq callq stc shrd inc sar mov cmp stc test jmpq jmpq je jmpq callq test cmp test stc test jmpq jmpq jmpq jmpq callq bswap mov cmc bt jmpq mov mov jmpq je bswap mov setbe setge mov jmpq lea mov jmpq callq lea mov cmc test test jmpq callq inc setg movsbq bswap mov mov mov inc mov jmpq jmpq mov clc xor jmpq not jmpq callq rol sar lea bt clc test jmpq je movzbw movsbw movzbw sete lea jmpq lea not mov jmpq jmpq jmpq test bt cmc nop jge bt test cmpw jmpq cmc test jmpq jmpq movzbw mov jmpq cmp jmpq jmpq jmpq jmpq mov not mov jmpq je jmpq callq jmpq callq dec rcr bt cmp mov setp bsf sub bswap setp mov bswap mov jmpq jmpq jmpq jmpq je bt bt jmpq jnp pushq jmpq jmpq je jmpq pushq jmpq stc jmpq jne movsbw not mov jmpq callq movsbw btr mov btr lea shrd mov cmc xchg clc stc test jmpq jmpq callq lea and mov add mov sbb btc lea shrd clc btr mov btc shl cmp lea jmpq clc sub jmpq jmpq je not jmpq jmpq je test clc mov cmc cmp bt bt cmpb jmpq je clc cmp jle je jl bt clc cmp jmpq mov movsbl mov jp callq jge not movzbq bswap lea ja callq jmpq inc jmpq movsbw mov movsbl setne bswap jns mov mov not bswap jmpq je jmpq jmpq xor jmpq callq movzbw sar sub lea jmpq callq cmc cmp stc jmpq movl jmpq jmpq callq bt cmp jmpq je mov mov bswap not mov xchg mov jmpq jmpq jmpq jmpq jmpq test stc cmp cmp jmpq jns sets movsbl movzbl mov jmpq je xadd mov cmc dec mov shl jbe sar lea clc test test bt cmp jmpq jmpq dec xor mov rol xor rol mov test stc bt stc add jmpq jne jmpq jmpq jne jmpq movzbl lea xor movsbq or shr mov xchg movzbw shld repnz clc not not lea lea rol lea sbb movsbl mov clc clc cmp bt sub jmpq callq clc bt bswap sub movzbw mov jmpq pushq jmpq je bt stc lea clc sub jmpq je cmc test cmp jmpq callq jmpq jmpq je bsr not lea setb xadd sub jmpq jmpq je test test jmpq je sbb btc dec not mov shrd mov dec stc dec bsf mov jmpq callq bswap mov lea mov bswap mov not movzbl mov jmpq stc test jmpq jmpq callq rcl mov cmc ror cmp sub bt inc bswap jmpq je cmp sar xor jmpq lea not mov jmpq nop jmpq jg pushq jo pushq jmpq jmpq inc clc cmc add test bt cmp jmpq jmpq bt test jmpq jmpq jo test jmpq jmpq je clc cmp jmpq je btr mov bt test cmc bt test jmpq jmpq callq ror bsf btc rcr mov jmpq jmpq jmpq jmpq jmpq callq jmpq setnp movsbw lea mov movsbw setbe movzbq not mov jmpq jmpq jmpq callq sub jmpq jb rol lea bt clc stc test xor jmpq callq inc mov shl dec cmpq bswap lea movsbq movzbw mov jmpq je adc lea bsr lea rcl xor lea movsbw jmpq shr bt sub setg shrd lea add and sub bswap lea movzbq mov movzbw not mov lea bswap mov bswap lea movsbq lea jmpq jmpq callq jmpq je jmpq je test xor jmpq jne rcr shr mov jmpq callq movsbw jmpq jmpq jmpq jmpq jmpq mov jmpq jmpq mov mov dec ror sbb dec test mov cmc or movzbq movsbl mov movsbq rcr add sar xor mov rcl inc mov sub add rcr repnz movsbw not mov dec or mov test clc clc stc test jmpq jns not lea movsbw jmpq callq jmpq je bt xor jmpq mov jmpq lea mov mov lea lea mov jmpq lea lea lea lea lea lea jmpq je btc or dec jmpq shld add xor movsbw setns movzbw movsbw mov bswap not lea mov jmpq jmpq jmpq stc mov lea clc rcr clc mov stc cmc clc xchg stc jmpq js lea movsbw mov jmpq jmpq jne btc mov clc cmc cmp jmpq mov jbe callq clc test jmpq callq shrd xor mov stc cmp jmpq xchg mov mov jne lea mov jmpq nop jmpq je stc bt btr bt mov jbe test jmpq callq stc test jmpq callq cmp jge bt cmpl jmpq jmpq jmpq jmpq jp pushq jmpq xchg jmpq nop lock or push lahf (bad) adc cmpsl (bad) repz or jns callq xor (bad) fsubr popfq lahf rclb sub xor add add add test add add add add xlat mov add adc bt test jmpq nop jmpq stc bt test jmpq bswap mov setb mov mov not movsbl mov jmpq callq test cmp jmpq mov jmpq jmpq jmpq js movzbw mov bswap lea movzbq mov lea not lea jmpq jmpq xor xor mov cmc cmp test jmpq jnp pushq jmpq je cmc cmp jmpq jb not movzbw bswap setnp dec sbb mov shl or or data16 hlt add or xlat adc add cmc shld and inc xor cmc mov dec movsbl cmp repnz lea not inc mov lea bswap dec rcr btc mov clc clc bt jmpq jmpq jne movsbw xadd mov dec bswap mov dec mov bt jmpq stc test jmpq sub dec mov cmc cmc xor jmpq jmpq callq bswap bswap movzbl mov movsbw lea movsbq setle mov not mov mov mov mov movsbl mov jmpq mov jmpq callq sar test mov clc shld xor mov xor mov sbb shld btc shld mov test cmc add cmc stc clc sub stc add jmpq jmpq jmpq callq cmc cmp stc test jmpq jmpq callq lea shld btc and mov rcl xadd cmc shld mov shl add shld mov inc add mov adc mov adc stc mov cmp bt test test jmpq jmpq clc cmpb jmpq je movsbw mov jmpq callq jmpq callq jmpq callq xchg or shr sub xchg movsbw mov bswap mov movzbw bswap mov jmpq callq cmc clc test test cmp jmpq setno mov xchg not bswap movzwl jmpq mov jle movl jmpq jmpq mov pop pop or sub rex.W (bad) rex.WB movabs retq (bad) movabs cmp push rcr in iret (bad) cmp xchg (bad) mov popfq xor insl retq callq xchg fistpl pop adc xor rex.RX adc xchg mov xor scas push fmuls pop jmpq jmpq jb clc cmpb not movzbw jmpq nop jmpq jb not dec or bswap shld mov ror cmp bsf or btr mov mov cmc add bt bt sub xor xadd mov bts repnz movzbw not inc bswap mov not dec btc neg mov cmc clc test jmpq jmpq mov jmpq mov movsbw setnp mov jmpq jmpq mov sbb mov mov shld rcl and mov jmpq callq cmc cmp jmpq jmpq not bswap movzbl mov jmpq inc jmpq callq stc bt movzbw mov cmp test jmpq inc dec clc rcl stc dec mov cmc cmc cmp bt test jmpq jmpq xchg lea bswap movzbq mov jmpq jmpq jmpq mov jmpq pushq jmpq setl not lea jmpq jmpq jb sete jmpq je shr mov lea and mov sbb movzbw and mov movsbw not mov sete mov jmpq jmpq jmpq jmpq lea jmpq jmpq callq bsr shrd rol movsbw mov test test stc test jmpq cmp jmpq jmpq mov mov jmpq test jmpq jne cmc inc rcr movzbl shrd bts movzwl shr mov btc movsbw shl test rcr stc dec lea mov mov bt stc clc or jl movzbw lea lea jmpq cmovne jmpq callq mov movsbw bswap not lea jmpq je jmpq callq jmpq add callq lea mov jmpq nop jmpq jb jmpq jmpq pushq jmpq movzbq mov jmpq callq bswap jmpq callq inc xadd clc movzbl rcl dec rcr sub shrd shl mov rcl movzwl bt bt cmp mov clc movzbl test clc cmp cmc mov bts movzwl test jmpq clc test jmpq cmp jmpq jmpq sub jmpq jmpq je setae jmpq je test clc bt cmp jmpq jne rcl jmpq (bad) rex jo and outsb std lret mov pop ficom sub jge mov idivl vlddqu int3 cmp retq mov (bad) popfq sub jo (bad) pop data16 xchg mov and rex.WB ss sub std bnd addr32 js (bad) scas rex.WRXB rex.XB push jmpq jmpq pushq jmpq jmpq je cmp xchg mov rcr mov adc shl lea stc bt cmp jmpq mov movsbw mov jmpq jmpq jmpq jmpq je cmc stc jmpq callq stc jmpq mov mov or rcr bts mov clc test jmpq jmpq mov jmpq je movsbq mov jmpq bt add cmc cmp stc cmc mov clc cmp mov jne add jmpq jmpq mov rcr mov sbb setg cmp mov btr mov inc shld cmc rex.W repz shl btc lea lea bt adc add sar mov sub lea adc and mov test bts add ror bsf adc bt mov (bad) repnz mov bt cmp add test clc test mov bt clc jb mov cmc cmc jmpq jmpq jmpq callq jmpq jmpq callq bt cmpq jmpq jmpq pushq jmpq je jns cmc clc bt cmp jmpq callq mov bsr movsbw sub cmp cmp sbb and mov clc test test jmpq mov jmpq callq bt jmpq mov movsbw not lea setno mov jmpq je movzbl xor mov cmc test jmpq mov jg callq test bt test jmpq je (bad) icebp jl xor jmpq jne bsf stc cmp xor mov test bt test jmpq callq setns movzbw movzbw lea jmpq callq bt cmp cmp cmp jmpq jo jmpq jmpq je jmpq bswap movzbl xchg not setb jmpq mov setg xchg lea movzbl mov movzbl mov jmpq js inc jmpq jmpq test jmpq jmpq jmpq jmpq jne (bad) cmp imulb cwtl lret cld popfq (bad) sbb jno mov imul leaveq (bad) lods sbb (bad) mov movabs pop sti int3 rex stos icebp (bad) sub sbb mov fnstcw div pushq rex.WB test jg scas retq idiv jg push (bad) push fistl movabs jb adc cmp js cmc test jmpq callq movzbw lea not jmpq je clc lea and add btr cmc sub movsbq jmpq jmpq callq jmpq mov lea lea mov jmpq sub jmpq callq jmpq xchg jmpq je sub test cmc sar mov movzbq clc mov movzbw bts mov stc stc add jp callq cmc cmc cmc cmp test jmpq callq shld shrd jmpq jmpq callq bsr shr shrd mov cmp cmp jmpq je cmc clc clc stc mov bt cmp cmpb jmpq clc test jmpq callq mov bswap not jmpq jmpq jmpq cmc stc cmc test jmpq lea jmpq mov jmpq callq cmp cmp test cmp jmpq bswap lea movsbl movsbw not mov jmpq je xor movzbw sub mov xchg bts mov cmc mov mov mov mov stc add cmp sub bts mov cmc cmc test add jmpq jmpq jmpq je bsf sub mov movsbw xor jmpq jmpq je bts mov bt test jmpq mov jmpq callq sar mov test test jmpq callq cmp clc and clc cmp jmpq add jmpq jmpq jmpq jmpq callq cmc mov bt mov stc clc bt clc test jmpq jne sub shld lea add jmpq jmpq callq jmpq je clc cmp test cmp cmpq jmpq jmpq jmpq cmp jmpq jge jb jmpq jmpq callq xchg movzbw lea setge lea lea lea jmpq add stc test clc stc add jmpq jne movsbq movzbl not mov mov jmpq jmpq je test bt stc test cmp jmpq callq stc jmpq callq shr ror mov clc bt cmp bt xchg clc test jmpq je and dec rol mov data16 lock (bad) or movsbl mov clc clc movzbw mov jmpq callq bsf adc jmpq jmpq je clc stc bt cmp jmpq jmpq mov jmpq jmpq je jmpq js bswap mov jmpq jmpq jmpq bswap jmpq jno callq mov lea jmpq jl bt test jmpq jmpq cmp clc bt cmp jmpq jmpq callq jmpq add neg xchg mov ror repnz movsbw mov not dec dec stc mov bt clc cmc test jmpq jmpq jmpq not jmpq test jmpq mov not mov jmpq jns callq bswap not bswap mov setl movsbw bswap mov jmpq je clc cmp cmp jmpq jmpq pushq jmpq jmpq jmpq mov jmpq mov jmpq jmpq js xchg setnp movsbw mov mov movzbw lea movzbw movzbw bswap lea jmpq mov jmpq mov cmp stc jmpq jmpq callq cmc jmpq jb xchg movsbl dec add mov sbb or stc sbb mov (bad) testb shl (bad) mulb (bad) rex.WRX xor clc shrd jmpq callq bswap mov jmpq not mov jmpq jmpq je clc cmp stc cmp jmpq jmpq jmpq mov lea jmpq jmpq movsbw mov jmpq jmpq mov mov movzbw bswap mov jmpq jmpq jmpq jne sub rcr inc add mov not movzbw lea jmpq adc lahf je rex.WR data16 cmp or sbb jo jb push and (bad) mov mov rex.WX rex.RXB pop xor add test sub jmpq mov jp callq stc jmpq stc test jmpq jmpq je cmp cmc cmp je je clc cmc cmp cmp jmpq clc bt test jmpq callq ror rcl mov test bt test jne je neg mov clc cmp bt test jmpq clc cmp jmpq callq clc test xor clc jmpq test (bad) fucomp xchg int3 pop pushq mov xlat lock adc (bad) popfq sub scas add je fisttpl (bad) (bad) (bad) sub int3 add movabs sub hlt rex.WX mov icebp jg or mov rex.WXB fwait (bad) (bad) mov outsl sub jns sub jne scas rex.XB sub lret mov (bad) movzbw neg bts bsf mov add xadd ror mov stc shld btr shld mov test cmp jb add jmpq pushq jmpq mov jmpq nop jmpq ja pushq jmpq jmpq jne lea movsbw jmpq callq adc cmc bsr lea cmp jmpq jmpq je jmpq bswap mov jmpq je sbb mov lea mov cmp test jmpq jmpq mov jmpq jb jmpq callq seta mov movzbw movzbw mov lea xchg lea mov movsbw mov jmpq seta mov jmpq jmpq jmpq cmp xor add shld or bt sar xadd mov bsr ror dec repnz rcl neg bts bts not sub bsf cmc lea bt clc test xor jmpq callq jmpq callq jmpq or nop adc cwtl out nop pop ja cmp (bad) rclb lock (bad) movabs jno and mov push (bad) or add add jae std (bad) callq bts lea lea clc cmc clc jmpq jmpq jmpq test cmp jmpq pushq jmpq jmpq jmpq jmpq je bt cmpw jmpq je bt jmpq jmpq jmpq jne movsbq dec bts movzwl bts sub mov bt test clc cmc xor jmpq jo jne stc bsr ror lea bsr sub not movsbw lea movsbl mov not movsbw mov jmpq callq stc bt stc cmc cmpb jmpq jmpq cmp jmpq jmpq mov jmpq clc cmc cmp jmpq jmpq add bt cmp clc add bt clc cmp cmc cmp jmpq je lea rcl mov clc cmp test jmpq mov setbe jmpq mov movsbq jmpq callq jmpq jmpq mov jmpq jmpq je movzbq not movzbw mov jmpq jno callq jmpq test cmp jmpq callq cmp lea test cmp cmp cmc test jmpq movsbw dec bsf sar mov cmp test cmc test jmpq jmpq callq lea lea lea jmpq mov jmpq mov jmpq sub movzbw mov jmpq jmpq sub jmpq mov lea jmpq je movsbw mov movzbw movzbw mov jmpq jmpq jmpq jne sbb movzbw shrd add movzbq not lea jmpq jmpq jmpq movl jmpq jmpq callq stc clc test jmpq callq ja cmp test jmpq jbe jmpq mov jmpq movb jmpq je jmpq cmp jl jg jmpq callq lea sbb mov jmpq jmpq jmpq jne cmc cmp jmpq je cmc cmc clc cmc cmp jmpq jmpq jne bsf lea mov bsr lea mov stc stc bt bt add cmc stc bt stc cmp jmpq stc cmp jmpq je rcr sar xor movsbw mov jmpq jmpq movsbl sbb xadd dec nop neg shrd xchg bsr mov ror btc rcr dec mov stc cmp jmpq jmpq pushq jmpq je jmpq callq setb movzbl bts bsf sub bswap mov bsf ror sub movzwl cmc stc cmp mov bt dec btr movzbl cmc cmc cmp mov btc bsr add shr movzwl jmpq jmpq jmpq je clc clc jmpq callq cmc bt test jmpq nop jmpq test cmc add test add jmpq je test jmpq jne inc mov stc cmp jmpq stc add jmpq js lea lea mov mov mov jmpq callq movzbw not lea jmpq mov jmpq add jmpq jmpq jmpq callq sar add btc xor mov cmc sub jmpq mov jmpq callq jmpq test clc test cmp jmpq je jmpq jmpq jne sbb shl not mov cmp mov clc add stc stc clc bt add cmp cmp cmp jmpq callq neg ror movzbl cmc sub jmpq mov jmpq jb movsbl movzbl xchg dec movsbw cmp neg shrd mov bsf or sar mov dec movsbl add xor dec sub shld shl bsf shr mov shl shrd repnz inc not bswap mov not movzbw bswap bswap dec lea bsf dec lea mov cmc stc cmp test jmpq clc xor jmpq jnp callq mov mov clc stc test jmpq jmpq jmpq jmpq sbb sar xor (bad) icebp mov xor rol xor stc mov test cmc add rcl shr inc mov cmc add rcl bswap mov test clc add stc clc bt add stc xor test add jmpq jp callq bsr mov cmp test jns je cmp bt jmpq inc jmpq jmpq add sar add sub mov cmc bt stc cmp add cmp cmc stc bt add jmpq jmpq jmpq mov jmpq jmpq jmpq test test test jmpq add cmp jmpq jl callq jmpq xor jmpq nop jmpq js mov movsbw mov mov jmpq je cmc cmp jmpq bt cmp cmp add or stc sbb sar mov test add btc rol sar mov stc add cmc add bt cmc jmpq or stc repnz cmp not clc lea cmc stc clc jmpq je movabs movzbw mov lea not movzbw mov movzbq movzbl lea mov jmpq jmpq cmp bt nop cmp add cmc cmp clc cmp jmpq je jmpq jmpq jmpq jmpq je test jmpq jmpq je test jl cmpsl mov (bad) mov (bad) icebp (bad) (bad) scas mov ffreep jnp mov sub and lock mov and mov (bad) sbb or xlat adc xchg xor (bad) mov push loope push pop adc or (bad) sub mov push test std (bad) icebp or cmpb mov (bad) insb cmp mov sub xor sti (bad) jae addr32 repz mov add jns or callq push es mov (bad) adc ror adc movslq addr32 movb mov out or movabs pop adc leaveq mov or mov and mov scas xor je ror movzbq sub mov stc mov bt jmpq jmpq test clc cmc stc test jmpq callq (bad) icebp jmpq jmpq jmpq jb cmp test mov bts mov setg mov setbe add mov bts and mov shr lea rcl xadd lea bsr shrd movzbw shrd add setb mov adc and sar inc mov movzbw add movzbw dec bsr rol mov cmp sbb btc mov cmp stc add jmpq mov jmpq mov movsbw mov setl nop movsbw mov lea movsbl mov jmpq pushq jmpq callq lea lea lea jmpq cmc cmp repnz rcl shld xor not inc cmp lea jmpq test clc stc clc test jmpq mov jmpq jmpq test ja je bswap lea and bsr sub not bswap not mov jmpq mov not mov mov jmpq jmpq mov jmpq jmpq callq rcl stc clc mov bsf not mov bt bt jmpq jmpq callq cmc test test jmpq jmpq cmp add movsbl jmpq jmpq callq jmpq jmpq callq stc cmpb jmpq jmpq mov or jmpq or retq movabs cmp mov sub sub clc imul (bad) mov sub cmp rex.WB repz test rorb in xchg mov rex.RX jae addr32 xor loop xchg jp xor fildl mov jmpq rclb mov adc ja and (bad) jnp in lock (bad) jne xorb mov (bad) (bad) rex.WRXB int xor push and pop adc jae add movsl cli jmpq std and clc stc stc test jmpq jmpq jmpq callq cmc bt jmpq pushq jmpq callq movzbw mov not test rcl lea stc stc cmp jmpq lea mov movsbq sete movsbw lea jmpq add ror mov inc cmc btc mov rol mov stc stc add test sub cmp jmpq jmpq movzbw mov movsbw mov mov mov jmpq jb setle lea bt jmpq mov jmpq setbe movzbw mov jmpq callq movsbl mov mov mov bswap lea bswap mov jmpq jmpq je bsr inc btc mov dec not mov bt mov movsbw adc shld lea mov cmc clc stc add jmpq callq cmc jmpq callq jmpq pop leaveq mov mov pop (bad) push hlt (bad) imul loopne rex.R cwtl movsb or int3 adc (bad) je cmp add scas int mov mov cmpsb xchg stc ja ficompl pop (bad) ja sti cmc (bad) cld rex.RX pop loop pop shrb adc adc jg jge pop std repnz roll ja hlt (bad) push add jmpq lods retq push cmp pop mov adc xor ss adc ss clc sti (bad) std fldenv (bad) pushq rex.X jmp pushq in rex int3 pop movabs fdivrs mov out xor rex.RXB jnp rex.WX adc and fisttpl mov cli (bad) fwait xchg pop add out jl jle movslq scas xor add cmpq jmpq test cmp cmpl jmpq jmpq jmpq callq rcl movzbw mov clc rcr bts ror mov jns clc clc test jmpq sbbb cmpsb std and ds movslq cli int cmp lods out fsts (bad) mov rex.RB data16 (bad) cmp clc iret pushfq sub cmp lahf add add je jmpq je cmc cmp jmpq je jmpq callq bsf or stc stc movsbw shl sub not mov not shr repnz jmpq jmpq add bsf shld mov lea rex.WB icebp or (bad) decl leaveq mov jmpq je test jmpq mov jmpq cmpl jmpq jmpq jne xchg adc inc xor xchg mov jmpq jmpq mov jmpq jmpq ja je cmc xor sets mov not mov jmpq callq bswap movzbw not mov lea jmpq jmpq je inc mov jmpq jmpq mov lea not lea jmpq jmpq jmpq add jmpq jmpq je jmpq mov jmpq jbe btc xor not mov bswap bsf mov clc jb clc cmp cmp jmpq callq movsbw rcl mov add neg sbb stc mov inc lea bsr shrd mov sar add cmp shld mov sar rcl sbb mov clc mov cmc jmpq callq cmp clc clc jmpq je jmpq lea not mov jmpq jmpq jmpq cmpb jmpq jmpq jmpq jmpq movzbw bswap mov jmpq callq btc bsf bts mov rol sbb lea mov clc bt cmc stc xor jmpq jmpq nop jmpq nop jmpq jmpq jne test bt sub jmpq je jmpq jmpq je rol bsf bts shr mov jmpq lea jmpq callq jmpq callq stc cmp cmp jmpq mov lea lea mov jmpq cmp jmpq add sti movabs rex.WXB sub movabs xchg mov adc pop sub mov fsts push or rex.WRXB (bad) (bad) nop adc add add rex.B add rex.RB add callq jmpq je cmp mov bt and bswap mov xadd mov neg sub add add inc mov clc cmp add jmpq clc add clc cmp add bswap jmpq jmpq jmpq jmpq je stc cmp cmp jmpq jb movsbw shrd bts cmpb bswap mov jp xchg movsbw movzwl bswap mov not mov jmpq jmpq jmpq mov movsbq lea not movsbq movzbl jmpq jmpq setno mov jmpq cmc cmpb jmpq cmc bt xor jmpq mov jmpq cmp jmpq jmpq je or movsbw and mov test jmpq callq cmc cmp jmpq jmpq callq cmc clc cmp test jmpq movzbw lea mov jmpq mov mov jmpq jne clc mov sar mov or test inc mov not add or ror lea bsr not mov stc stc bt stc add jmpq jmpq cmp jmpq js mov bswap setg mov jmpq callq jmpq jmpq jmpq je setl setl mov jmpq callq stc cmp and jmpq je bt cmp jmpq movl jmpq nop jmpq je btc setb inc shr sub movsbl mov jmpq jmpq jne shrd bsr (bad) (bad) add mov movzbw lea jmpq callq jae test jmpq jmpq jb jmpq je test mov ror shld shld mov bts bsr rcl btc mov clc jmpq jmpq jmpq jmpq mov jmpq jmpq jmpq jmpq jmpq callq jmpq callq test sub movzbw mov mov cmc rcr shrd mov test or bts sub shld rol bswap rol repnz inc movsbw not lea not jmpq jne ror rcr clc jmpq je clc cmp jmpq callq stc sar shr jmpq jne cmp adc mov bt bswap rcl mov and lea movabs add movsbw mov jmpq cmp bt test xor test cmp bt cmp test jmpq jmpq jle je stc jmpq callq test jmpq js movsbw bswap xchg mov movzbw movzbw movzbw lea xchg lea lea mov sete lea jmpq jmpq nop jmpq jmpq jmpq callq jmpq callq clc clc cmp jmpq jmpq callq movsbw jmpq mov jmpq je cmc cmc test cmc cmp jmpq callq bts and and mov neg xor adc mov clc or jmpq jmpq je cmc clc cmp jmpq jle mov setge not mov jmpq jmpq jmpq je cmp test jmpq callq jmpq cmp test jmpq (bad) cli imul in (bad) or andps callq rclb sbb xor scas sbb xor jbe movabs je rcr jmpq jmpq callq movsbw movsbw mov jmpq mov jmpq jmpq inc mov cmc test test bt test jmpq jae cmovne jmpq jmpq cmp jae cmp cmp nop stc clc cmc bt test jmpq mov jmpq jmpq jmpq pushq jmpq jmpq callq jmpq jmpq jmpq jne jmpq jmpq pushq jmpq callq data16 hlt or cmc cmc bt test jmpq sub bswap seto bswap mov jmpq jmpq pushq jmpq callq stc cmc clc stc test jmpq jb jmpq mov mov not mov not mov jmpq jmpq rex.WRX pushfq xchg xor rex.WX rex.WB adc vshufps outsb int3 out addl jl rex.WRX stos cmpsl mov (bad) sti popfq add int3 rex.WX xlat in movabs pushq sub or (bad) stos mov xchg lret pop sub rcr mov scas and iret (bad) jge movsbl movzbw xchg movzbw mov lea mov jmpq je sbb mov cmp bt clc clc xor jmpq jns lea mov jmpq jmpq add test cmc add cmc test test sub jmpq callq btc shl shrd lea jmpq callq jmpq je cmc cmp jmpq sar add cmc mov btr ror cmp mov mov add add xchg clc mov test cmp mov test cmp clc stc add jmpq jmpq jmpq lea mov jmpq pushq jmpq jmpq jmpq callq cmp clc clc clc cmp jmpq jne jmpq jmpq add (bad) cmp loop (bad) xor imul sbb es out je test mov cltd rcll sub push in xchg xor rol sub test rcrb cmp adcl imul shlb mov sahf data16 mov sti mov push pop fnop adcl (bad) cmp mov pop (bad) test (bad) push icebp sbb loopne shll rex.XB movsb and cwtl vpunpcklwd cmc rex.RB xor repz rex.WRX sub and jo rex.RXB addb cmp in xor jmpq movabs jnp (bad) lahf sub lret loopne jrcxz out cmpsl cwtl fadds pop push or insl loop or xor mov rex.W rex.X and rex.XB bsf adc mov test cmp test jmpq pushq jmpq jmpq movl jmpq xchg not mov mov jmpq je cmp cmp jmpq jmpq jmpq callq stc adc mov mov cmp test jmpq not mov jmpq jmpq callq stc and test cmc clc cmp jmpq jmpq je bsr sub not setp mov jmpq jmpq callq jb callq inc bsr shl mov dec dec mov cmc dec jmpq clc cmp jmpq jb clc or cmpb xchg lea bswap movzbw mov jmpq movl jmpq callq test test jmpq callq ror neg mov cmp cmc mov stc jmpq jmpq jmpq lea lea mov jmpq jmpq jmpq callq jmpq callq mov not jmpq movl jmpq callq stc cmc jmpq clc jmpq jmpq je and dec dec xor lea mov jmpq mov jmpq cmc add jmpq jmpq pushq jmpq mov setl mov not mov jmpq je cmc test test cmpw jmpq je cmc bsr setge inc nopw or shl jl mov cmc cmp test jbe je cmp cmp jmpq xchg rex.RB rex.WR adc lea xor in rex.WRXB jp and pop jrcxz xlat or sub repnz int3 insb xor (bad) and xchg adc ljmp sub push ss or add pushq cmp ficoml cmp scas (bad) rex.WXB movabs loop cmp bt test jmpq mov jmpq jmpq jmpq jmpq jmpq jmpq jmpq lea mov jmpq jmpq jb movsbw jmpq je sub add movzbw lea shrd xor jmpq jmpq jmpq mov jmpq cmp jmpq js not mov movsbq movsbw mov jmpq add bt bt sub cmp stc cmp clc add jmpq callq bt test jne test jmpq jmpq jmpq xchg jbe nop jmpq je sub shr rcl lea shld sub movzbw lea not jmpq je cmp mov stc test stc test jmpq je clc cmpq jmpq je jmpq callq rex.B lock lea sub movzbw bswap not mov bswap movzbw movsbl mov jmpq jmpq jmpq bswap mov movsbl seta lea jmpq callq jmpq add stc bt cmc jmpq jmpq cmp cmp cmc test jmpq nop jmpq jmpq mov lea not movzbw xchg movl mov movzbw mov movzbw movl mov jmpq jmpq jmpq mov movsbw lea mov jl mov jmpq jmpq add jmpq je lea bsf xor movsbw mov jmpq int adc stos movsl (bad) mov add jne or (bad) int3 sti js (bad) add out and xlat sbb sbb (bad) mov hlt sahf mov jp jmpq sub icebp retq push lret hlt push mov (bad) jmpq jp enterq pop sti int3 outsl (bad) push bnd (bad) xor sahf shrb insb add lods mov in movslq or mov jmp adc (bad) push sbb scas sbb sbb callq jmpq callq jmpq callq lea lea jmpq lea jmpq cmc clc test jmpq js jmpq callq jo test jmpq jmpq (bad) cwtl push in jo sub test stc insb (bad) mov jne sub push pushq pop jl outsb cmc stos xchg sbb rex.RXB rex.RXB (bad) repz nop (bad) hlt jl cmc (bad) sbb outsb lret pop (bad) in (bad) std xor mov lret fdivl rex.B rex.X rex.B js outsl mov rclb fs cli cmc and (bad) and add outsl hlt push adc pop fsubrs push adc add ss and xchg pop ss clc lahf sarl rex.X (bad) (bad) rex.R cwtl add loopne pop (bad) push or adc imul pop fsts (bad) sbb (bad) adc in (bad) fwait stos rex.R fisttpll out scas gs cmp sbb mov popfq sti decl enterq add clc bt bt cmp jmpq callq bts bswap lea cmc test jmpq jmpq jne test test cmp jmpq js cmp cmp cmp cmp test jmpq callq mov not xchg mov mov mov sete lea mov movsbl not movsbw mov jmpq jne jmpq jmpq pushq jmpq jne pushq jmpq jmpq add cmc bt cmp jmpq je movsbl lea mov lea movzbw bswap movzbw mov not bswap jmpq jne movzbw mov cmc jmpq movzbl bswap bswap mov jmpq je btr or mov mov test test test jmpq jmpq jle jb rol and dec cmpb xchg xchg mov xchg jmpq callq test cmp jmpq jmpq jne jmpq callq and bt mov bt test jmpq callq bt test cmp jmpq jmpq jne je rcr neg bswap ror mov (bad) lock clc cmc rol mov movzbl mov test jnp test add cmp add cmp cmp cmc add movzbw not seto movsbw mov jmpq jmpq je or xor movzbw mov jmpq inc cmc add bt cmp jmpq je movzbw jmpq mov bswap bswap mov jmpq js movsbw lea seto lea mov jmpq jmpq callq sub bts shl mov jnp cmp bt mov stc stc test test jmpq jb test jmpq callq not shld mov test add jmpq jb ror movzbw jmpq jmpq jmpq nop jmpq clc test jmpq jns lea mov mov jmpq je cmp cmc test jmpq callq movsbw xor mov jmpq cmp stc xor jmpq je cmp btr and xor lea mov jmpq callq sub add shrd neg sub sets setae mov jmpq incl jmpq cmp cmp jmpq mov lea lea mov jmpq jbe mov test mov btc mov jle test cmp cmp cmp jmpq jmpq jmpq jmpq jmpq jmpq add stc cmp jmpq jbe xor (bad) lock movzbw mov bts movsbq inc stc mov adc movzbw bsf mov jmpq jmpq je rol stc mov test test jmpq je jmpq jmpq jmpq jmpq callq test cmc test jmpq jmpq callq adc xchg mov sbb not mov cmp or jmpq jb dec or cmc lea lea cmp cmc cmp cmc xor jmpq jmpq jmpq callq add mov bswap clc mov clc jmpq mov jmpq je add sets mov ror mov neg lea clc jmpq je cmp cmpq jmpq mov jmpq shrd mov clc test jmpq jmpq jmpq callq shr setle test movzbl dec rcr sbb xor shrd sar movsbl neg mov btr movzwl stc stc cmp mov bsf not dec and movzbl cmc bt test cmc mov sar bsr movzwl bt cmp test stc mov test movzbw mov cmp cmc mov xor movzbl stc test bt stc mov inc cmp jmpq nop jmpq jmpq je jmpq jmpq test jmpq setl xchg lea xchg bswap mov jmpq jmpq mov jmpq nop jmpq callq stc test sub sub movzbw mov lea mov not mov jmpq callq movsbw mov lea mov bswap mov jmpq sub jmpq cmovns jmpq jmpq je jmpq callq or cmc movsbq mov clc clc jmpq jmpq cmc add cmp stc jmpq jmpq jmpq jmpq callq mov not lea lea lea jmpq jmpq je jmpq jmpq add je bt bt mov clc clc test cmpb jmpq jmpq je jmpq je lea rol bsf mov adc lea mov btc and lea not jmpq mov jmpq callq jmpq mov jp mov movzbl mov jmpq je test clc bt jno test jmpq jne setg mov mov lea movzbw mov setns bswap jmpq jmpq jmpq jmpq cmpb jmpq mov jg mov jmpq jne btc movzwl bsf mov bt clc bt sub jmpq callq jmpq movzbw mov jmpq jmpq jmpq jmpq inc bt test add bt bt jmpq shr mov jmpq jmpq mov mov cmc test jmpq callq movsbw movzbw jmpq xchg bswap mov setae movabs bswap not movl xchg not movl setne lea mov setp mov movsbw movsbw movzbw lea lea lea jmpq xchg not mov mov lea movsbw mov jno lea mov jmpq cmp jmpq je jmpq jmpq jmpq jmpq jmpq jmpq jne clc clc mov dec jmpq je bts bsf bswap movzbl bt jmpq jmpq xor mov lea repnz movsbl movzbw mov not mov mov jmpq je movsbw lea movzbq lea setle movsbw xchg movzbl mov movsbw movsbl mov jmpq jne test sbb neg add mov test cmp test jmpq jmpq jmpq jmpq je jmpq je callq bt cmp test jmpq je seto ror sbb mov dec jmpq jmpq jmpq jae je jmpq xchg cmp test jmpq jmpq nop jmpq jb dec cmpb setno xchg lea mov setl bswap jmpq je jmpq callq setg lea jmpq jmpq jb lea not not not dec bts bswap bts mov bt adc lea dec or bt movsbq add mov and add rcl xor bswap mov ror repnz inc not lea lea bswap jmpq jmpq callq jmpq jmpq jmpq jmpq jmpq jmpq jmpq shrl retq pop push jb (bad) xchg xor movslq rex.XB mov or std data16 andps jmpq sbb jle loop (bad) icebp and (bad) fcomps (bad) (bad) jo pop (bad) adc (bad) shlb mov fwait shrl rex.B jne jmp (bad) out adc cmpb (bad) or fs callq sbb mov mov stc bt test ja je stc cmp cmp xor jmpq jmpq cmc bswap shl mov test stc jmpq mov mov jmpq clc test add stc test jmpq nop jmpq bt test cmp jmpq jb cmc cmc cmp jmpq callq dec cmp mov bswap mov cmp stc bt xchg test stc test jmpq jmpq jmpq jmpq je jmpq callq adc inc mov btc mov cmp jmpq je jmpq clc test jmpq jmpq callq jmpq callq cmc lea mov clc bt test jmpq jmpq callq mov bswap mov jmpq callq jmpq push jg mov push jg mov mov outsl rex.WRXB ja retq ds (bad) addr32 stos fstpl rex.WXB cmp cmp push out test xchg add fildl jmpq jmpq jmpq jmpq cmc test test jo je btr shl shld setnp mov stc cmc xor jmpq je jmpq nop jmpq test jmpq js mov not movsbw mov jmpq jmpq or or out rex.WR fsubs mov xchg movabs rex.RB mov sub stos (bad) gs roll (bad) loopne retq rolb pushq cli xchg lahf movsb mov sub sbb and fstpl (bad) fwait adc iret (bad) xchg pop adc push mov and xchg test sbb roll and (bad) popfq (bad) scas shrl and int or insl pop rex.WX ss movabs jno test stos std pushq fsubp and mov sub add pop je pop insl fsubrp rclb xchg xor (bad) pop lods mov fneni(8087 out fwait cmp cmp mov mov jl movsb cmp mov mov hlt mov push adc loop sti retq xchg test (bad) cmp (bad) addr32 mov (bad) pop rex.XB insl mov loop xlat rex.WXB jrcxz (bad) xchg add pop (bad) mov pop fistp jnp xchg pushq add adc test imull push fmul shrb (bad) mov push xor andb add (bad) stc and js (bad) jne and insb loopne jno imul pop stc (bad) fs mov mov add fs in mov add je pop in jp sahf in movabs (bad) sbb loop sbb rex.W mov mov movabs and xor in movabs adc (bad) rex.WR xor jae fiadd mov imul rex.WRXB rex.RB (bad) scas imul clc insb sbb jrcxz sbb (bad) and (bad) (bad) pop mov lock js fldcw adc stc or ljmp rex.WRX rex.R or mov (bad) ss fldt test pop std test xchg rex.RB jrcxz sbb push rex mov loopne rex outsl and (bad) mov mov sti rex mov adc or rex.RXB je fsubl cs xchg and pop imul mov leaveq and mov add outsl add out mov fcomip sahf xorb and mov xor pop (bad) push cld (bad) movsb sbb fsubrl callq movabs sbb xlat xor (bad) jo cwtl or (bad) rex.WRXB rclb xadd callq (bad) jnp (bad) scas add rex.RX movslq pop jrcxz out pushq pop jns and xor lock pop xor (bad) xchg jge data16 pop push rex.RX xchg jrcxz jns xlat mov repnz add fiadd repz cld xor test mov cmp jl jne (bad) fsubl sbb orb (bad) push jns movabs pop (bad) sbb rex.X and mov scas rex.RB xor or rex movabs int3 pop scas jo cmp enterq (bad) (bad) push in add fcompl add loopne in adc sahf es and (bad) rex.X (bad) (bad) int xor movabs insl stc and outsb jrcxz sar (bad) sub (bad) fisttpll retq rex.WRX xchg jp add repz lock sub mov pushfq xchg xor jbe jae rex.X cmc mov sub jle pushq adc (bad) movabs sub fsin xchg mov cwtl mov xor xchg lret cwtl (bad) cmc fistpl (bad) outsb (bad) and or or rex.WRXB xchg rex.RX add sub mov or retq sub sbb ror stc rex.W fnsave add lea add add jmpq scas lock sbb icebp (bad) pushfq rex.WX movslq mov stos push jno imul adc jge rex.X sub (bad) (bad) mov (bad) sub rolb jg fstl (bad) pop jno movabs jnp lods xchg sbb xchg (bad) or mov mov mov movsb rex add cmp adc (bad) (bad) mov jns xchg mov add lods lea rex.WR cmp push lods mov (bad) (bad) sub mov mov lods xchg push rex.WRXB rex.WRB int (bad) mov in nop stos xor mov pushfq repz or mov loopne and icebp xchg loope shr jge mov mov rex.WRX movsl rex add jmpq and lret in rex (bad) mov adc gs xor rex.RX pushq pop out leaveq xchg mov xchg (bad) sub orb mov cwtl xchg sub mov out (bad) in gs jp fild fs jbe repz pop push sbbl rol adc loope jmp repz fwait cli hlt sub lods add push out cmp nop jmpq cmp xchg sbb xchg rex.WX jle loope pop (bad) outsl and mov loop jnp cmp adc (bad) push jrcxz mov and (bad) out cmc xchg retq push lods std mov xorl test xchg stos sub adc mov sub mov outsl pushq jmp and imul and push enterq add sahf xlat add and and mov (bad) iret sti and fsubrl fimull sbb jle (bad) repz test mov jrcxz int hlt jp ss xchg pushq test or (bad) xor pop cmpsb xchg (bad) (bad) rex.WB and and or add int fldlg2 push (bad) je enterq rex.WR xchg jno ficomp rex.RX clc sti and xchg mov imul cmp mov rex.WRXB callq adc cwtl nop jne pushq cmp (bad) (bad) test rex.RXB xchg jae pop stos je rex.WRB (bad) mov fmull push cmp cltd lahf cwtl xor jb pushq cmpsl callq adc movslq enterq jmpq (bad) sub jo (bad) mov movsl or int3 cltd rex.WXB cli fcoml cmp imul (bad) test cmp ss leaveq rcll popfq mov mov (bad) scas and pop (bad) orw or mov test fstps (bad) sarl fs retq out repnz scas xor mov fst and jno jg scas xchg sahf mov shrl (bad) rex.WB push sar out (bad) and hlt jae (bad) push rex.RX mov add jbe movabs mov scas out (bad) (bad) loop xor sub sbb sub movabs rex.WB movsl jmpq xchg push cld mov popfq sahf xlat mov rex.R scas jo movsl jno xchg in or callq fmuls pop clc sbb mov xor jmp rex.X insb mov in stos adc rex.B fisubrl xchg mov jmpq (bad) xor and add testb adc sub mov mov scas jge (bad) cmp push or insl in pushq (bad) gs (bad) and sub leaveq scas jo cmpsb adc leaveq xor mov lretq (bad) adc lock rex.WRXB movabs movsl repnz out jo loopne (bad) pushfq jnp xchg cmp and cmp xlat sbb adc jmpq add cmpsl pop insl sub movabs inc fidiv xchg mov mov add lods lret sub rcl (bad) fidiv rex.WRB push (bad) scas (bad) or mov lahf out xchg mov xor cmpsl out and pushq leaveq rex.WX rex and xchg retq cmp (bad) in pop (bad) int cwtl stc (bad) idivb rorb (bad) (bad) retq add pop push cmp rorb or pushq jns jp pushq in adc rex.X test (bad) xor mov enterq test mov mov negl imul mov negb mov jrcxz sbb xchg mov sbb cmpsb jle push inc fwait mov sbb imull pop (bad) gs xchg (bad) fcmovnb outsl (bad) push sarb rex.W xor cmpsl (bad) retq movabs retq scas icebp push sbb add rex.WB stc (bad) fs sarb jbe pushq rex.R or sti addr32 (bad) cld (bad) js (bad) or or jnp faddl rex.WB xchg (bad) jb sbb add jno add (bad) add sub sbb rcr nop callq (bad) std push loop out movabs xchg je movsl callq hlt rol adc rex.WXB ds loop cmpsq shlb sub lods (bad) repz push lea xchg fnsave fidivrl sub push or (bad) shlb mov cmp and adc (bad) sub (bad) lret ja pop (bad) cli (bad) outsl gs adc jno (bad) xchg jae cmp in jae shl jbe (bad) data16 sub repnz (bad) rex.WRXB ss nop xchg frstor lcall xchg insb mov icebp pop mov cmp (bad) retq add or (bad) sbb imul cmp (bad) insb pop callq rex.RB or lret (bad) in (bad) (bad) outsl push jl psubq cmp add hlt sbb (bad) lahf (bad) and pop loop xor xor callq enterq rsqrtps add xor mulb pop pop xchg (bad) repz (bad) repz mov add mov and icebp mov xor mov in ds int3 mov mov rex.XB (bad) add cltd popfq cmp cmp jbe rex.WXB cld pop loopne addr32 insl shrb in (bad) popq std clc nop mov xchg and lods outsl in shrb jrcxz push (bad) sub gs push xor mov push mov (bad) rex.R rex.R rex rex.WB sbb mov rcll (bad) (bad) (bad) stos push pop movabs adc repnz lahf je (bad) int xchg in jns sti lods mov bt movsb sub xor and push (bad) pandn jnp jl rex.R loopne rex.WX pushq loop sbb (bad) adc out rolb outsl clc jge callq (bad) cmp xchg test sub shrb (bad) (bad) pop mov mov mov icebp rex.RX rex.WX outsb pushq pushfq rex.WRX cmp xorl or mov in movsb cld scas hlt in mov and xchg (bad) or sarb mov cld xchg jne fist rex.R ds push jo pushq out lods adc lea rex.X sub (bad) cwtl movabs outsl xor fisttpl jmpq rex.W and lret cli in mov cmp stos addl clc insb popfq add int adc cmpsl (bad) jae xor rex.WR fwait xor or jge jne callq mov rex.WXB xchg scas mov cltd jnp push add movabs xchg (bad) rcll rorb add insb mov cs fist or or (bad) xchg in sub (bad) retq fstps rex.WRB (bad) (bad) int sbb mov cmpsl or mov in hlt xchg sbbb stos or jmpq nop out xor je loopne (bad) adc and jbe (bad) (bad) cmp jo push int3 fwait xchg sub xor mov jne fstps sub fimull jg movsl mov cmpsb pop lods xor add pop mov pop sar std fisubl (bad) jnp rex.RX insl (bad) test (bad) addr32 xchg mov jnp xchg jg std (bad) (bad) mov mov (bad) push jo cmp out add xchg loop data16 clc xchg jns (bad) cmpsl pop mov roll mov jmp cs (bad) fild (bad) int3 (bad) pop hlt xchg mov out scas retq xchg fwait (bad) xchg sbb movslq loope pop retq or rex.RX es xor movsl repz add psubd cli (bad) sbbb push (bad) mov cli add rex.RXB (bad) test sti out in lahf jle and add and (bad) (bad) add jns and sbb jo adc std repz push imul xor jl xor lods leaveq (bad) stos mov insb or xchg and jmp gs int cltd lods adc loop sub in and (bad) sbb sub (bad) mov jbe out xor xchg jae fwait (bad) add fisubl roll cmp fdivrs xor rex.W rex.RXB sbb xchg jg jbe rex.X mov rex.WR mov ficompl add push (bad) add or and rex repnz jl (bad) scas add rex.WB rex.XB shrl lods mov mov (bad) xlat mov (bad) test and xchg push xchg xchg and or pop loop (bad) xor add adc insb hlt imul jns rex.RX rex.RXB (bad) out sub add or (bad) shrb rex.B or (bad) iret mov stos jne xor pop or jo jl or setge mov iret movsbl (bad) adc adc fwait (bad) mov rex.RB cld push sbb jne sti int3 xchg (bad) in cmp rex.W add movabs test and rex.WRXB xchg fcompl movabs mov mov mov rex.RB cmp pop sbb cli add cmp jmpq jmpq callq cmp cmc test ja js mov mov xchg mov jmpq jmpq je cmc rcr mov cmp stc clc clc test jae je clc bswap sar mov stc cmc clc test jmpq je not not lea lea not lea not lea movsbw not bswap mov jmpq dec rex.B icebp pcmpgtd loop bt movzbq lea (bad) icebp or jmpq mov jmpq je data16 lock in bsf bswap mov stc mov bts or cmp lea clc cmp jmpq jmpq mov jmpq jmpq movzbw bswap mov jmpq (bad) mov push rex.WRX rex.WRB out fsts (bad) cmp cmpsl xchg mov iret imul jrcxz addr32 repz pop imul (bad) mov add pop sbb or sti (bad) jmpq jb inc setle cmpb jmpq je jmpq callq test jb stc cmc cmp jmpq jmpq je bsr movzbw movzbw mov ror and rcr test mov adc lea cmc cmp test cmp jmpq callq bt stc test cmp jmpq mov jmpq callq clc cmp cmc clc test jmpq lea not lea movsbl movzbl lea jmpq jmpq sub jmpq cmp cmp test jmpq jmpq je sub rol mov cmp stc test jmpq jmpq jmpq jmpq jmpq jmpq jmpq callq btc sub bt mov test test test jmpq jne movzbw cmc rol mov bt bt bt xor jmpq callq bt inc rol test mov cmp cmc cmc stc xor jmpq jmpq movsbq lea setno lea lea jmpq jmpq jmpq lea movsbq mov not lea jmpq jmpq jmpq mov jmpq callq cmp jmpq jmpq callq movsbl bswap not lea jmpq jmpq not bswap mov bswap mov mov lea jmpq bswap movzwl jmpq jmpq jmpq je setbe bsf not or xor setb setl mov setae mov jmpq callq rol and data16 hlt or leaveq push sub data16 (bad) mov sar cmp sub repnz not not mov mov jmpq mov movsbw movsbw not lea mov jmpq callq movzbl jmpq jmpq callq test test jmpq jmpq jmpq jmpq cmc test jmpq jmpq callq xchg movsbw rcr mov inc mov or xor movzbw movzbl movsbw mov jmpq je cmc jmpq test jmpq je cmc jmpq jmpq jmpq jmpq je bswap bswap mov mov jmpq callq rcr setb shr shrd sub movzbw setle bswap not mov jmpq callq cmc stc stc test jmpq js callq stc jmpq callq add mov jmpq jmpq jmpq jmpq jmpq jmpq jmpq jne dec btc clc neg mov cmc cmp jmpq callq bt clc test jmpq mov jmpq jmpq je setl mov mov not lea jmpq callq movsbq sub mov rcl mov test cmc test jmpq jmpq jmpq callq movzbw ror mov test test jmpq mov movsbw jmpq jmpq jnp jae jmpq jmpq stc stc clc cmp jmpq callq not mov movzbw movzbw movsbw mov jmpq jmpq clc xor jmpq clc test add jmpq jmpq je bt sbb movzwl bts add or lea movzbl test shl clc shr test cmc clc clc or jmpq pushq jmpq je dec shrd sub sub movzbw setne movsbw mov jmpq jmpq jmpq callq cmp bt test jmpq callq clc jmpq sahf rex.WB jnp stos rex.RX adc cmp cld addr32 and sahf add push sub push jb (bad) adc (bad) pop outsb int xor mov xor cmc rex.X pop mov lret and cs div sti (bad) xor jne sti int3 cltd stos (bad) jbe stos ds icebp jg cld scas or pushq test pushq int push pushfq idivl push sbb or cwtl out int repnz cs test jmpq jmpq callq bt cmc bt jmpq pushq jmpq callq jb lea bswap movsbw lea jmpq mov stc mov sbb stc sub bswap mov bswap mov jmpq callq jmpq movb bsr mov clc stc test jmpq jmpq jbe ror lea clc jmpq test cmp test test test jmpq jmpq jae je not mov jmpq jmpq je test btr sub xchg mov lea not mov movzbw movzbw mov not not mov movsbl not jmpq je cmc cmp clc cmp jmpq je movsbw movsbw seta setno mov jmpq jmpq test cmc test jmpq jmpq xchg bswap movzbw mov xchg setns movsbw mov setne lea lea mov not not not bswap mov bswap not mov jmpq mov jmpq cmp jmpq jmpq jmpq cmc test jbe je clc mov cmp jmpq jmpq jp callq cmp cmp test stc test jmpq mov jmpq test jmpq jmpq mov jmpq jne shld add not movzbq jmpq cmc add stc mov jmpq jmpq jmpq je clc bt test stc cmp jmpq callq lea sets setns mov setno movzbl not lea mov mov movzbl jmpq clc clc clc cmp jmpq jmpq jns movsbl movzbl jmpq callq jmpq jmpq jb test bt bt cmc cmp jl jb sub lea clc bt clc sub jmpq pushq jmpq jmpq callq clc cmc bt test jmpq je stc test bt xor jmpq pushq jmpq jb bswap mov jmpq callq and and shr shld lea jg cmp test jmpq jmpq jmpq nop jmpq (bad) mov imul (bad) add xchg xor push pop loop push sbb xor mov shlb mov jmpq (bad) rex.R int3 popfq xchg mov jmp insb xchg (bad) leaveq cmpsl mov jp push (bad) in rex.XB movslq mov subl clc mov es shl jne outsb or lods out xor mov test jmpq jmpq jmpq clc cmpl jmpq je sete bsr adc xor mov test cmp test cmp test jmpq cmp stc cmc test jmpq add jmpq jmpq jmpq jmpq jmpq jmpq mov jmpq lea jmpq jmpq jmpq cmc stc and jmpq jmpq jmpq bt cmp jmpq jmpq mov jmpq jmpq jmpq callq xchg mov not mov mov setg mov jmpq je jmpq test jmpq jmpq callq jmpq jmpq not movzbw mov lea mov jmpq jmpq jmpq jmpq jmpq je not movabs setns bswap lea xchg sete jmpq jmpq jmpq mov setb mov jmpq cmpl jmpq jmpq pushq jmpq jmpq test jmpq je jmpq jmpq callq sbb sar stc mov adc bsr neg or mov mov or sbb bsr sub data16 hlt neg clc btr repnz movzbw not not lea not jmpq jmpq add add (bad) pop mov jg (bad) scas xchg addr32 popfq pop xor add add int cld incl fwait cld decl test mov retq retq jmpq jmpq je xor xor mov xchg mov inc (bad) (bad) shrd mov shld mov clc jmpq jmpq je clc cmp clc mov stc cmpb jmpq jmpq jmpq jmpq not mov mov movzbl mov jmpq jb jmpq rcr xor ds mov fs cwtl and mov mov rex.R or enterq pop rcll movabs (bad) mov (bad) xor pop or xchg callq sub sbb rex.R sti (bad) scas mov ds (bad) in cmp movabs rol push fwait movabs test adc pop xchg lods test xor rex.WXB shrb cmp cmp int jmp xor je stc cmp cmc cmc cmp jmpq je jmpq je jmpq add callq bt test stc cmp jmpq jne rcl mov bts mov clc test add jmpq callq jmpq jmpq callq shr shrd shld mov bt sub jmpq movsbl lea movzbw mov jmpq je test xor jmpq jmpq test jmpq test test jmpq mov jmpq nop jmpq callq setno lea mov lea mov jmpq jmpq cmc cmc add jmpq or shr cmc mov sub cmp repnz inc dec movsbw movsbl not movsbw mov mov inc dec movsbw jmpq jmpq cmp test jmpq bswap mov movsbw movzbl not xchg lea bswap lea not movzbw mov movsbq movsbw mov setno movzbl setb movzwl movzbl mov jae mov jmpq lea mov lea lea lea movzbw not mov jmpq movzbl mov movsbw jmpq jmpq lea lea bswap mov bswap lea not lea mov jmpq je or movzbl jmpq jmpq callq jmpq bt cmc stc add bt cmp jmpq jmpq cmc test test add cmc cmc clc add stc stc add bt cmp cmp jmpq callq cmp bt jmpq rol bt shl mov xor jmpq callq clc bt stc mov cmc clc bt cmc test jmpq cmp cmp cmp jmpq je bt bt stc bt cmp jmpq mov lea movsbl mov jmpq jmpq jne and mov jmpq clc cmc cmp jmpq and bsf ror cmc nop bsr bts nopl bt bts sar xchg xor bswap mov bswap mov bswap xchg lea lea not setae mov lea jmpq dec dec bsr ror bt shl mov btr not or sub adc mov movsbw add movzbl sbb shl cmc xor bsr shr btc mov cmp and and bt repnz movzbw lea not not lea inc dec neg rol or shl mov test jmpq jmpq jge jge jbe loope pop in xchg xor fmuls (bad) add xchg test cwtl lret loopne mov jp xchg xor insl in ja sbbb rex.WB out (bad) fs in repnz movsb jg push addr32 adcl lahf loopne (bad) rex.XB callq cmpsb add fwait (bad) pop xchg stc ja adc pop (bad) mov and mov rex.X jmpq xchg mov or adc sub outsl int in lods in callq jmpq cmp test jmpq callq bsf mov stc cmp test cmc test jmpq je stc cmpq jmpq jmpq jmpq callq shr or btc rcr mov bt bt cmc cmc test jmpq lea mov jmpq setp movzwl sete setae jmpq callq mov movsbw movsbq lea jmpq jmpq mov jmpq setge mov jmpq jmpq mov test test test test jmpq movsbw mov mov jns callq jmpq jmpq je stc cmpq jmpq jl je jmpq bt mov cmp cmc test jmpq je rol rcr lea lea xadd btc test or xor movsbw mov movsbw lea mov jmpq not xchg jmpq jg lea movzbl mov jmpq jmpq lea jmpq callq data16 icebp mov mov clc sub not jmpq xor jmpq jb rcr lea clc jmpq mov mov jmpq jmpq je jmpq cmp clc test jmpq mov jl movsbl mov jmpq callq rol cmp sbb inc mov clc stc stc cmc cmp jmpq jmpq jmpq jb bt cmc stc cmc cmp jmpq jbe neg sbb or mov shrd setle shl shrd mov bswap btr (bad) repnz lret cmp clc clc add stc bt cmp add bt bt test add bt cmp test cmc xor jmpq jmpq jmpq jmpq je cmc jmpq cmc clc add cmp stc cmp jmpq jmpq pushq jmpq jmpq jmpq mov movzbl setne movzbl sets mov jmpq jmpq callq xor sbb jmpq jmpq je jmpq adc mov cmc add stc test bt add dec mov cmc jmpq jmpq lea bswap not dec inc movzbw dec btc shl stc neg mov bt cmc stc test jmpq jmpq js cmc cmp test jmpq js bt jmpq jmpq je jmpq callq bsr sar mov stc test jmpq je jmpq jmpq je jmpq dec test sar mov rcl clc adc mov bsf lea cmc cmp jmpq jmpq jmpq callq cmc cmc cmc cmc cmp jmpq jmpq callq inc not dec mov cmc clc bt test jmpq je clc clc cmp jmpq jmpq jmpq mov lea setp mov jmpq test add jmpq jmpq jmpq test jmpq callq btr rcr movzbl inc shl ror bsr sub not setns mov bswap lea movzwl jmpq jne shld shl jmpq callq jmpq jb jmpq test jmpq lea mov jmpq callq cmc jmpq jmpq jmpq je rcl movzbl bsf test mov sub mov inc mov test add jmpq mov jmpq mov jmpq jmpq callq jg callq btc mov test movsbl setae clc mov data16 testb data16 testb int mov cmc test add bt test cmp cmp sub clc jmpq dec jmpq jmpq jmpq bswap mov jmpq jmpq jne neg mov or shrd setle and mov clc cmc sub add mov btr ror neg btr add inc jmpq callq bt test jmpq jmpq jmpq callq cmc bt cmp cmp jmpq jmpq callq data16 hlt clc mov jmpq jmpq je mov setle mov jmpq je jmpq jmpq jmpq mov jmpq movl jmpq cmpq jmpq callq test cmc jmpq callq test sub clc rcr mov dec rcl and cmpq jmpq je cmp test cmpl jmpq je clc jmpq jmpq jmpq (bad) testl push rcr shr mov and cmp or lea rcl bsr cmc lea rol btr sar shrd add sub shld mov shl bswap mov shrd sar btc movsbw add bsf jmpq jmpq callq stc clc test jmpq jb xchg movsbw lea bswap mov bswap not mov jmpq jmpq jmpq rcl rcl inc mov bswap cmp mov jmpq test je je stc cmpl jns je not mov lea movsbw mov jmpq mov cmc stc clc stc add jmpq mov jmpq bswap mov jmpq jmpq callq cmc cmp jmpq setne xchg mov mov bswap mov not jmpq jmpq bt cmp cmpb jmpq pushq jmpq callq not dec mov btr sub lea mov mov not jmpq jne callq clc test jmpq jmpq jmpq callq rol lea clc bt cmp test jmpq jmpq je seto mov dec movzbw not or mov lea clc lea ja cmp jmpq jmpq callq shr mov shr mov bt jmpq jmpq jmpq bswap movzbq lea mov jmpq jmpq jmpq jmpq callq shl not test cmc mov test test jmpq stc stc add inc bsf cmp mov test add jmpq callq jmpq jmpq jmpq jmpq jne adc sar lea test add cmp sub jmpq inc jmpq jmpq jmpq jbe jmpq jmpq callq shr or btr not mov test test jmpq je btc xor not bswap mov jmpq bswap test not nop jmpq test jmpq jmpq mov jmpq jbe shld rcr mov jo cmpw jmpq cmp jmpq jmpq jmpq jmpq je movsbl mov xchg bswap mov jmpq mov jmpq callq bt mov bt cmp clc test jmpq jmpq dec stc neg mov clc test jmpq jmpq je adc adc not mov shl sub mov cmp shl sets xor movzbw lea mov mov mov jmpq bt test jmpq je btc xor lea setg movsbl jmpq jmpq callq movsbw shl mov clc test jmpq jmpq jb jmpq callq clc test cmc clc test jmpq je clc ja cmp cmpq jmpq dec mov bswap dec bsr xor bsf shld mov jmpq jmpq mov jmpq mov jmpq add dec jmpq mov lea mov jmpq je cmp jmpq movl jmpq callq mov and sub setne jmpq mov not jmpq (bad) sarb scas xchg sbb cmp movabs es (bad) lea sbb mov ja jrcxz pop (bad) stos jle int3 xchg rex.WR movsl outsb retq (bad) mov mov (bad) popfq test xor sbbb fisttpl pop (bad) and jmpq outsl gs (bad) push fs or lea rex.WR (bad) (bad) in pop idivb sbb pop pushq xchg xor rex.X rex.WRXB sti (bad) int (bad) xor or xchg xor push (bad) icebp outsb add jl sub and (bad) in addr32 pop out or sti jne cmovl push xor and vshufpd xchg fst rex.WRXB mov hlt stc subl test lods fmuls xchg (bad) fucomip add add mov jmpq movsbl mov mov jmpq jmpq js lea bswap movsbw mov jmpq je cmp cmp stc cmpq jmpq cmc xor jmpq cmc test jmpq jne not movzbw mov cmp test jmpq jmpq jmpq nop jmpq jmpq jmpq jne jmpq jne movsbw mov bsr bsr mov test mov cmc stc add bt jmpq jp jne xchg mov sar sbb or clc btr bt rcl xor sar mov shld sbb repnz not test xor bswap mov bsr inc not jmpq clc test test jmpq jmpq jmpq jmpq je rol clc movzbw mov mov neg cmp mov lea movzbw xor movsbl mov js callq setl dec xor bswap jmpq je jmpq stc bt jmpq jns jmpq jmpq jmpq jmpq js movzbw lea lea mov jmpq je clc clc stc bt test jmpq test cmp jmpq je jmpq je jmpq pushq jmpq jmpq je add mov not mov adc test mov rcl lea cmp test cmc test cmp jmpq jmpq mov jmpq add ja jb lea sub mov (bad) icebp add rorb xchg rorl or sti jmpq mov enterq jmpq rcr jg xor not movzbw movsbl sets mov jne callq test clc bts add mov bt jmpq je jmpq not dec shr bsr stc mov bt test jmpq mov sub mov stc lea stc cmp bt cmp jmpq je jmpq je not mov jmpq bt clc test jmpq test xor jmpq stc stc cmp jmpq callq lea setge mov jmpq bt add xchg rol movzwl test cmc add cmp test mov bt clc test jmpq jae sub orl or sub cmp mov xchg ss imul je data16 or mov add rcll decl add movzbw not bswap mov mov movzbw movzbw movsbw lea lea jmpq callq stc cmp cmc cmp jmpq jmpq jmpq callq data16 repnz cmc btc mov cmp test jmpq cmp add sub xchg sub movabs mov sbb repnz not movsbw movzbq not inc movzbw dec inc dec bt mov test test test cmc test jmpq bswap bswap lea jmpq jo je dec sub cmc mov clc cmp bt sub jmpq jmpq callq neg btc mov clc mov sbb mov btr jmpq mov jmpq bswap bswap xchg movzwl movabs movzbw mov mov not mov jmpq jmpq jne movsbw mov lea mov jmpq jmpq jmpq jmpq clc clc cmp test jmpq test jmpq callq setno lea lea lea jmpq callq xchg setg mov setnp lea not jmpq je cmp cmp jmpq callq cmc cmp jmpq xchg jmpq setae mov not mov jmpq jmpq movsbw lea jmpq je shrd mov jmpq jmpq je jmpq jne test sub bt jmpq jmpq jmpq jmpq jmpq mov jmpq callq cmp btr sub movsbq movsbw not mov jmpq jmpq mov jmpq callq inc bswap mov lea not mov jmpq adc test pop cmp rex.X (bad) imulb retq add sbb in adc add nop repz (bad) stos sbb mov push push jl sti int3 mov pop xor mov int3 movsb pushq or cmpsq insb (bad) mov (bad) sub jg mov loope push fdivrl push or (bad) (bad) in add cmp lods rclb cwtl jnp (bad) cmp jmpq inc dec mov sar sbb mov test bt test jmpq callq cmc bt test jmpq shr mov add bsr mov cmc jmpq xchg mov mov lea lea not lea jb setns movzbw bswap lea jmpq sete mov jmpq jmpq mov setg movzbw mov jo callq movzbw mov jmpq callq jmpq jmpq jmpq test jmpq inc clc jmpq test jmpq jmpq callq jmpq callq dec (bad) icebp add btc ror mov neg mov sbb mov test mov cmc cmc add bt sub jmpq jmpq jmpq callq bsf bsf mov bt neg btr clc mov clc clc cmc test jmpq test jb jne bt stc cmp stc cmpq jmpq callq stc cmp jno jb setp inc incl jmpq je test cmpl jmpq clc test xor jmpq je jmpq mov jmpq not lea jmpq callq stc bsf mov add mov test stc bt test jmpq callq shr lea cmp test jmpq jmpq jmpq jmpq jmpq jmpq je setle mov cmp stc cmp test jmpq jmpq jmpq jmpq jmpq jmpq nop jmpq jmpq lea movsbw mov jmpq jmpq inc jmpq jmpq pushq jmpq jmpq callq lea mov mov rol btc movsbw dec cmpq movsbl mov jmpq callq add mov clc cmp cmc stc test jmpq bswap mov jmpq mov jmpq jmpq setp shrd movsbl mov cmp bts inc cmpq jmpq jmpq callq rcl jmpq je cmc test cmp jmpq jmpq bt test jmpq pushq jmpq sub test stc jmpq jmpq mov jmpq mov jmpq stc cmc sub jmpq callq jmpq callq rcl movzbw rcr shrd mov test test jmpq add jmpq jmpq jmpq callq setno lea jmpq stc stc add jmpq jmpq jmpq bswap lea jmpq xchg lea movzbw mov mov jmpq test bt bt test jmpq clc test jmpq je bt stc bt cmpq jmpq jmpq je sbb bsf xor mov shl sbb inc mov rcr mov lea bt cmp jmpq movzbl lea jmpq je lea seto mov test clc cmp test jmpq mov movzbl lea not bswap mov jmpq jmpq mov jmpq mov jmpq callq movsbw sets bswap jmpq stc btr mov stc test cmc or not bswap movzbw lea jmpq je lea movzbw lea movzbl mov jmpq cmc cmp clc cmc nop jmpq bt test add cmp cmp sub jmpq mov bswap seto mov jge mov movzbw bswap mov jmpq mov stc add test bt jmpq jmpq movl jmpq add lea bts test mov jmpq jmpq mov not not bswap lea movzbl movzbw mov mov mov jmpq jmpq lea jmpq jmpq movsbw bswap not dec bswap dec shr rcl jmpq je rol sub setb jmpq jmpq jmpq jmpq jmpq test jmpq test jmpq jmpq jmpq callq setp bswap mov jmpq jmpq callq shr test mov shld bt clc inc cmpq movzbw setae mov jmpq mov cmp clc movl bt bt clc mov lea cmc mov cmc jmpq movsbw lea jmpq add jmpq xor jmpq jb lea dec sar sbb mov btc stc or shl mov btr ror add movzbq rol ror sub adc mov movsbw sar repnz inc lea not not movabs bswap mov dec cmc data16 hlt mov clc test clc jmpq jle jbe cmc neg rcl mov clc stc jmpq jmpq mov jmpq callq xor movsbw and shrd mov clc jmpq callq clc sub stc xor clc stc cmc test xchg cmp cmp stc cmc test jmpq cmc jmpq jmpq jmpq callq cmc cmp test jmpq jmpq jmpq cmp test bt cmp jmpq test jmpq jmpq jmpq mov mov mov jmpq jne setns ror dec mov cmc mov clc bt xor jmpq clc test jmpq callq cmp and bts mov cmc clc cmc clc test jmpq jmpq je clc cmp jmpq sar mov clc cmp mov cmp bt add cmc cmp clc add cmp jmpq inc jmpq jmpq jns jmpq jmpq mov jmpq je bswap movzbw cmc btr mov cmc test jmpq jmpq jmpq mov jmpq jne shrd inc lea data16 lock shl test sub mov jmpq jmpq je shr dec cmc xor mov inc shrd shld mov (bad) repnz btc clc shl shrd mov bt test stc jmpq callq movzbl mov setl lea jmpq jmpq movsbl bswap mov jmpq add jp decb or imul and pop xchg mov jmpq insl add out (bad) rex.X add add mov cld decl mov retq (bad) (bad) incl leaveq jmpq jb (bad) mov jl (bad) mov fxch insl pushfq (bad) lret xor lods mov imul rex.WRB data16 testl test sbb add faddl jb inc bsr clc sar lea jmpq xchg jmpq jmpq jmpq jmpq jne cmp jmpq jmpq je jmpq jmpq jmpq bt add test sub clc bt bt add jmpq bt cmp jmpq callq sub xor test or mov clc jmpq jmpq jmpq je jmpq jmpq je stc sub jmpq clc or jmpq je btc mov cmp jmpq xor jmpq callq cmp cmp clc test jmpq jne bt bt clc testb jmpq je movzbw mov xchg mov setg mov xchg mov movzbw jmpq jmpq jmpq test jmpq lea mov lea mov jmpq callq bt clc cmp jmpq cmp clc sub jmpq jmpq nop jmpq test jmpq bt jmpq callq stc clc jmpq callq stc cmp stc mov bt test cmp jmpq test cmp jp jbe adc sbb or mov bsr jmpq jmpq je setg rol add jmpq jmpq je bt cmp cmp jmpq pushq jmpq je clc ror sub sar mov clc stc test jmpq jmpq jmpq mov not mov jmpq jmpq je rol mov test jne mov jmpq cmp xadd mov dec stc rcl and mov bt stc bt bt xor jmpq cmc test cmp jmpq test jmpq jmpq mov jmpq jmpq callq jmpq not mov jmpq callq or mov clc stc cmp jmpq jmpq jne bsf movzbw adc bts mov test test jge je test stc test clc cmp jmpq test cmp cmpb jmpq callq cmc test jmpq jmpq jmpq jmpq callq clc jmpq jmpq jmpq jmpq bt test cmp cmp jmpq bt cmp cmp jmpq (bad) gs add mov or rol rex.WR jge push or nop and pop fidivr movabs sarb adc add add nop jmpq jb xchg mov setns bswap mov jmpq jmpq jne movzbw bts mov jmpq callq mov lea jmpq je bt cmp cmp jmpq callq test test test jmpq callq clc stc cmp test jmpq jmpq jmpq callq cmc adc xor inc mov cmc test jbe je shr or rcl lea btc sub btc btc rcl repnz movzbq mov bswap mov not jmpq je jmpq jmpq jmpq shld not setns mov jmpq callq jmpq callq jmpq incl jmpq callq mov mov jmpq je jmpq jmpq lea movzbw movl jmpq jmpq jne bsr mov bt jne bt cmp jmpq movsbw mov lea mov jmpq mov bswap bswap lea movsbl mov jmpq callq movzbq movsbw movzbl lea jmpq clc jmpq callq mov mov lea movzbw mov jmpq pushq jmpq pushq jmpq ror btr sub xor rol rol movsbq mov jg cmc cmc test jl je clc cmp jmpq jmpq jne bswap lea mov bswap mov jmpq jmpq callq movsbw xadd clc sub xchg xchg xchg xchg mov lea not mov jne dec jmpq jmpq test test jmpq jmpq je jmpq pushq jmpq jmpq mov jmpq mov jmpq jmpq jmpq jmpq je rcl bsr or mov clc test jmpq not mov jmpq je movzbl movzbl mov cmp cmp jmpq jmpq movzbw movsbw movzbl mov jmpq jmpq jmpq dec jmpq test jmpq incl jmpq not jmpq jmpq cmp jmpq je jmpq jmpq jmpq jmpq jmpq callq bswap lea not lea jmpq jmpq clc clc add jmpq jb jmpq jo je clc jmpq jmpq jb jbe stc cmc mov cmp bt clc cmc cmpw jmpq test jmpq jmpq jmpq jmpq jmpq jmpq jmpq callq or sbb mov clc jmpq bswap not mov jmpq callq jmpq cmp jmpq jmpq callq setge ror bswap cmc mov shr bsr mov rcr mov cmc bt or jmpq jmpq jmpq test xor jmpq je jmpq callq data16 repz not mov jae clc clc test jmpq callq xchg sub bswap jmpq jbe jmpq je adc xadd sbb inc mov btc shrd mov bswap lea test cmp jmpq je bsf shld sub not lea seta mov lea bswap mov not lea mov mov movsbw not lea jmpq jmpq callq test jmpq jne jmpq jmpq mov movsbw jmpq je clc cmp cmp jmpq jmpq jmpq callq stc bt jmpq callq test test test jmpq callq btc clc or rol mov stc clc jmpq jb mov dec incl bswap movsbl movabs mov mov jmpq jb je sub bts lea adc sub movzbl mov setnp mov mov movsbw not mov lea mov jmpq (bad) xchg rol rex.X in jrcxz mov pop (bad) mov mov std rex.WR insb pop cs or (bad) or mov insb rex.WXB pop iret (bad) (bad) pop cmp (bad) rex.RXB (bad) pushfq loop (bad) sub push sbb ficompl add (bad) (bad) (bad) cmp sub mov nop push rex.XB rex.XB callq out xchg std callq (bad) rex.WB repnz xchg mov jp in rex.R int3 rorb xor (bad) pushq rolb sub jno sbb sbb lods (bad) and loopne (bad) or imul mov xor (bad) rex.WXB cld scas retq jl or (bad) xor int mov cmc clc test jmpq jmpq callq jmpq mov cmp (bad) testb scas xor data16 lock not test movsbw xor xor lea sub shld bsr mov cmc clc clc sub jmpq jmpq je test cmp cmp cmp jmpq bt cmp add jmpq jmpq cmp cmp cmp cmpl jmpq jmpq jmpq add add pushq mov (bad) adc test adc (bad) clc cmp jmpq nop jmpq callq movsbl bswap xchg not mov mov setp mov not movzbw bswap bswap mov jmpq jmpq je jmpq jmpq bt add jmpq mov jmpq je jmpq je test mov bt test jmpq jmpq je not mov setne mov mov jmpq jmpq jmpq mov clc add stc cmc add stc cmc cmp jmpq jmpq jmpq testb jmpq je lea jmpq jmpq callq jmpq retq fs cmp out cmc sub mov jns imul pop loope vmulpd jae xchg sbb test stc rex.X mov rex.RB test jno push sbb or pushfq stos or xchg mov movabs bnd (bad) mov out out mov xchg jmpq (bad) sbb int3 (bad) mov jnp cmp and xor mov push sbb cli jbe out nop loopne jns repnz add out or int mov (bad) mov mov jmpq jmpq callq rcl mov stc cmp stc jmpq sbb mov mov data16 repnz mov stc stc cmc add shrd clc and mov cmc test test add jmpq callq bt not sub lea cmc cmc cmc test jmpq jmpq jmpq incl jmpq jmpq jmpq mov mov bswap movzbl jmpq jmpq jmpq cmp cmc cmpq jmpq jmpq cmp test jmpq jmpq bt test cmp jmpq jmpq callq test and btc btr mov cmp stc jmpq jb jmpq bswap mov jmpq callq bt cmc cmp cmp jmpq jmpq jmpq jmpq jmpq jmpq callq xor lea stc jmpq jmpq jmpq je bt cmp jmpq lea not mov jmpq jmpq pushq jmpq jmpq add jmpq callq clc test stc mov test cmp cmp jmpq mov movzbw not mov mov bswap setns mov jmpq je pushq jmpq je shl sub mov mov jmpq je data16 lock movsb rorl xor mov bswap sbb or bts mov adc lea test jmpq je jmpq jmpq adc jmp rex.WR and adc loop mov vmovq (bad) rex.RB xor popfq sbb pop imul movsb and and stos (bad) adc add (bad) xchg xor mov (bad) shl (bad) adc pop push cmp sub add (bad) jl or jo sti (bad) stos (bad) cltd ds and movabs mov outsb sarl cmpsl lock mov xchg cltd xchg rex.WR (bad) sti leaveq and adc test pop push sbb sti int3 (bad) or xor jae rex.WRB rex.X cs cmpsl and push movabs xchg (bad) cld repnz jrcxz insb rex.RXB gs lret icebp (bad) cld icebp pop (bad) cmp xchg pop pushq ss imul cli movsb push pop test jmpq callq clc cmp cmp jmpq jmpq je movsbw shr clc bt mov clc mov test mov lea mov stc jmpq add add add xchg (bad) (bad) sub xchg rcrl test cmp mov xchg mov sti mov sahf (bad) decl add jmpq jmpq callq xchg rcl mov adc mov data16 lock movl rol or mov btr mov shrd movsbw bsr mov clc shr xor or mov clc test jmpq jmpq mov jmpq cmp stc mov cmp test cmpb jmpq test cmp clc cmp jb je jmpq jmpq pushq jmpq je shrd shrd bswap mov xchg sar cmp mov data16 repnz seto mov lea rcr shld and mov cmp clc cmc cmp add movsbl add shl btc mov bt add btr btr mov cmp clc cmp add clc bt jmpq jmpq jmpq jmpq pushq jmpq callq seto dec test shrd mov jmpq callq inc sub btc mov test jmpq je btc mov xchg sub sbb xchg mov shld clc bswap dec and not lea lea mov jmpq jmpq jmpq mov jmpq callq clc stc jmpq callq not lea movsbw not jmpq jmpq jmpq lea mov bswap jmpq not movzbl lea jmpq xchg jmpq jbe jmpq callq jmpq je cmc or cmc shld movzbl jmpq jmpq bswap movzbw jmpq jmpq lea seto movzbw mov seta bswap mov jmpq je clc cmc cmp stc cmp jmpq adc shr adc bt mov cmp cmp clc stc test jmpq je ror ror lea mov jmpq jbe shl lea cmp clc clc xor jmpq jmpq je ror mov bswap shl sub lea movzbw mov jmpq je xor cmc movzbl bswap mov mov sub rol rcr mov bt setle sub jmpq or sti ds mov (bad) je pop or sub mov int3 pop (bad) jge (bad) pop pushq pop xor rex.RX cmp xchg stos roll sbb outsb std lret mov (bad) rex.R push mov mov adc cmp or pop jae push movabs mov (bad) out (bad) insb sti int3 fdivp rex.WB sub rex.WX fs adc shlb and sbb out retq (bad) xor (bad) (bad) fwait rcrl test lods scas add hlt jb stc cmp jmpq jmpq cmp jmpq jmpq mov jmpq jb jmpq jmpq jmpq mov jg callq sub ror bt mov stc stc jp test jmpq jmpq callq cmc cmp cmp test jmpq jmpq callq jmpq mov movzbw not mov jmpq jmpq jb sub sar jmpq jmpq jmpq jmpq jp je movsbw shrd lea xchg sub movzbw mov jmpq add add sbb mov fidiv rex.XB test xchg sti add add movl jmpq jmpq jmpq cmc cmc add jmpq jmpq jmpq jmpq jmpq jmpq jmpq test and jmpq jnp pushq jmpq bt stc clc cmc cmp jmpq jb bts mov rcr add test bts sub lea lea mov movsbw mov jmpq jmpq jmpq callq cmc test test jp cmp jmpq jnp jb jmpq jp callq not lea add setge mov stc bt test jmpq jmpq mov bswap mov jmpq btr neg shrd not nop shr shld mov clc cmp cmp clc test jmpq je cmc clc cmp xor jmpq jmpq callq lea mov jmpq callq movsbw lea jmpq callq jmpq callq cmp cmp jb jb jmpq je shld bswap or movsbw xor mov jmpq mov jmpq lea lea mov mov mov mov jmpq jmpq je not mov mov jmpq jmpq jmpq jmpq callq xadd jmpq setle mov jmpq je jmpq callq cmp cmp jmpq callq test mov cmp clc test jmpq test bt test jmpq mov jmpq movl jmpq jmpq je lea not lea jmpq callq btr sub cmc mov jmpq shrd dec mov test jmpq bswap bsf add cmp xor mov or dec rcl lea mov shr neg bt data16 (bad) cmpq movsbl jmpq cmp jmpq lea mov jmpq je cmc cmp xor jmpq and sub neg mov shrd mov cmp jmpq jmpq jmpq jmpq jmpq callq cmc cmp clc mov cmp test jmpq jmpq jb setbe mov bswap mov xchg not mov movzbl jmpq jmpq je clc cmc stc cmpw jmpq jne neg shrd movsbl movzwl sar bt mov cmp stc jmpq callq dec shrd xor mov jmpq jns bswap movsbw mov jmpq jns movsbw mov lea mov jmpq callq btr shld mov btc xor movzbw not mov jmpq jmpq callq cmc cmc cmc test jmpq jmpq jmpq callq clc bt test jmpq cmc clc jmpq not mov jmpq jmpq mov cmc test test test jmpq jmpq pushq jmpq jmpq jmpq movsbw mov bswap movsbq mov bswap mov jmpq callq stc cmc cmp sub jmpq je cmc jmpq jmpq jmpq cmpsb pop xor fiadd mov adc insl sbb stos sbb (bad) mov add neg movslq popfq cmpsb test (bad) (bad) loope and mov add jmpq add add (bad) leaveq cmpsl test imul rcll fcmove adc (bad) mov orb popq rex.X (bad) (bad) xor cmc mov gs mov pop adc xor and lods cmpsb out (bad) cld xor ss lahf xorl push fsubrp cwtl lret mov out fnstenv jrcxz popfq icebp rex.WB sbbl xchg (bad) test cmp int3 adc fistpl and out nop ja xchg xor or xchg stc scas out jge (bad) jns retq sbb cld jge int3 pop sbb roll sub out rorl scas out cmp roll clc xor and or jg fs adc shrb mov add in pop ds rorl rex.WXB in icebp pushq xchg in pop xor cld cmp xchg mov shll rex.WB fwait loop out and cmp int3 pop rclb (bad) scas jne jo loop xchg pop sbb pop xchg ds retq movslq movabs rex.RX pop popfq outsb (bad) movsb enterq mov adc adc jns imul fidivrl cmpsl or lea cmp sbb test adc jl sbb push outsl movabs and and (bad) or and or gs (bad) or jb xlat mov (bad) enterq retq pop stc jae rex.WRX add sbb cli (bad) mov adcl cmpsl mov jrcxz insl (bad) and test rex.WR insb sti push repz (bad) xchg (bad) rex.WB rex.WRX mov imul gs and jrcxz cmovl and push movabs cld cs push ds fsubr xor xchg mov cs outsb mov (bad) loope test xor (bad) jno sti cmpsl and pop (bad) out lods mov jb mov adc out add js (bad) hlt (bad) and or jns jle add popfq (bad) xchg iret pushq (bad) (bad) xchg stc cli popfq and (bad) in push or pop (bad) jae out and loope test (bad) cmp (bad) cltd loop rex.WRB (bad) sbb clc in or jae retq sbb rex.WRB add add enterq repz in or sub pushfq mov add rex.WB int rex.RXB cli or gs jle xor fmull add fisttpl sub in xchg stc movabs mov sar repz sub imul sbb imul stos int pop mov out pop (bad) rex.WXB data16 fcmovnu int3 (bad) loopne int3 retq rex.W movabs mov xchg (bad) add insb add test scas sbb insl add data16 movsb and mull decl mov xor movzbw bswap jmpq jmpq bt test jmpq jmpq jns not lea jmpq jmpq add stc clc clc bt add test sub jmpq jmpq jmpq je jmpq jne bsf dec bt sub sub neg rcl xor sar or bsf mov cmc clc repnz btc sbb stc xor clc nop or (bad) hlt movzwl jmpq jmpq jmpq callq movsbw mov mov mov jmpq jmpq mov clc cmc test jmpq callq jmpq xor btr stc setb mov test bt bt cmc test jmpq jmpq jmpq mov jmpq je clc cmc cmpq jmpq jbe bswap bsf bswap mov inc xadd bswap mov (bad) repnz cmp shrd mov bt add jmpq bt stc test jmpq jmpq jmpq lea mov lea jmpq movsbw mov jmpq movsbw movzbl mov jmpq callq inc lea lea jmpq je rol mov cmc rex.B lock rcl mov dec adc stc mov test cmc test add jmpq mov jmpq movl jmpq callq jmpq jns lea mov jnp callq test bt clc test sub jmpq jbe jmpq callq shld or data16 repz mov clc test jmpq callq cmp test jmpq je bt clc cmp jmpq movl jmpq cmp jmpq jmpq cmp jmpq jmpq mov jmpq jmpq lea mov lea movsbw mov not lea jmpq cmp jmpq callq inc mov clc clc mov stc test jmpq jmpq xchg jmpq callq cmp bt test jmpq pushq jmpq jmpq pushq jmpq jmpq jmpq mov jmpq adc sub dec xchg mov not dec lea mov jmpq jmpq jb jmpq jb mov movzbw inc incl lea mov jmpq jmpq jmpq je shr test sar bts mov add xor mov btc mov dec bts and mov setno mov jmpq callq jmpq jmpq jmpq callq not bswap mov jmpq js bswap movsbl mov movsbw mov not lea jmpq je ror and mov jmpq jmpq bswap lea movsbw movsbq jmpq callq cmc bt cmp test jmpq stc cmp clc test jmpq jmpq bswap xchg movsbw mov xchg not movsbl xchg mov not jmpq callq movsbw not mov stc cmp stc test jmpq jmpq jmpq callq stc jmpq jbe inc stc stc add stc cmp jmpq je bswap lea lea movsbl mov jmpq jmpq inc jmpq jmpq jmpq je not bswap lea mov setge xchg bswap movsbq mov lea jmpq jne rcl rcr movzbw ror mov cmp jmpq mov movzbq mov jmpq jmpq callq cmc test jmpq lea movsbw lea lea jmpq callq not mov jmpq callq cmc cmp rcl and mov jmpq jmpq js movsbl mov jmpq jmpq jmpq cmc bt test jmpq jmpq jmpq jmpq jmpq jmpq test test test jge jmpq nop jmpq jmpq je cmc bt cmp jmpq callq movsbw mov lea movzbl mov bswap mov mov movzbw mov jmpq callq cmp clc clc test jmpq callq bsr adc cmc mov test cmc cmp test jmpq mov jmpq inc bt jmpq je jmpq callq xadd mov add xchg sub mov setne mov jmpq mov sete not bswap lea setnp not bswap mov jmpq setge mov jmpq jmpq nop jmpq mov jmpq bt jmpq je cmp cmp jmpq jmpq jmpq mov movsbw sets bswap jmpq jb sub ror movzbw cmpb mov jmpq jmpq je movsbl xchg mov lea lea setg mov jmpq callq bswap lea jmpq jmpq mov test stc add test bt clc clc mov jmpq jmpq je shr bswap neg dec mov stc cmc test jmpq jb clc jmpq stc bt cmc test jmpq callq shl btc mov jmpq jmpq jmpq bt bt test test jmpq jbe jmpq callq bt jmpq jb mov movzbl lea mov jmpq jmpq add jmpq mov jmpq jmpq cmp jmpq test jl je sub shld setns mov stc cmc test jmpq setg jmpq jmpq jbe sbb lea sete bsf mov cmc shld shld mov xor and mov clc cmc add jmpq adc mov bts test shl mov data16 repnz add bt mov test add movzbw sbb setb movzbw mov bt add and shld bsr bsr mov test clc stc jmpq jne cmc movsbw dec bswap lea stc cmc add stc sub jmpq cmp jmpq mov movsbw mov movsbw mov jmpq cmpb jmpq jne stc bsr mov jg cmc stc test jmpq test jmpq mov mov jmpq jmpq mov jmpq jmpq callq btr ror adc mov clc stc test jmpq jmpq callq lea mov cmp jmpq je rcr mov xadd mov inc shl mov clc bt clc add bsr mov clc stc cmc clc add cmc lea bswap mov cmp cmp bt jmpq je shld sbb movzwl movzbq cmp movzbl stc clc jmpq mov jmpq mov jmpq jmpq jmpq je jmpq jae jmpq bswap mov movzbl jmpq jmpq pushq jmpq callq cmp test jmpq callq jmpq pushq js pushq jmpq jmpq cmova jmpq bt stc test jmpq jns lea not mov lea mov jmpq jmpq not mov jmpq cmc test clc test jmpq jmpq je or clc bsf lea setbe and adc not xor sete bswap movsbw xchg mov jmpq mov seto mov jmpq je jo callq lea movsbw movzbw lea jmpq jbe pushq jmpq callq stc test jmpq jmpq callq bt stc test jmpq pushq jmpq callq jmpq add je stc mov stc cmp clc cmc cmpb jmpq jmpq mov jmpq callq lea not mov jmpq je and rcr mov cmc stc bt test jmpq jmpq mov bswap movsbq setle mov movzbl not mov bswap mov mov setne mov jmpq test jmpq callq neg mov cmc movzbw bts btc sub setbe jmpq mov rol shld btr xor not bswap not mov jmpq callq stc test jmpq jne not mov movsbw bswap movzbl mov mov jmpq nop jmpq xchg mov xchg lea sete lea bswap setle lea movzbl movsbw lea lea jmpq jmpq jmpq mov jmpq test cmp add test cmp jmpq je cmc cmp clc cmp xor jmpq jne stc cmc cmp bt cmp jmpq setb mov jmpq sbb sbb shl repnz movsbw jmpq je cmc mov sar mov and adc lea bt bt cmp jmpq callq cmc cmc clc cmc cmp jmpq jmpq rcl repnz dec dec not mov lea mov dec dec sar not dec jmpq jmpq jmpq je bswap jmpq jmpq jmpq cmc clc mov cmc clc cmpw jmpq jmpq jmpq jmpq je not xchg jmpq jmpq jmpq jmpq jmpq callq xadd shrd neg movzbw mov lea rcr sub adc mov jmpq nop jmpq jge jne inc cmp movzwl sar lea mov clc cmp stc sub jmpq mov jmpq bt test jmpq je cmp cmc test mov jmpq bswap mov setg jmpq callq jne cmc xor stc bt stc jmpq test jmpq jmpq callq clc test jle jne jmpq jmpq pushq jmpq callq cmp mov cmp test mov clc movl test cmc clc mov shld rol mov btr mov clc stc stc bt mov bt clc cmpb jmpq jne movsbw rcr add jmpq je xor shl (bad) cmc add rorb fwait shll icebp mov mov jmpq je movsbq bswap lea shrd xor movzbl seta mov jmpq je stc stc stc cmp cmpq jmpq je setns bswap movzbw mov lea movsbq mov bswap movsbw movsbl mov jmpq js je sar bsr mov shr lea btc shl bts dec xor setno jmpq pushq jmpq jmpq pushq jmpq movl jmpq jmpq add test cmp add bswap sets mov jmpq jbe jmpq je jmpq je cmp cmp jmpq je jmpq cmpq jmpq jmpq jmpq jmpq mov jmpq jmpq movl jmpq callq jmpq test clc add stc clc clc stc add cmp cmc add stc test test clc cmp jmpq bt cmp jmpq callq not mov not mov movsbl lea mov mov mov mov jnp callq jmpq jle pushq jmpq jne shld mov test xor mov shr mov stc add bts mov cmp cmp jmpq not mov jmpq callq setbe lea cmc test jmpq mov bswap lea movzbw movsbw jmpq bts mov setg mov cmc bt test jmpq movsbq movzbl mov jmpq mov jmpq test jmpq jmpq bswap lea jmpq movsbw mov jmpq je xor mov test cmc stc sub jmpq je data16 lock shl mov cmp cmp jmpq jmpq jne clc mov cmp stc test jmpq callq cmc test test jmpq jmpq pushq jmpq je bt stc shld or shld lea xor bsf lea mov test bt sub bt sub sar ror repnz movsbl xchg mov movsbl mov not bswap mov mov mov lea movzbw seta movsbl lea jmpq out sub (bad) push xchg add jno or sub imulb (bad) movsb and pop sub fimull test jg lret loopne test rex.WXB out adc addr32 pushfq or scas in stc je rex.WRXB fs jge (bad) or xchg je cmp or jge movabs sti int3 std mov repz jrcxz mov sbb sub test test jg js loop and jmpq callq sti int mov movabs lock jb ror not mov data16 (bad) or lods out pmaddwd mov add btc inc movsbw mov add shrd mov lea bswap shr sbb stc lea adc shld clc add btr mov xor sub mov movzbw adc rol add movsbw mov and bswap mov cmc jmpq jmpq mov jmpq jmpq jmpq jmpq lea jp callq jmpq mov jmpq callq bsr data16 hlt bts mov cmc jmpq je mov jmpq jmpq jmpq mov jmpq jb not not dec xadd shld sub bt mov shld clc shl or dec bt mov sub btr clc shl bswap rol bswap xor not rcr mov mov cmc bsr rol repnz not mov dec jmpq movl jmpq jmpq cmc add jmpq callq clc cmp test jmpq callq cmp cmp test jmpq jb lea jmpq jmpq jmpq je not mov jmpq cmc cmp jmpq mov jmpq pushq jmpq je neg mov btr sub mov jmpq lea jmpq mov jmpq mov jmpq jmpq jbe jmpq jno jne mov jmpq cmp test jmpq jne movsbw lea setae lea mov lea mov mov jmpq jmpq je or cmc btr mov sar and neg bts mov stc movsbw mov xor bt bsr sbb mov cmc clc add rol movsbw mov cmc bt stc add bsr btc shr movzbl mov bt bt cmc clc add cmc cmp stc test add sbb cmc movsbl mov jmpq jmpq jmpq jmpq nop jmpq jb shrd sar mov rol add lea xor movsbw bswap bswap mov mov jmpq callq cmc stc test jmpq jmpq jmpq je shl lea dec lea mov test test cmc cmc xor jmpq callq test cmp cmp cmp jmpq seta lea jmpq mov jmpq movl jmpq jmpq jb bsf stc stc sbb mov bswap inc bts lea mov shl inc bt dec mov rcr movzbw mov xadd lea rcr jmpq callq movzbw lea setae mov bswap lea mov not mov mov mov jmpq jmpq je sar setnp adc sub sub jmpq xchg jmpq callq jmpq callq data16 (bad) or (bad) mov cmp bt bt cmc test jmpq jmpq jmpq not lea movsbl mov jmpq test cmc bt test jmpq stc clc xor jmpq jmpq cmp cmp cmpq jmpq incl jmpq cmc cmc xor jmpq jmpq je jmpq jmpq jmpq jmpq jmpq jmpq jb xor movzbw mov adc rol movzwl cmc test cmp cmc cmp jmpq jmpq callq shrd sub inc dec mov cmc test test jmpq jmpq jb rcr data16 lock mov sbb neg sub mov not mov jmpq jmpq stc stc test jmpq test test jmpq je stc cmpq jmpq jmpq callq bt test jmpq jmpq jmpq add add add add rcr test enterq or pop cmp mov iret adc and test xor scas xchg xchg cltd imul rex.WRX rex.R push xor cmp enterq or or xlat xor mov movabs jg mov iret jrcxz (bad) jl cmc loop pop leaveq sub jmpq or (bad) rorl and jmpq callq test jmpq jbe movsbw bsf xadd sar mov btc btc mov shr and or rcl mov jmpq jmpq je bt clc jmpq movsbw bswap jb lea jmpq callq clc cmp jmpq jmpq jmpq nop jmpq jmpq callq not bswap mov jmpq mov jmpq je btc mov setp neg movzbl bsr mov test clc jmpq jne clc test jmpq mov jmpq je bt test cmp jmpq callq data16 icebp or mov cmc or cmc jmpq jmpq je jmpq xchg jmpq callq jmpq je movsbq not movzbw mov jmpq cmc stc cmp jmpq bswap movsbw movzbw lea mov lea movsbw bswap jmpq nop jmpq jmpq mov jmpq js setnp lea bswap movsbw mov not setbe lea lea movsbw movzbl bswap lea movzbw setge lea jmpq jmpq jmpq jmpq mov jmpq jmpq je xchg lea xchg mov movzbl bswap mov jmpq je sub jmpq jmpq not jp mov bswap xchg mov movsbw jmpq shr stc clc or jmpq jmpq je bswap movzbw mov jmpq je mov rcl mov cmp test jmpq clc test stc test jmpq jmpq seto mov jmpq callq jmpq add test cmc sub jmpq clc cmp stc cmpw jmpq callq clc mov clc cmp test cmp jmpq jmpq je jmpq mov jmpq jmpq jne movsbw bswap jmpq dec inc mov jmpq jmpq pushq jmpq jmpq jne clc cmc xor jmpq jmpq jmpq callq test sub inc bswap not mov lea jmpq callq cmp clc cmpl jmpq push adc sbb rex.R pop ss pop cmp push or lock (bad) ja cmp es cwtl subl jmpq clc clc test jmpq jmpq jne and jo mov not mov bt add test cmp jmpq jmpq callq jmpq cmp add setne bswap mov jmpq stc bswap movsbw xor lea movsbq setg mov mov jmpq jmpq callq bt test jmpq jmpq jmpq jmpq dec dec shr sbb bswap mov xchg bts test or neg shld btc mov neg bsf shl bts sub xor jmpq callq cmc cmc test jmpq stc cmp jmpq callq data16 hlt bsf lea cmc test jmpq jmpq add clc cmp cmp xor jmpq js jmpq jmpq jmpq jmpq test jmpq jb jnp bswap lea mov dec bsr rol add mov shl or or xadd jmpq jmpq shr stc cmc stc bt or jmpq movslq push jno movsl movabs (bad) add decl pop pop insl out rex.WX add in retq push (bad) sti insl pop sti int jge movsb adc test pop (bad) jo icebp xor hlt rcrl add adc cli callq (bad) jmpq movsl mov pop int subl and (bad) jmpq xlat not movzbq bswap lea bswap mov lea jnp callq jmpq movzbl clc stc stc shl test cmp shr clc or jmpq test jno je clc stc test jmpq jmpq jmpq movsbw jmpq mov jmpq jmpq mov bswap mov lea setl movzbl jmpq je cmc cmc cmp jmpq jmpq jmpq jbe jmpq je movzbw not mov jmpq jb jns callq bt stc bt test test jmpq jmpq movzbl movzbw mov jmpq callq clc cmp shl lea mov rcr lea sbb xchg sub bswap or neg rcl sub jmpq jnp callq not mov movsbw lea lea jnp mov jmpq add movzbl sbb mov test add cmc jmpq inc jmpq je clc test jmpq stc jmpq mov jmpq jmpq jmpq add jmpq jmpq jmpq jmpq lea mov not mov jmpq cmp add test clc cmc add jmpq je bsf dec sete lea mov stc jmpq pushq jnp pushq jmpq jmpq jne shrd jmpq cmp jmpq add clc stc sub jmpq nop jmpq jmpq jmpq jmpq callq jmpq lea bswap rcr mov jmpq xchg clc jmpq callq bt cmc jl clc add stc test test bt mov stc clc cmp stc cmpl jmpq jne seto test ror bsf mov cmc test test test jnp je bt stc bt cmc cmp jmpq jmpq callq cmc clc clc test jo js mov movzbw movzbw jmpq callq clc and bt cmp test clc cmp jmpq jmpq jne adc mov cmp test jmpq jmpq callq movsbl movzbw lea jmpq callq cmc cmp jmpq jmpq callq movsbw jmpq test jmpq jmpq jne dec dec sub bsr mov cmp test jmpq jmpq jmpq jmpq cmpw jmpq jmpq test test jmpq pushq jmpq jmpq cmc clc bt cmpb jmpq jmpq jmpq xor jmpq cmp cmc sub jmpq callq shld shld movzbl mov neg mov mov movabs xor mov shr btr mov bsr add mov mov bts and mov test test jmpq jmpq jmpq jmpq stc cmp cmp jmpq test jmpq cmpw jmpq cmp jmpq shl shld xadd nop movsbq lea btc rcr shl add lea data16 repnz loop bsf lea clc cmp xor jmpq mov jmpq callq lea lea jmpq mov jmpq jmpq pushq jmpq test jmpq jmpq js movsbl lea jmpq je stc cmp cmp cmp jmpq callq bt jmpq callq shrd sar movsbl movzbq mov clc clc test cmp test jmpq jmpq je setl jmpq callq bt stc mov bt stc clc stc test jmpq jmpq jmpq cmp stc test jmpq jne rol btc mov cmp jle stc test cmp jmpq mov jmpq callq test mov jmpq add clc bt xor sbb mov test stc stc add (bad) lock dec sar mov clc cmc add clc clc add add shld lea bt mov test stc test clc add jmpq bsf xor movsbq mov movsbw mov movsbl mov jmpq jmpq callq xor bswap add neg mov cmp clc test jmpq jne cmc jmpq callq test bt jmpq pushq jmpq jmpq jmpq callq jmpq test jmpq je jo cmp cmp cmpw jmpq je bsr dec bt bswap xor mov movzbw lea mov jno callq jmpq testb jmpq callq movsbw jmpq jb lea mov mov movsbw incl jmpq jb adc shl and ror mov btr ror add mov bswap mov xadd rol xadd bsf mov bswap data16 (bad) lea xor lea bsr add mov shl stc mov mov cmp not dec mov xor and add neg mov sub mov shr test mov bt clc clc add cmp clc cmp test mov test mov cmp bt add jmpq pushq jmpq or sub dec mov inc bswap movzbw bswap mov jmpq mov jmpq jmpq mov jmpq jmpq je rcl shl not adc mov cmp jmpq jmpq jmpq movsbq mov mov setno xchg lea not lea jmpq jbe or mov bsf rcr lea stc test cmc cmc xor jmpq mov movsbl xchg jmpq je stc cmp jmpq jmpq mov jmpq callq cmp inc lea clc test jmpq jmpq je bswap not mov stc movzbl stc lea bt btr rol lea mov setge setnp movzbw setae lea bswap mov bswap setns movzbw mov jmpq jmpq mov jne cmp cmc test jmpq je rcr stc xor bswap jmpq je shr jmpq callq movzbw mov lea movzbl mov jmpq jb lea incl not mov mov jmpq jmpq jmpq clc clc add stc cmc cmp jmpq jmpq je neg rcl mov ror shl movzbl mov btr dec mov clc test add jmpq callq dec jmpq btc stc mov bswap not jmpq jmpq stc clc cmp test cmpw jmpq jne jmpq add jmpq jmpq movb je callq setnp lea lea lea sets lea lea lea sete mov jmpq jmpq test jmpq bswap mov lea mov bswap not lea lea movsbq jmpq jmpq callq stc stc cmp jmpq jne rcl setp shr cmc movzwl lea mov test jmpq clc cmp jmpq jmpq mov jmpq cmc test jmpq jmpq jmpq callq sub movb rcr mov cmc clc test test jmpq jmpq test cmp bt stc mov test stc cmc jmpq callq jmpq jmpq je jmpq jmpq jmpq jmpq jb jmpq loope (bad) data16 repnz fucomip jne in and mov jmpq test sbb rex.RB sub xchg lods mov rcr pop imul nop push faddl push imul or test cmp jnp add and rex movb (bad) jmpq mov sti int jo mov rex.WRB imul cmp jge (bad) pushfq fistl mov mov add stos movb add and out dec lods je (bad) lahf or adc lea mov mov movzbw setne jmpq jmpq jb movzbw movzbl lea incl not movzbl movzbl not mov jmpq jmpq not not movzbw mov jmpq jne dec mov inc adc seto mov lea mov shrd sub bswap lea add adc lea lea lea bswap rcl and mov bt clc test stc add jmpq lea mov jmpq jmpq je bt sub lea setbe seta bswap mov jmpq jmpq callq bt bt sub jmpq je neg xor movsbl jmpq jb clc jmpq callq lea bswap bswap mov lea jmpq je not bswap lea jmpq jmpq callq bsf lea xor adc data16 lock mov test bt clc test jmpq jmpq jne rcr bswap mov stc cmc cmc clc test jmpq test jmpq movsbl mov movzbl mov jmpq jmpq mov jmpq nop jmpq nop jmpq jmpq je stc clc clc cmpw jmpq jmpq or lea neg xor xchg seta bswap mov movsbw movzbw movzbw mov jmpq je stc cmp jmpq jmpq callq and mov jmpq mov jmpq movsbw movzbl xchg mov nop movsbw not jmpq mov jmpq inc jmpq jmpq mov jmpq jmpq mov movsbq mov lea movsbl lea jmpq jmpq jmpq pushq jmpq jns mov setbe movsbl movsbl mov jmpq mov jmpq jmpq je bswap movsbw lea movzbw mov lea mov lea mov mov jmpq jne neg bsr jmpq mov test jg fdivrl loop xor jnp (bad) loope loope mov (bad) jge data16 gs roll sub je mov lret addl add add or (bad) callq jmpq dec jmpq lea bswap lea movsbw lea jmpq jmpq callq bt bt bt cmp jmpq mov mov movsbw mov jmpq je stc cmc bt cmc cmp jmpq jmpq je cmc jmpq jne bt mov jmpq jmpq cmp test stc cmc nop bt clc cmc test jmpq jmpq callq shrd sub sar mov sar bt mov ror shl sar test or add btc not ror xor movsbw btc btr repnz bswap movzbw mov not not movsbq bswap bswap bswap dec and bswap and bsf mov stc cmc jmpq pushq jmpq jmpq jmpq jmpq jmpq xchg not mov rcr lea mov jmpq callq shr lea cmc jns mov jmpq je test cmpl jmpq jmpq mov setg not not jmpq add cmc test mov test bt test jmpq je lea mov xchg movsbl mov not setne mov mov not mov jmpq callq jmpq callq jmpq jmpq jmpq mov jmpq jmpq jmpq jmpq jmpq jmpq jmpq pushq addr32 (bad) mov (bad) movabs xor rex.XB mov pop xor xchg xor rcrb (bad) jne rex.RX add xchg (bad) int3 (bad) stc frstor sub jb and push insb lods mov (bad) (bad) out (bad) mov in sti int add and xor adc jrcxz retq lahf sbb pop (bad) pushq jrcxz mov xchg adc (bad) push or jne mov stos (bad) and push movsb repz jmpq jb ror dec and xor lea cmc sub jmpq js mov movzbw not mov not mov jmpq cmp (bad) mov mov scas mov and add (bad) icebp (bad) adcl nop (bad) push jmp lahf sbb cmp jno movabs add xchg hlt rex.X rex.RX rex.W rex.WB (bad) ja mov xchg (bad) cmc xchg sti enterq push idivl xchg hlt sti int jg movabs pushq push orb (bad) mov sub pop (bad) cmp adc mov and xor js int insb adc insb fldt mov lods sti (bad) jmpq jbe jmpq jmpq pushq jmpq callq jmpq callq not lea movsbw not lea lea lea jmpq movsbw dec rcr test bsf mov clc jmpq not setno mov mov not movsbq mov mov jmpq callq bswap mov inc mov jmpq jmpq jmpq jmpq jmpq jmpq jmpq callq bswap mov movsbl movsbw lea jmpq sub stc jmpq bt test jmpq jmpq callq and rcr or xor not movsbl not mov jmpq jmpq je jmpq clc (bad) leaveq jae (bad) cwtl xchg sub (bad) stos jl rex pushq (bad) insl pop adc add jae pop pushq xchg (bad) icebp (bad) push jb (bad) popfq sub cmp (bad) pop xchg fst fwait (bad) loopne push (bad) movslq outsl xchg rex rex.WX test in jbe rex.RXB jg sub or sub mov and (bad) mov (bad) jnp pop not pop or xchg (bad) jge (bad) js jns xor adc add pop stc stos (bad) push sbb sti int in mov (bad) pop cmpsl mov retq js pop (bad) mov mov fstl rex.WRXB rex.W sbb insl sbb rex.WRXB movsl adc addl sbb std mov int pushq iret cmpsb or add test bt test test add jmpq je jmpq jmpq je mov mov jmpq je stc cmp clc cmp jmpq jmpq jbe btc neg mov movzbl mov dec sub and btc mov cmp cmp add cmc jmpq cmp jmpq callq jmpq callq movsbl lea not mov lea jmpq lea lea mov mov bswap mov jmpq not bswap mov mov mov movsbw movzbw lea jmpq mov jmpq je lea mov jmpq jne lea add adc movsbw add not not setbe jmpq fwait fs mov push (bad) movabs cmp mov mov rex push pop or (bad) int mov out callq out pop sbb sub movabs nop loopne or mov mov mov rex.R xchg push (bad) rex.WR scas repz pushq clc cmp cmpq jmpq jmpq je shrd mov cmp test jmpq jmpq pushq jmpq jbe test bsf mov rol xadd mov bt data16 repnz rorb clc test bt add clc cmc jmpq mov lea shr mov clc stc mov cmp shr rcr bsf movzbl clc bt jmpq jmpq jmpq stc test jmpq test jmpq jmpq jmpq jo callq not jmpq jmpq je stc jmpq bt test jmpq jmpq mov jmpq jmpq jmpq lea jmpq jmpq jmpq callq stc test jmpq jbe je mov movsbq movzbw not mov jmpq callq clc mov bt stc test jmpq mov jno callq jmpq callq jmpq add movzbw mov jmpq add lea bswap lea mov bswap not jmpq bswap mov setb bswap lea movzbl mov movzbw movzbw movzbw mov jmpq jmpq callq bswap mov mov jmpq jmpq callq btc cmc mov btr mov cmc test bt ja test jmpq jno jns movzbw movsbl not mov mov jmpq jmpq callq movsbw lea jmpq jmpq callq not movsbw mov jmpq jmpq mov movsbl lea jmpq bt stc jmpq jmpq callq rol bsr sbb mov bt stc cmp jmpq callq jmpq je jns sub jle callq stc mov cmc cmp cmc cmp mov bt clc cmc je test jmpq jp je test xor jmpq je cmc stc cmp xor js callq btr dec clc and mov xor sets rcl mov btc test mov shl clc mov neg add movzbw bswap lea not pop retq jmpq je clc cmp xor jmpq jmpq cmc sub jmpq jmpq je test cmp sub jno callq or lea mov cmp stc clc bt mov jno stc cmc test jmpq je cmp stc cmc xor jmpq jmpq callq rcr bswap mov neg movzbw mov cmp sbb rcr mov jmpq add shld xor mov clc add lea pop retq stc test stc sub jmpq jns callq movsbw jge lea jmpq mov bswap mov lea jmpq jns setle not mov jmpq jmpq nop jmpq jmpq callq not movzbw not mov jmpq jae callq mov mov mov jmpq jmpq callq jmpq js mov not mov setl lea movsbq not movsbw mov jmpq jmpq callq js lea setl bswap mov jmpq jmpq callq jmpq callq jmpq jmpq mov jmpq ja nop jmpq jmpq js movzbw xchg lea mov lea bswap jno xchg lea lea lea movsbq lea jmpq jmpq mov setno not jmpq jmpq jmpq mov movzbl lea jmpq jmpq callq btr stc mov clc test test jmpq lea lea bswap not mov jmpq mov stc bt stc test jmpq jmpq mov jmpq callq movsbq lea movsbw seta lea movsbw xchg movsbl lea lea mov mov xchg lea xchg lea jmpq xchg mov jmpq js movsbw movzbw not jne mov not jmpq movzbl not mov jmpq mov jmpq jl mov jmpq jmpq mov jmpq jmpq js lea not movsbw mov xchg xchg mov bswap lea movzbw movzbw mov mov lea not lea movq xchg bswap mov bswap mov seto setno mov jmpq jmpq mov setge movzbq lea jmpq jmpq callq movsbl movsbw xchg movsbl lea jmpq not lea lea jmpq callq cmp dec bts xor mov add shld mov bt clc test jmpq bswap movq movsbl mov jmpq callq jmpq jmpq mov movsbl not setle lea jmpq jmpq cmove jmpq jmpq mov jmpq mov jmpq mov jmpq callq not jmpq lea movzbw lea xchg bswap mov jmpq jmpq lea setg movzbl lea jmpq mov movzbq not lea movsbw movzbw jb setnp mov jmpq callq dec btc mov cmp test jmpq callq stc rcr movsbw ror mov cmc bt cmc mov test test jmpq mov jmpq callq shr test sub mov jmpq jmpq js jmpq setne mov bswap setae not lea bswap lea not mov jmpq movzbw movq not mov xchg movsbw mov bswap jmpq mov jns mov lea sete lea jmpq jmpq jmpq jmpq callq not bsr mov rol mov stc cmp cmp test jmpq jmpq je clc cmp jmpq jmpq callq jmpq jmpq mov jmpq callq btc lea mov jmpq jmpq callq mov not mov jmpq jmpq callq movsbw setno jmpq lea xchg jmpq lea mov lea not mov not not lea lea setnp not movzbq lea bswap mov jmpq jmpq jmpq jmpq jmpq callq btc clc inc bts mov jmpq test jmpq jmpq js mov xchg mov sete jmpq mov jmpq movzbw movsbw movq movsbl mov movsbw mov jmpq je cmp jmpq mov jmpq lea movsbl lea jmpq jmpq callq bswap xchg lea lea sets jmpq movsbw lea jmpq callq (bad) (bad) mov and shl mov jmpq jmpq callq js callq cmc movsbw sub mov cmc test jnp je test test sub jmpq test jmpq clc test jmpq jmpq callq jmpq jmpq mov jmpq jne mov jmpq jmpq callq jne lea jmpq movzbl lea bswap mov lea setns lea bswap lea mov mov jmpq jmpq mov jmpq jmpq mov jmpq and mov jle clc mov jmpq callq lea sub bt mov jmpq cmp cmp test jmpq jmpq je test test sub jmpq lea lea mov jmpq mov jmpq lea jmpq jmpq jmpq mov jmpq callq (bad) (bad) mov shld rcl mov bt bt jmpq cmp test jmpq jns jmpq jmpq callq jmpq cmc bt stc sub jmpq mov jmpq jmpq callq bswap lea lea movzbl mov xchg movsbw lea movzbw mov mov xchg setno xchg movzbw lea bswap lea xchg movsbw lea mov mov mov jmpq jmpq mov jmpq jmpq mov jle callq test bswap movzbl shrd mov bt bt test test jmpq stc xor jmpq js xchg bswap movsbq mov not setg not movsbw lea mov mov lea not movq movabs lea lea mov mov sets lea mov jmpq bswap mov add rol lea cmp mov cmc movsbl mov bsf bt ror shld mov movzbw add movzbq not mov movsbw pop retq jmpq callq xor rcr cmc mov stc mov stc cmc jmpq jmpq jmpq test jmpq test jmpq jmpq jns jmpq callq jmpq setge lea not lea jmpq lea setl not movzbw mov setnp xchg lea lea bswap not lea bswap lea movsbw mov mov jmpq jmpq je cmc stc xor jmpq jmpq jmpq jmpq callq rol bswap mov test test test jmpq jmpq js setge mov movzbw lea movsbw lea mov bswap movq seta bswap bswap movsbw mov lea mov jmpq jmpq mov lea lea jp callq movabs setle lea jmpq lea movsbq lea jmpq jmpq jmpq callq jmpq jmpq jns jmpq jmpq callq jmpq sete jmpq mov movsbw mov jmpq jns jmpq mov jb mov jmpq jmpq callq (bad) repz jmpq jno mov movsbq setg mov lea jmpq stc test jmpq jmpq js setne not mov movzbw movzbw lea bswap jmpq movsbw mov movsbw lea movq xchg jmpq movsbl lea mov movsbl mov jmpq jmpq jae callq xchg not lea lea movzbw lea jmpq jmpq callq cmc cmc mov movzbq rol sub jmpq mov stc stc test jmpq jns jmpq callq jmpq jmpq mov jmpq jmpq mov jmpq callq sar mov jmpq test jnp js bswap setb movzbw mov movzbl lea movzbw not not movsbw mov not lea movq movzbq bswap setno mov movsbl bswap bswap mov jmpq jmpq mov jle setnp lea jmpq jmpq callq bswap jmpq lea lea not lea jmpq jmpq jns jmpq jmpq callq jmpq jmpq callq setnp mov or neg mov stc cmp cmp jmpq test jmpq jmpq jns jmpq jns callq jmpq jmpq je jmpq movzbl jmpq callq sar bt not bts mov adc bsr mov clc stc cmc test jmpq jmpq callq movsbw shl jmpq js jmpq je clc cmc clc xor jmpq js lea seta movzbq mov mov bswap mov lea bswap mov jmpq mov jmpq callq jmpq jmpq callq jmpq add bswap movsbw movzbl lea mov bswap movzbw mov jmpq callq jmpq jmpq callq jmpq add cmc test jmpq jmpq mov jmpq bswap mov bswap mov jmpq jmpq callq movzbw not mov not lea jmpq jmpq jmpq callq jmpq jmpq callq cmp dec mov stc cmp bt test jmpq je bt bt cmc xor jmpq callq jmpq rol bswap mov test cmc stc test mov cmp stc jmpq test test jmpq jmpq je stc test xor jmpq jmpq callq lea rcr sub mov jmpq jmpq mov stc clc test jmpq test jmpq mov bswap mov movzbw bswap lea jmpq je test stc jmpq xor jmpq jmpq callq ror mov stc test stc mov cmc jmpq je test xor jmpq je cmp clc jmpq callq rol setle ror mov stc cmp mov bt clc stc test jmpq jmpq je jmpq jl clc clc sub jmpq jmpq callq ror jmpq bts bt mov clc stc mov clc test jmpq jmpq je cmc jmpq callq bsf mov cmp clc jmpq xor jmpq jmpq callq mov shr rcl mov mov clc add bsr mov xadd adc mov bts inc lea mov mov xor mov add not movzbw bswap lea pop jmpq callq jmpq jns jmpq mov jne callq not lea lea lea jmpq jmpq callq bswap bswap jmpq not mov jmpq jmpq jmpq callq jmpq callq jmpq callq adc shl mov je clc bt test test jmpq jmpq je cmc cmp jmpq xor jmpq jmpq callq sbb and mov clc cmp mov cmp clc bt bt test jmpq jmpq je jmpq cmp cmp sub jmpq jmpq callq bts lea sar mov clc mov jmpq jmpq jmpq callq cmp bts rcr adc mov bt test cmc mov clc test jmpq je bt cmp xor jmpq jmpq callq sbb bts mov lea mov cmp bt cmc mov cmp jmpq test jmpq jmpq je bt xor jmpq jmpq callq bts lea add mov cmc mov cmp stc jmpq test jmpq jle mov jmpq jmpq callq bt mov btr mov shrd bts mov movzbl ror mov neg xor sbb adc add mov movsbw mov pop retq jmpq callq jmpq jmpq callq jmpq jmpq callq sub rol mov test clc cmc test jmpq jmpq jmpq cmc test sub jmpq callq movsbl mov mov cmp mov jmpq test test jmpq je test bt clc jmpq sub jmpq jmpq callq stc setno cmc mov clc test je mov bt test jmpq jmpq je stc sub jmpq callq rol mov stc mov jmpq test jmpq jmpq je bt bt cmp xor jmpq xor jmpq jmpq je bt cmc stc cmc sub jmpq jg callq cmp rcl jmpq mov test bt mov bt bt clc test test jmpq jmpq mov jmpq jmpq callq jmpq lea sar movsbq mov movsbw mov or mov ror xadd xor mov stc add movsbw pop retq not shrd mov clc test jmpq callq add mov jmpq je bt jmpq test jmpq jmpq je test clc xor jle callq data16 icebp (bad) rcr movzbl clc mov stc bt stc cmp mov cmc test cmc test jmpq je clc sub jmpq jmpq callq bt btr bts sub mov jns mov cmc clc bt clc test jmpq jmpq je cmc xor jmpq callq rcr movsbw shr mov cmc cmc mov cmp test stc jno test jmpq jmpq je jg stc bt cmp sub jmpq jmpq callq rol cmp sub mov jmpq callq jmpq clc cmc test jmpq jmpq je clc xor jmpq callq neg shld inc sar mov cmc cmp mov cmc cmc cmp test jmpq je cmp stc stc xor jmpq callq (bad) hlt (bad) ror mov xchg xor bsr mov bsf mov jmpq movsbw dec bswap mov stc cmc btc bsr add lea movzbq not lea pop retq jmpq js lea lea mov setae not movzbl lea jae mov movsbw lea movq seto mov mov sets jmpq jmpq jmpq test mov clc jb test test test jmpq jmpq je jbe sub jmpq jmpq stc xor jmpq bt cmc mov bt jmpq je bt clc test cmp xor jmpq jmpq je stc stc xor jmpq jmpq callq test sub mov test mov bt test jmpq jmpq je stc bt bt xor jmpq jmpq callq shr rcr mov jmpq cmc mov jo bt test jmpq jmpq je bt sub jmpq jmpq callq btr add data16 icebp mov clc cmp stc mov test bt test jmpq jmpq je cmp jmpq stc cmp sub jmpq jge callq movsbl mov bt not bsf btc mov and not xadd mov bswap mov shl lea add bswap pop retq jmpq jmpq callq setb or bswap mov bt stc cmc clc test jmpq stc cmp mov clc test jmpq callq lea bswap lea bswap lea jmpq je stc xor jmpq jmpq callq movzbw shl shld mov cmp cmp clc mov jb test jmpq jmpq je test clc cmp cmc sub jmpq callq adc sbb stc mov cmp cmp mov bt cmc cmp cmc test jmpq jmpq je test stc cmc xor jmpq jmpq callq neg dec mov cmp stc test test mov bt test bt cmc test jmpq je bt bt sub jmpq jmpq callq xor shld mov lea bsr bswap mov lea setl mov not shrd cmp mov shl add lea pop retq mov jmpq callq dec neg mov cmc test test clc mov jmpq test test jmpq jmpq je stc cmp xor jmpq jmpq callq rcl cmp rol mov cmp clc jmpq clc mov clc test jmpq jmpq je jmpq xor jmpq jmpq callq rcl test stc shl mov cmc jmpq mov stc jmpq js xchg jmpq callq adc sbb mov shrd jmpq je stc xor jns callq shrd sbb xadd mov add (bad) hlt (bad) add ror mov bswap mov sar shr not mov and add movzbw pop retq bt clc cmc test jmpq je test stc bt cmp sub jmpq jmpq callq neg btc mov cmp jmpq bt test mov cmc jmpq test jmpq jmpq rcr cmc cmp mov jmpq jmpq jmpq callq jmpq sbb setg dec mov cmp test mov stc jg test jmpq jmpq je jmpq stc stc cmp sub jmpq jmpq jmpq jmpq test jmpq jmpq je jg xor jmpq jmpq callq and bsf adc mov add mov jmpq sbb shrd sub mov jmpq bsr mov rcr add not pop retq jmpq je jmpq cmc bt xor jmpq jmpq callq add shr mov stc clc jmpq mov stc jmpq callq or test mov btr shld mov neg sar mov sar inc or bsf mov adc shld add movzbw movzbw movsbw mov pop retq je bt cmc stc xor jmpq callq btr not seto dec mov cmc bt jmpq mov cmc jmpq test jne je clc xor jmpq callq movsbw not not mov jl callq jmpq callq shld ror or bts mov stc mov cmc test jmpq je cmp bt xor jmpq jmpq callq rcl mov cmc shr sub rol mov xor mov data16 mull fisub decb cmc mov inc mov add movzbw lea pop retq jmpq js lea xchg bswap mov mov setge movsbw lea movzbw not not mov movsbw movq jmpq jmpq je bt clc jmpq in rex.RB push mov pop cmp pop loopne push imul add jge pop sbb and std lahf (bad) sahf fsubrl mov in andl fisttpll cmp push jns rex.WRB mov (bad) int push or mov ja push (bad) movabs mov lahf mov xchg xchg (bad) push pop cld loopne (bad) add popfq mov (bad) movabs jae fstpl lods faddl mov and (bad) lahf rclb (bad) incb jnp testb movabs cs repnz and (bad) pushq mov rex.WXB mov loop jo (bad) imul rex.WXB xchg out lods movabs mov (bad) orl in (bad) je xor (bad) nop out add xchg repz callq dec mov or bts mov (bad) mull mov mov rcl shr mov cmp cmc xor add movzbw js pop retq cmc stc bt test jmpq jmpq je cmp sub jmpq callq rcl neg shr sub mov bsf bsf bt shr mov ror sub ja add mov and bswap add or mov mov bsf inc add lea pop retq ja callq jmpq callq mov lea jmpq jmpq callq bsr add mov ja test jmpq jmpq jns seta mov mov lea mov jmpq callq test mov jmpq callq lea movabs bswap mov jmpq jmpq callq jmpq jmpq mov jmpq callq jmpq not lea jmpq callq jmpq callq jmpq callq bts mov inc mov (bad) testl cltd retq mov adc lea bts lea mov inc add movsbw pop retq jns lea movsbw mov movzbw mov jmpq jmpq movb jmpq callq not movsbl mov jmpq callq jmpq callq jmpq callq jmpq jmpq mov jmpq callq jmpq movsbw movzbl setns movzbw mov jmpq jle callq jmpq callq jmpq jmpq mov jmpq jmpq nop jmpq jmpq movb jmpq lea not lea setae not movzbw mov lea jmpq mov jmpq lea jmpq mov jmpq mov not movzbl lea jmpq jmpq mov not lea jmpq stc stc cmp mov stc cmp clc stc test jmpq mov jmpq jmpq mov jmpq jmpq callq seto setle lea lea lea movzbw setl bswap mov not lea mov bswap lea movzbw movzbw mov jmpq jp mov jmpq mov jmpq jmpq stc sub jmpq je bt jmpq jmpq test test jmpq js lea movsbw movzbq mov movsbq movzbq lea lea not movsbl mov mov setbe mov mov movq xchg movsbl movzbw mov movsbw movsbw mov jmpq jmpq mov mov not sete lea lea jmpq jmpq callq movzbw lea xchg xchg lea movzbq lea jmpq callq clc mov rcr mov clc bt cmc cmp test jmpq jmpq callq mov lea not not bswap lea lea jmpq jmpq jmpq mov jmpq je callq neg (bad) repz movzbl mov cmp test bt test jmpq jmpq mov jmpq not movq seto xchg mov setnp movzbl mov jmpq mov movzbw lea jmpq jmpq callq movsbl jmpq lea lea lea jmpq callq movsbl not mov or ror btc rol mov stc stc cmc test jmpq jmpq jns jmpq callq jmpq movzbl not setno not mov jmpq mov jmpq jmpq mov jmpq jmpq callq sar not mov cmc test jmpq jmpq jns jmpq seta movsbw mov not lea bswap bswap mov movsbw seta bswap setnp movq bswap lea mov movsbw mov not movzbw lea mov jmpq jp mov not jmpq lea jmpq jns jmpq callq mov movzbw bswap lea not bswap jmpq lea jmpq jmpq callq and rol mov movsbl bt mov bt test jmpq jmpq jns jmpq je callq cmp btc shrd movsbl mov neg bt and mov cmp test clc test jmpq callq jmpq jmpq mov movsbw lea jmpq movsbw lea jmpq jmpq callq mov lea lea not lea jmpq jmpq callq add bswap rcr xor mov btc dec rol mov test test jmpq jmpq jns jmpq jmpq callq jmpq jmpq mov jmpq jmpq callq setle lea movsbl mov lea xchg not mov xchg setl lea movsbw seta bswap lea setnp mov jmpq mov jmpq js jmpq in rex.RB je pushq fild pop je pop cltd pop loopne rex.WRX leaveq mov test sbb and in (bad) cltd (bad) cmp (bad) (bad) ja loop jmp rorl movsl jge rex.WRX rex jns rex.WRB sarl scas (bad) fnsave addr32 out jnp rex.R adc sarb test fwait outsl pop fist cld loopne fldcw rex.R popfq mov int3 movabs insb rex.WR xchg in (bad) retq sub mov xor xchg rex.XB xchg and icebp lea lahf js sbb (bad) (bad) sti repz divb fcompl mov jb loopne xlat cmp jno ja jmp xchg (bad) lods (bad) rex.R rex.WX nop sbb ss ror (bad) xor jmpq push je mull sub std xchg repnz cli pushq xlat rex.W repz cmp test stc test jmpq jmpq mov bt test jmpq jmpq mov not movsbw lea jp callq not bswap lea movsbw not lea movsbq lea jmpq jmpq callq sub mov and shrd dec jmpq mov test jge clc cmc test jmpq jns jmpq jmpq not mov jmpq sete xchg lea movzbw mov not bswap lea lea setae movzbw mov xchg movzbl xchg lea lea seto not not lea lea movsbl bswap mov mov jmpq je bt ja stc sub jmpq mov jmpq callq or sub sbb mov jmpq test jmpq mov jmpq bswap mov lea movq sets sets mov lea bswap mov lea mov jmpq jmpq mov movsbw not setnp lea lea jmpq jmpq movzbw lea movsbw mov mov lea jmpq jmpq callq btc mov rcl bswap bts mov cmc test jmpq callq lea mov lea sets lea lea movsbw movsbw lea jmpq jns jmpq jmpq callq jmpq lea bswap mov setns lea movsbw movq movsbw mov jmpq movzbq lea movzbw mov jmpq callq inc shld bswap test mov stc ror movsbl clc mov bts mov xchg bswap clc rcr mov mov bts add jmpq jmpq jmpq callq xchg not jmpq mov lea lea not not lea jmpq callq btc sbb dec mov adc bts not setae mov bt stc test jmpq mov lea mov jmpq jns jmpq jmpq callq jmpq jmpq callq shrd shrd add mov cmp test jmpq lea jmpq callq neg xchg lea (bad) hlt mov jmpq bswap bswap lea movq mov not mov mov movsbw mov jmpq jmpq mov bswap mov lea jmpq jmpq callq jmpq lea not lea jmpq callq add dec jmpq jmpq sub jmpq jns jmpq jmpq callq jmpq jmpq callq mov xchg jmpq lea jmpq setbe mov lea jmpq callq inc add mov add setl sub mov cmc clc cmc test jmpq jmpq jmpq jmpq callq jmpq jmpq jns jmpq jmpq callq rol mov test jge stc test jmpq js movsbw mov not movsbw bswap bswap lea jmpq not lea lea mov movsbw jmpq movq mov seto mov bswap mov jmpq jmpq callq lea bt mov xor add xchg mov clc clc mov btc shr inc mov movzbw add movsbw jmpq callq sar lea lea mov sar cmc bt mov bt test jmpq jmpq callq bswap lea movsbw lea jmpq lea jg callq sbb adc xor mov cmp mov stc bt test jmpq jmpq jns jmpq jmpq callq jmpq callq bsf adc sbb mov jmpq mov movsbl bswap bswap setne lea jmpq jmpq callq lea xchg jmpq setnp lea bswap bswap lea jmpq jmpq callq sar mov clc mov bt cmp test test test jmpq jns jmpq callq jmpq jmpq callq seto mov not bswap lea mov seto movsbl lea jmpq callq sbb mov btc shr mov stc bt stc test jmpq jmpq cmp test jmpq jmpq callq jmpq jmpq js not jmpq callq jmpq lea seto setge mov setb jmpq callq shr cmc dec sub mov not jmpq je cmc jmpq jmpq mov movsbw jmpq lea jmpq jmpq lea jmpq jmpq callq sar mov shld movzbw xor mov cmc test test jmpq jmpq jns jmpq je cmp bt sub jmpq movzbl jmpq lea jmpq jmpq callq movsbq jmpq lea jmpq callq xadd bt adc mov btr bsf test bts mov clc clc test jmpq jmpq bswap lea jmpq jmpq jns jmpq test jg je bt clc xor jmpq callq jmpq jmpq callq or rcl mov movsbw mov clc stc test jmpq callq jmpq jns jmpq jmpq callq jmpq jmpq callq jmpq jmpq lea pop retq cmp mov clc cmc test jmpq jmpq jmpq callq lea bts (bad) icebp mov cmp jmpq cmp jmpq test jmpq jmpq mov test mov clc cmp test jmpq xor jmpq callq stc cmc lea mov sbb mov bt clc test jmpq jmpq je bt stc stc test sub jmpq jmpq jmpq jmpq je cmc stc test jne sub jmpq jmpq callq not xor shld and mov cmp cmc mov cmc test jmpq jmpq je jmpq jmpq callq shl movzbw mov cmc stc cmc mov clc clc test jmpq jmpq je clc bt cmp sub jmpq jmpq callq movsbl rol bswap mov jmpq mov jmpq jmpq je stc stc xor jmpq je clc bt test stc xor jmpq callq shl mov movzbl lea neg mov sar sar btr mov data16 (bad) or and movzbw mov not add add movsbq movzbw pop jmpq test cmc cmp cmp sub jmpq jmpq callq btc inc inc not mov stc cmp clc mov bt test jmpq test jmpq jmpq je clc sub jmpq callq cmc bsr shl mov shrd inc mov ror rol mov ror or mov not dec add bswap jmpq je stc cmp sub jmpq jmpq mov test test jmpq sete lea jmpq jmpq callq setnp jmpq movzbl movzbq mov jmpq callq jmpq jmpq callq jmpq jmpq callq (bad) icebp setne mov cmp test jmpq jmpq je cmc xor jmpq bt cmc cmp xor jmpq jmpq callq bt data16 icebp or or cmp test mov cmc bt cmp cmc test jmpq jmpq jmpq sub jmpq jmpq movb jmpq jmpq mov cmc test jmpq jmpq je test test cmp bt xor jmpq jmpq test jmpq je cmp xor jmpq jmpq callq not bsr mov stc cmc clc bt mov stc test jmpq test jmpq jmpq je clc cmc cmp xor jmpq jmpq je stc clc bt bt xor jmpq je clc bt sub jmpq jmpq mov lea jmpq callq jmpq bt stc test jmpq je cmp stc cmc sub jmpq jmpq jmpq jmpq jmpq jmpq callq add mov jmpq bt cmc mov jmpq cmp cmp test jmpq jmpq je bt xor jmpq jmpq callq adc shrd mov cmp stc mov jmpq cmc test jmpq je stc bt sub jmpq callq clc data16 icebp sub xor mov test jmpq mov stc test jmpq jmpq je cmp bt xor jmpq jmpq callq bswap rcr mov bt mov bt test jmpq jmpq je cmc test clc jmpq sub jmpq jmpq callq bswap add neg mov stc mov xadd ror adc mov adc mov add bts add bswap pop retq jmpq je cmp test sub jmpq jmpq callq not mov jmpq stc test mov test test jmpq je clc xor js callq bt mov cmc mov bt clc test jmpq jmpq jmpq jmpq callq jmpq mov lea movsbw lea jmpq je test jmpq sub jmpq jmpq je test clc xor jmpq stc test jmpq jmpq callq btc mov sbb data16 (bad) mov bsf mov btr stc bt mov shld clc clc not add mov pop retq jmpq mov jmpq je clc cmc bt cmp sub jmpq jmpq callq add and neg mov bt mov stc cmp stc test jmpq jmpq callq rol rcr inc mov cmp mov test cmp test jmpq callq jmpq callq neg shld shl bts mov stc cmp bt stc mov jmpq stc jmpq jmpq test jmpq jo je stc stc jmpq cmc xor jmpq jmpq callq shrd mov jmpq test mov cmp clc bt test jmpq jmpq je stc sub jmpq callq bsf inc jmpq mov dec rcl mov bt mov adc bts mov rol add movsbw not movzbw movsbl pop retq jmpq callq neg sar rcr mov clc mov cmp clc test jmpq jmpq push lock std std test (bad) retq jno push jrcxz (bad) out cmp mov (bad) scas ss rex.XB mov jp in pushq callq add in shrl adc test xor jo fbstp rex.RX add xchg (bad) cmpsb test imul jmp adc (bad) push test jmpq jmpq callq stc movsbw mov stc stc bt mov bt cmp test jmpq jmpq nop jmpq jmpq callq cmp bsf mov cmp jmpq cmc test mov clc cmp clc cmp test jmpq jmpq jmpq jmpq callq bswap mov stc cmp jmpq test mov cmp test jmpq je bt clc jmpq je stc clc jmpq sub jmpq jmpq callq and movzbw mov clc jmpq mov stc clc clc test test jmpq jmpq je test test xor jmpq callq setb not mov mov clc test clc mov clc stc test jmpq jmpq jmpq xor jmpq jmpq callq cmp xadd mov btc movsbw stc mov cmp shrd shl mov cmc shld mov movsbw neg bswap ror add movzbw pop retq jmpq jmpq je cmc stc sub jmpq jmpq jmpq je cmc cmc sub jmpq callq test stc mov test stc mov jmpq test test jmpq jmpq jmpq callq stc not sets mov cmc sar ror shld mov bsf add neg test mov bts lea rcl clc mov cmp dec add bswap bswap lea movsbw pop retq callq clc mov stc jmpq cmp mov test cmc bt cmc test jmpq je jmpq clc stc sub jmpq jmpq jmpq callq bsr mov cmc test jmpq jmpq je clc xor jmpq jmpq callq lea mov cmp mov cmc cmc test jmpq test jmpq jmpq je cmp sub jmpq jmpq callq movzbw mov bt jmpq cmc mov test cmp test jmpq jmpq seto movq mov movzbq bswap movzbw mov not not mov lea mov jmpq sub jmpq jmpq callq stc xadd test shld mov bt xchg inc shld mov or mov mov or clc bsr xchg mov inc sbb add not movsbw movzbw movsbw pop retq clc jmpq stc stc sub jmpq jmpq callq rol or adc clc mov cmc jmpq bt jmpq mov bt test test jmpq jmpq je clc jmpq cmp sub jmpq jmpq callq rcr shl rol mov stc bt cmp mov clc test jmpq je bt xor jmpq jmpq callq not shld sbb mov mov dec dec mov mov test or sar mov rcl neg bt mov btc bt lea add movzbq pop retq bt cmp test jmpq jmpq je cmc xor jmpq callq jmpq callq bts add (bad) icebp clc mov stc test bt stc mov test test jmpq jmpq je bt jmpq test sub jmpq jmpq callq and rcl not mov clc stc bt stc mov test cmc cmp cmc test jmpq jmpq je stc xor jmpq jmpq callq btc mov test mov jmpq callq jmpq jmpq je clc bt jmpq clc sub jmpq callq bts clc setl mov test mov cmp jmpq jmpq je jmpq jmpq stc xor jne callq cmc bsr btr sar mov clc dec rol cmp mov btr mov dec mov not inc rcr sbb add not jmpq lea pop retq clc stc mov cmc cmc clc cmc test jmpq jmpq callq shl btr shr mov cmc cmc cmp mov test test jmpq jmpq je jmpq stc sub jmpq jmpq callq bsr rol mov cmc jmpq test mov cmc clc cmc test jmpq jmpq stc test jmpq callq shrd test rcr btc mov jne test mov test cmp test jno je jmpq xor jmpq mov mov movzbl mov lea jmpq callq rcr test mov stc mov jmpq test jmpq jmpq je clc clc cmc test sub jmpq jmpq callq not stc shrd mov rcl cmp mov cmp btc rcl mov test btc bts data16 (bad) mov test shr stc add jmpq mov pop retq test clc test jmpq jmpq je jge stc xor jmpq test jmpq callq rcl mov bt cmp stc mov clc cmc test jmpq je bt test bt xor jmpq jmpq callq cmc shrd jmpq neg mov shr rcl mov movsbw mov rol stc mov bsf movsbw rol add not pop retq je test clc cmc sub jmpq callq xor mov btc mov sar xadd lea (bad) (bad) mov dec and stc mov stc not adc cmp add mov movsbw lea pop retq test clc test jmpq je clc cmc xor jmpq jmpq callq ror rcr shrd mov test cmp mov jmpq test jmpq jmpq je stc sub jmpq callq cmp movsbw bsr mov cmc bt test cmp mov stc jmpq clc bt test jmpq jmpq jmpq jmpq je stc cmp sub jmpq jmpq callq movsbl rcl sub bsf mov cmp mov jmpq jmpq jns jmpq jmpq je stc test xor jmpq jmpq xchg lea sets movzbw mov jmpq xchg btr clc mov lea adc bsr rcr mov neg mov clc ror add jmpq movsbw pop retq jmpq callq shld lea movsbw test mov cmc jmpq stc mov test jmpq test jmpq je test xor jmpq jmpq callq shl mov btc mov rol neg mov xadd clc neg mov stc shl mov shld add lea pop retq jmpq jmpq jmpq lea movsbw pop retq cmc test stc stc test jmpq jmpq je jmpq callq bsr mov clc jmpq clc xor jmpq bswap lea jmpq callq and cmp btc mov stc bt stc stc mov clc test test jmpq jns jmpq stc sub jmpq jmpq callq movsbl cmc ror movzbw mov and rol neg mov btc shr mov lea mov rol sub add jmpq jns jmpq xadd add add mov setns sar sub mov shl mov and ror rol bts mov rcr add lea pop retq je cmp sub jmpq jmpq callq clc mov cmc stc bt mov clc test bt test jmpq bt test bt mov clc cmc bt test jmpq callq jmpq jmpq callq inc mov movzbw setno stc cmp mov rol inc mov shl rcr mov or add movzbw pop retq jmpq je clc stc xor jmpq jmpq callq btr lea mov cmc cmp cmc mov stc test jmpq callq lea lea jmpq je clc sub jmpq jmpq jmpq mov sub ror xor rcl add jmpq mov jmpq stc cmp jmpq mov cmc test jmpq jmpq mov pop jmpq callq btc shl cmc mov add mov movzbw mov add btc bt btc mov movzbl neg test ror add movsbw bswap lea lea pop retq movsbw pop retq shrd rcl sar bsr mov bsf clc xor mov jmpq lea test bsf add not not pop retq jns jmpq jmpq jns lea lea setle bswap mov jmpq jmpq movb jmpq jmpq callq movzbw movzbw mov mov jmpq callq mov mov mov jmpq jmpq callq jmpq jmpq callq jo callq jmpq jl mov jmpq jmpq nop jmpq jmpq mov jmpq mov jmpq jns callq shl btc mov clc test jmpq jmpq test je je test cmc cmc sub jns callq movsbl neg mov clc stc clc jmpq mov movzbl xchg seto lea mov movzbl not lea mov bswap lea lea movq not setb movzbw movzbl mov movzbw setne setbe movzbl mov jmpq jmpq mov not lea setns seto lea jmpq callq setp not jmpq not lea jmpq lea jmpq je bt test jmpq callq and mov cmp stc clc cmc mov stc bt test jmpq jmpq jns jmpq test clc test jmpq jmpq callq mov bsf mov cmp test jmpq jmpq callq dec sbb mov jae bt mov cmp stc test jmpq not xchg mov lea mov jmpq mov movzbw lea jmpq lea jmpq callq bswap xchg setne movzbl lea lea lea jmpq jmpq callq rcl shld inc mov jmpq mov cmc cmc cmp cmc test jmpq jns jmpq jmpq callq jmpq jmpq mov lea lea jmpq jmpq callq mov movzbl lea lea lea jmpq movsbq movzbw lea lea jmpq js lea lea mov sets xchg lea movzbq mov not not movq mov movsbw mov mov bswap lea bswap mov jmpq jmpq callq jmpq jb callq movzbw setns movzbw setl lea not bswap setnp bswap lea jmpq jmpq callq and mov rol and rcr mov bt test jmpq cmp test jmpq jmpq jns jmpq jmpq bt jp cmp cmc xor jmpq cmc test jmpq jns jmpq callq jmpq jmpq mov jmpq jmpq mov jmpq callq and stc shr mov cmc bt test jmpq js not lea mov jmpq lea lea mov lea jmpq mov lea movq movzbw sets movsbw mov movsbw not mov jmpq jmpq mov lea jmpq setne lea jmpq jmpq callq movzbw not not bswap lea lea lea jmpq jmpq callq btr mov rol bsf bsr rol mov clc stc test cmc test jge jns jmpq callq jmpq setle not movzbl mov xchg bswap jmpq jmpq lea mov mov movzbw movzbw movzbl not movq setno movzbw movzbl movzbw mov bswap mov jmpq jmpq mov mov lea lea jmpq jmpq callq mov movzbw not lea mov movsbw lea jmpq jmpq jmpq test jmpq jmpq jns jmpq jmpq callq jmpq cmc test jmpq push lock std std mov jo pop add or and or ss loop in insl jge pop in mov mov push int3 add in sub xlat test mov jmpq rex.RX jae xchg (bad) (bad) stos push (bad) scas fucomi loopne iret mov mov mov jmp sbb rex.WR mov lea lea jmpq mov setg lea movzbw lea movsbq mov lea not movsbw movq setle mov mov movsbl bswap movzbw mov jmpq jmpq jmpq callq movsbw lea lea movzbw lea jmpq jmpq mov jmpq jmpq jns jmpq jmpq callq jmpq jmpq callq jmpq movsbq mov cmp stc stc test jmpq jb jns jmpq mov cmc test jmpq cmc clc sub jmpq jmpq callq movsbl rcl (bad) cmc add iret cli incl xor test test jmpq callq jmpq jmpq callq jmpq and cmc or mov stc cmp cmc test mov jmpq test jmpq je cmp cmc cmc xor jmpq jmpq callq jmpq cmc jmpq test jmpq jmpq je jmpq xor jmpq jmpq callq xor rol and mov shr mov rol cmc mov bsr bsr clc ror mov btc stc add bswap movsbl not jmpq pop jmpq jmpq callq ror mov clc test clc clc mov stc test jmpq jmpq je clc clc cmp sub jmpq jmpq callq sbb mov jmpq bt mov bt test jmpq jmpq jmpq jmpq mov jmpq jmpq callq btc lea mov neg shr rcr mov neg mov shl cmc mov neg lea mov dec sbb or and add movzbw movzbw pop retq jmpq je cmp jmpq bt cmc cmc test jmpq jmpq callq movsbw add dec mov cmc cmc cmc mov clc clc test stc test jmpq jmpq je bt clc xor jmpq jmpq callq shr mov setnp mov shr clc sub bsf mov cmc xchg test mov shld inc add movzbw bswap jmpq jmpq callq dec mov bts mov bt jmpq mov test shrd sar mov not shr bts mov shld movzbl shld add lea pop retq bt bt cmp mov cmp bt test jmpq jmpq je cmp test test cmp xor jmpq jmpq callq and shl mov cmc cmp mov bt clc bt test jmpq jmpq je bt xor jmpq callq stc mov bsr test cmp setg mov xadd mov and cmp mov and btc rcr adc add lea jmpq mov bswap pop retq jmpq je jmpq cmc jmpq callq shrd not and mov stc cmp stc stc mov clc test jmpq jmpq jmpq stc stc mov test jmpq je clc jmpq sub jmpq jmpq callq rol xadd mov clc stc sete xadd mov shld mov sub and shr mov cmp rcr inc dec add movzbw jmpq jmpq bt jmpq cmc cmp xor jmpq jmpq callq btr rol mov clc test clc mov jmpq stc test jno je cmp cmc sub jmpq jmpq callq rcr mov mov shld and add mov cmc mov sbb movsbw mov bsr add mov lea bswap lea pop retq jmpq callq jmpq jmpq jmpq stc cmp sub jmpq callq and bt mov bsf sar mov bsr shl bts mov cmc cmc mov inc bsf add movzbl not pop retq jmpq jmpq callq sete add mov stc mov test clc cmp test jmpq mov jmpq jmpq nop jmpq jmpq mov jmpq jmpq nop jmpq jmpq callq inc mov jmpq test jmpq js movzbw movzbw mov movzbl bswap lea not mov jmpq jns jmpq mov jmpq jmpq jmpq jmpq shr mov bsr shld xor test mov jmpq lea not mov jmpq lea jmpq lea jmpq callq rcr inc adc btc mov not mov jmpq test cmc jmpq callq rcl mov mov sar bt mov clc test cmc jmpq jmpq lea pop retq jmpq callq jmpq jmpq cmp bt mov jmpq bswap lea bswap lea jmpq jmpq callq rol rcl bsf setl mov or btr xor mov jmpq test jmpq jns jmpq jmpq jmpq jmpq jns jmpq jmpq callq jmpq jmpq jns jmpq jmpq callq cmc ror sar bswap mov stc bt cmp cmp mov jmpq callq cmc stc bt inc mov bt sete mov cmc jmpq je test jmpq stc xor jmpq callq bts bts mov xchg clc mov rcr test data16 repz shld bt mov data16 mull mov (bad) bswap mov pop retq jmpq callq jmpq pushq jmpq pushq jmpq jmpq jmpq pushq jmpq pushq jmpq jmpq jmpq pushq jmpq pushq jmpq jo pushq jmpq jmpq pushq jmpq jmpq pushq jmpq jmpq pushq jmpq push lock std std adcl movslq retq jle (bad) je (bad) (bad) and pushfq mov (bad) insl ss iretw sbb jge or sarl (bad) pop pop int3 add in fldenv adc test adc out push add (bad) rex.RX xchg (bad) es rex.R or (bad) cmp retq enterq (bad) rex.WX lock std std adcl jge mov (bad) leaveq pop in (bad) insl (bad) pushfq mov (bad) xor xor in jg std jge pop in cwtl rex.WRX rex.RB (bad) pop pop leaveq add in and test cs xchg loope mov andb rex.RX jb in xchg (bad) (bad) scas xchg gs lret mov enterq (bad) rex.XB lock std std mov pushq ja js stc jo (bad) rex.WRXB mov (bad) lret ss xlat decl adc rex.W and (bad) push pop int mov callq repz or (bad) add xchg movsb rex.RX movabs adc mov clc divl lods adc rex.RXB push lock std std mov (bad) retq nop jbe add (bad) rcrl and jno mov (bad) or xor rex.RX cld lea sbb loope rex.WRX rex.WR (bad) pop push iret add out sub test hlt rex.WRB (bad) mov push add rex.RX or in xchg (bad) (bad) lods test xchg pushq enterq fildl test (bad) (bad) (bad) cmp clc xor jmpq push lock std std test xchg pushq mov retq je and sub mov (bad) sbb xor xchg mov xchg mov std and (bad) push push (bad) add callq xchg out test imul xor hlt rex.RX movabs shr test mov test loop loopne jmp sbb rex.WRB lock std std xchg xchg imul retq jg rex.RXB lret lods sub mov (bad) (bad) ss test jg in pop rex.WRX rex.X and (bad) pop pop leaveq add jmp sub test test nop xor and jbe sub (bad) (bad) movabs enterq mov jmp sbb rex.W lock std std xchg xchg (bad) fnstenv mov mov rex.B mov (bad) jnp xor sti (bad) mov jne in mov int3 (bad) push pop roll fsubl adc test adc add mov xchg (bad) data16 test test callq enterq (bad) rex.WB lock std std mov outsb popfq mov retq jo jnp lret std sub pushfq mov (bad) mov xlat and (bad) int3 rex.WRB jmpq rex and (bad) push pop movl callq loopne sub sbb in add (bad) (bad) shr xchg (bad) (bad) test (bad) fmull xchg movslq enterq (bad) mov (bad) jmpq imul mov test orl fisubl mov and sbb and sbb jp (bad) ja std rex.W (bad) or xor jne rex.WRX repz clc nop movabs jmpq mov (bad) int xchg or mov ja pop xor sarb cld or xchg cwtl or push int3 loopne fxch and popfq mov retq fwait rex.XB sbb fs nop jbe in (bad) enterq (bad) mov cmovae push (bad) push push xchg sarl (bad) mov rex.RX jnp adc push sub rcrb xchg rex.WX xor jb mov imulb xchg sti jae rcrb repz jne and cmp clc adc pop addr32 xor in rex.RB fs rex.RB std movabs lock movabs (bad) (bad) mov insl test rex.WR (bad) (bad) ja rex.X rex.W rorb xor jge rex.WRX repz adc cmp jge jns int testl pop in adc xchg sarb faddl xchg xchg decb insl or mov sti lock movabs (bad) lcall xchg in (bad) lret and flds mov xor out lods push xchg test mov scas movsl rex.XB js adc (bad) (bad) rex.WR and std jae fistp push sbb (bad) movabs sti nop xchg (bad) lea rcrb (bad) (bad) movabs sti cmpsb rex.X push (bad) fldenv rex out add pop xchg (bad) cmp je pushq rcll movabs loopne rclb mov xor (bad) (bad) jmp in and int js pop rex.RX (bad) ja mov jno or xor jp rex.WRX ror (bad) insl adc xchg movsb jno push scas adc mov out (bad) xlat or mov ja pop (bad) cld (bad) mov jp rcrl pop xchg pushfq (bad) push pop mov cmc fstps mov movabs (bad) movabs icebp sbbl (bad) iret cmp fild mov add push sahf and retq push or pop xchg rex.WX jne (bad) rclb retq pop shll (bad) popfq retq xchg (bad) cmp loop mov xchg in repnz hlt ss (bad) (bad) jno mov jp icebp movsb (bad) je andb or in xchg cmc cmp xor jmpq in rex.RB (bad) mov and mov callq adc pop rex.X popfq sbbb (bad) pshufw or lahf (bad) jle stos (bad) (bad) ja in out mov or xor jbe rex.WRX add or jns rex.WRB hlt xchg cltd loop adc sbb int rex.RXB out jge add ja push xor mov rex.WR data16 out sbb out int3 loopne (bad) mov movabs retq adc pop push stc mov (bad) in (bad) int rex.R es (bad) rex.WB mov movslq es gs xchg xchg hlt add pushq out insb rex.B lods rex.WB jbe sbb and xlat popfq mov retq cmp shl nop xchg xchg mov sarl outsb (bad) jno push sub fldcw (bad) je gs stc addr32 nop out or or in rex.RB xchg mov fisubr frstor stos pop sbb insl mov rex.R adc sub callq sub addl ja out out pop or xor jo rex.WRX cmp fist jns rex.WRB rex.WX scas sbb int (bad) or in adc not mov fimull fmull mov xchg cwtl mov pop or cmc (bad) in popfq mov shll int3 push fsub sub cwtl in (bad) retq cmp (bad) rex rex.RX mov xchg (bad) popfq hlt push xchg iret mov rex.B mov retq movabs sti movslq xchg (bad) jae (bad) popfq xchg xchg rclb cmp (bad) pop loopne,pn nop xchg es mov sbb ss fisub mov jno pop fidivl pop jb push (bad) (bad) sub pop nop out (bad) fsubr xchg lock xor (bad) lahf mov hlt movsl xchg rex.WRB and loop mov or (bad) mov insl rcrl add mov cmp rex.XB xor jp and sbb pop rex.WRB in mov pop int (bad) or mov (bad) ja pop xor sarb sub mov (bad) jg pushfq jp pop or cmc fldcw mov lods rex.R sbb retq loop mov lods lods test in (bad) (bad) cmp fisttpll mov mov xchg push xchg sbb xchg lret fldt std int rex.B scas rex.X jl adc (bad) xor jae fistpl (bad) cmp push ja xchg in nop xchg xchg mov fisubrl imul xchg cs je mov addr32 nop out or sbb imul mov (bad) mov movsb pop imul (bad) push sub (bad) stc (bad) (bad) or test (bad) lods ds (bad) (bad) ja jae in and pushfq xor js rex.WRX rex lahf outsb adc or hlt scas (bad) pop mov and xlat or mov rex.RB in adc pop sarb pop xchg mov rex.WRXB rex.RXB cwtl sub push jl cmc fldcw push rex.WB mov (bad) movabs (bad) and in (bad) retq cmp flds mov push jg xchg lahf sub in and pushq (bad) sub rex.XB jbe adc and popfq (bad) pushfq int3 xchg (bad) mov pop rex.X stc in lret nop xchg (bad) lea rex.R push sbb fimul data16 imul je rex.RB stc cmp out or lea imul mov es movsb pop or add push orb (bad) cmpsb jno outsb movslq scas mov in fldl (bad) ja rex.RB rex.WR sbb pushfq xor jo rex.WRX rorb jns rex.WRB icebp mov mov xchg int xchg seta ja pop cmp lret mov (bad) mov xchg xchg in push push mov cmc fnstcw mov popfq mov adc lret movabs outsl mov enterq or rex.WRXB mov movabs and lea rex.B movabs adc stc (bad) popfq pop xchg (bad) xchg in loop push cmp leaveq movabs rex.WRB and jae mov cmc ss (bad) (bad) mov cld and test (bad) mov push int mov out add .byte xchg icebp cmp 