add dec je jo outsb fs gs gs inc js add add (bad) cmc jle mov lea jne pusha pushf pusha mov lea jmp mov pushf pusha pushf pushf pushl ret add push insb gs mov dec movw pushl call add push gs outsb fs inc imul xor cs insb add add je popa outsb fs gs outsl jne je jmp rcl movzbw and mov jmp shl cmp (bad) fxch mov cmp mov das push jbe bound sahf stos xor insl lods fcoms add clc jb (bad) sub (bad) adc (bad) xchg mov mov add popa jo imul sub add sub pop data16 pusha ror push test test add call add push gs fs imul mov ljmp inc ret hlt enter adc stos add mov jb cli outsb inc (bad) lret bound xorb movsb lret mov dec fs add mov inc push pushf rep push mov pushl pushf pushf lea jmp mov adc mov call add inc gs imul dec outsb outsw jb popa je outsl outsb add add add add je gs imul in pop add pusha pushf pushl ret add dec outsb je jb gs gs jo imul jbe mov push andb or lret xchg sub loope push out xchg fucom pop pop jmp jnp mov mov movsl jl add shrl pop xchg push fsubrp push (bad) (bad) xchg loope and jno dec mov xor (bad) rcr add jb jne insb push jb je arpl inc push dec inc dec xor cs insb add add je je dec popa outsb fs add test pushf push push stos push push pushf lea jmp add dec jae popa fs gs fs je add add je popa jae inc jb outsl jb cmc add push pusha lea jmp add dec jne je inc jns gs outsl push imul add dec outsb je jb gs jne jb inc popa je inc jbe imul cwtl push pushf les jg iret lahf push (bad) shrb jmp rcrl adc mov loope jno xor std pop xchg jne and scas dec leave xor test pop and jmp mov aaa push jg hlt sub cmp dec mov cli loop inc add imull mov shll cmp mov gs sbb imulb fdivl jno gs adc xchg std xchg (bad) jmp lcall push add xor and add add inc and add sub add add add data16 dec das add sbb add and add add jp add ja add movsb pop add scas push add add add sub add add test xor add add (bad) and add xchg das add xchg add add add pop pop add pop sub add pop add mov pop add and add and add add add mov push add out and add pop add ret add add xor add add add add add add sbb add push add jge add loopne add cwtl sub add push add cmpsb daa add shll add pop push add add cld das add arpl add add add dec push add mov add jnp add add add mov add fldt add fildl add adc add imul pop and add add add add js add aad add add add jae add add add inc add add push add and add add add add add add bsr dec mov jmp pusha lea ja dec jnp dec inc inc setno pusha inc pushf (bad) repz xchg bsr mov test dec pushf setbe mov stc mov shrd jmp out mov sbb lods fsubl loopne rorb outsl aam mov les or inc fs or in xlat neg dec rorb pop stc div push pop mov sbb add mov iret inc jecxz and mov fsubl push inc pop gs lea mov mov jmp je jne jb outsb je jb arpl jae mov dec inc pop aaa jae sti xchg dec adc mov mov in add lcall lahf les sub hlt push insl jo jb push je imul and je movsbw or shl add bsf mov pushf test movb test pushf lea je stc call add push gs insb outsl jae dec gs push call cmp pop in stc test mov mov bt call pushf lods call sbb mov stc shl mov bt cmc pushf stc xor mov movl mov shr add cmp cmp clc cmpl pusha lea je btc rcr add mov xor sub bt dec rcl neg shr bsr sar ror mov rcl adc add shld add sbb test mov pushf pushf jmp stos outsb inc repnz mov xchg sub pop (bad) and stos pop repnz rclb fcomps and stc das pop and lret xchg lea outsb fcmove mov inc and mov xor jle sub bnd (bad) dec into aad stc (bad) push mov sbb shrl adc or stos mov jg inc mov mov (bad) or ss sar or push (bad) cli (bad) adc test or out pop or sti inc jg mov inc cmp mov std inc ret lock jbe mov adc mov sahf insl jmp fistl xlat sbb fmuls jl mov or dec xor and or imul and vpmadcswd enter sbb push jp xchg aas dec cld roll pop pusha cmpsb loope cmp rclb mov fcomp mov and pop mov fdivp out mov cltd cmp mov sbb inc ret int3 add imul xchg mov or (bad) (bad) cli idiv lea leave mov sub out aad mov or sub and rorl adc sbb dec add loope mov (bad) popa and pop (bad) enter lcall (bad) mov scas lods jle scas inc mov add mov add add push pusha pushl lea jmp call push cmc ror pushl pushl stc add pusha clc bt clc neg mov pushf stc mov sub call fdivp xchg bound ljmp mov or hlt loopne pusha mov test dec jo test test (bad) xor jno ficoml pop pop arpl cmp xchg fcoms pop xor jl adc pushf cmpsl mov scas pop sub js add inc push sub addr16 call pop rorb inc push jmp pop vpextrw and lahf notl dec lahf pop and push lods fsts adc sbb adc in xchg stc push cmc es cs lcall cmp mov ljmp add sbb xchg add pmulhuw inc mov add xor clc (bad) aaa into mov repz ret jmp ljmp xchg cli loope jge cmp mov inc mov or mov outsl clc scas clc stos jp scas jge js rclb test xchg sub xchg sub mov sub and test mov insl scas lods scas jge aad lods jmp or cmp jg mov js (bad) cs lods mov cmpsb jp inc cmc jne dec jnp add cld lods jmp mov lods dec sbb sub sub shr push movsb xchg jno repnz stc stos in lods in mov (bad) out mov mov xchg scas push sbb sbb jb add dec ret scas sub sti jb inc mov je sbb aas sbb mov push push inc (bad) sub out cli add icebp mov mov shr (bad) test pusha add jae lock add jg mov mov xor xchg mov xor jp dec ljmp push testl add dec mov out mov divl mov xor mov pop xor repz pop xor mov scas outsb cs pop scas outsl das in lods insb sub repnz sbb cli stos push stos imul call jp sti (bad) mov cmp ss incb jp push pushl sub ss adc inc repnz ljmp mov mov (bad) repnz pop mov ljmp outsb lods jb push cmp int3 mov outsb repz test ja insb (bad) xor in sahf jmp jp sub lods test jo push mov inc clc sub lret mov sub pusha fcoml rcrl iret data16 ss clc mov jmp mov ljmp aad pop adcl xor cmc sub mov lock out jae test push clc mov loope inc cmc sarb ja mov add rcrl add movsl mov mov pop sub jae jp add lock movl xchg mov ret in xchg arpl xor sbb cmc sub adc inc in rcll push insl sub push (bad) cs push ss jnp js sub fisubrl std jmp insl sti in imul int inc das xor negl cmp test push cmc stc icebp xor ja outsb inc enter stc jge outsb xlat call loope imulb xor stc clc scas in xchg fildl (bad) repz add scas (bad) (bad) inc and aaa lock add mov out inc jmp test or sub lods loop add push xor lret outsb jb test aaa popl cmp hlt add lret in jle lahf xchg (bad) sbb mulb mov inc lret out stc add (bad) pop pushf jle jg in push add daa add mov hlt add cmpsb and leave (bad) imulb scas fsubrl mov jbe dec mov lahf cli nop mov pop in pop push ljmp xor test sahf test mov les jno (bad) xor push adc push into mov mov push mov lock add incl sti add mov (bad) inc jp sar push xor gs test inc mov and mov test in or lds das aad loope add ret idiv test (bad) fdivrp jp repz call hlt (bad) mov jmp movsb stc (bad) sar hlt and xor inc jle testl in ljmp jle (bad) leave lret or push not push mov mov xchg add cmp sti mov jno (bad) xor cmp repnz repz (bad) lret cld add add roll int3 add add hlt cmp and fwait hlt shll out cli les lods push sti ret mov sub fildl add in not inc sti addl add movl add add add inc test mov xchg cmc add movsb (bad) mov xchg mov mov aaa ss add scas xor mov jmp movsb incb push popl (bad) (bad) aaa es jle xor cmp loop fucomip aam (bad) sbb push mov (bad) mov (bad) sbb pop imul (bad) in movb add aam into mov fdivr aad jge js je bound mov shr jl cs dec in out stos les push mov loopne movsb imul mov xchg imulb jle jp div repz out movsb popa (bad) pop (bad) fcomi (bad) mov int in sub (bad) stc movsb repz insl jmp hlt loop popa jle not shll lods cmc pop repz push push (bad) (bad) in out les addr16 lock movsb add mov stc aad xchg in mov inc into (bad) ljmp and (bad) loop mov push pop in lods popf add jmp shrl loope push add mov ja mov in and xchg insl roll out (bad) loopne ljmp ret (bad) loope dec sub xlat jp les sub (bad) scas call jl xchg mov xchg lock add lods into pop jbe in (bad) incb sbb inc xchg lock push add das ret add add xchg push add mov add clc add push in cmp xchg bound add xchg out mov (bad) stc cld clc test inc add xor inc mov loope in pop inc (bad) stos ljmp stc or movl cmc stos dec scas (bad) mov pop dec push inc xor aaa cmc xor hlt mov repnz xor cwtl ss add iret lods pop clc push insl loop ljmp jmp repz lds aaa mov sti mov jg (bad) jb jnp jp (bad) mov outsb in push daa (bad) pushf test adc add cmp cmp push jnp jmp in inc pop ljmp cmpsb cmp lods xor jmp (bad) mov (bad) jbe popf clc out mov pop lock pop mov decl pop orb out leave xor shrb xchg (bad) push clc out mov cmp int out sub and std mov rcr je data16 out mov (bad) cmp lods adc (bad) scas repnz xor mov push fcoms xor push jg ljmp jbe dec ret cmp movnti jbe jae sti add jno std clc push mov sub scas xchg outsl movsl push push jnp sub mov pushl js std jae push negl ss mov mov fwait mov test inc mov push js cmp mov mov jns jns aad mov xchg repz in xor imul sbb scas outsb mov xlat mov and dec jne jmp ljmp sub jmp (bad) aam and inc addr16 add jle and xchg ds cmp push inc cld inc inc hlt xlat imul inc cmc hlt xlat xchg hlt xchg cmpsb aaa scas jmp scas mov imul fcmovnu cld jp xor cmp das adc stos or push cmp jge add loopne push jnp setg divl fxam add clc mov xchg xchg les xchg ljmp add clc mov out fcompl out xor add aam dec xchg add mov lock (bad) mov aaa clc dec out in and test out lods mov inc inc aam mov iret (bad) icebp add loopne jg lock mov stc mov test mov inc hlt in mov (bad) out add mov (bad) aaa fidivr sbb pop aam iret aad adc xor in jle ja mov js inc mov cli inc movsb rolb cli (bad) cmp ja out add push ds jecxz add mov jle aaa popa mov aam (bad) push jmp (bad) repz int3 jle aaa lret negb add mov dec mov fs repnz lock out mov (bad) ljmp hlt jle cmpsb add movsb ljmp inc aam iret (bad) hlt (bad) push xor (bad) mov stc aam test cmp hlt andl idivl add pushl mov add ljmp mov mov (bad) movsb fldl sbb je hlt out xchg hlt inc jecxz add or sarb orb les cmp in cli in clc jp idivb repnz mov out cmp in xlat gs divb mov test push sarb ja (bad) int3 mov add mov push mov in enter ja mov jle xor idivb ds jno out add jmp add fucom lahf cld mov mov mov in xor add ret clc test add cli (bad) cs clc xlat xchg in dec int call bnd or cmp fdivr mov icebp out lahf lock test add add pop (bad) aaa enter add add js jbe add mov jle mov jle xchg in out testb rclb icebp adc out push cwtl test scas in cld daa lret cmpsl push fsubl mov scas xor movsb (bad) sti pop movsl cld out into stc (bad) movsl dec les cld pop (bad) cld movb outsb cmp repnz mov pop lock inc repz sar mov loope cmp push cmp add adc jnp cmp test mov inc movsb inc jbe out ret hlt inc sahf loopne test shr divb call in scas in in in sub call in and call in xchg in adc mov pop movsl push inc ss pop movsl cld out (bad) stc fsubs ljmp xlat (bad) or hlt (bad) stos add int test in inc xchg out xchg lahf in push mov add out pop faddl ds lock mov ret repnz mov aaa fnstsw mov mov scas sarl pushf cld repnz sbb mov scas pop lret sub mov sub jle push adcl test or cwtl sub test movsb add pop or pop mov dec cmp leave notb pop pop outsb cmp (bad) mov insl rolb mov mov adc cmp inc xor lahf in adc add adc xchg add mov xlat cmpsl pop jmp sub in xchg pop cmp mov sqrtps inc or sub fldcw jle jno imulb jbe imul test lods pop cld movb sar sbb inc xchg clc out pop or pop push lret jne bound out repz outsb out rorl (bad) arpl pop mov frstor pop push mov hlt push push pop (bad) lret movsl inc mov pop mov pop clc push je xchg scas inc xor cs cmpsb push push xor loopne lahf inc cli and cmp pusha mov xor push pop lret arpl fist ljmp sbb cmp dec cltd aas in push cmp jns sbb cwtl xor mov xor cmc xchg nop stc xchg lret (bad) testb sub sahf inc add cmp out enter mov jno xchg add mov in adcl js lods movl cwtl mov pause pop iret and jo inc mov mov mov insl outsl push popf imul aam xchg arpl jbe or (bad) movb in adc jg out out sbb add sub mov je out fcom loop (bad) loope add iret rolb sti cmp out in inc loop add mov pop inc sbb sub pushf jns test jle mov pop jl inc pop (bad) or in add out inc test imul in and movsl pop test scas fiadd ja dec mull lret mov xor inc push xor add pop call call and lds lods dec cmc mov inc dec mov or std (bad) mov daa out test leave pop push xchg (bad) (bad) dec ja mov add sti out mov dec pop (bad) outsb xor push fdivr dec xor pop sub mov call les test pop icebp pop sbbb sub inc clc adc dec cmc pop sbb aaa mov xchg dec rolb push xchg imul (bad) add push ljmp jl lret std push rcrl addr16 repz popa adc pop cmp mov test pop push aam iret inc adc stos int3 adc dec out imul sahf add ss xchg mov out fldcw pop lahf xor mov ds jmp push inc std xchg sub adc dec stos out cmp (bad) pop lock xchg enter insl (bad) stos arpl addr16 xlat (bad) pop xor je (bad) cmc sbb mov pop aaa hlt cs sub aas int add pop mov push hlt jmp ret mov movsb icebp inc mov xchg psadbw xor (bad) out fisttp js stc popl cmpl xchg sbb decl dec sub dec pop xchg ret push pop (bad) cmovns and movsb out jg adc push clc sbb negl and jae (bad) cmp mov add aam sbb cmp inc mov popl mov cmp xchg pop pop movl xor lret pop ja jns cmc dec in cli repz roll popa dec (bad) push test (bad) (bad) out pop movsb shr clc dec repz pop and int3 sub pop cmp neg mov test test pop inc fisubr pop ljmpw jno or loopne das xchg adc pop cmpsb add insl xchg shrl pop aad and pop sbb and lods inc sar dec pop xor das enter inc push fwait xchg sahf pop sub in imul out mov loopne mov pusha adc or push shl lds add adc cld out in mov sub repnz jae je loop pop mov cltd xchg push pop ret movsl xchg jle outsb lcall in les repnz ss movsb mov pop adc in outsl popa test jecxz out gs pop ret cmp jno test mov pop popf lret sub stos (bad) xchg and fidiv arpl in repnz imul ret xor jp repz sub (bad) leave gs fiadd mov stc icebp (bad) bound pop sub sbb mov pop adc pop in insl mov mov mov stc (bad) test (bad) out in out xchg push popf out adc or jl inc out ljmp or jmp pop movsb es (bad) adc (bad) sbb (bad) sub scas scas or dec xchg push inc movsl jmp int xor out fs (bad) adc out popf or or fmuls xchg fisttp les idivb mov test shrb mov xor jne addl dec pop fstl clc incb pop inc and adc loope xchg call push mov mov into aad add and mov or lods mov lahf jno adc adc test sbb bound pop pop loop dec jp in sub imul mov push aad adc scas push adc dec adc mov inc call cli daa add inc xchg pop nop gs pushf pop xchg pop mov cli mov clc ljmp or mov or push call fiaddl add insl adc roll add pushf add rol sub not mov sub mov pushf mov pushf bt test call mov pushf pushl ret bt pushf mov mov lahf setle mov movb pushf pushf test pusha jmp loopne call mov ja mov enter sbb pop mov outsb jp mov mov mov push xor and add hlt xchg add inc sbb add scas (bad) mov movsb les add gs lods add mov add loopne sti pop into adc mov pop lcallw in and and mov and fisttpll sub bound inc sbb inc js in cmp jmp mov es sub pushf mov push (bad) jno bnd repnz pop jbe xchg and and inc xchg push das dec test mov or (bad) testl cmp fcmovnu mov imul cmp andl das sub xchg and jne xchg cmpsb into (bad) xlat xchg rolb dec es mov cs call hlt mov cli add lods (bad) mov scas ja test les (bad) lret sbb pop inc imul push je popf mov jae es fisubr lods mul mov out cs shr pushf call movsbw pop pusha mov xchg pushl xchg call add inc gs je jb jne dec outsb outsw inc add sbb fsubrl push add jmp cmpsl jnp xchg pop sub xor (bad) jmp sbb test js mov dec mov ds lods pop or fwait adc xchg push cmp das jno clc out xchg aad push xchg or add inc cmp sbb daa xor mov rcl mov bound imul xchg lret es inc add jg mov cmp mov test xor sub call imul movl or and je clc add pushf pusha push lea jmp add sub stc stc add pusha mov mov dec pushl call add dec outsb je jb gs jo outsb push add or fs je sbb lea jmp add inc jb popa je push jb arpl jae add aam test lods adc xchg and enter popa scas shrb mov mov lret sti sbb dec fbstp sub roll stc xchg pop sub imul inc add pusha mov call arpl jecxz sbb and fwait (bad) cmp loopne or add fwait cltd leave mov pop (bad) out mov lahf jl test inc daa loopne push xchg push or lahf push jno dec xor repz mov sub cmpsl stos xchg arpl daa push insb dec mov cli insl int sub loop cmp dec and out mov fsubr and les aas push dec gs sub mov sbb jbe les int3 sbb out sbb movsb xchg mov adc dec adc dec push pop cmpsb and adc sbb je cld iret xor cld lahf xchg (bad) add dec gs jo jb popa je add outsb rolb dec inc jb xor pop movsb nop and (bad) sub movsl adc sbb sbb jno xchg inc mov add jnp fs je sar sbb btc adc add xor adc pusha rcl mov pushf pushl stc test mov lea je jmp mov jmp add push popa imul jo imul ret mov es loop fnstsw std xchg push mov add add mov iret add push fbstp add lret and mov or lds inc xchg push jb je inc imul je jb gs gs outsl outsl imul add xor call add dec inc dec popa jo je imul push gs gs popa insb jne inc js add scas mov add into mov push bt jmp add movsb and cmp fsubs test out dec dec call mov fstpl sub pop pop mov (bad) mov cmp mov push adc push shll push nop int3 stos xor cmp jmp sbb lea rol lea pusha mov mov test mov jmp shl pushf setl lods movl mov ror pushf test pushf add stc mov add jae neg call pushw popfw pushf lea jo inc jmp call jmp xchg add add add shlb add add add add add bound add sub add add add add add adc add fiadd add push add or add ljmp add add add add sbb add cli add add add sub add pushl lea jb pushf push pushl ret sub stc push mov clc rol pusha pushf movb lea call cmc push push push cmp pushl pushf movw lea jae cmp cmp push bt cmp pusha lea jae pushf call add inc gs je imul push add pusha lea jmp pusha cmp xor lea pushf inc lea pushf lea call call add inc gs inc push add in bound pushf popw cmc setl cmc call stc stc cmc and cmc pusha add pusha pushf lea jmp push call xchg sbb bound mov bt xor xchg bswap pop pusha mov pushl pop mov call add push gs outsb push gs js gs imul gs pushf cmc test pusha lea jno pusha lea je call add dec gs jo gs insb insb outsl arpl lea je movzbl clc rol add or bsr mov cmc pusha call adc pusha mov lea call pusha call btc mov test bt sub call add inc gs gs imul pusha movw push lea call pusha mov lea jae test bt xor call pushf pusha rolb jb addr16 inc and mov push outsb sar fdivs push stos idivb pop (bad) cmp push xor cmp stos cvttsd2si stos push in scas les jo sbb int3 adc or cmp push jb stos popa add inc out daa jb clc or lret adc and in push jbe push add and scas dec loope (bad) mul xchg sub jbe out outsb gs (bad) (bad) mov je outsb jbe jb outsb insl outsb je popa jb popa bound add push add xor and add add inc and add sub add add add data16 dec das add sbb add and add add jp add ja add movsb pop add scas push add add add sub add add test xor add add (bad) and add xchg das add xchg add add add pop pop add pop sub add pop add mov pop add and add and add add add mov push add out and add pop add ret add add xor add add add add add add sbb add push add jge add loopne add cwtl sub add push add cmpsb daa add shll add pop push add add cld das add arpl add add add dec push add mov add jnp add add add mov add fldt add fildl add adc add imul pop and add add add add js add aad add add add jae add add add inc add add push add and add add add add add add clc test pushf jmp not lods clc jmp mov call inc setb jmp xchg (bad) cli ds and cs imul stos iret pop dec lret lcall idivl rcrb test bound mov adc inc inc add mov mov xor adc ja rol mov jnp int3 in or in (bad) ja je lock aaa popa test mov sbb (bad) and push jne aad add fsubrl testb aad or add je je dec popa outsb fs gs movsb pop pop movsbw movzbw mov pushf pushf mov lea jmp cmc test push call lea call stc bt pusha sub call and cmp jmp jmp lea shl mov mov mov stc mov clc neg mov cmp call pusha call add inc jb popa je push imul outsl popa fs imul add test add add call pop xor pop xlat ret (bad) sti call adc les jl int3 outsl test ret mov pop imul adc divb ss stc ret mov cltd mov lds je arpl xor xchg xchg movsl lcall clc ret mov pop into fistp test fcomps xlat (bad) mov das pop push xchg sub fdivrl xor into xor add test repz xlat push lahf lock xchg leave mov (bad) fidivl mov jo es rorb mov push jns aad repnz jo and sbb jns sub adc fimul (bad) mov pushf and pusha (bad) das ljmp sub or mov push sub js (bad) incl add je imul inc imul jne je and and jae jo outsl addr16 insl and jae bound outsb and outsb imul and and jns gs and data16 and and push imul and popa arpl fs jae imul outsb daa je ja jb and jns outsl jb add lea call pushf pushf adc lea je jae push lea jne push stos pushl push lea jmp add push imul insb insb outsl arpl call test call test test call neg mov mov sub pushf rol call push call fisubl and andl dec mov pushf mov lea jne pushf stos pushl lea jmp push call jge imul jns add je call lea je pushf pushf test pushf pusha movw mov lea je pushf jmp push call add lea je inc add test neg mov sub sbb mov sar dec movsbw sbb mov pushf jmp jmp add dec je jo jne jb dec outsb outsw push add fsubs fs clc bt sub stc rol movw stc cmc pushl shr movw lea je pusha adc pusha mov mov lea jmp pusha mov pushf inc pushf pushf call add dec je jo jo outsb push gs gs push add xor push pusha lea ja not dec push pushl inc lea inc inc or xchg shld stc mov shr dec pusha mov sub test bt push xchg cmp rcl mov push sub jmp lea je call adc lea push call push call jnp cmp bt add pushf jmp add dec outsb je jb gs gs fs imul or sti mov test jmp mov pusha movb stc push mov jmp push mov sub push pushf call add pushf push lea jmp push rep mov pop bswap mov push pushl mov lea jmp pushl test pusha lea je data16 imul enter add inc gs outsl insl insl popa outsb fs imul push gs imul outsl arpl jae add push imul outsl dec jne je inc jns add mov (bad) (bad) ljmp scas pop pop call cs push cmp call pusha cmc pushf test movb jmp add dec jae popa fs outsl fs je add test movb jmp push lea je pusha pusha mov pushf lea jmp push call fdivs test pusha push call push call imul movb pusha lea jmp add push imul jb add add jne push inc jne data16 add test adc mov cmpsb int3 out inc enter mov xchg (bad) push add mov mov sti decl testl out movsl out lret int adc mov sbb sub pop pop in (bad) das daa mov out cmp scas jmp loope icebp mov adc scas hlt mov jmp movl and daa pushf pop adcl mov popf xor cmc stc loop jbe jle test movsb add cmp mov add xchg sbb and xchg shl adc push xchg xchg in (bad) shr adc fistpl fincstp cli loope loope mov stos dec inc add jmp pop dec xchg push push add movsb push int3 cmc mov pop (bad) repz dec add fwait outsl and (bad) movsb dec cwtl mov out int3 cmp mov push outsl and pop in (bad) inc xchg jge icebp ret test inc xchg shr dec pmuludq pop inc jb dec aam pop add popf push xchg into mov rclb xchg fcoml and xchg cmc dec outsl push int3 call inc mov test jecxz ja push jno jl jle mov lods outsb jbe inc hlt andb icebp lds test out dec pop push mov sbb stos enter mov push stc sub inc cmp (bad) in (bad) cmpsb push and pushf cltd out mov xchg orl inc rclb push cmp add cltd push fnop enter inc in mov or push enter in clc mov jecxz jl add (bad) jecxz add push pop ss push inc outsl std hlt add sbb ficom mov into mov (bad) popf xchg mov or loopne dec loope mov in (bad) dec icebp loopne stc push popa mull push (bad) dec das pop pop loope rcrb xrelease enter jae lret cmp xor clc or out xchg cmpsb xchg add add sbb cmp ret lods out fldl sub std mov daa or jmp std loopne (bad) jle adc int sbb outsl mov leave clc das cli iret mov xchg add cmp outsb add dec ret push test popf (bad) push rcl dec idiv cmc jle loop or adc fs outsl add add daa or stos dec les ret aas xor inc adc adc shrd ljmp mov inc mov clc sub and inc push mov fwait int3 loope fnsave (bad) mov nop and cmc fsubrp data16 daa ret mov dec (bad) outsl adc inc push movsl cmpsb push dec out rclb rorb jns sahf cmpsl or rorb sbb pop in xchg loop pusha xlat test in ret cmpl arpl popa shr jns ds pop dec xor fcmovb (bad) cmc add jg outsb popf in gs jl xchg loopne lret ret jg inc test pop (bad) aaa lea jbe push insb test je aas in fucomp jb adc mov ja cmp xor enter in sbb scas test lcall or in ror jl imul mov sbb mov or mov mov or mov or or (bad) pop mov push mov push std xchg pop stc jge cmc pop push fwait or pop cmp into (bad) push jg in enter xchg push das mov push shl push inc and dec repz mov lds push and (bad) dec inc dec xor popf dec enter push or movsb hlt xor push roll mov dec jecxz add xchg loope into es push xabort or mov jnp lret lock mov aam add mov int3 cli cmpsb add mov inc mov xor loope add xchg add sub js js push aad clc xlat xor daa out out pop sub mov xchg mov and push pop into xchg inc out push rorl out dec imul stos test mov lds leave in cwtl jb movsb xchg cld or push pop adc out loope mov sbb jno ret pop jg cmp movsl lcall mov sub add xchg mov inc and lret es mov mov jns pop pop scas (bad) mov add inc inc mov aaa (bad) (bad) rcr (bad) sbb (bad) cwtl push cld push repz clc je mov xor adc inc in dec inc jg test (bad) dec jmp (bad) std hlt add outsb mov pop add out push imul movsb int3 jae clc push sub mov fsubrl push adc cld ret es imul lcall mov lret sub (bad) std pop movsl gs jecxz push jle repnz cmp les sbb fcmovnbe xchg xchg xor mov loope stos (bad) xlat or addl dec inc std (bad) dec icebp push jnp dec lds inc add rcl lds stc fisub add inc adc movsb push jne out enter jae xchg movsl mov std inc add ret sti mov (bad) rolb into add sub jl dec lret inc mov fimul jo push out push jbe jno ljmp movsb push dec push push rcl xchg or lea dec push testb cli push out dec push push bound dec add jecxz outsb xchg aad sbb xor cmpsl jo mov mov int3 sbb (bad) lock xor add test mov ret imul inc flds jp in movsl stc mov bound (bad) inc sbb xchg add xchg and (bad) jg pop jb inc mov iret lds enter rclb sbb dec in adc neg add mov nop int3 pop das or mov mov stos mov pop mov dec mov out jge push mov cld mov inc jg jnp add repz insl jo push stos add lods inc cmp inc repnz sbb dec xlat aaa dec sbb dec mov popa in flds nop mov mov add mov push test mov lahf and daa nop ret in add jp mov lahf jge push add inc in shrb fs inc fmuls xor mov pop jle lock aas adc out data16 sub cmp xor imul cmp fstps sbb cmp dec jp push inc enter mov stos xlat jge lods dec cmpsl pop mov pop mov pop or dec rcrl push add cmpsl jmp aad inc and push out insl lock in les xchg mov sarl cmp outsb sahf enter mov testb out jb enter imul pop mov mov (bad) fsub das push scas mov xlat adc div in in les or stos call pop push loopne lcall mov lds push or or in test adc loope repnz jl and (bad) aad lcall rorl in (bad) vmovntps test cli repnz dec jecxz mov pop lds int3 pop mov lret mov out stc incl dec jp cmc ret fmull jbe xor push xchg pop lret push push pop add jecxz in pop cmpsl mov inc std lcall mov mov test push addl fs fucom cmpsb shrl xor mov mov in std or inc mov xor imul xchg cmpsb rorb fild inc or test jo xchg push xchg mov adc jl and (bad) testl clc mov int3 fcmovbe mov addr16 xchg mov or mov rolb sahf clc push jp jmp push add out je icebp mov add stos push sbb (bad) in imul fwait push dec inc popf xchg cld dec xlat das mov in rcrb cmp repz out xchg movsl jecxz loopne mov mov or ja jge cmc lahf jbe sub mov nop lcall dec mov add dec and add pusha ds cli xor (bad) jecxz in test int3 adc stos es loop cmp outsb int3 cmp push das or mov ss and repz bnd dec repz and xor (bad) ds test dec and aas (bad) jne aam xchg jbe (bad) (bad) adc cmp test rcrb jg inc daa add icebp stos sarb or enter inc cmp addr16 mov decl mov cmpsb xlat aad mov out inc mov aaa add inc cwtl stc push mulb arpl mov adc test les dec xchg and test dec push dec cli orl xlat frstor loope inc add popf les sbb out outsl hlt jmp clc adc cld push in dec int3 xor mov inc sub movsl imul pusha (bad) fnstsw inc lret mov mov pop and xchg push or mov push dec push sub push xchg mov xchg xor sbb inc sbb aas inc arpl xchg adc xor sub (bad) stc pop inc loopne pop loopne cmpsb jnp sub mov xor outsl and mov add cmp into mov repz neg mov push cmpb inc jmp sub mov sub xchg and lods ja enter lock push jge cmp cmpsb int push add enter xlat sti call lahf push (bad) dec xchg push adc cmc jp inc and push out ret arpl (bad) xchg jg cli data16 ljmp (bad) ss test rorb aam mov xchg push push movsl mov repnz or movsl out out lock and (bad) (bad) shlb cmp in je incl jne fcmovu mov repz fdivs (bad) push sub out inc fisttpll pushf adc xor mov faddl icebp or jecxz cmp lods notw xchg pop int3 cltd repz cmp je test mov mov test mov outsb cmp sub mov jbe dec test call push xlat sub popa push pusha xor mov mov aam cltd xchg adc sti xlat xor pop inc dec xchg aam mov lret pop xor in arpl imul fidivl insb add and jl das adc mov mov cmpsl or out repnz sbb dec mov icebp add loop sti jecxz movsb push mov enter popa inc mov stos flds int3 in inc mov fbstp add mov mov out lea cmp and movsb cs xchg lret insb push or syscall cmp adc dec jp test push subl movl and xchg adc aam jns rolb adc cmp dec test pop out cmp loope jecxz ds rcrb or jecxz and (bad) xor (bad) xlat les cmc sbb dec xchg cmp sub jge and sbb daa outsb mov push xlat mov fucomp loope (bad) dec xchg cmp out jecxz (bad) add loopne xor (bad) hlt adc push or mov sub leave adc andb scas bound cli jl mov mov test mov dec aad cs mov dec (bad) loope or lds hlt repnz daa test in mov (bad) cmp roll in mov loopne adc sub xchg (bad) aaa int3 push out pushf (bad) daa shl out pop daa (bad) stc mov jbe cmpsl std jmp outsb fcomi iret dec ja jge xchg mov jb jecxz cmc jne aaa int3 jp test (bad) andb out jnp cmp sub xlat lea (bad) in push movsb fisttpl lods mov xchg adc jl bnd sbb aaa add scas dec (bad) lock pop adc mov stos ret mov outsl mov (bad) or movsb mov cld cld push fsubrs inc movsb mov movsb xor lods sbb mov mov adc mov mov iret les or push in fbld mov push gs xchg inc out push mov shr xor sub mov fcomi sti bound repz test es adc fs dec rolb xchg fstp mov inc sbb xchg jb xchg add rorl adc pop and mov in dec inc dec xor dec rorb inc push clc or pop in cmp and and jmp or (bad) out leave loope jge add push out and push dec aam paddsb aam xor push das xchg jbe jae add data16 inc out insb shrl in cmpsl mov (bad) (bad) mov mov aam (bad) xor mov (bad) xchg enter movsl nop add stos add jno (bad) xor dec std int3 cmp pushf push (bad) decb call xlat or mov cmp cmp out pop xor addr16 mov iret lret popf pop lahf jnp lds mov jle test fs inc xlat xor cli mov fsts add incl inc xchg scas das mov int in sbb fidivr int cmp clc leave lretw and xchg adc loop (bad) in dec scas mov dec loope ljmp leave in stc pop lcall jl lret inc out sub push dec mov (bad) aad out sbb xchg mov dec (bad) fndisi(8087 mov inc xlat mov clc xchg insb cmp mov and xchg or repz int3 in stc cltd xchg mov inc push out enter adc js push test mov call ds loope pop (bad) (bad) iret inc int3 sub movsl xchg push cmp sti pop adc mov mov out enter cmp inc pop jnp fisttp daa push into inc pop cmp addr16 popa shlb mov sub loop insl mov (bad) mov dec imul mov incb cld mov sbb push rclb (bad) out insb mov sbb ficomp test cmpsl adc pop enter jle sbb ficoml dec push into cmpsb mov and mov stc (bad) iret addr16 fnstenv in push je aas inc sub fwait dec aaa loop inc scas jl lea push arpl cmp sbb mov xchg movb in inc sbb cmp popa pop fild inc xchg inc mov cmp jno es push fs jecxz enter mov in xchg mov or addr16 popa xor nop add adc jns jl lds mov jle and mov rclb inc mov lods (bad) mov sub pop (bad) xchg push adc (bad) adc jno (bad) or clc mov repnz pop cli fcomps int3 inc int jg push popf push imul sbb lret in les addr16 inc (bad) fsubr cmp ss mov sub mov loopne push out lcall xor xchg arpl mov xchg xor mov xchg and xor dec std sti pop add xchg ss xor (bad) jns mov insl add fisub xchg int and iret (bad) cmpsl jbe push mov inc push xchg pop inc jl test fisub test dec xchg jne sbb mov lock and xchg push xchg xor or xchg mov cwtl fwait movsl inc inc xchg repz test (bad) push xchg cmp cmp insl dec pop jl outsb call mov mov bound out sub lods add xchg xacquire xchg add (bad) sbb mov add sti (bad) in repnz mov (bad) loop cmp sar cmpsb add xchg incb mov xchg in (bad) stos insb xchg pop scas jnp movsb jae (bad) scas cwtl cs loopne jno inc movsb sub xchg sub dec sub xlat add add loopne es jg mov lods sarl movl add jg mov sbb js lods rol (bad) (bad) in mov add jmp xchg mov mov and sahf in icebp imulb icebp jecxz and loop mov (bad) leave inc fdivs add add jo movsl add add pushf cmp data16 loop incb (bad) jmp roll in cld mov subl ljmp aam sar add frstor inc int les sti mov inc push jecxz fnstcw (bad) fild add in add sar cmp push xchg sbb jb add (bad) fild mov in cld and mov cmc sar jb mov push hlt jmp add aad mov aam neg lahf sarb incb outsb add lock add iret movsb fmull (bad) mov add mov ret fbstp das pop mov mov (bad) out (bad) jo,pn movsl loop mov rcl fs jb incb in std scas add xlat jb add jb add out (bad) fstpt mov out mov xor mov mov jo icebp repnz aad cmp push xlat mov dec inc out outsl (bad) mov nop (bad) cltd inc fiadd out inc cmpsl jle push add gs int3 jno rcrb in mov jbe mov xor repz push mov stc (bad) (bad) movsl sbb shll jns dec or int3 mov mov jmp ret cltd push xor inc int pushf fmuls in mov and push ja loope cmpsl push sbb push repnz mov and outsb bound outsl movsl and ret testb or imul test cmc push lret mov or and lods push push push in pop sub push add dec xlat clc (bad) out jp mov xchg adc add in push push ret lret test loopne in jl sbb pop pusha leave les pushf jae sahf pusha (bad) in cmc xchg add mov loopne lret xchg cmp mov push pop outsl adc pop lahf jp lea pusha cltd lcall jae jb xor and (bad) mov aas aad dec jge jbe dec pop add mov pop mov aam andl cmc (bad) xor mov pop push cmp cmc (bad) (bad) cmp ret mov out out sbb movsl mov divb sub inc jno popa jg lret inc mov fadds xor dec negl sbb jno inc lods int3 mov push into in decb imulb cmp movsl dec adc inc outsb cmc imul (bad) (bad) (bad) inc xor add neg xor imul lret mov mov mov ret cmpsb pop xor popa mov repz lods stos lock or push inc mov inc inc lret test cmp or (bad) inc jno push pop dec negl xor mov or dec dec dec (bad) inc mov mov dec mull jno dec add mov jns mov (bad) icebp jmp push mov out pop dec add inc scas cli sbb lcall mov fdivrs dec lret inc icebp fwait stc scas pop pop loop scas inc cmp or fs dec adc inc xor dec stos enter in test xor sahf inc loop das pop inc fisubrl fdivrs addr16 mov cs or cmpsb outsb push pushf cmc or pop mov or push repnz sbb xor cmp (bad) mov mov lret push or or lods out sub daa or lret ret das bound push mov lret cmpsb cmp mov inc scas mov mov xchg sub dec inc inc xchg or popf or dec dec lods out jo bound xor mov dec sbb sbb dec cmp dec leave repnz (bad) roll mov (bad) stc xor mov pop (bad) mulb lret out out ja or movl mov cmp xor cmpsb cmp cmp dec into addr16 xor cmp and out and xor loopne mov xchg les stos mov out je mov shll ret fcomi pusha xchg mov pop dec dec add inc cs jae pop inc jno push sarb dec mov pop outsb loop into leave (bad) or aam ljmp leave jge inc out clc xchg decl add leave cli mov nop (bad) and inc mov xrelease in add mov push mov jmp dec lds dec in push pop mov push je (bad) inc movsl in test dec mov pop inc movsb mov dec add fs out testb rcl enter hlt lret pop int jae lds rolb movlps xor sti or daa leave pop pop sar lret sarl push and pop sub xor mov fildl mov hlt inc push pop xlat fldl inc out aas imul pusha mov push inc lods jbe jp fiadd dec (bad) pop cwtl jb popf push je (bad) cmc imul dec jo gs (bad) lods pop rcrb mov inc or in adc cld jle pop (bad) frstor incb and ss ds sbb adc int3 mov push mov fisub add xchg addr16 es sbb inc pop push fcmovnbe (bad) dec in fdivrl shr xlat div lock sub into adc inc or dec sbb xchg pop test jg imul xchg xchg xchg rolb (bad) dec adc daa insb inc lods push jle outsb (bad) rorl testl pop pusha cmp pop push xor push icebp inc and and inc cwtl in mov inc popf imul fisub outsb int3 lret (bad) mov cmc aam pop call xor repz adc sub inc xor or adc inc push inc and neg sub (bad) es adc xor push cmp cs pop and adc (bad) add inc xchg stos lods mov pop pop pop sbb std dec sub (bad) mov jl mov gs cmc out pop in add in add stc add sbb test jmp pop insl mov push push push inc aad adc out std outsb or test subl rorl adc mov aam cmp inc and divb stc sar pop movb or push iret add stc jne xchg or outsb push add addl decb pop ljmp add or adc test add enter push (bad) add movsl movb push je lret decb mov aaa xchg or call add inc jno cmpsb addb push mov xlat pop pop add xchg hlt pop arpl push lods and loop pop mov ret lret pop (bad) sub in iret into xchg jp int3 push adc jmp fs or jl pop (bad) cmpsb mov les inc and loop ficom test orl loopne pop mov imul lahf sbb sbb mov or in shrb mov mov jne or mov je sarl pop (bad) lret inc insl inc inc mov push pop push xchg sub cli (bad) andl js jb pop mov mul enter icebp pop int add sbb xchg imul in lret xor dec fiaddl aam insl xor push cmp pop pop sbb xchg popf inc sub pop mov fs dec lcall aas outsb ficompl in push fisub int3 (bad) xor (bad) into rolb add (bad) out mov sti fdivl add pop es pop cmp or loopne jle pop pop xchg outsb mov xchg repnz lock mov or xchg cmpl out loop (bad) sbb xchg add push push sub jl ss jb insl pop test sub pushf sub mov add xor jo jge les cltd adc lret cmc imulb incl add adc inc or jmp sub xor mov shr inc out negb jmp jl outsb in hlt push movsb pop dec int3 jbe dec or adc out xor inc adc adc movsb cmp in test lods cmpsl pop stos subl xchg pop je bound in shlb std out add push (bad) adc (bad) xor stos int pushf pop lods sahf mov xchg pop out and inc mul aaa cmp xor jns jmp fwait jecxz xor fldl ljmp out stc pop push lret xor sub lret or scas ret movsl (bad) dec retw pop movsl push gs das test xchg (bad) mov mov movsb and out xchg xor imul add aas add repz cmpsb (bad) int3 stos out mov aam cli stc (bad) f2xm1 pop int out fnsave mov pop xlat mov push add and sub jle sbb lret repz pop push cmp jge inc lds and sub or sbb jmp faddl out cmc outsb push or rcrb hlt (bad) push (bad) out imul pop test cmp add pop lahf or and sbb adc xor or into in aad inc dec loop test push jg mov pushf bound cmp roll daa int add loop (bad) and ljmp std nop subb rclb out adc inc adc cmp out cs enter jg jp outsb (bad) nop pop cli xchg pop mov ror xlat inc aam popa dec out imul shlb (bad) (bad) xchg and (bad) int3 fiaddl enter cmp pop pop and rcr rolb pop mov (bad) je mov xchg adc lret sub fist push dec sbbb dec popl pop mov test or ss es inc aad (bad) icebp rcl add jp clc int mov or call add inc jb popa je inc imul add add inc jb gs outsb jbe jb outsb insl outsb je je imul mov lea js je shl movzbw adc dec add cmc shl jne movsbw mov neg mov call push call push sbb push xor xor fs insb add add popa jo je imul inc gs outsb jbe jb outsb insl outsb je je imul add je inc outsb fs gs gs inc add pushl cmp add jmp and cmp push call cmc push stc bt test pusha call add inc jb gs outsb jbe jb outsb insl outsb je je imul jg add call add dec outsb je jb gs insb outsl jae dec popa outsb fs add clc pusha jmp lea je pusha pushf pusha stc cmp lea jns push pushf lea je pusha mov pusha movb lea jmp jmp add inc gs outsl fs gs imul add push push lea je rcr jmp jmp add push outsb push gs js gs imul gs bt add cmp add lea pushf pushf xchg pop cwtl pushl setle lea pusha movl pushf jmp clc mov sub jb test push pushf push lea je mov bts bt and add movzbw cmc mov rol pushf dec btc mov rol call add inc insb outsl jae dec popa outsb fs gs repz shrd bsf lahf daa mov inc adc mov push test pushf push mov btc pusha mov test sub call pop mov jmp push mov sbb aas clc mov cmc test push movb pushl jmp (bad) (bad) repz arpl adc jl in add push aaa dec mov mov imul xchg pop lret pop sub pop aas inc es fwait enter pop (bad) push repz xor and pop (bad) mov (bad) pushf movsb insl jae add imul adc mov adc mov lret imul fidiv xchg cli stos scas stos mov leave rcrl insl and imul je insb lahf pushf pop mov fsubl neg add scas mov add add popa jo jb add pop mov decl movb and xchg dec fcom call mov test stc pushl mov pushf cmc movb mov call push call fistpl stc cld (bad) jmp je or add inc gs jb arpl fs jae add movw lea jmp stos pushf setbe mov mov lea jmp add inc outsl insl jo jb push je imul and jmp cmpsb ret jbe inc xchg loop cmp sbb cmpxchg je cmp lahf mov mov mov neg cwtl mov xor das push lods rolb (bad) shl cmpl std mov mov push insl mov add imul jae mov jo test js js pusha inc inc push and sbb incb inc mov push jle push (bad) mov aas pop mov xchg sti arpl (bad) out push mov loop and in jle scas push jbe out xor mov jecxz mov call sbb out push addr16 flds and hlt dec xchg rorb pop xlat in adc je scas jo fstpt mov xor push cmp loope jp adc aad xor cs scas cwtl imul ret cltd adc xor cmp sarb xor pop fstpl cmp movsl xchg aad mov mov fs jmp lea call jmp add inc gs outsl fs gs popa outsb fs gs add das cmp mov imul pop jnp push or mov gs int3 mov or bound mov imul mov fisttp ja and cmpl ja fnstcw sub mov or pop std jge lock dec sub mov pop fstp add xlat lods addr16 mov mov sub popf pop cs ret jmp mov arpl xchg mov outsb or dec push push sbb pop add jle addl out test je fnop nop mov mov jle shr push arpl mov fisubr out mov sbb push fidivl cmp lods or xor stc and (bad) (bad) or push mov xor cmp dec xor jg in nop mov or das fwait mov rcl dec and (bad) repnz (bad) std cwtl ss xor cmp fmuls push out mov jecxz xor cmp sub dec outsl int3 ja jmp adc lods (bad) mov mov mov cmp fldcw lret ror add mov push inc inc sbb testl out lret clc js cmp cs cmp packuswb rcr mov jl ljmp push cwtl mov push cmp push aam mov sti lahf pop imul dec xchg out stc into (bad) mov or jno and cmpsl inc mov mov adc jecxz ret call xor jmp jecxz add inc gs jns je insl push imul mov add cld xor cld xor nop mov mov iret cmpsl js cmp push pop mov mov stos sahf add push cmpsl push mov test (bad) cmpsb popa or test lods scas add cmp push cmp js push push xchg sahf iret iret xchg xchg out out mov xor loope xor mov out pop jno jge dec cwtl mov jns mov mov adc cmp jb cli xor sub in inc adc add lcall std inc in fsubl lods sbb popa adc jmp mull pop xchg dec cli lcall push idivb inc cmp mov lods fsubr (bad) ficoml inc cmp mov inc test jge jmp (bad) mov fsubr sti mov outsb inc fwait stos xchg bound xlat mov scas pop push insb outsl xchg nopl mov jmp call cmc push pushf call push xchg push lea lea jb pusha movw movl pushf mov pushf pushl ret adc pushf push push push pushl ret sbb cmp fnstsw jecxz xchg scas or xchg inc mov lahf lods cmp popa loope cmp (bad) std into cmc (bad) sbb and pushl pushf pushl ret lea jae cmp call add inc gs outsl arpl push imul gs imul gs push call clc test add clc mov pushf mov test pusha pushl call lret into loop stos mov mov (bad) repnz adc dec push cmp mov add enter adc xchg incb aad adc pushf push jns lods xchg out (bad) movsl movsl xchg stc imul (bad) jb mov or aas imul mov bound sub insb lods mov mov xor sahf mov fsts popa push cmp bound sbb das and pop sbb (bad) data16 lods pop xlat repnz cld out lahf imul (bad) or mov xchg or and sbb or sbbl sub call cmp nop mov in popf xchg test fcmovnb pop pusha ret fsts xor lret sbb mov dec xchg lods mov (bad) jmp popf sti arpl push aas addr16 pushw push cmp loope in adc pusha push mov and and mov aad aam scas sbb sub dec inc popf pop xchg ss adc testl or faddp bound insb xor iret sbb test and hlt aaa or adc jns add insb push outsb ja outsb add test (bad) (bad) jmp jmp push call movsl cmp mov push test cmp stc mov inc sub push rcl bts rcr bsf push btc cmp mov not btr mov sub sub mov and sar adc rol sub xchg not jmp lea je push and mov push mov mov lea jmp call bt bt test pushf jmp pushf push lea call pushf adc pushf lea jae jmp jl push lea call cmp bt pusha pushl sub call pusha push ror dec xor not add cmc add rol neg neg setl rcl sub rol clc ror mov rol jmp imul cmpsl mov dec jecxz pop cltd repz je out or out bound cmc dec mov lcall nop movsb inc jg xor cmp stos push leave (bad) jl cmpsl mov andl mov (bad) mov mov add inc popa fs jb je push je add scas or dec mov sbb add inc gs push dec outsb outsw add das lock ljmp sub fs insb push push or xor xchg rclb ljmp je inc pusha mov xor jg aad das pop sub push dec pop xchg repnz out (bad) mov out xor mov jge mov outsb jge pop inc sub mov xor mov mov shlb mov pushf fcomp sbb sbb divb popa imul cmp xchg insb inc sub int3 pop les jae jae mov aad mov (bad) push arpl xor ret jns insl inc fcoml cmpsb (bad) shrl in sbb cld (bad) stos out repnz mov and in hlt out mov push and mov divb sub in mov mov or or xchg sahf bound sbb sar xchg push cs ds push add cmpb insb in sahf push jp (bad) cmpsb and jmp ljmp lea je pushf bt pusha test pushf jmp lea je bts dec push cmp add cmc inc pop xor mov stc test call pushf mov inc inc call test cmc stc test pusha lea je bswap shrd add dec cmp rol mov bt jmp jns or icebp out and push stc stos and pop push push lret out jae pop dec inc (bad) jmp and jo push push add arpl adc pop mov push add xor cmp nop outsl inc sub aad ss mov out ret inc xchg jmp (bad) sub frstor test stc xchg cmp jns xchg cmpl dec mov add push gs outsb jbe jb outsb insl outsb je popa jb popa bound add outsl jns lea je sub ror mov shr btc mov cmp clc pusha pusha add pushf stc pushf cmp mov pushl bt test call pushf movl pusha pusha mov mov pushf push pushl ret bound dec dec cmp push iret sbbl nop pop jl add xchg (bad) loop add bound xor adc out repnz (bad) and repz mov adc mov and push adc cli into push pop xor sub imul push ss and mov dec aaa mov (bad) lahf orl dec mov enter lret (bad) xor sub in mov or negb inc adc xor sub sahf xor cli fisubr adc adc mov or ret incl in int3 arpl cmp (bad) lret daa and mov daa cltd icebp divb int (bad) movsl mov in add xchg insb aaa clc enter jge jecxz ljmp dec push dec out xchg xchg lock jge xchg in xchg pop pop adc or adc cmpsb int3 cmp adc out cld ror push pop mov scas xlat test popf push push repnz xchg adc jecxz xor fildl inc or xchg daa dec call xchg pushf (bad) push aaa dec xchg mov and jns adc repz add fs and bound popa jmp mov mov cltd mov into jns test or and jns pop ror jae jnp jae rcrl add imul incb pop shrl pop (bad) pusha mov mov lods jecxz mov fadds pop jo xor (bad) jnp ja ja pop dec dec sub sbb xor in mov mov inc leave std loope push gs mov sbb in xor or js mov rolb nop rorb rorb mov add pop fwait clc mov mov movsb fsubrs pop daa sub in inc cmp test mov shrl dec cmp push fistp add sahf sti mov into stos in loop lcall push (bad) xor lds mov (bad) ja xchg fimul dec int add ljmp or call xor (bad) mov dec je int xor outsl das jae sbb (bad) cld jg mov inc inc mov or xchg dec xor push mov adc popa mov aas sahf pusha lahf pop ds roll (bad) out (bad) std cs push inc push dec xor cs insb add repnz mov sub mov mov push push shrb push or rcl in je xchg in (bad) xor ss unpckhps popa mov dec popa mov mov rcrb test ret push rcr not add stc clc shld movzbw mov data16 mull fisttp mov jp pusha call add push gs jb popa je dec gs js add sub jle push test pusha test pushf mov push movw lea je inc bts ror movzbw mov lea jmp bt stc call push lea je cmc cmp jmp jle add jp push aam idivb or jg mov int3 mov jge dec (bad) inc inc push (bad) jmp pusha or dec jo sbb sub les dec arpl jp popa stos push sahf mov sbb (bad) sbb in pop shl int test stc mov (bad) and call arpl mov les ret out fwait cmpsl and cmp xchg push inc jle mov popf test pop dec adc adc es into sub mov stos inc and sarb mov and sub cmp fsqrt dec sbb mov mov jp xchg sahf ljmp push dec mov mov xor sbb rcll ret pushf push lret rcrl daa pushf mov movsb cmp jbe movsl test adc cmp xchg std mov xchg jge lds stos push jb fiaddl fdivp sti mov (bad) repnz push lods fadds or jno cmp or decb xor mov je ror mov lret fbstp hlt and xor dec xor mov cmc dec sbb mov in or in lcall pop xor jb push rclb cld call addr16 jge ja cltd mov sub inc adc adc xchg cmp shrb ljmp decl push push cmp cmp add add call sub imul sub xchg fdivp pop out inc stc test inc mov frstor dec fcmovnu mov or loope inc jge and add ror sbb and lret rol pushf jmp mov jmp clc cmp add pushf movb push lea jmp add inc gs outsb jbe jb outsb insl outsb je je imul inc call add inc gs push popa je dec popa insl gs add add add pusha pushf pushf lea jmp (bad) call arpl sub or mov stos ret sbb das cmp cmp cmp ljmp mov incl (bad) jl fidivr addl pop jg (bad) pushf scas jl pushf mov idiv out push dec call bt pushf add mov movb lea jmp add dec je jo fs gs gs dec gs fs push add (bad) add btr mov cmc pushf test mov pushf push lea je jmp add inc gs inc dec inc push add jnp (bad) lcall sub ffree (bad) decl mov bt push cmc cmp movb lea jae push push cmp pushf jmp pushf inc pusha mov call add inc jb popa je push push add loopne lea jae jb test push sub pusha pusha lea call pusha lea jae call push call imul jae popa addr16 outsl js add mov add clc hlt std dec mov addr16 add mov rep out addr16 add add dec idiv aad mov add ret mov add mov add mov mov dec ret mov add clc inc clc retw mov add daa inc idivb mov add movsb test cmp mov add push inc not out addr16 pushf mov imul addr16 add mov addr16 add xor lret into mov add and cld fild add add cli pop mov add arpl loope mov add mov repnz mov addr16 dec xchg call cmpsl mov add inc repnz mov add xor sbb mov mov jg (bad) jo (bad) sarb adc mov or rcrl in cmp push fmuls sub ss mov adc push fs insl cmc stc (bad) push pop loop in mov jp xlat xor (bad) into mov lret xlat mov xor insb jae cmc imul mov xlat mov data16 cmp inc imul out loopne or push xor decb sti cld mov adc subl mov xor pushf adc repz ret call mov cmc je push bt mov cmc pusha movb mov call mov lea clc shr rol mov cmp push clc test pusha lea je jmp add inc gs je imul inc add jge (bad) (bad) call push call mov and movw call add dec gs jo insb insb outsl arpl push call adc fs jne push lea call pushf mov lea jmp push call fyl2xp1 sbb add popa jo gs jb jns jmp and mov mov lea jmp shrd mov jmp add dec outsb je jb gs jb arpl jb push add push call call cmp cwtl dec in popa push mov jns ja add pop imull rcrb jb xchg pop cmp xor jb fnop and and jb jg cmp and push inc cli aaa repz jno (bad) mov fdivrs ret inc sub cmp dec xchg jecxz adc cmp pop jl dec imul fdiv int3 dec jmp in push push loop cmpsb jl xor and (bad) xlat sbb aam mov in mov aad cmc in loope inc addr16 dec mov lret xchg lahf in inc gs mov in cmp xchg enter mov pop lock js push rcrl lret inc sub jl mov js fs push ljmp testb inc daa xor sbb dec sub pop fs cmp add sbb aam in xchg mov push ret pop hlt insb mov test scas jle xor outsb mov mov cwtl add pop jne std fxch or sub aaa fwait (bad) verw mov add dec cmc insl mov pop ret punpckldq xchg rorb loop sbb dec add or add mov idiv xchg mov in push fimull or stc lcall stc mov fs je test pusha add pushf pusha lea jmp mov lea jmp push call add mov add dec outsb je jb gs outsl outsb outsb arpl inc mov rcr das lea rcl mov cmp add jmp cmc cmp pusha lea je pusha stc pushf pusha cmp pushl jmp lea jne pushf pushf pushf jmp add push addb adc cmc jb inc (bad) idivb std jae lret cld test subb jns (bad) (bad) mov lds das les aam dec add add jl sti les lret (bad) pop xchg push push orl mov lea outsb inc je sub insb and test sbb lods mov fsubs in nop xlat push push sbb xchg add pop les inc push or aam fucomi out xacquire (bad) xchg scas pop xor or es jbe (bad) in inc aad gs popf mov leave scas call inc push call fdivr add lock inc or in mov out sahf addr16 sub clc movsb mov add inc xor xor or movsb in incl in int3 cltd outsl stc fs rolb stos roll jmp imul add repz dec sub dec lea stc in clc xchg add xchg jle hlt xor cli clc inc in int3 mov cmc dec jle lock add xchg jbe idiv in addr16 aam loop pop inc (bad) inc inc aam xorl add es or add pop mov icebp mov xchg fisub test cmp dec pop or lds int3 int3 popa sub jb ja daa jne repnz push or not mov js test jb sbb (bad) ss add mov mov hlt jne add and js movsb hlt jmp out fisubr inc out pop jle add mov or mov repnz fbld lock mov loop in ret loop sbb dec xchg dec xchg cs test shlb (bad) mov mov sub int3 fs add xor (bad) mov out popf addr16 sti mov mov adc cmc cmpsl jl sub jl es movsl loope mov mov push push inc (bad) pop std movsb fwait mov adcl xor push jmp clc cmpsl fcomi jo inc jno xor cld push loop (bad) bnd int3 scas add (bad) loope (bad) jmp or rcll call xchg lds add jle jb sbb in add jl,pn pop movl inc xchg arpl ret daa add xor cmp pop cmp jmp movsl hlt or js,pn test adc cli fimul les movsb jno loop out jp jno fwait mov mov jp cmc xchg (bad) repz cli pop imul cmp test inc fdivs dec loopne stc repnz sbb add jno cmpsb std (bad) jns sti rolb xor fcmovb cmpsl add test cli xchg push incb add add jne pop push mov add test mov (bad) ja repz jo add xlat gs sub jg xchg fisubl fisubl fsubs adc lock cmp (bad) jb icebp inc lret jmp mov and aad cmp aas cmp cwtl out imul push sub mov movsb cld das (bad) scas je xchg mov push cmc jge icebp ljmp in test (bad) pop (bad) (bad) std enter lods scas sti add outsl mov ss (bad) mov movsl repz xor cmpsb std push push dec icebp pop fstpl (bad) (bad) or adc adc (bad) jmp fs mov (bad) inc std orb movsl mov jmp push arpl aaa stos and mov add push stos lret stos sbb lds xlat cmpsl xchg ss mov xlat lods hlt loope,pt pop out xchg dec in and lock rorb out int3 repnz sbb outsb mov mov aad mov (bad) cmp push test cmp (bad) je test xchg mov out jbe ret out pop sbb (bad) aad jb mov pushl sahf dec add mov in pop outsb movsb mov out push cmpsl (bad) inc inc out aas lret cmp aam mov add in pause push addr16 or inc lahf adc movsb xchg pop bnd push push dec cmp jbe fist jbe mov jb mov xchg popa (bad) pushf loop int3 fnstenv jns std mov (bad) mov das je sbb cmp mov add fs push add in divl rclb idivl bnd test lcall push push add jecxz add xlat scas test push test add push fadd gs add sahf in add cmp scas xchg das test and push imull add jmp sti int3 inc mov lods int3 cmp mov (bad) test scas xchg lea cli inc xchg clc inc cmpsl jb loop push mov (bad) mov jbe (bad) mov stc imul out inc mov pmovmskb jmp add stos (bad) fdiv out inc cmc popf sarl mov or mov push cli movsl enter (bad) repnz (bad) xor sti fs mov cwtl add dec hlt dec test (bad) mov sbb movsl push fdivs repz enter xchg (bad) int and movsb out dec clc das jb popf hlt and jle ja add jb fdiv ljmp movsl mov into xchg mov xchg jg icebp stc insb mov mov (bad) add add aas sub js add and sahf xchg ret aad stc stc cmp push or (bad) xor ljmp stos dec shlb (bad) movsl test int3 xchg xchg aaa xchg movsb sub pushl jle in jno loope iret loopne fcom add out sarb out (bad) mov in (bad) jecxz js cmpsl (bad) outsl pop push stos adc hlt sub inc int3 jecxz data16 int3 mov sub and jecxz inc aaa mov mov mov sub jnp add out lock out mov int3 (bad) in jae sbb std imul das popa out push fsub cmp lea push sub outsb mov aam imul mov xchg int3 jle cmp mov inc lds dec push addl jno xor js adc xchg int3 ljmp callw out (bad) mov fildl add add sahf insl mov cmp and lods jb and (bad) enter stos shrb insb (bad) jle es mov jno imul cmp push xchg cltd out call loop push mov mov daa inc inc movsb and imul pusha cmpsb (bad) dec xchg in test icebp inc outsb (bad) aad mov xchg iret jne pop xchg and adcb push call sbb push sub in (bad) in repnz add les stc mov xchg nop (bad) fnsave pop movsb fildl push pushl hlt std clc aas (bad) (bad) sbb addl pop jle (bad) call out xorl outsb clc stos (bad) lods (bad) pop add inc cmpsl push imul xchg rolb cmp jne or cmp or std movb dec imulb outsl push add aam test xor es add mov mov xchg cmp (bad) jecxz loop imul movsl jae jbe int3 test int3 sbb ljmp (bad) mov leave jae sbb and add jno test mov mov enter cld jp divl imul divl (bad) imul (bad) int3 jmp pop sar fldl2e push mov repnz cmp xchg ret jl stc movsl out ja jae jge int3 push cld ret sbb scas ja dec fistl lret vpavgw cli mov in loop aam mov faddl cmp push movb fs jg mov neg mov mov insb mov aam jae mov pop insb (bad) jl mov (bad) mov push movsl fs xchg outsb dec jl jg mov mov push in sub outsb and movsl jne nop (bad) cmp cmp or mov xor or imul insl stos cmp js gs mov out add dec add xorl pusha xorl add mov out les dec mov adc sbb (bad) jae lods aam pop inc incb cmpsl xchg jmp and test cmp aas and xchg cmp movsb out mov movsl (bad) (bad) jmp cmp jle hlt subl push cmpl lret (bad) jo inc and lods mov repnz movsl lahf hlt push cmp fcoms push mov incb out xor std add add push mov jb pop lock in xorb into jmp fsubr or repz mov sub jo push out jmp inc mov hlt test leave aam ss dec xor idivb xchg mov add dec fidivr jmp jno inc int3 adc lods pusha (bad) (bad) ja xlat push cmp out (bad) cmp (bad) int3 jg movsb test ss push insb movsl std mov push mov or lods fisttp push ret pop data16 stc mov xchg sub add (bad) jg mov jmp xlat jbe xor sub lcall imul loope pop xchg push out clc push lods scas sti and (bad) mov call fdivrp jg mov xchg dec mov repnz out lret lods ss push cwtl push xchg out mov dec or jno cmc cmpsb sub cli cmp inc and xchg cmc loope add pushl sbb or sbb mov or loope cmp in sbb jo jo add rclb sbbl add jbe cmpsb push mov push bnd pushf gs lock repnz mov ja mov xchg mov add in push out bound cmc movb movsl mov add (bad) sub or inc push int3 push jp popa push mov sub in mov jae (bad) insl add adc pop lods out in mov jg (bad) mov dec xor fs repnz cmp sahf lods int3 or imulb mov sbb inc or cmp adc (bad) cli jnp inc xor call xor add mov push push out dec inc loopne mov ror fildl mov inc repnz push inc sub lds add mov cmp push popl mov je dec xor mov aam scas call cmpsl test inc push xor mov jne add fisubr insb mull call lds jl cli xchg stos les (bad) and push inc stc in stos addr16 enter cmp push push (bad) aam sbb cmp std out ljmp jmp jno fiaddl push loop inc mov lock jecxz xor je cmp (bad) lds inc fs sub or mov xchg pop inc xor les mov xlat pop stos xor xlat out lea and ds push notl lods dec (bad) add in mov (bad) push (bad) negb cmp testl mov fdiv das mov lea cmp nop lsl mov add lret cmpsb xor dec pop jnp outsl test cltd out cld push ljmp mov out lock xchg and (bad) xor cmp subb fdiv adc int mull es jge jb xchg shlb out repz cmp jne jae sbb cmpsb fiadd add mov jb bound push cmp lahf xlat cli bound push rclb add cld int3 aad and jle mov dec mov push mov mov test in test mov or sbb (bad) je and jmp jp add xor sti and into add mov aad ss fcmovnu mov adc out inc xchg (bad) xor cmpsl push outsb mul fadds sub out jnp or div add mov inc pop dec mov xor stos int3 or pop push aam add repnz in jmp inc (bad) int3 push mov push leave std xchg lret pop sbb mov lods iret mov adc testb (bad) in cli xor mov cmp int3 mov sbb pop fadds mov cmp cmpsl (bad) sbb nop xor jb lret out (bad) pop push ds mov out gs fidiv loope clc outsb fdivs clc cmp push push imul icebp (bad) mov xchg int3 cmp inc leave cmp ret adc notb mov in popf ret stos inc add push lods xchg mov (bad) cli repnz cmp fild mov jo (bad) int3 mov hlt int3 adc cwtl sbb jp hlt repnz clc jb fbld cmpsl stos sbb stos fmull (bad) jg cli jp stos mov xor add jle jg xor jle jmp mov jo aaa (bad) leave adc clc xchg not xchg adcb lcall add mov in int3 aas arpl into mov and stos scas xchg in pusha xchg xchg push add jb and out das add add cmpsl dec mov push xchg lock out jne out inc int3 push loopne hlt repnz cmpsb out ss shll int3 xchg stc xor inc test jb iret test cmp pushf ficom cmpsl or adc mov jle ss (bad) cld jnp sub std cmp repz sarb in dec and dec push loop mov inc add jle xchg not div sub xor hlt or cmpsb aaa lods (bad) pop scas jbe mov out roll pop aaa cmp hlt mov xchg rcl mov clc (bad) rcrl imul pop jg (bad) std dec (bad) movl test into pushf cltd enter lret js add mov in jbe mov xor shl fimull pop ret int3 xchg icebp xor xchg jmp inc in imulb (bad) int3 jnp and lret fstpl (bad) ss cltd jle aam jmp jne repz cmpsl jbe mov jne jecxz fcomps cmp (bad) ret int3 fidivrl movsl fnstenv xlat pop bound sub jg add addr16 ret adc clc inc test mov pop sar mov and in push add cs int lods mov (bad) divl int3 popf xor pop adc pop jb jecxz je rcrl (bad) int3 dec mov xchg test (bad) (bad) lods and xchg pop jb not add int3 pop cmc das fildl in (bad) je cmp (bad) (bad) jns int inc int3 je adc cmp jbe aas (bad) (bad) push das in xchg rolb add dec mul cltd in (bad) mov sbb rcl jl jmp inc (bad) (bad) ss aas xor in imul inc int mov pop add repnz sub mov mov push int3 vmptrld jp in loopne (bad) int3 lea (bad) push push int3 push add testl fidivl je (bad) pop jp cmpsb add cmp and xchg xor add (bad) out int3 xor fildll roll in notb add xchg pusha cmp in notb dec jae mov xchg (bad) cmc mov in mov mov out out mov inc int3 push mov sarl cmp sbb xor jecxz and jb xchg in into aam jo loope out and aas stc pop test sbb mov in divb aam lock mulb loopne cmp aas mov xchg arpl or xchg popa add dec (bad) jb dec push sbb jae ret loop fdivr fs jae cmp xchg lret cmpsl inc notl repnz int3 cli imul sti loop aam loop leave xor lret xchg jb cmp (bad) stc inc imul mov out pop out lock pusha xchg sarl inc ds cld adc push jbe aam loop push jle out or int (bad) movsb in add movsb ljmp and enter pusha outsl jecxz mov add out jp add jle sub aas aad packsswb mov mov inc out add dec in movsb or scas test in and pop add lds out cli nop clc mov cmp in sub dec xor pop xor sbb (bad) pushf mov stos jmp scas sbb shrl or jmp scas xor push jmp cmp mov popf push scas loopne cmp (bad) mov dec lock jge stc je imul call lods and in xor mov repz jb lock jp mov outsb fmuls jle int jb jge lods cld into push loope popf mov sti ds pushf add mov sub mov dec push int imul int3 dec cmp or xlat sti mov push insb icebp loope jb imul mov test sub jae test movsl push cmp sbb jae mov mov fs (bad) in fdivr mov inc fiaddl mov bound fimull jb mov mov fidiv mov cmp clc js xor mov (bad) clc repnz jb mov int3 dec cmc and fwait clc mov jmp jne outsb repz js add mov push pop add movsb lea cmp jbe jae (bad) fldenv add mov xchg xor ss stos movb cmp out hlt jae in je movsb int3 dec push xor push subl arpl xor (bad) adc mov (bad) cmc (bad) in aas in fbld aam push mov cmp ret adc in int3 push js (bad) scas hlt andl sti rcrb adc addb scas (bad) scas mov (bad) (bad) mov icebp mov xchg inc in sub sar out jecxz out cli int cmpsl mov ljmp sti test mov push push cli mov ja orl int3 les aad in (bad) and cld (bad) pop mov inc in int3 push clc stc or push or ss dec lds lcall clc lret sbb adc repz cmp add in and pop mov clc sub hlt and pop push xchg pop das into lcall push and inc and push hlt fisub jae cmpsb int xchg pop jle and mov sarb stc inc sub jp add fnsave mov cwtl idivb and push push add sbb ss mov xor mov repnz dec (bad) fwait jo xor jg hlt iret mov xchg xor jp fsts dec inc jge jo outsb arpl pop push sub mov mov xchg pop (bad) std leave in mov lock (bad) popf notl add (bad) sti cld aas add cmp fldt aad icebp add adc rorl movsl outsb shr in into movsl mov fisub or (bad) (bad) cmp pushl nop xorl in pop (bad) idivl cld (bad) mov jle idivl cli (bad) mov jle idivl clc (bad) mov jle idivl idiv mov jbe ss divl hlt pushl cmc divl xor ret xchg pop xor in repz in mov xor in clc in mov xor in stc jecxz in jno xor imull out jg xor outsl movb in inc ret ret ret ret ret ret ret add inc fs inc mov vcvtsi2ssl jle add ret (bad) jle inc jle add ret jle cmpl jle add cmpsl xor push mov cmpsb jle mov cmp das cmpsl jg ret inc movsb daa (bad) add in shll inc movsb and (bad) jmp hlt mov mull movsb and jle mull aas jmp hlt cld mov mov cmp and std mov mov cmp mov mov cmp aam add add adc fadds out push mov testb (bad) call out fs stc lds sub add aam xchg into add add (bad) aaa (bad) cmc add outsl insl sub mov std lods mov ror cmp aaa enter es (bad) or (bad) or in loope testl aas ljmp andl orb adc mov pop jecxz in add cld pop call add cmc out or clc push dec push sub dec ja jle sub inc or faddl jbe jb cmp inc xorl out mov lahf clc pushl test jae (bad) push movb fs in xor jmp mov push pop out aam repz jns sub mov clc inc and enter pusha das imul push cmp cmpsl mov ds dec mov imul movsb fnop loop test push or (bad) imul mov jecxz repnz aaa adc (bad) cmp mov rorl repnz jbe xorl cmp pop cmp je insb add outsl push fsubp jle mov das fild out jns pop (bad) cltd outsl std jecxz (bad) add shld ret lret addr16 push add out ljmp out out ljmp arpl cs and lcall in adc dec inc stc jb insb (bad) int3 stc ljmp imul push fwait mov sub in std push jle ljmp addb (bad) jae int3 push push cwtl movsl cld rorb aas push les sub (bad) xchg in jb (bad) idivl add ljmp adc inc std flds mov and cmp push mov jle ret mov in mov fiadd push cmp ffreep ss clc out jecxz add fwait adc mov (bad) addr16 xchg (bad) jae addl sbb lods repnz stos jne cwtl je lret push and mov sbb cli lahf jns nop inc jmp (bad) popf sti push jge xchg xor stos jle loope (bad) mov mov cld fisttpll xchg in cmpsb arpl sub mov xor push (bad) mov ljmp add xchg cltd add lret jmp jp out mov pop jae or mov (bad) jbe imul push push dec jmp divb ficoml fbld cmpsl call ss jbe cld imul dec xchg mov jmp push mov test aad mov aad jbe add mov sub mov mov loop add aam sbb mov jb adc cwtl xchg push adc in inc pop inc lock mov jg,pt dec std mov scas push mov mov out mov call call add cltd (bad) lcall cmpsl sub shrl ss cmp shrl lods lods push fsubr and push ds out add jmp lock cli aas (bad) int ss mov scas lds out scas cli sub in mov lock cld cltd jo test cwtl hlt mov mov test loope sbb int3 push fiaddl stos ficompl jg mov cmc push testl lcall inc cmp inc lock mov jmp jp jmp push push lock add ljmp sub test cwtl mov sti js push (bad) add fdiv fsubp or cmp scas faddl adc notl in push inc cltd pop out insb xchg imul jns mov inc push stos add dec adc inc mov mov arpl add jns inc push or fs dec xor (bad) jne loop fdivrs push dec repnz pop (bad) sbb sar je punpckhwd std icebp and xchg cwtl into aam scas sti add push inc int3 stc std xchg add add and mov (bad) add incb jmp icebp dec icebp ja and push add mov mov jge roll sbb call jae rorb idiv hlt in insb or movsb cmp fstpl aam outsb je mov push in lret lods rolb stos fsubs loop fwait (bad) movb or repnz push aas push insb push adc add sub mov hlt hlt in add hlt lock inc rol dec adc fist sub in add mov dec jno fcmovb nop push std add mov iret out cltd roll add pop lock lahf scas jp jl sub and xor bound loop fdivrs es jae fiaddl pop pusha xor (bad) pop pop inc inc xchg cmp ret fnstsw xor add jmp mov pop inc ljmp jmp push xchg dec xchg mov mov es inc cmpsb divps scas mov inc icebp push add add cli jp xor inc cmovne mov push xchg int3 xchg enter pop sub mov or xor jmp xchg es sub les cmc stos dec push imul mov movsb inc inc cmpsl mov inc shrl mov push inc mov xchg jbe lods inc mov out cmp dec decl pop cmp aas int3 xchg es fs sbb stos mov inc clc fisubr xor into mov movsb inc inc (bad) push cmp inc pop push out fs xor fnsave lret ret mov xor or xor jp dec dec jae jb repz pop adc push mov xor mov repz and stos fwait mov push out add xor sti lock xor mov ds lods popf cmp cmp cmp push nop imul mov xchg inc loop mov add icebp (bad) xor fs jo dec test (bad) data16 ds adc aaa xchg je xchg add mov (bad) xor ss cs sbb dec mov (bad) (bad) cld daa popf in pop fldenv dec stos inc mov mov (bad) jo push imul stc mov mov aam mov clc dec add daa cmp mov mov clc pop es ret xchg jns popa mov scas adc stc jbe mov xor pop add ds add pop andl mov imul or push add xchg sub (bad) ljmp sarb out mov ljmp sub and push bts jg inc or idivl (bad) imul mov outsb sub decb inc (bad) xor loopne jmp cmp adc sub lret or pop jge cmp movsl jmp xor xlat pop aam xor add cmpsl stos adc in push outsl (bad) (bad) mov mov aaa dec cmp and repz incl xor out or loope sub or and sbb std xor icebp cmp iret inc add inc push xor mov test jb ret cwtl outsl daa daa lea xor sub cmp aam mov fistpll pop adc int3 cmp mov cmp push add cli inc xchg arpl ficom jb cmp jb jno cs (bad) push or in in aam inc lds out push lock insb rorb jg inc pop mov clc cmp call lods add push je xor popf cld out fsubrs cli and xlat adc or ret clc repz enter sub sti and or out mov jno ss outsb sti fild mov stos outsl lods stos test sbb mov lock jae in add fs sub jns xchg dec jns or (bad) (bad) mov loop int3 call mov data16 lahf and movsb inc cmp cmp clc mov jg inc imulb test dec add mov ja xchg in cmp clc sbb adc (bad) push add cmp mov lret sbb sbb or jb cmp jecxz push bound mov dec mov mov xor pop pusha and idivl push ret mov mov clc mov (bad) je cmpsl inc decb push pop mov mov stos ret popf ds mov addb mov inc into inc and loop (bad) cli fcomps lods add or popf pop lods jg insb cmp enter movsb add jmp sti mov cld sarl xor iret xor faddl outsb dec cmp (bad) mov xchg sbb jl pop jp xchg ss (bad) cmc clc and mov clc push test imul inc andl repnz xchg xchg stos or repz popf sbb mov fistp cmpsb andl jp out xor sub fisttpll fdivl cmp mov mov mov xchg dec mul stos xor pop stos add jne (bad) cmp into lods mov mov sbb cmp repnz sbb repz mov sti mov mov jo lret idivl mov sti out aad push inc aas xor out lcall mov add ss mov push sub ja pop jmp hlt xchg das jg test sub icebp jno bound mov add sbb into int3 mov and (bad) mov icebp mov inc int3 incb sbb jb dec sbbl mov cs (bad) or inc add es lret rorl out dec jb repz outsl dec xor data16 in push repz cs xor popa (bad) pop fldenv arpl or xor jae cmp loopne cmp bound leave out jnp jno push dec daa hlt xchg add movb scas jecxz inc (bad) int3 ret test aas add mov add add ret repz je (bad) rcl pusha add repnz lock data16 xor cli nop cmp xchg lret jl mov jge jbe sahf adc mov and popa outsl movsb xchg jb mov imul mov xor je add push xchg cwtl sub enter or cmp or std enter mov jnp ret sbb (bad) xor xchg lret push test fistpl and nop xchg mov fdivrl repnz fiadd jl xchg mov add data16 test inc mov andl fldenv int3 (bad) jle stos sbb xlat pop cmp push push pop stos and inc js pop jmp inc adc or push out sti ss add out test mov (bad) lock fldl and rcr int jmp mov xchg push mov in rcrb mov in sub aas bnd in repnz les repz sub (bad) and repz (bad) cwtl cli test mov pop pop mov int3 fbld jb pop les cld add mov cli (bad) or dec out in rcrb pop faddl sub (bad) repz add cmp (bad) mul inc pusha out cltd sbb fbld xchg imul cmp out outsl cltd jl lods jmp in int3 add leave xchg loop pop mov mov (bad) dec jo mov jno push push in xchg adcb popa sahf aam fsts stos sbb loope and add add push pop (bad) clc int3 jecxz mov cmp imul sahf cli iret sti repnz es pop addl xchg mov cmc test ss imulb cli loope iret (bad) out jp or xlat scas mov (bad) hlt jnp add aas enter mov insb xlat xchg xor std adc cmpsl mul imul int3 inc ror dec jmp cmp cli incb fisttpl insb and inc ret and ds data16 ss mov in decb inc pop mov xchg std loopne out xchg jp inc or (bad) icebp mov pop daa adc cld xchg mov movsl and cli cwtl mov jne lds stc lods sub mov cmp pop inc in dec out add push clc add xor std (bad) clc popa inc lcallw jmp rcrl imul mov add rcr jo fild in dec dec jne cwtl lret xor sbb xchg shrb sub pop leave jmp int3 call pop sbb and int3 mov sub hlt int3 and jb mov dec fstpt hlt aam jb movsb (bad) sub push xorl mov out scas test xor rol xchg lret ljmp mull cs repnz mov cli push int3 imul ret in int3 (bad) mov fwait out cwtl xor or repnz mov dec xor icebp out cltd dec lock jp lds imul mov push movb mov jp mov cld (bad) std cmp icebp lcall stos xchg insl mov cld int3 in xor cmp int3 ret add repnz insb xor sahf imul inc ret int3 pop push or ss imul pop lock add xchg push sarb cmp aam dec xor pop sbb movsl sti inc in fs mov gs ret repnz in int3 (bad) fldl outsb repnz stos cmp imul movsl mov sbb aaa jmp in (bad) (bad) (bad) int3 (bad) jle orb lcall push aam int scas jo dec mov loope mov repz mov (bad) jmp dec repz mov inc and inc xlat rolb jge fild jb add gs mov cwtl cltd xor std cmpsb in add cltd into inc sti ja aas dec scas sarb out add outsb add pop ja add int3 mov sub cmp testl addr16 inc repz scas test sbb push adc int sti cmpsb lods ffree jg xor mov adc jecxz cmp test dec add xchg sub movsb inc daa push dec xor div int3 lods jne pop enter flds and frstor cld dec les pop mov lock arpl clts bswap lret inc popf push scas std pop es add mov int3 mov hlt out fistpl xchg (bad) fidivrl test pop mov sub mov push add cld mov ljmp cmp or add xchg vpxor pop or and arpl mov mov in xor add xor cwtl lds and fdivrp int3 scas jmp nop les xor push ss mov mov arpl jbe push nop adc sbb testb mov mov stos jg cltd sub sub push inc movsl std jns jmp clc (bad) js push pop ljmp or inc icebp or mov push js add cmpsl ret add jb dec shlb xor nop mov push push jmp fs mov ja les int3 jecxz mov xchg add (bad) cld popf add sub cmp inc pushf popa cmp bnd add dec (bad) int3 pop xor xchg mov cmp (bad) sub mull imul mov je loop je mov repnz push mov cmp cltd (bad) dec repnz mov mulb aaa dec stos xchg test inc xchg rcll add pop sub xor sub (bad) lcall repnz xor dec sbb enter mov or (bad) paddd in mov vandps cmp adcl fidiv addr16 out push xor addl mov cmc inc push jecxz xlat arpl (bad) mov (bad) aaa dec mov pop xor loop fisttpl (bad) jae xor xor push add or inc pop movsl lahf dec lret js std fs or (bad) fldenv stos add into int and jp or cmc mov push mov push mov icebp cli (bad) sahf or ret incb ret jne call enter gs sub and ret mov test call mov pop sbb aaa pop xchg ljmp cmc cmp pop hlt hlt mov out jb out lock loop push mov cmp mov leave xor jmp mov cmc fcomip mov mov in xchg pusha pop nop out xor testb xor pop not cmpsb je pop sbb xchg add pop xchg cmpsb nop or jl mov add inc push inc push cmp pop outsb sbb loop push or in adc or xor pushf add xor (bad) add add (bad) mov dec xor test dec lock divb jl jo xor cltd mov sub es test idivl jae and cmp xchg int aas nop ljmp or jp xor cmp inc cmp mov int3 (bad) out repnz add orb movsb mov push push outsb add das add imul and and (bad) iret xchg scas shlb mov popf jle decl xor xor mov pop insb inc jbe push mov inc mov hlt in (bad) or stos hlt cmp pop jnp jo jne lea dec mov mov fnstsw in add xor cmp fisub clc sti and jnp cmc mov jecxz mov lret xchg jbe popl mov movsb xor cltd mov mov xor pop xor insb lcall mov add int3 xorb inc out add cs jecxz sub jne faddl rcll cmp scas aad lods lcall ficom jecxz push arpl adc pop loop pop dec mov xchg inc mov mov (bad) jle cmp aas jg jle (bad) inc lret mov xor push jmp inc jp ret mov push dec loopne mov mov adc pop icebp sbb jae rcrb or dec mov (bad) (bad) outsl add pushf sbb push (bad) pop testl cld jecxz jecxz repz mov stc (bad) aaa ret push mov mov push stc loope scas notl mov xchg out jnp push lret inc adc into idivl or xchg adc (bad) jge int3 pop inc add cmc fidiv (bad) sbb pop jne xchg hlt jl cs jge jle pop sbb jb mov push imul fwait push pusha cmp pop mov push popf mov es pusha add mov xor xchg or xor add push adc lods sar stos or rcrb sti cmc mov mov xlat les iret and lret add mov scas lea addl movsl and out mov imul stos lods popa push mov jne mov pop test imul rclb mov cmpsb inc imul mov inc cmp movsl in jno (bad) lock xchg insb sbb fdivs push cld popf push repz xor cmp sti dec sbb sti test mov mov xlat jae jb movb aas lods jmp mov loope or stos aas cwtl out dec int or aad test daa cmp pop jge incb call dec bnd ja sti dec in repnz ja xchg movsb ret cmp ja movsl out jl jp ds inc cmpsl notl mov ret pcmpgtd xlat cmpsb jecxz lcall stos std push aam loop scas in (bad) test (bad) in mov fisttpll and in mov fcompl mov jno xor outsb jle test add dec int3 cmpsl xchg push jbe jnp xor mov jne ret lock out push mov sbb cmp std int adc int popa ret mov lret mov lods andps int pusha jecxz hlt fwait aas imul mov cmp std mov out (bad) push cmp mov xor jecxz mov sti loop rorb hlt adc mov cmpsb xor xlat (bad) sbb fiaddl shrl push cmp cmp adc ss mov arpl out pop xor mov testl clc insb dec enter sub test out mov cld ja in xor sub outsl add pusha inc sti outsl pop jne jne or push add jne movsl addr16 add add jmp cmc iret cmp mov xchg jmp dec imul stos insl ds add push icebp repz repz jae loope fisub push sbb jl cmpb shl add lds cmp mov mov sahf add mov fistl mov xorb sbb (bad) add add jp mov adc ja sub lret mov cmp movsl stc stos adc fsub fsubrp ljmp test mov xchg jne fidivr lret clc jp inc jge pushf outsb mov mov xchg mov jp lcall jl out jo hlt cmp test jmp pusha inc movsl lock cmp je,pt aad push cmc repnz sbb lea mov sub adcb cmp push lea ret mov orl mov pop mov cmp xor movsb ljmp fisubr stos xor inc je add add or cmp xchg push jae not cli pop clc xor xor inc add mov test out cmp add xchg cld push dec inc jbe mov sub inc dec pop cmp je pushl sbb jbe repnz in imul jge arpl mov mov mov jae movsb sbb jo hlt sub les sti pop jmp jecxz mov sub mov pop lret popf adc jae int3 push in cli mov xchg fs push les inc sub cmp push dec mov lahf das cmpsl rol imull jecxz imul imul jb fldt adc dec stos test xor loopne push and pop cmp push mov jns stc mov xchg pusha jp add fist xchg fld int sarb adc jl test fucomi pop scas je dec jno cmpsl pop movsl fmuls push insb inc int hlt cmp jno lret pop lret inc mov movsb scas mov int3 test int mov movsl ja pop lret mov cmp (bad) or test rol in mov lret insl and ljmp jle js pop jmp sub in scas movsl call mov lods ret jge inc test imulb jmp inc push repz sub (bad) mov xor mov pop adc push push inc xor cmpsb or mov jg js fistl dec int3 pop jg lods jp xchg out add mov lds push pop movsl mov inc sub jmp cmpsl dec mov pop (bad) loope (bad) pushf fnstenv fucom popf lods mulb mov mov mov ss js inc mov js mov insl lret xor insb mov xchg xchg ja ljmp mov ds xchg sti hlt mov (bad) cmpsl mov pop jo gs ret cld insb mov xchg enter jb inc inc es mov std xchg sahf adc push rclb jne xchg mov mov dec and adc mov or adc int3 and cmp cmp sub add cmp jmp add inc int3 pushf test xlat add stos int3 cmpsl adc imul hlt lret sbb jae (bad) jg std sarb hlt pop mov mov adc pop movsl push js lods mov sbb cmp jmp insl jae xor nop mov or enter xor cli xchg push pop mov jl lods pop shrl mov inc push inc push ficom ss push push mov add sarb bound jae mov xor push mov incb push les xchg dec (bad) cmp leave (bad) lock inc or sbb std jnp push adc xchg mov mov push mov mov rep fist mov lods mov push mov or movsl aas test mov lods or xor push (bad) int3 xor nop cmp popa repnz inc adc movsb test imul (bad) push daa push cmp cs cmp xor pop mov fsub xchg jge fnstcw mov fs or pop dec jmp movsl xor dec insl lfs dec outsl or repnz out inc and adc push jb push nop mov xchg aas fidivrl lock movsl add ds jmp add jbe sub popa mov out push sahf lret fs dec jae (bad) jbe (bad) je cmc add in ret pop push and add pushf cwtl sti nop add pop xor aas cli test inc push xor mov add imul sahf push or add cmpsl in add add or cmpsb or loop pop add pop or iret mov icebp cwtl sbb dec xor hlt mov add jge daa fisttp mov jp inc and icebp jp adc adc xor pop movsb pop xchg or mov xchg out add push jbe loop fist (bad) rep ucomiss add cmp adc adc inc jno int hlt icebp jg mov or aam cmp enter bound stos pop pop push notb or pusha mov jmp out adc or adc adc stos (bad) arpl mov outsb xchg call push mov push lret fstp movsl out xor sahf mov xor sti mov movsl aaa mov push aas xor mov dec imul mov repnz cmpsl push push dec adc sub mov insl lods jno dec inc fs xchg fwait lea xor lret (bad) xor mov movsb dec test loop movsl or mov aad push (bad) fdivl jecxz daa test push (bad) and dec aam mov js (bad) int3 mov push in jp lret incl ret xor movl push bound xor mov je xchg dec sub adc lods and aam test dec cmc xor cmp in xchg lcall pop mov aaa mov fwait outsb inc in cmp enter sub jnp cmp jo sahf add or aad mov cmp popf imul sbb sub xchg mov mov jmp mov add xor incl enter mov sti daa pop mov mov sbb int3 mov push aas outsb insl push (bad) mov scas jne jno or cld mov mov stc and mov or xchg popf lret or cmpsl jo hlt out mov push pop fnstsw lret jle and movsb clc push mov (bad) mov cmc dec andl cwtl aaa into add je movsl add dec std sti add ljmp mov xlat jle out cwtl push fst xor pop sahf lahf std mov pushf loop add rcr imul push movsl push mov lret leave inc nop dec stc cmp inc dec stos shrb (bad) mov mov in jle mov fldenv xchg stos outsl push lret cmpsb int out (bad) std int lret and lea int lret lret sbb ret push ja sub scas outsl test xor xchg xlat int3 test loope hlt stos xor movsl mov cmp leave into push stos in mov push mov push add mov sbbl cld jno or mov in mov inc and jno mov jle,pn lcall mov mov add into jno sub imul cmp fldcw inc cld icebp jbe inc roll push push add bnd (bad) mov ja imul (bad) icebp (bad) ljmp push mov andl or shrb mov (bad) inc cmpsl or stos loopne mov push mov add dec (bad) fcmovnu pop ret push idivb dec ret add ljmp push cmpsb or jns cmp (bad) jne dec pop sbb xor das cli lret mov xor push insl push test in movsl mov imul inc add in xchg jb push rol mov and push mov (bad) jecxz ss push dec push pop xor lcall lock dec mov xor xor repz lahf out xor fiadd cmp xor inc xlat pop adc fs movsb insl push in xchg mov pop fs add mov xchg inc movsb sub ret fildl (bad) xor push sbb adcb aas ljmp int3 jle mov (bad) cmp ljmp add mov inc xchg xor xor ss (bad) xorl scas iret or xor cltd add or jmp pop nop insl sub xchg repnz jmp je xor jg or (bad) jmp jmp xor xchg lock in add stc push pop cwtl adc lret negl push cli iret adc dec cwtl mov lcall addr16 cmp and ds pop rcrl push cmp mov test pop inc fwait insl in imulb xor cltd fwait cmc loope (bad) in shll sub jbe outsl mov push add mov add fdivrp dec mov mov cld loop aam jge mov imul push (bad) mov mull pusha (bad) dec or mov mov popf jnp jg fs adc insl or add mov les rcll mov mov notl jb inc jbe jecxz cmp je jmp in aas mov mov add sbb pusha nop test testl ficompl aaa and dec dec or xchg add loop dec adc jae cmc jno xor mov add add add fadd xor dec inc jnp (bad) repnz sbb jl jae cmp pop push mov adc pop fsubl cltd xchg inc pusha inc stc xchg (bad) aam and sub add cmp movsb xchg jns adc mov sahf jne fwait clc or insl ret adc test aas mov out clc fwait ret negb fst xlat test hlt inc push (bad) pop sub frstor fisttp inc dec rcl add jle mov (bad) sub add das ficomp ja ret and sbb mov xchg push xchg insl jmp adc dec mov lock std or test inc dec jmp jp xchg add jb leave mov ljmp aam stos add mov fiadd inc int3 fdivrs mov mov mov adc mov pushf and add pop mov imul jge (bad) je inc add (bad) loop mov xchg mov sbb xlat inc hlt das mov add movsb jb subl in inc (bad) out mov js add ret sahf or movl loop subb add ja fstpl outsb add stos mov jnp ds mov cli iret test pop int iret cmpsl mov mov mov add imul sahf jo mov xchg test xlat es popa inc fs xchg repnz add sbb lea out sub xor inc ret adc inc (bad) int3 mov fidivrl scas pusha subb fistl dec push mov cmpsl mov loope idiv imul and jno cmp aam push fdivl add test movsl jno dec jp out lcall jb movsl pop repz xor and imul int3 jg js pop gs nop add push xchg mov icebp js mov mov cmp mov xorl xor fildl std jg add pop sub loope pop mov ds into (bad) int3 xchg sar jmp jae ja xor int3 (bad) les cmpl or jbe rolb cltd fldl daa ret lcall lahf cltd popa pop mov adc cmpsl mov stos lret inc mov pop je mov repz lock mov scas mov outsb es add push sahf sbb jle test jae mov les fdivr stos mov sbb ret jns jle clc out dec ljmp fxch fmull add add rcl mov inc pop ja dec sbb icebp jmp or repz (bad) pop xor repz add inc mul out orl mov dec add add ss ds out int3 repnz clc test aaa jns fldenv add aam mov gs add int3 dec shll jne inc sub mov xchg push mov or add inc push sbb jne xor jge xor cmp in pop clc xor cmp js cld xor cmp jbe add divl lock test add jno loope hlt divb icebp jne dec sarb pushl movb sub cmpsl mov or inc ss les xlat out cmc cmpsb inc hlt in mov cmp mov loopne jle jae mov cmc (bad) testb rcrb cld std lds mov dec add (bad) divl add data16 fwait nop xor inc shll outsl imul js xchg sub push mov mov test or mov aam mov xchg in cmpsl mov das mov and stos mov call cwtl inc cs call cmp scas je fsubs inc in movsb mov ret cli repnz inc (bad) and in lods (bad) icebp gs fs movsl test mov add xor inc imul mov sub and fistpll dec insb inc add imul stos loope sub mov add call fistpl negl aas mov pop pop in test adc cli ret xlat icebp bound fisttp aam mov ret inc lret xchg imul loope aam movb movsb jle pushf adc inc bnd (bad) imul add nop sub mov loop sti shlb jmp inc test addr16 incl push repz push jae or mov mov lds and cmc xor mov xchg loopne stos inc push je enter dec jnp cmp lret (bad) lret or xchg movsl subb lea or pop add dec xchg fwait pop cmpsb sbb xor fcomps stos or (bad) in push push pop jmp aam sbb (bad) inc lret loope cmp out rolb inc in xchg popf ret out iret xor pop ret sbb jmp popa je lret lods (bad) fldt mov test lcall stos mov out add inc in push pop inc ret add push add and sbb inc mov out sti int3 jmp push xlat cli test adc or push lcall jae xchg pop inc add jo out les adc mov inc jle mov jle push add push inc test test add ret inc outsb or daa outsb xchg xchg cli stos dec cmpsl in push mov in loope (bad) cld pop xchg outsl aad repnz fs repz inc aas lret lcall xchg nop xchg in enter test ljmp cmp je neg mov fidivrl (bad) clc mov sbb mov dec ss mov fidiv xrelease repnz repnz add mov cmp inc imul mov xchg movsl inc sti (bad) jae lret pop lahf add inc push push dec mov fcmovnu mov cs (bad) cmc and inc int3 push (bad) divl aam xchg cmp xor repz popf mov mov pop imul movsb pop lahf jo cmpsb ret add pop mov lock sti pop movb add mov out xchg iret push inc cmp fdivrp inc pop push sbb mov jmp loopne mov mov movsb iret push idivl sub cs mulb xor fcomi (bad) cmpsl inc (bad) cmp xor xor jp pop cmc lock (bad) and jge cld bound movsb mov mov (bad) sub ret es mull test dec (bad) xchg clc xchg jnp mov subb mov sbb push xchg push push fisttpll push add ja aas outsb xchg pop notl push mov adc lahf jmp bound mov mov dec mov jne xchg inc mov mov dec jl jns test (bad) call jle jo jmp popf mov or mov imul jp xor ja js or dec add jnp (bad) xchg mov or mov push sbb cmpsl xchg fild cmp ud1 (bad) imul push fisubrl xchg (bad) ja movsl arpl jne jb xchg hlt jae gs lods inc push (bad) jb jle xchg cmp (bad) cmpsb int add jle adcl pop loope je xor add test dec std xchg inc cmp cwtl or add pushl inc pop (bad) jne add rolb add fisub out std (bad) xor add hlt fs lahf dec push (bad) push (bad) ret (bad) std mov popa clc rolb out cmp push xchg xchg jmp xor pop jb (bad) ljmp dec jge hlt mov and sar int3 movb lret cli jecxz jo jle cld repz int cwtl cltd clc lahf sub fwait stos xor lock jle cmpsb repnz mov scas and jp push loop pusha test jg adc mov adc data16 or outsl cmpb mov idivb ja fisubl xchg movsb xor aam call out cli icebp jae in insb int3 negb das push les inc (bad) pop xchg les test stos idivb adc sub or mov test enter lcall or add inc add sar xchg pushf scas cmp popf aas jb in pop cmp sub fcoml xchg jle sbb rcrb iret insl xorl sbb inc pop jnp add dec test out outsb lock pop jbe mov inc push sbb (bad) in bound rcrb mov loope mov sti into inc sbb sti mov in (bad) xor pop (bad) (bad) mov ja bound xchg dec jne or les es shrb pop add sbb sti or pop das test outsb jne push in int3 inc push mov add gs xchg mov sbbl jne test and setno add adc mov je mov fst mov xor and jbe out jmp or jns arpl mov mov test push mov leave cld inc fiadd out outsb adc dec cli fs or jo into in (bad) int3 aas push push mov xchg push in add repnz sbb scas leave je div (bad) addr16 adcl out jb repnz (bad) jmp cs adc jo mov movsb mov movl je fisub inc mov mov bound fs dec cmp xchg mov dec popf sbb fiadd sti xchg aas pop stc push xchg jecxz (bad) and add gs push sub (bad) arpl iret int3 das push cld enter hlt fsub fsub fbld inc xor pop stos lret push imul or (bad) xorb outsb push scas int3 sbb test sbb fsub mov testl dec in int3 mov andb scas int3 push or (bad) aaa aam ficom sub mov data16 in orl aaa jl cli pusha clc sahf ret subb push mov lods mov add out adc pop fiaddl testb dec pop in lock mov not cmpsb xchg sub add lcall cwtl mov jge mov dec (bad) lcall lds (bad) int3 out (bad) cmp mov push ret loopne (bad) ss sarl cmc fs lret (bad) push jmp cwtl sbb push sbb lret mov subl jg pop bound sti push incl sti inc add icebp mov addr16 call sub xchg addr16 xor loop outsb mov fs fmul mov rcll mov gs rorb xchg jp xchg (bad) pusha loop ret and das imul jbe sbb xchg ds scas xchg sbb mov fs pusha test push stos mov pop add sbb into push int enter xchg leave lahf ljmp add out jp test jae dec ljmp add add add incb mov sbbl mov jns and movsb movsb cwtl jg lods enter test pop idiv aad addr16 rcl add add movsl (bad) repnz mov (bad) fisubr loope out inc mov rcrb hlt xchg pop aad scas adcb es inc xor mov add or mov ds add xchg mov inc mov cs pop mov push fistpll das add sub adc and or mov jg jmp xor mov fisub mov (bad) scas fiadd jns add push pop mov test cmp hlt add add jg fbstp push jmp xchg mov xorb add push cmp add sarl movsb fcmovne cmpsl jne aad dec mov add (bad) mov (bad) dec mulb cmp dec data16 sub ret mov fcoms sbb or es or jp (bad) mov sub jle add jge or sti imul nop (bad) dec hlt adc sbb jge cmp or (bad) or push out and add imul test ret lods push mov sub mov loope and sbb loope test les ss mov sub es jmp or add push decb push (bad) stos dec cmp xchg enter xchg xor mov inc stos and jl jg jae fistp push jmp jbe repnz jg iret and (bad) fcmovbe inc mov adc call out jp lods lds cmpsb int3 pop pop jne sahf and aam push fcompl push sahf out lods (bad) mov loop test mov push popa aas ret xchg aad inc movsb lret loopne (bad) mov jecxz sbbl stos or fadd jge dec jbe jle (bad) dec pop out add movsb fiaddl or (bad) mov and or dec inc incl test add (bad) (bad) mov xchg inc stc push repnz movsl add lahf inc xor divb repnz cmc sbb test out enter dec loop inc int3 mov roll push xchg pushw xor es clc imul repz jbe or inc (bad) loopne jnp push mov out in aaa cmp std cmp (bad) idivb lret stos push add adc std in push jae pop mov inc sahf mov fsubl and cld ja mov mov les (bad) (bad) test (bad) in xor mov add add notb lret bndstx fidivrl enter orl aas sub jg mov out add jno and cmpsl jp pop test (bad) jmp xchg mov push lock xchg sub xor cmp dec inc (bad) jmp std jecxz cmp stos cmp test dec ret add mov mov daa jle shl or aam jnp int3 insl out jb imul sarl js or cmp jecxz add mov test adc add fmulp cmp or data16 dec or in in push in cld lods add aaa (bad) fisub pop push lcall inc jne push mov mov push push pop pop mov lahf xor pop (bad) fdivl and imul (bad) aam es fsubrs cmp sbb orl mov enter inc int3 inc jl out testb push int3 xchg xchg and pusha lock repz cmp (bad) out or add add clc mov (bad) cs mov mov int3 stos mull (bad) mov mov mov out add cmpsb mov movsl int3 mov out flds ss cld jge ljmp mov lcall push cld pop or inc add out xchg dec mov (bad) or inc out cmp stos cmp jge inc movsb fimul movsl hlt (bad) lret add out push xor mov jl stos add dec mov push movsb jecxz hlt dec jge in imul in mov jle xchg lods mov cmc cmp iret hlt (bad) (bad) push cmp call idivl addr16 aas xchg jae int3 xor cmp jge inc (bad) jns (bad) cld ja add push movsl jno lods icebp jecxz push in mov mov xor and pushf rcrl mov jg lcall add arpl sbb mov inc adc les mov pop jge or jnp test cmp repnz mov jg jnp jbe mov add xchg jle jge (bad) (bad) cld in xor push add mov and and cmp imul movsb pop cli fist fwait sbb dec ds add rolb pop dec mov push mov iret pop pushf mov or aam stos mov decl in mulb mov dec jmp xchg cwtl es jmp in leave mov sub adc cmc out xlat push data16 movsb fisttpll lahf inc xor mov mov xchg inc mov push or pop (bad) (bad) sahf jo and lahf (bad) bound adcb shrl mov push fisttp inc mov dec add mov outsl mov lods cmp add adc mov and testb push jmp imul adc insl out out aam out dec inc xchg push cmp mov add imul jne and xor dec es xor jno (bad) fisubl imul fwait out push push adc jle callw pop push inc andl fdivrl mov pop repnz shll mov push and sub aam cmpsl fidivl fdivrl loop ret (bad) mov inc aas ds push sbb inc test sbb xchg add pop sbb pop pushf mov inc add jg lea negl loop ljmp and stos and jmp in (bad) out hlt icebp mov cmp jmp aam int3 pop (bad) int fcomip lret lret and hlt enter and movsl push imul mov add les sar mov enter ss dec loop xchg fbstp xchg inc ja add jmp shr jmp and loop mov mov iret leave add nop mov lret mov cmp clc cltd mov cmp in (bad) loopne roll cmp xor aaa loopne xor in xchg jl loop cld (bad) xor dec dec cmpsl fisttpll jo dec sti icebp repz out aam lret mov add les mov jb add ret hlt mov inc hlt mov inc hlt mov push (bad) push mov lock lahf in fsubs in add out add lods popa lret sbb or (bad) faddl cmp jmp into test sub in hlt mov dec es mov (bad) ljmp inc adc inc xor mov jns stos add push cld pop mov cmp or mov mov push cmpsb mov into and je mov push or (bad) mov add inc aam movsl jbe das jmp add xor or in std ljmp push jge outsl add jbe sbb lods fsubrs sti rolb sub push (bad) xor inc stos ret aaa ret sbb sahf mov sbb jns wbinvd aam mov roll out and out lret ret jae stos leave inc cmp push push xchg xchg inc mov sub mov stos mov negl addr16 cmpsl adc stos add loope xor ret push cmp sub lock or fbld fnsave (bad) int3 xchg mov pusha lahf xchg les clc sub insl push or aam int mov sbb in int3 and jmp scas cmpsb nop inc mov (bad) mov mov pop mov jnp ja dec add mov sti mov jp cmp cmp mov imul stc clc xchg jl push jge clc (bad) hlt pop adc clc bound push test inc int3 mov mov mov jnp rorb jno lds int3 push cmp stc add bnd aas js call cmp rcrb (bad) xchg mov movsb ja mov jmp sub or mov push xor aam push xor jmp jns arpl add les loopne mov jb (bad) cld push jbe mov mov inc out test inc mulb xor and jo sub fiaddl adc stos cld daa inc push jg (bad) sub jbe pop mov jmp mov ss popa cmp out or fisubl add xchg iret int3 hlt mov loopne inc aaa or stc lods inc les and aas inc cli sbb xchg cmp and mov push sbb loopne or or push (bad) movsb jmp push mov pop test addr16 push cli subl lock shll fdivl (bad) int3 add addl leave jmp loop sti and (bad) icebp sub into mov movsl insb lret and pop ja (bad) dec movsb repnz add aam cltd pusha mov inc iret mov add addr16 or movsb jbe pop loope outsl mov adc mov xchg push xchg ja in add aas cli mov testb or (bad) inc adc rorb or stc push out sub jns ret (bad) mov cmpsb mov sti ret cmpsb lods jmp ss scas pop pusha in jecxz add movsl popa jnp or sbb pushf lcall jg (bad) cmp test add xchg orl mov sarb xchg adc sahf jecxz mov fsts and cmp loop dec jmp jnp cld push add or js or mov add ja or mov ret (bad) ja int mov or inc jae movsl mov fnstsw icebp leave mov mov pop xchg int3 xchg aad (bad) dec movsl scas or mov mov mov insb push mov xor sahf and adc outsl fsubr mov movsl fcomip ss inc mov inc or (bad) xor test xchg (bad) out jmp or sub aad into and jns enter cld inc push mov cmpsb adc insb stc imul aad push jmp notl fs mov and xchg xchg jg (bad) pop aam sar es (bad) xchg push pushf aam int3 sahf cmpsl leave mov adcb xchg inc adc xchg hlt mov add jbe aam dec aad outsb ds fcoms aad andl push xor pop mov or lahf sahf mov or lret (bad) int3 lret xchg into sarb pop cmp ds xor ror in pop daa push out add pop in leave and inc out fld into jae rcrb in int and divb aad cmc (bad) mull hlt jmp lcall aam in fidiv rcrb push xchg std fidivl sbb cmc add clc aam out popf mov ror xchg movsl jb icebp (bad) out jle xlat not shll jae rorb lds (bad) cld movsb stc ret pop rcrb mov xor inc and mov daa add testb enter imul lods xlat mov add test cli cmp jns pop repnz clc sub mov cld and lea add pop mov jb jno xchg jno fs jmp or fild push xchg inc lock test push add out inc mov (bad) test jmp cmp xchg inc pop pop test push into addl imul int dec mov sbbl and add push sbb cmp sarl int int3 enter mov popf test ret add lods add gs xchg pop mov mov out test fcomps int3 jle xor mov cmp fcoms jmp push sub mov push xchg sub add pop sub adc inc lret imul adc push cmc out enter hlt imul cmp enter (bad) jo testb push jns mov add push or jb bound pop cmpsb lahf out loop mov sub in push add xchg movsb jmp imul jno hlt ret sti in je call or xchg mov lret sbb fidiv mov fcmovne xor add xlat mov and ret in scas enter jns test loopne sub mov add and out lret xchg xor stos jg test (bad) lret scas lret sub rorb cmpsb push add std std aas push jp or xor pop movsl repnz jp xchg inc xchg dec ss xchg test dec call je mov movb les cli hlt js stos mov push push cmc outsb (bad) jb flds ror jae and mov into ljmp cmp imul mov xchg xor jb scas leave push mov jb lahf test inc push sbb sbb or xor or loope inc or inc in fistpll add lret stos pop adc ds xor adc scas pop jmp jns ss push ja loop jo (bad) loopne imul xor jmp lods aas mov lds inc xor int3 jmp push pop pushf jmp jg inc xor (bad) enter and fidivrl mulb jb add mov add inc xor xchg hlt cmpsb sub (bad) aaa add bound mov push xor mov xlat pop aam iret add push dec xor mov mov les (bad) and outsl bound dec mov (bad) cmp or mov xor mov or dec adc lcall in and shlb push sub into fisubr cmp test stc mov and (bad) mov inc test jmp int3 xchg hlt mov (bad) out push popf mov call in test out int xor hlt scas mov inc fstpt xor mov mov cltd jl jle pop fiadd movsl jmp dec leave push into div ss push inc in push in fsubrs mov je or jae adc add xchg in jle or mov mov add mov xlat sbb into add sub lret cmpsl pop xchg cmp add inc add sti add (bad) stos js mov ja and jecxz jmp ficomp (bad) lahf das ret aas out out outsl xlat movsl outsb cld jae jnp cld hlt fisttp cmp xchg push fldl mulb aaa sbb out mov inc lock xlat cmc (bad) mov sbb cmc mov ds ss mov push mov xor xor dec out ret mov or dec js adc out clc mov sbb mov xor cltd (bad) pop mov sub (bad) jp popa jle test push bound lcall je (bad) jl mov dec int3 mov cli mov xchg rcrb push inc xchg mov inc jno cmpsb mov mov popf add std mov outsb mov push add adc imul nop add cmp sar or dec inc jg in sti push mov fs mov imul mov addr16 push into sub mov pusha outsb cmpl add mov adcl pop pushf xor je pop ret cmp cmp ret cli mov fidivr mov fisub dec lret add jo loope inc pop xlat mov les push js orw mov xchg dec fildl jmp lds les fsubl or jno testb andl push push add daa adc in dec movsb test ja cli inc rclb decl push in jle cmpsb dec push (bad) add add in inc test int3 pop mulb repnz sub cli push xor and cmp dec hlt outsb test mov jmp inc push imul cmp loop mov or mov aas adc or mov (bad) movsl dec aam addl jne jmp lds loope lock cs fs in or scas insl (bad) push inc add mov xchg jg inc loopne mov add push aam xchg sub pop loop loopne (bad) xorl xchg fwait cld push inc jne test adcl pop xor mov xlat sahf ret add es cmp aaa out fild inc test sub inc pop push fs into cwtl dec and (bad) out loopne inc adc loop repnz loopne inc inc daa mov mov fcomip jo mov loop sar (bad) (bad) leave sarl xchg mov cld es mov cmp cmc inc hlt inc xchg (bad) (bad) mov pop xchg cld test push jecxz cs push and out leave pushf data16 addl xlat push cmpsb sti jbe lds cmp sub and cmp pop divl adc pop mov xchg ficom or lahf clc mov flds in daa scas test push cltd mov inc les xor les (bad) jecxz mul jns stos add (bad) sti add mov loopne loope not (bad) fdivr (bad) repz pop push out dec rol out rcrb jge mov mov sti ja clc rcrb cmp push enter clc lods xchg test scas pop arpl insb int lret add add jge sub pusha (bad) in jle test nop jbe cli call pop push or xor mov subl add cmp mov sbb lret add xor jne push jbe push shrl cmp dec ret mulb data16 (bad) mov negb add shrb push fisub xchg mov js sbb loop test in xchg inc add mov inc xchg lret add aam in mov mov hlt leave xchg pushf mov pop xchg mov in loop lret loopne lret mov inc ss outsb dec push int (bad) jp hlt adc popl inc inc inc xchg xchg int3 popf iret adc jl lods mov (bad) sahf enter pusha repnz pop mov int3 mov das xchg jns sar mov imul enter jmp jnp mov int3 cld es cmpsl mov inc and mov jo hlt shr loopne iret add push jecxz stc mov arpl mov fsubs inc pop sbb call sahf pop leave in xchg andl test jnp mov cmc movsb ret cmp aaa jne inc aad notb ret mov rcl (bad) mov inc jmp xlat pop enter mov sbb out aad in stc and mov sbbb xchg mov test jne fcompl cmp add bound (bad) out and ss fs push push dec cli push mov mov mov aaa cmc jle out js mov repz mov les aam fisub test add xchg in mov test jle add jmp (bad) scas add int3 mov (bad) mov add sbb add into mov mov cmp sub (bad) push sub jmp inc jae jns test into call je xchg or rcl jmp clc call les fsubs aas jne adc inc (bad) iret jbe shrl enter pop sub add jmp add mov xor loopne int3 (bad) fwait in lds cli (bad) (bad) loop dec or imul lret gs add or sbb arpl xchg add and out mov in scas idivb cmp aam lahf dec test repnz lea pop stos (bad) mov ffreep mov inc cmp les (bad) mov movb arpl cmp push xchg lret fwait (bad) rcrl les jl mov (bad) xchg add rcrl jo jmp test std jp clc int3 enter cli jmp scas mov lret cmp movsl call mov int3 cmp jp push push mov test int3 jb jns and xor ret mov pop push test int3 xchg xorl out jmp cmpsb lds cld add outsb pop dec out xchg add fwait add mov int push clc xchg test roll jp out cmp sub inc push (bad) xlat popa or cli or loopne inc add inc pop push jno loop int3 cmp or and stc repnz add imul add fstpl add (bad) sub mov insb pop sub nop push jg sub lods add cmp nop movl inc out repnz jmp es add insl jg mov test mov pop jg decl les outsl ja icebp in and sbb and mov mov mov bound (bad) ja adc imul or jne inc xchg dec mov lret jno int hlt out mov and out aam xchg stc inc mov add xor jmp push movsl in out mov mov cmp shrb fs fidivr popf mov stos jp call push (bad) mov js xlat add (bad) sub in daa lea xor dec aam int3 incb pusha xor out jno test and inc mov mov lret xchg or insl js cmp ja dec xchg outsb add mov mov fcmovbe fdivl push (bad) (bad) push dec xor inc aam lds les scas sub lahf add adc add and mov cmp es or xor mov lock (bad) negb lods xor inc divb lcall sbb hlt mov inc popa and arpl xchg testb lock add mov jmp mov dec je or (bad) stc xor pop inc mov out fstpt mov les mov add mov pop jp les mov lahf mov sar inc rorb push into jle inc outsl cmpsb mov imul push jb cmp (bad) sahf sbb mov xor xchg ljmp ja push stos inc xor or ja inc (bad) jbe je (bad) stc add adcb cli mov inc cmp fimul cmpsl or inc xor sahf stc sahf cmp pop cmp mov decl jge addr16 flds fisub test adc xor dec aam or dec les sahf fistpll sti xor dec hlt add xchg iret mov (bad) stos inc cmpsl jmp mov ss addb xchg jnp hlt inc cmp cmp sbb pop out mov aam xor cmp lret mov test inc xchg bound fdivl ret add lret incb (bad) fdivr jmp inc mov int3 or push lret xchg out xchg iret cs cmp paddsb or leave leave cmp pushf imul add mov fs inc mov jmp popa aam mov scas testb mov jmp mov test iret int fwait scas adc sub dec lret (bad) sti enter inc sbb push sar lea add cmpsl xchg inc pop in xor lock cmc clc xor mov push or jns or push mov inc and test enter mov insb aam cmp cltd mov mov and xor add mov out lret arpl negl mov adc xacquire mov inc push mov push add test sub cmp or and xchg jo aaa adc lcall pop (bad) xchg repz out js cmp mov rclb test (bad) cmp mov out xlat (bad) push jb nop xchg xchg decb ffreep gs add pop push add loopne push subb jle cli cmp push (bad) xchg cmpsb push add or xor inc aam mov and int3 cmp jge inc jb movl xchg lret xor aam dec jge sbb cmpsb dec or add mov inc aam mov push int3 sub cli daa push enter out out mov (bad) ret movsb add mov xlat call cmp (bad) sti dec popf mov push mov xchg and int3 add stos test cmp and in or inc dec xchg sub (bad) movsl test flds (bad) push jmp sti or mov jns test std push inc push (bad) stc inc cmp scas mov insl sub xchg enter mov sub jmp add in cmpsl lret (bad) xlat jg jle sbb imul fdivr cld call shrl divl add mov jno jecxz pop es pushf call mov neg add aas test mov stc sbb movsl ror (bad) cli gs dec add sbb dec repz inc ficompl or add repnz lods mov push or jecxz push bound (bad) mov mov bound loop adc std inc fs sbb dec pop sub add loopne mov loop aaa testb mov inc out inc cwtl rcll int (bad) push or xchg pop push loop repnz fistp add std test das sarb and xchg or and test scas jnp mov pop lock mov jae dec pop out cmpsl mov cmpsl cld roll push divl adc cld xchg inc faddl push mov pop rcll jb popa cld fisub dec push jae mov or mov xchg flds hlt stos dec test mov mov jle pop lods jae test lds mov fsubs add pop mov hlt xor lods pop pop fwait and popf call xchg mov xor (bad) mov in mov mov ds aam pop jmp out (bad) int fsubl inc push push fs pop cmpsl out (bad) sbb xor pop test sarl aam fnstcw mov incb nop mov pop mov and xchg xor insb jb mov sahf dec gs xor jae pop pop sti push hlt decl inc push pushf mov jp leave inc inc in rcrl cld mov cld xlat icebp adc movsl fisubr outsl and ret mov fs scas test or jnp jmp in (bad) out cwtl or out pop (bad) ss mov (bad) sbb aas xor mov rclb aam xchg (bad) adc inc jp push inc test test je into mov and cmpsb mov mov (bad) fwait insb mov std bound fwait jmp into mov rcrl fidivr xor in fidivrl add pop mov (bad) je daa lret cs inc in jmp aaa push mov pop sbbl push testl das pop dec outsl push add dec out push je (bad) jno outsb movsl lahf (bad) shll mov cmp out imul or std mov xor pop data16 xchg cmp repnz addl mov nop cs jmp jae and sbb inc imul enter mov mov fcmovne loopne stc cltd cmp adc xor mov mov xchg cmpsb imul fs xchg fild xchg push (bad) and hlt fstl inc jno cwtl jnp es add lods popa push jge sub xor mov (bad) and rorb out push mov pop push fs pop mov andb fistpl sbb adc stos outsb test faddp testb test fmull je daa movsb addr16 push idiv movl sub pop dec js add cmc adc and inc movsb vucomiss jmp lods in mov jp mov jg testl (bad) test cli push fldt mul inc jmp and (bad) sarb test or decl in jge sub aam adc add ljmp xchg push cs lods jp arpl mov sub add (bad) xchg push inc cmp aaa and sub mov (bad) ret ja in aad aaa mov test fdivr mov incb and inc aaa in mov cmp jns js sbb aam jge or shl pop xor nop push icebp je addb and or enter jno pushf lret xchg in cmp les sbb mov cmpsl dec sbb (bad) adc fstpt enter add xchg dec push sbb mov mov cmpsl xchg jae inc sub push subl mov and xlat lock or jne std mov xor daa movsb mov xlat xor inc adc sub dec cli push push out mov out sub out jl cmp sub dec js lea xchg lds mov or adc lcall push test test inc lods lret inc xor arpl (bad) mov xor aam add fiadd cmp lret sbb xchg cltd scas push enter fnstenv cmp mov (bad) (bad) jo sub test loopne aam and lds lret test jp (bad) mov rolb push std xor push aaa mov inc fldt jg mov push mov inc into mov mov cmp jmp int3 add stc cld mov xchg jno mov pop xchg les add xlat mov adc jecxz pop in pushf mov out and jle mov mov ja jbe jle mov dec std cli int3 xor xchg sbb lret fwait leave (bad) jmp inc push icebp ret sarb mov nop pusha xchg inc push ss jle,pt enter xchg dec jmp iret sbb ds cmc jp mov jne xor dec mov (bad) (bad) imul jp mov mov add leave sbb imul inc xchg dec lods div jecxz movsb or sbb dec popa cmp andl stos xchg stc cmpsl std inc mov insl jbe mov pop (bad) int3 xchg push fstpl inc sahf inc movsl ja not popf cltd addb push (bad) jbe cmp jns add cmpsb jne inc cwtl xor leave mov test jmp push mov lahf push (bad) jbe inc out push dec es add jg dec add pushf mov movsb inc cli mov nop mov sahf test lds add stos inc mov cmp mov subb hlt jnp cmc push adc jg jae xlat mov int3 cmp or jae sbb xchg fcomp mov test or loopne addl dec (bad) mov push mov jp xor jp lret and addl add cmpsb mov mov repnz adc cld pop inc mov jnp mov hlt add mov mov lahf (bad) popa cmp jnp jl adc loop push test cmp jno icebp sar inc pop jmp push sar inc adc mov mov pusha or cmp popa add cmp fdivs jnp pusha mov mov sbbl stos fdivs imul test stos test xchg sbb push cmp int3 scas adc mov cmpsl int call out daa adc jg jne ret xlat lods (bad) mov (bad) in and push dec icebp dec inc inc pushf lcall xor pushw pop mov leave hlt rcrb fildll jbe xchg fs test sub add ss push nop fisub mov push mov or lds loop sahf push les adc je aam data16 es inc (bad) sbb in dec rolb dec xor ja jl (bad) (bad) test imul mov mov movsl mov cmp adc mov sbb mov sbb les lock dec xchg or cmp int3 dec xor mov jbe or push (bad) fldl mov ret into push (bad) adc js pmulhw (bad) jns mov push pop cld mov jl add incl rorl leave dec pop mov inc mov push inc or cmp add xor andl mov push jmp movsl scas cmp scas rcl xlat je add or mov or jae aas cltd scas incl jne mov rcrb leave xchg ljmp arpl fadd push pop inc inc outsl mov inc (bad) xchg xchg cmp dec ret add insl in cmc pop cmp sti and sub popa (bad) inc int3 dec sub xchg sti pop jnp dec cmp add mov cmp dec mov scas ja lds mov (bad) jp adc jg add (bad) es shll out add mov ret mov popf pop adc clc jle sbb pop dec gs sub xchg add mov inc xchg jae cmp movsl sti mov push test fimul add stos xor cmpsb dec mov into mov loope faddp out es mov cmpsb data16 mov je and mov (bad) mov retw ret movsb or movsb insb icebp add inc (bad) jno or or push iret std sbb (bad) aam ret mov pop (bad) xor (bad) ret mov fdivs jmp dec cmp add pop hlt push mov movsl cmp cmp cmp shrl (bad) int3 aas push mov leave mov fwait xchg out (bad) stc mov outsw adc xchg cltd adc lret adcl or les xchg mov repnz jmp mov xor add mov cmp jle mov jecxz cmp push or jbe xor pop pop icebp loope inc mov stos xchg mov int3 or add std addl test pop lods icebp mov add xor nop dec movsl sahf int3 mov push enter clc add mov xor stc in nop add xchg add adc repnz adc fbld cli nop repnz or jnp fildll aam into fisub nop fstpl sbb je add adcb pop or jmp movsb cmp sahf pop jl out jle mull test test aas jmp outsl arpl sbb cmpsl loop xchg xorl add mov push out push dec in js repz (bad) sbb cmp sti xchg sti add xorl jmp (bad) aam aad mov xor outsl or outsb add jg cmpsb std (bad) idiv pop mov add movsl cltd inc and add data16 ja stos push test ss and std pop inc ret arpl (bad) enter iret es and or mov push cli rolb inc jecxz fiaddl or mov test fbld pop (bad) xor or cmpsb faddl es xchg test cmp js pop adc xor push iret xchg mov xchg push mov lock jecxz adc roll not inc jmp aas and push out mov (bad) mov into bnd xor lret adc stos arpl jo imull xlat cld push mov stos test faddl mov add scas int cmp cmpsb mov idivl scas outsl mov int gs add stos mov dec cmp push cli push jg enter xchg jno add adc push add jp scas nop out cmp push ds mov fcompl lret inc add pop push xlat cld outsl icebp add and in (bad) xor xor mov pop push addr16 pop jmp stc scas call test dec cmp xchg push and dec sarb adc fdivp inc sbb lret (bad) xor push mov call push and iret (bad) repnz outsl inc insb inc mov pop mov dec cld addr16 cmp sub sbb ja test mov add movsl pop dec xor mov ret lcall fmul cli lock xchg clc fdivr add jge xchg js xor fbld loop cmp es ret inc movsl in lock out or inc jge mov xchg jb iret insb push add cltd jbe incl mov mov fs mov sub jne popf loopne pop mov push into or inc movsb add fidivl mov push and push jmp add and movsl sti xchg movb fcomps or les hlt nop cmp ja mov ret int3 inc xor xchg add int movsb jns xchg addl popa les dec lds xchg or and and mov (bad) negl lds lret cmpsb inc clc mov ficoml cmp xchg inc fiadd fs in dec imulb out pushf mov int3 jnp,pt test and add cmp mov call aam in out push iret pop xchg in rorl cmp int jb and outsl jno test mov inc (bad) stc scas jmp push std jns in mov shrb aam add int3 lock addb add outsb dec xchg push (bad) cmp int3 mov inc fcmovnu add jae inc repnz dec int3 aas data16 push pavgb std add mov mov (bad) adc jg out mov (bad) in rorb dec insb test hlt scas xor pushf push xor pop add je ja int3 loopne stc out bound sub mov scas int xor out in push fucomi fbstp sbb ss stos (bad) add and xchg fmuls add lods int mov pop fisttpll jae stc jp lret rsqrtps testl or lret mov cmc jno dec cmp enter sub jmp movsl lret imul xor jae lret into add repz out cmp stc xchg mov int3 mov push mov pusha add mov pop out lret push or fldl dec outsb es sbb rorb fcoms sahf dec push mov add mov insb cmpsl aam divb pop mov sbb mov bnd leave test ljmp (bad) hlt sahf repz jl mov mov sub mov sahf out repnz xchg and rcrl insl movsl fist dec add add inc adc adc pop inc sbb imul arpl dec or lods xchg push sahf int3 mov (bad) jle add mov jns pushf test pop repz cs add addl xor cltd testb divb mov pop aas or test daa cmp sbb out (bad) cmp out xchg mov mov mov icebp (bad) int es pop sti not jnp pushl (bad) lock xlat addr16 push xor mov mov mov mov dec lret int mov shr (bad) xor in (bad) and out xchg pop shl inc hlt mov movsb lds lds pop inc mov out in add lods push inc cmp ljmp clc outsb xor inc negb add int3 cmp js inc xchg enter divb leave cmp es or xchg jno sbb pusha sbb outsl test inc sub mov aam jae adc push je aad inc stos imul idivb imul jo lock sub mov (bad) sub and adc or mov les push push lret into pop mov fwait std jle xchg sti mov add sub inc add xor xor jge add mov or xchg out mov push push lahf and inc fwait aaa xor leave mov jnp (bad) mov jno push sub std xchg movsb out cmp mov cs jbe stos gs ljmp pop out adc dec or push mov inc push stos jg pusha mov into repz je fcmovnu xchg mov pop stos and and (bad) movsb jne add cmp and or mov fdiv in jge xchg add add jnp scas jb xor dec es cmp (bad) pop mov in inc sbb shrb inc test mov rolb mov pop mov xchg mov das (bad) jg jae mov out xchg les mov cli adc lret sahf mov shll (bad) int jo pop mov inc inc hlt add pop out les or (bad) repnz push (bad) repnz testb fucomip in lock dec mov sub or fadd es jl dec (bad) dec call xor sti ljmp jl sub cmp rcl lret push (bad) out into test aam sbb js mov hlt add jnp cmpsl fcomps cmp lds cmp out imul lods add xor mov jb lahf imul xor cmc mov xor leave cltd rcrb es mov ds mov mov mov test loopne fwait negl add mov dec adc lahf inc (bad) cmp cmp out loopne sub ds lock dec inc adc add mov add push ret cmp fnop aas ja aam movsl or sti (bad) mov xor ret add mov lea repz cli dec cmpsl test clc movsb fxch cmpsl adc cmp add or inc mov add (bad) pop ss clc or ja cmp movsb rcrl stc jge (bad) mov adc mov loop fistpl jmp test ljmp (bad) and inc add jae mov pop cmp push xor mov mov or cmc lcall insb (bad) adc cmpsl pop xchg jmp or cs xrelease inc mov push dec dec jne es cmp pop aam or mov test les cmp (bad) adc jge clc xor lret inc int icebp in jmp stos clc lret inc mov int inc or push xor push arpl push repz addr16 lods push popa xchg dec out cmp roll fs jmp pop ja imul jle add popa std out (bad) add test and sub lcall inc int3 loop cld jmp mov into sbb cmp fstps jge addr16 std enter movsb push fcmovb je xor mov ja mov jp mov mull cmpb lea push pop loop jecxz aad movsb inc add (bad) in inc jle jmp sbb lret fdivs lahf ljmp ljmp and xchg push lahf mov sbb add popa mov cmpsb outsl lret (bad) in movsb ja jmp inc insb push in adc sub cmc fsubr addb xor dec sbb in cmpsl test inc shrl (bad) cs push test sub mov xor sahf pop scas push push into divl push loopne test jo mov pusha es testb je inc or addr16 psubusb add in ds sbb push ljmp sub lret aaa adc hlt test data16 inc sub or inc cmp idivb sbb jo pop (bad) out push pop out int3 ds add xor mov imul dec inc xor mov xor je xchg (bad) fsubp loop popa das mull mov iret fs ss aam inc out aaa sub jne jno push call (bad) dec or repnz and jo je push sub inc aas cmp mov xchg dec inc inc cmpsl cmp (bad) xor mov iret mov imul xor and jg xor (bad) insb and mov and jle imul and gs ljmp lcall in loop ja mov enter mov movsb les sub xchg add ja rcrb add or push xor loope divl inc lret iret add add jl notb (bad) add out lods add jg cmp inc jle jne xor (bad) mov dec xorl hlt dec mov lock adc icebp add xor hlt out pop push jge xor add mov cli jmp lcall xchg jbe out enter aas arpl ss movsl js vmovupd insl icebp cmp lahf adc xlat mov es rclb jae jl push hlt enter (bad) mov loop mov in pop push jle xchg in mov sub mov inc aad out cmpsb and add push (bad) xor sub stos fsts or (bad) dec pop inc pop mov outsb clc pop push mov aaa outsb add inc xor dec cmpsb jle jle aam push and sti sub jb shr jne mov dec in or in (bad) cmp xor nop out add arpl cld idivb aam out fwait adc push inc sti xor sti xlat or sbb lret xor decl cs push add add add xchg enter and cli movsl daa and mov cli adc dec jne or imul mov es inc mov xchg aad movsb jp cwtl jecxz cmpsb mov (bad) mov fiadd int3 fdivrl aad and push cmp sub and (bad) aaa inc cmpsb inc pop xor lret cmpsb jb inc or (bad) aas cwtl pop fldt cmpsb dec hlt fucomp and lcall cmpb mov or and mov movsb sti xchg pop add out lds stos mov imul imul cmp pop mov stos mov mov adc push imul test sub pop fs stc mov inc or (bad) cli es pop (bad) cmpsl repnz xchg jmp add cltd inc movsl mov jo clc push add in dec addr16 add int3 cmp mov loopne jmp mov repnz stos push mov decl push push cmp test push inc les pop jmp or faddl cmc mov mov cmp (bad) mov sbb mov cmpsb mov add inc push testl cmp lock add aam add pop inc pop ret jp mov inc pop testb inc stos inc or or outsl testb int3 fisttp sub stc push repz cmc add inc pop cmp push es fwait dec int js les mov lret aas and and xorb call dec xor pushf pop jbe (bad) lcall loop std jne add add loopne pop jbe sub and aam jmp xor repnz insb cwtl xor call cmp ja dec loopne jmp decl cmpl int cmp xchg (bad) lock or and jmp xchg cmp mov into dec push dec les xchg xchg mov jp or outsb adc cwtl dec xor inc cmpsl fadd loopne stos enter jae out ds push xchg adc scas sbb in in repnz mov loope pop mov mov xchg roll stos push movsb mov loop cmp repnz mov or dec add ds xchg mov test pop mov in rcl lods (bad) mov or jmp faddl in jp rorb cmp outsb repz mov cmpsb sti cmp mov out out mov jmp xchg lock in pop (bad) sub ret gs es sbb cmp xor mov mulb or ss adc lock jno dec dec push add ja or sub jle xor sbb mov or (bad) fimul inc cmc jbe int3 cltd lret into or outsl imul fs push lahf jno lock add lret les xor xchg or aas push test inc mov sti inc lret test (bad) inc lret ljmp xchg (bad) in test dec sub inc mov and dec pushf mov test jbe inc divb (bad) enterw add imul in movb add scas mov es lret mov ret leave test xchg psubusw lret add jbe das ja and shrb cmp imull std sub dec sub mul stc lods les cmpsl aaa ss cs int push pop xor or (bad) cmc or movsl imul testl inc in jb adc adc clc test xchg lds dec loop std mov test mov shlb mov cmpsl jp jp dec mov movsb dec rcll rclb push mov in aad scas sti int3 dec lret or in (bad) add pop push aam xor jb les lds mov cld (bad) adc cs stc into xchg int repnz jg scas adc inc rcll push sar ret dec sub fstpl push loop scas xchg into imul jecxz in lahf dec call mov cs cld or in xchg push call jg arpl jg mov aam xor (bad) sahf in push mov inc add and jmp add pushf (bad) (bad) in lret (bad) xchg inc out push movsb add sti test (bad) nop xor test mov push mov jno add out add insb test outsb xor stos dec sbb jno inc iret fistpl fsubr add lods push dec rcr mov js xor iret add int3 jno cmc mov pusha jbe test mov sub adc dec idivl push add inc bound mov das jg mov mov push pop fldcw or jne dec enter mov fs pop pop xchg mov xchg pop aas arpl jae sbb dec cmpsb ljmp mov lock jnp mov in inc bound pop roll movsbl xchg mov lcall sbb cmc (bad) ja lods data16 cli xchg or cmp in loop pop add aam icebp sub xchg push xor xchg loop aam out add add add and and mov sub xchg add hlt sub add mov jle mov imul add ret add mov or cli pop add inc jno movl test sub mov mov rcr xchg inc int3 arpl mov stos in out mov outsl incb and (bad) sub stc lds mov hlt push add ret and jmp dec stc inc push sbb cli aaa orb inc sahf outsb cld inc cmp ret ret add ret sahf add jns test mov insb cmp loopne loope cmp in out sbb dec iret push loop ret (bad) lock cld sahf add add mov cmp pushf js xor push jns int3 mov jbe mov jbe fs std pop xlat ret mov sbb push adc inc (bad) int3 rcr imul xor xchg push add xor sbb dec lods xor sti lahf lods adc and add xchg adc xor jecxz popa adc cli loop inc lods xchg add jg movsb nop ljmp add inc pop mov sub jne icebp iret mov repz loopne aas inc aam cmp idivl cwtl fs add mov or (bad) xor mov cwtl ss mov push pop je cmp add aas stos pop sbb mov aas cmc mov lods (bad) notb add cld fadd out add fdiv add arpl jo mov shl lds mov add cmp jbe shrb cmpsl inc cmpl cmp add add ret nop cmc repnz out (bad) push popf adc call repnz push mov ret aam xor push mov pop sbb dec out and or fldl xor call xchg jns incb push jecxz leave loop lds hlt imull addr16 lock fnstsw test jne cmp test in sbb adc lds lret and dec in sub imul xlat cld push xchg jns clc stos inc cmp xor inc (bad) loope,pt orb push popl push cmpsl movsb dec jae daa inc push es dec das outsb dec out mov dec sub repz pop adc cmpsb sbb push lods inc loop or xchg out enter inc inc or mov or add test and cmp imul or pop test test dec add stos clc or arpl scas xchg add out push imul mov movsb sub fadd xchg add cmc cmpsb inc rolb add imulb inc mov cli pop fstpl jns pop cld dec fdivrs fs cli push mov mov cmp mov outsb daa cmp xlat test (bad) icebp jg mov add push (bad) cmp jbe icebp mov call cli sahf sti pusha mov jns push fdiv into loopne sti in ljmp bound into imul in (bad) xor jmp cli ret push fs lock pop divl xchg add sbbl mov mov add push jecxz xor mov add imulb sub decb aas jmp (bad) adc stc mov cmp test xchg sub aam jae lock inc pop mov sbb pop sbb mov out in js lea popa mov pop dec push inc movsl scas aad jmp push sbb sbb popa sub jbe loopne,pn push nop mov shl ljmp add push mov insb push xchg sti xor mov fnstcw out testl fimul xchg push dec cwtl pop jle (bad) hlt jmp pop bound add mov or dec sbb xchg fnstenv adc scas cmp (bad) (bad) xor pop pusha (bad) xchg or pop add (bad) mov int aam dec movsl add pusha xlat aas mov cmc sbb mov or xchg ud2 dec adc dec jo cli add sub aaa add mov dec xlat xor in inc inc cs or test in mov repnz and movsb add data16 adc or mov push shl stc mov xchg push ds mov mov xchg inc in cmp lret mov loope bnd popa sahf xchg es call pop add sub les (bad) or jae dec pop pop inc cmp loopne test dec xor (bad) xchg xchg mov xor ss in sbb xchg sti (bad) je pushf xchg ja adc repnz insb insb enter xchg out pop pop sahf xchg mov jmp test push leave or loopne cmp scas sub mov into lcall mov rcll test (bad) xchg jno push cmp or xchg push cmpsb lock push lods and add (bad) (bad) dec inc in out dec mov test jge sar imul xlat sbb jecxz jmp mov jge js fcmovbe mov cmpsl jne jle push (bad) ds sbb adc aam mov aaa jl adc lds lock ljmp pop imul jbe cmp and mov andb jmp cmpsl test inc push add mov inc pop pop jmp mov aam rorl xchg pushl icebp test negb xor xlat push movl jno test xchg leave mov jge,pn testl add mov enter leave jg jp out mov adc dec stos mov add xor fiaddl mov loope outsl les add add mov mov or adc add sub push hlt ficompl jmp clc fmull imul mov jbe aas add enter mov xchg jmp or insl ljmp in movsb pop in fbld lret data16 push std adc (bad) lea sub push repnz stos icebp add lret shl arpl lret je fnstenv lret dec push and bnd pop add bound pop xor xor mov std push xchg enter jp add or push xor in mov jle add (bad) hlt js mov arpl int3 shrb mov mov sahf stc arpl xlat rorl stc or (bad) mov mov (bad) sub lock mov xchg jecxz iret mov jl cmc push inc std sahf xlat inc inc xlat mov or xor int3 jne pop lods push int3 jmp arpl cmp in div int3 mov dec (bad) inc mov cmc test mov jp jmp push outsl imulb add cmp sub sbb and aam and push fstpt xor into cmc fildl sbb mov jmp scas jae iret jmp loop (bad) add sti jb dec rclb clc js (bad) pop stos and sahf push mov popf inc repz dec add mov dec push push (bad) or pop in add stos inc xchg mov pop sub xchg add out mov or inc xorl mov xchg sti sbb push sub loop es lret (bad) pop dec mov jno xor xchg cwtl js add jne aad xchg aam mov add stos push jmp or leave cmp ret test sti mov repz inc out (bad) and pop cmpsl jecxz fwait (bad) or icebp mov cwtl (bad) cmp lahf adc mov sub pop lds mov sub ja add jno movsl lock insl push cmp cmp sub mov or and rol loop and dec addr16 jbe xlat aas subl daa push xchg loop sub fwait xchg pusha mov repnz xchg mov in insl xchg mov cmc or xlat jecxz orb pminub add call mov (bad) stc push xchg shlb pop divb int3 repnz mov les or (bad) lea jbe jno in loope notl dec mulb mov mull inc (bad) lret jl inc decl icebp fimull xchg dec decl out shll fsts (bad) or jae cli jp mov fldl stc stos inc xor ds sbb dec ret repz xchg jbe test loop in dec lock push into xchg aaa div call into mov test inc add sub push (bad) int dec sahf aaa idivb inc inc jae or out pop mov aas mov in mov dec fist jnp sti mov icebp mov mov add test add cmp mov and mov mov rolb std es jle push clc sub xchg aas js les ds imul loop mov mov mov push inc and mov loope xor cmp cwtl jne push xchg inc (bad) rcl sub in cmpsl adcb dec in jno add cmpsl test jp xchg xor mov adc test mov jmp push in into bound scas inc or add mov shlb ss in or mov lea addb push loopne (bad) mov cmp movsl je movsb xlat adc mov and mov cmp and push cmpxchg mov daa cmp insb mov mov cmp repnz jg mov pushf clc jno movb xchg rcrl fs add jge stos repz (bad) dec mov ret push push insl adc shrb push int3 cmp jle test adc cmp movsb mov loopne cmp and pop cld lahf xor ds shl sti add push jmp hlt jns adc jp inc sbb lret mov inc mov mov stc into xor jns xchg stc or mov sbb jp stos push or pushf fwait repz std cld insb dec (bad) notb loop inc repz es cmp test jmp loop dec pusha mov pop sub xchg pusha fstpt xchg test push cmp aaa inc (bad) enter (bad) or inc jge adc shr pusha ret repnz dec jb frstor xor mov or push dec repnz sub lds dec (bad) repnz push cmp mov xchg enter mov mov xchg les in xor bound jmp and mov mov push or clc mov in in mov dec xchg adc mov inc repnz movsb pop lret dec movsb xor leave adc test sub sbb fsubs adc test out xor test popa xor add stos out (bad) cld mull inc in mov or js fs adc jbe mov cmc das push dec test leave outsl push inc jbe std mov push mov sbb lock pop pop out ljmp adc xor cmp aad push cmp out pop push jecxz test jo mov dec out sub out xor jae xor hlt out (bad) jne and insb xchg gs in xor inc int3 loop mov mov push mull andl icebp pop push push xchg pop les mov inc push test push cmpsl outsl cmpsb push push add js or imul imul mov addl loopne (bad) jg mov stc outsl mov push add imull sub sbb les lock sub mov mov or mov cmp jl mov fisttpl inc out mov in add xor xchg add fstpt adc cmp out les hlt and mov or cli add pop jb (bad) jp shr (bad) pushf inc add popa mov xor test mov out aas push insb jg or sbb (bad) sub pop cltd cmpsb pop or push ret push push mov dec adc mov jbe int inc xor stc mov pop xor mov fbstp mov push les or aam dec add push roll fisttp push (bad) and mov movsb loopne xchg mov (bad) mov xchg mov mov push xchg sarl addr16 jl push fdivs cs cmc add jns mov jb stc out adc rcll imul pop add nop outsl mov enter loopne out dec nop roll mov sbb mov xchg or rcrb aas pop fs cmp lret clc pop scas mov movsl insl mov fildl xor xchg jb pushf loopne enter jbe nop stos xchg out lea lea mov jae lret sbb inc or inc lret jb aas add xor adc add mov stc (bad) xlat jno xor clc shr jnp adc or lock enter jle testl fsubrp inc ja mov add ret call stos (bad) push cmpsl xor dec inc ret ja (bad) xor testb data16 ret or mov xchg cld popf jle jbe clc into pop stc mov xchg outsl rcll or out (bad) sub push mov dec jne aaa pusha inc inc push pop lods ja loop jo push cltd push jg fdivp lock dec pop mov flds or ja inc xchg js outsl sub jmp mov or adc int mov cmpsb mov mov add int lds adcb push repnz sub jbe mov dec or shll int outsb cmc shr jo popa and push jl jmp in iret aas ret xchg adcb loopne or fwait sub (bad) test (bad) xor push push jle jne mov arpl lahf (bad) cmp mov aaa in cmc loop loop les push les push push inc xchg gs cmp scas stos dec out and lahf add es add mov xchg sbb adc je push ds and (bad) outsl mov les (bad) lock pop stc sahf test ss xor enter jb fsubs (bad) or mov (bad) aas jbe stos out xorb adc (bad) push adc mov inc es (bad) pop dec mov cwtl icebp outsb add mov fild out mov sarl mov stos mull mov push ja mul movsb mov cli mov cmp lds lds fsubrs idivb test jle incb mov xor mov adc dec mov idivb or mov jl aam loope addl lret jae push les mov push sub adc and test cmp aam les dec cmp sub jmp les push dec not aad dec mov sahf inc aad dec cs cli or testl pop imul mov in mov vphaddbq jecxz add push cmp test or jb add or nop mov (bad) stos test jmp sbb mov imulb jle (bad) cld lds mov xor call dec pop add ret mov icebp add cmpsl (bad) jns add insb cmpsb gs cmp js ret out inc sbb sbb dec pop jmp sbb or js (bad) mov stos jne int3 xor loop loope cmp mov (bad) mov ret popa call and push mov inc mov jle test call xchg mov sub sbb shrl test movsb inc jle mov pusha repz lcall in push inc lret mov je (bad) mov inc adc add pop roll add mov add in dec and popf test jo in shl jle mov add psllw shrl out jo shrb mov loop and scas sub idivl mov sub mov popa (bad) xor jo pop mov movsl stc les cmpsl inc outsl cmpsb test insl test and dec mov jno sti imul sbb xor es sub aaa lods sub mov rorl in rcrl pop cmp es push inc cmpsb or int pop xchg push mov lock iret sub push xchg add or sub pop aam cld (bad) xor test push xchg mov mov push flds ss mov stos (bad) neg (bad) ret mov mov xchg jb cli jnp mov mov sub xor xor cmc add and mov jp enter mov jmp or or cmc outsl xchg mov cmp lcall cs pusha adc cs and adc ret mov fwait inc inc add dec cmp lcall hlt adc cmp lock push add in jbe and cmpsb pop in leave pop fldl sahf mov ret lock add (bad) lret popf mov jnp inc xchg and (bad) loop out inc test mov aam ret jne loop cmp inc (bad) loop clc sub jl mov imul aad movsb nop lahf scas jbe flds dec mov sub in jle addr16 mov xlat xorl push cld inc fcoml aaa mov cmp cmpl xor inc fsubrs sahf icebp fcmovne hlt jp out ret testb call jp jo mov add add and int3 pop sub mov incl mov fsub push cmp mov mov mov fs fsubp call mov jecxz push int loopne scas push loop out xor xlat cmc mov ret jbe aam fs rol iret mov rolb jno sarl inc cmp popa mov jl inc jbe jl mov cli stc adc (bad) roll out push pop mov lret jns in in push popf lahf addl fidivr out test jo add outsl xor mov loop dec jp aaa aas jle (bad) fcomp mov bnd add daa in enter flds xlat loopne into mov stc (bad) jae mov aam iret fdivs add sub (bad) (bad) into mov push ds mov dec push movsl fstpl out push xchg fidivr loop repnz iret imulb mov loopw xor add cld fsubr mov test jge enter xchg jle int3 pop add gs (bad) idiv mov fdivrp aaa aam (bad) pop out jge add jb out fwait test out stos jge loop jb into (bad) mov fsubp ss lcall test add inc (bad) cld test mov pop mov add pop in ret push (bad) dec ret inc (bad) push mov cld dec ja mov movsb xorl loopne add mov int3 call ljmp and jle or mov aam jg ljmp mulb cld cli xlat loopne cld pop (bad) xor add std and xor enter std mul ljmp (bad) dec sti inc dec push (bad) outsb xchg add push fs xor dec push sbb lds add enter fildl scas jle sub repnz (bad) mov fsubp mov out mov sub out xchg cmp aam icebp test lcall es lahf jge arpl lods and cmpsb mov add insl cmpsl sub imul loop aaa cld fucom jbe in idivl aad jbe in testl and jb (bad) outsb jle insl andl push fdivs (bad) popa fdivs cmpsl movsl inc sub aaa lods int3 xchg xor or imul loope add pop ja inc fdiv cs mov (bad) ljmp add pop rclb je,pt ljmp imul (bad) mov lods cmpsb mov (bad) xor add mov mov les inc out cli fs add xchg cld aam mul jle jge (bad) pop pop dec pop test jmp xchg jmp add dec outsb je jb gs jb je inc imul dec inc push cs insb add out pop call pusha call push pushl popl mov mov pushf lea jmp jmp mov pushf lea jmp pusha jmp jmp clc lea stc cmp jmp xchg test pushf clc xor jmp pusha mov pushf lea jmp push inc pushf mov lea jmp cld not bswap mov std jmp push mov mov pusha movb mov jmp pushf cmp sub jmp pushf movb pusha jmp pushf mov pushl popl push pushl mov lea jmp push mov mov jmp push call cmp sub cmp clc sub jmp rcr call push pushl jmp movb mov pusha lea jmp push mov mov movsbw mov push std pusha jmp mov mov pushf mov pushf lea jmp lahf mov jbe pusha mov pusha mov movw movb pushf lea jmp lea jbe pusha mov pusha pushf lea jmp push mov push movb mov lea jmp pushl jmp sub clc jmp call cmc pushf test cmp add jmp mov mov push lea jmp pushf pushf mov jmp lea je bt push add sbb mov call ror jmp pusha movb mov push lea jmp pusha call shld pusha mov mov pushf push call call jmp shl mov stc test stc sub pusha neg movw pushf dec jmp cmc rcl add mov cmp ror mov cmc stc test pushf sub pusha movb shl pusha pushl mov call push add movw pushf call pushl mov movb push pusha lea jmp pushf test xor clc clc test cmc not cmc movl mov add clc stc ror cmc pushl add jmp rcr dec aas bsr mov clc movzbw push mov bt cmc not cmp not clc jmp pushl pushl movw mov pushf jmp movb add call rcr aas shl shl mov sbb shl add push mov cmp pushf clc cmc sub push shl lea jne mov push pushf popl pushf call mov push pushf pushl ret pushl movw mov push push mov lea jmp cmp add jmp pushf pushf pushf popl jmp pushl popl movb pusha movl lea jmp xchg mov push cld lea pusha pushf lea jbe push lea std not lea mov jmp clc add call rol pushf neg pushf jmp pushl popl mov movl lea jmp not push rcl ror clc xchg sub pusha bt bswap bswap rol bswap and bswap movzbw lea pushf jmp mov mov lea jmp cmc test sub push pusha lea jbe mov pusha lea jmp mov jmp rol pusha neg stc sub call jmp daa shr data16 lock mov sar pusha rcr sbb mov push jmp mov pushf pushf mov pushf mov pushl mov push mov push pushf lea jmp push pushf mov pusha mov lea jmp pushf pushf popl pusha call add movb pushf mov call mov call pushf popl jmp pusha movb pushf mov call bt sub movw mov movb lea jmp inc bt movw sub call mov pusha lea jmp pushf push mov call mov movb pushf pushf push mov push push mov push lea jmp pusha jmp inc cmc cmc xchg bt cmc clc call test bt shl movsbw mov shl or push sub bsr clc and add stc rcl or xor push add bts neg add bsr bsr shr neg shrd clc rcl rol not bts sub neg bsr cmp mov cmc cmp pushf bt add test cmc add pushf call call pushf mov push push mov call pushf cmp mov pushl popf push pushf lea jmp cmc test clc sub jmp pushf mov mov mov pusha movb lea jmp call shl jmp jmp cmc pusha lahf bsr mov test bt neg mov mov pusha bt stc add call call movsbw cmc das mov jmp jmp pushf cld movw pushf lea jo rep or push mov pop adc mov jmp lea push bswap pushf stc rcr btc push jmp jmp cmp not stc pusha stc lea call call jmp pusha jmp jmp bts bsr aam dec mov neg sub pushf mov cmp lea ja add call mov push mov push mov lea jmp sbb adc pusha mov push sub pushf jmp pushf popl jmp pusha jmp pushf jmp pushf popl pusha pusha pushl popl pushf movb lea jmp push pushf popl call jmp pushf pushf mov pushf lea jmp movb pushf popl call das or das movzww call aam mov cmc sub pushf pusha add jmp neg not sar sub dec data16 repnz bswap movzbw ror movzbw pusha and movsbl mov test cmc stc sub push mov mov movb push pushf lea jmp pushl popl pushl pushf lea jmp shl sbb movzww jno cmc sub jmp jns push pusha movw mov jmp not shr add rcr not rcl not sub pushf inc and xor pusha rcr btr rcr movzbl bts pushf bts mov stc call pushl mov call setno mov jmp movb pushl mov mov lea jmp mov jmp pushf popl jmp test inc lahf pushf mov clc call cmc ror bt bswap clc sub jmp pushf pushl pushl popl push lea jmp call push pusha call data16 lock mov not mov bt add push movw mov push push lea jmp pushf mov pushf mov lea jmp pushf sub push movb pushf inc clc test neg call jmp mov pushl pushf call rcr cmc shr adc mov clc bt mov push jmp pushl mov push movb movb lea jmp jmp add lea js mov jmp pushl popf mov lea jmp shr pushf movb movb mov pushf lea jne pusha mov pushf popl jmp pushf mov not bswap push movzbw setge movzbw movsbl mov lea btr pushf call mov jmp mov not push not push seta jmp pushf pushf popl mov pushf pusha pushl popl pushf push movw lea jmp cmc add pushf mov jmp call pushf pushf pusha mov call shr call jmp pusha call push pusha movw movb mov push lea jmp movzbw cwtl mov call pushf popl jmp pushf call pusha decl jmp movb jmp pushl popl movb push lea jmp pushl popl push pushf pushf lea jmp stc sub push pushf mov pushf inc jmp mov push mov pushf lea jmp mov call neg call pusha pushf popl jmp bsf inc mov add rcl bt movsbw mov bt add pushl mov mov movb pushl movb pusha lea jmp mov mov pushf mov pushf pushl pushf lea jmp setno rol add mov js sub push movb inc mov neg mov movb pushf dec mov push call sar movzbl pushf add cmc neg clc rol pushf push pushf not mov pushf call dec pushf pushl bt rol push jmp call mov mov movb mov pushf lea jmp cld push rep xor sub jp pop shrd rol pop std pusha pusha jmp sar mov clc add pusha pusha push pushf lea jmp pushf pushf mov pusha mov pushf movw pushl push lea jmp pushl popl test cmc pushf cmp add bt pushl popf mov mov pushl lea jmp mov pushl push push lea jmp pushf mov movb jmp push jmp jmp mov mov pushf pusha lea js pushf jmp call add mov xor call jmp call push pusha call push push pushl mov jmp mov push pusha pushf lea jmp mov call movb dec bt clc pushf pushf sub pushl cwtl call btc aam mov aaa mov push mov sbb sbb sbb mov pushl cmp cmc pushf add call cwtl xchg xchg mov movzbw mov mov seta mov pushl movb push pushl ret pushl popl mov lea jmp data16 repnz movzbl shl xor add sub shr xor adc neg pushf movsbw bts rol inc call pusha pushl popl movb pushl lea jmp cmp cmc sub mov call pusha inc clc lea cmp xchg cmc mov xor mov dec cmc call mov lahf notl bsf setl clc bswap mov clc test pushf pusha sub test and pusha jmp jmp stc aam mov daa setbe pop sar rcr pop bt pop or popf sets lea pop pusha pop lahf xchg mov lahf mov call call stc pushl and pushf mov pushl pushf popl lea jno pushf pusha pushl popl push pushf lea jmp call inc cmc jmp add call sub movzbw pushf lea add btr shld shr rcr mov bswap neg dec add push mov rol or bts rol xor call mov pusha lea jmp call shr setp bt mov dec rol and not mov cmp cmp not pusha test not movb sub mov and call push pushf mov rep pushl inc lea mov sbb pusha shrd sar mov clc bt pushl popf movw lea jmp mov sub mov jmp jmp pushf call pushf movb mov jmp stc jmp pushf mov movw pushf mov pushf lea jmp pushl popl pushl push lea jmp btc rcr not stc sub movsbl sub inc movsbl neg rol btr rcl ror bsr movsbl adc and test mov cmp jmp push push mov jmp push clc add bt xor jmp push pushl mov pushf push pushf lea jmp pushl popl push movb lea jmp add pushf lea jns pushf pusha mov call pushf pushl mov movb pusha pusha call jmp pushl mov pusha movb mov mov push movl push lea jmp mov jmp movb dec call call movw lea jne push mov pusha pusha movw pushl lea jmp rcl sub cmp mov cmp jmp test das mov push pushf push sub pushf call pushf pushl popl pushf lea jmp pusha mov movb pushf pushf pushf lea jmp push pushf pusha pushl popl pushf pushf lea jmp pusha call ja rol shrd mov aad aaa lea rcr bsf btc sub cwtl xchg lea ror (bad) notl btc cmp and neg and shrd shr sub call push stc jmp call push call movb mov pusha pushf pushf mov lea jmp btc or dec call push mov pusha mov mov pushl mov pushf pusha mov lea jmp cmc cbtw jmp cwtl stc sub pushl call mov movb pushf mov pushf lea jmp pushf call jmp pushf inc mov pushf mov mov lea jmp call bswap movzbw jge cwtl mov pusha mov movw call mov mov pushf jmp movl pushf popl push pushf pushl popl push lea jmp bt pushf sub pushl mov mov mov movb movb lea jmp lea mov jmp movb sub pushf call jmp not mov movsbw pushf call mov mov mov push pusha lea jmp pushf pushf mov call pushl pusha mov mov mov lea jmp rdtsc mov sar mov rol add xor mov push bt add call push inc stc pushf push neg cmc pushf stc not cmp pushf jmp pushf mov movb pushl mov lea jmp mov pushf pushl lea jmp or mov call push mov pushl popl push pushf pushl lea jmp cmc pushf cmp sub pusha push call mov jmp test pushf shr bt xor add pushf btc xor pusha mov lea pushf movb pushf inc pusha pushf push lea je decl jmp pushf jmp push pushf jmp mov cwtl mov pusha mov mov jmp pushf rcl bswap bswap mov jmp movb divl pusha mov pushf mov push pushf popl call pusha mov pushf jmp pusha mov push add jge cmc clc sub call lea jo pushf jmp push jmp call mov pushl pushl mov call call mov pusha movb lea jmp mov mov movw movl lea jmp mov call cwtl movw clc sub jmp cmp pusha mov jmp pushf mov pushf inc push lea jmp jmp call mov movl lea jmp pusha jmp bt mov pushl add lea je sub push pushl call or movsbw ror test mov cmp add pusha call add call pusha cmc call push pushf mov jmp pushf pushf bsr dec bswap pusha clc not movsbw mov rcl clc ror btc add movzbw ror pushf adc mov bt call not bts mov xor rcl cmp clc add push pushl pushf movb mov jmp jmp adc shl aaa push mov jmp jmp dec pushl not pushf stc cmc ror pushf pushf pushl jmp jmp mov jmp pushf pushf popl pusha jmp bsr rcl bsf xor cmp cmc bts movzbl test shl push add shrd mov test and jmp pushl pushf call pushf pushf pushl popl pushf movb lea jmp movb add mov pushf pusha push mov push pushf pushf mov lea jmp test shrd push mov push pushf mov push jmp pusha setns aam mov mov cmc not mov mov clc pushf mov add movb jmp jmp btr mov neg sbb mov bt cmc sub jmp mov sub mov pusha call pusha jmp mov rol add jmp popl pushf pusha push lea jmp pusha call ror mov pusha test sub jmp sub bt sub jbe cmp mov test sub call shr mov add neg dec add setne push mov lea jo push mov pusha pusha lea jmp cbtw clc jmp push pushl mov pushf lea jmp mov bt add jmp pushf mov push push mov pushf lea jmp inc not lea jno mov dec ror not bt stc bt ror adc data16 repnz add jmp push pushf push push mov jmp lahf push setg mov lahf mov jmp test test stc add call jmp pusha push mov push push jmp movb mov pusha movb pushf lea jmp cltd dec and xchg dec and xchg dec and mov cwtl dec and dec and (bad) dec and dec and mov xchg dec and dec and xchg (bad) dec and dec and cltd dec and xchg xchg dec and dec and test lea cltd dec and (bad) dec and dec and xchg dec and dec and xchg dec and mov xchg dec and cltd dec and mov xchg dec and dec and xchg dec and mov test mov mov xchg xchg dec and dec and mov (bad) dec and dec and xchg dec and dec and dec and dec and cwtl dec and dec and xchg dec and cltd dec and orl orl dec and and dec and (bad) dec and dec and orl dec and xchg dec and xchg dec and dec and xchg xchg xchg dec and xchg mov xchg dec and xchg mov nop dec and cltd dec and xchg dec and xchg dec and xchg cwtl dec and dec and dec and dec and xchg xchg dec and cwtl dec and xchg xchg dec and cltd dec and mov xchg dec and orl dec and test (bad) dec and mov xchg xchg nop dec and test mov cltd dec and xchg cwtl dec and xchg dec and xchg dec and mov cltd dec and xchg dec and mov test orl xchg dec and dec and mov xchg dec and xchg dec and orl dec and dec and xchg lea test xchg dec and xchg dec and mov test xchg xchg xchg dec and xchg dec and dec and dec and mov xchg (bad) dec and mov orl dec and cltd dec and mov xchg dec and cltd dec and mov xchg xchg mov xchg cwtl dec and xchg dec and xchg dec and xchg dec and mov mov cltd dec and cltd dec and xchg dec and dec and xchg dec and xchg dec and xchg dec and xchg dec and xchg dec and cwtl dec and mov lea xchg dec and dec and xchg dec and xchg lea mov xchg dec and xchg xchg dec and dec and mov (bad) dec and dec and xchg dec and xchg dec and lcall pop mov sti dec and dec and xchg dec and (bad) dec and mov xchg dec and dec and xchg dec and dec and dec and dec and dec and mov xchg dec and xchg dec and mov xchg dec and mov test xchg dec and dec and lcall sbb dec and xchg dec and and mov xchg dec and dec and xchg dec and sti dec and dec and (bad) dec and dec and xchg dec and dec and xchg dec and dec and lcall loop dec and cltd dec and xchg dec and dec and xchg dec and mov call call push jmp jmp pushf pushf pushl popl pushf mov push lea jmp call jmp pusha call pushf popl call call mov test test jne stc add call call jmp mov lea jne push call adc pusha mov lea bsf mov pushf stc pushl popf push lea jmp mov mov lea jmp call push mov mov inc clc pushf test cmc sub pusha mov pushf push mov mov mov pushf mov lea jmp pusha mov pushl pushf popl lea jle popl push pushf pushl pusha lea jmp cmp mov sar shld rcl mov clc pushf pusha bt add mov mov pusha lea jmp jmp pusha mov call sub cmp cmc clc cwtl clc push sub movw mov pushf mov push lea jmp mov mov mov movb lea jmp shr lea jno pushf mov pushl pusha call push mov push movb movb pushf mov pusha pushf mov push mov movb mov lea jmp 