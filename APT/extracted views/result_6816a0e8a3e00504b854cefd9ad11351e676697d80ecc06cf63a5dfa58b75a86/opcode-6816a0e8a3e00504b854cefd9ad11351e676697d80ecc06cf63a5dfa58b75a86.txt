add insl gs jae je pushf mov pushf pushl ret movb mov cmp bt push cmc mov clc bt cmc pushf mov cmp bt clc push clc push jmp add inc insb jne push outsl insb gs outsb jo je jne data16 add push jb arpl jae xor js add add je outsl insl jo je jb popa insl gs add add outsb dec outsb jo je gs je jo add inc jb popa je inc inc inc add test lods add ficomp fs jmp popa repnz outsb add lret jg jne cs outsb mov stc push lds push inc mov je das dec or in push push push add add fbstp add negl cmp sub into xchg in xor mov in mov mov (bad) jae ja push out and (bad) fnstsw mov inc add inc adc cmpsl fldl push (bad) icebp xchg pop add and aam sbb lods lret sbb xchg or (bad) test jns cwtl int3 push or mov fdivrl xchg es sti ljmp pop push cmp data16 aas je scas and clc inc loop (bad) mov out jecxz mov lret xchg jmp outsb xor pusha rcrb (bad) fwait scas cltd and xor or adc xchg jae cmpsb jne in push pusha repnz mov mov das in ja out repz fwait (bad) fisub lahf sbb mov and pop lock mov lcall ja mov fs das pop adc xchg icebp xchg movb jmp dec pusha cmc shl jmp jmp push call or add jbe inc imul gs imul outsb je outsl jne arpl pusha movb call jmp add push gs gs popa insb jne inc js add add gs je dec jne gs add add jb arpl add add addr16 popa jbe dec gs add test mov jmp add push gs jb push outsl push gs data16 cmc push ljmp mov cltd mov sub jns sarl les test push mov push or popf test bound dec mov add sbb pop pop mov dec lds les cmpsb push sub ss sbb xor xchg sub dec ja cmp mov inc lods nop jbe mov cmp inc and push push je mov jo pop insw outsl fs add insl jo jb inc imul add pop popa fs jae pop imul push gs jne jb push popa insb jne inc js add add jb outsb outsl add test add cmc jmp add pop data16 insb add test add and jmp add push gs je jbe outsb je push push xor xor fs insb add add popa insb inc insb insb outsl arpl add inc gs je arpl bound arpl add je jne jb outsb je jb arpl jae fs sti mov add jno add stos or mov jae add push adc int3 push adc pop jae add adc sbb adc mov add arpl add adc sub add add add add mov adc jno adc inc jns add push adc or add or enter (bad) jne add adc leave jne add stos or mov add jne add push adc cwtl push adc (bad) testl bsf bswap xor mov cmc cmp shr stc stc cmp push jmp add inc gs outsl arpl push imul insb outsl jae push gs imul insb add add jae popa addr16 outsl js add call pusha xor pushf pushf pushf lea jge call pushf lea jg jae push lea jge dec dec mov dec setge dec setns inc not mov jmp add push outsl outsl insb push xor popa fs jb arpl jae gs outsl jb add add je jb arpl jae imul popa je outsl outsb add scas mov not mov bts sub sar not call ret dec std js mov mov scas outsb cmp mov outsl mov lahf fs popf mov xchg insl fs loopne loopne roll sahf push aas std push pop xlat inc mov mov fsubl ljmp pop jle test in fimul adc and stos dec pop leave aad std test and outsb cs pop (bad) loop hlt jne add imul inc gs jne jb outsb je push dec add add jae gs push imul insb gs imul jne jb push gs outsl jb popa outsb arpl jb jno outsb arpl add inc jb popa je push outsl outsl insb push xor popa jo push xchg mov xchg insb rol jno inc enter int3 mov pop dec rcll xor cmp pop sbb mov inc sub mov shrb and add adc inc add shrl push xchg cmc mov push cmp jle imul fidivl and jge dec repnz mov nop cmp or incl arpl addr16 lcall jno push lea clc stos popa out out xlat push pusha adc pop adc int loop jecxz add js sbb fisub (bad) jnp cmp push cmp loope and inc adc pop inc aam cwtl das cld mov in shrl (bad) inc std (bad) roll rorl add popa insb insb outsl arpl movw mov mov pusha push pushl ret add jae jb outsl jne add arpl add add jmp call add dec insl jo jb outsl outsb popa je dec outsl addr16 outsb push jae jb add inc gs je jb jne dec outsb outsw inc add add imul jb jbe insb gs popa insb jne inc add rcl mov bsf mov bts mov cmp call add dec jo outsb push imul popa je outsl outsb inc add add insl insl outsl jbe add adc scas call fsubr or add insb outsl jae add and jne push pusha pushl stos movb pushf lea jmp push call add inc jb jo inc arpl jo add add je imul imul jns add add je gs arpl popa jo add add insb jne push add lea call pusha adc call add dec jo outsb inc gs je jo add or push inc push push cs insb add add je jbe outsb je stos xor mov sub in xchg jmp xchg aam jae pushf adc xchg imul scas add sub in je dec aam hlt mov push lock fidiv cmp lret cmpsl repnz or (bad) fs jae not mov push push inc inc jmp add imul add add bound bound je push lea call push pusha lea jmp add inc imul je imul je outsb arpl add xor vpbroadcastd dec fcoml xchg adc inc push int3 dec mov xchg icebp (bad) xchg xor xor or xor mov fist call cld je mov daa add and jg fs xchg lea jns jne push lea jmp inc leave inc aam (bad) (bad) rclb push xchg cmp loope jle mov and dec pushl adc arpl mov mov call push dec inc dec xor cs insb add adc out call inc aad add insl gs arpl add mov mov mov pushf mov lea jmp add inc gs imul lea jne push mov mov mov lea jmp add inc imul gs ret or or repz fnstcw mov insl jb jmp ret push jge decb js mov push flds pop imul mov push fabs std ljmp mov push fstps imul in xchg (bad) cli mov mov cmpsl jb jmp cld adc cli rorl adc repnz adc repnz jmp mull scas and bound dec jmp repnz mov int3 xor repz loop lcall pop lcall xchg jmp (bad) push (bad) xchg aas lcall mov mov jae adc mov push jb jmp xchg push fnstcw ja adc and push fstps outsl jge test xchg xlat cmpsl mov push fabs xlat popa adc ss xchg jb jmp shrl fxam mov stc jae or psubsw xlat and push push (bad) loope jmp jo mov or adc fldenv mov cmp mov push jb call repnz xlat push mov bound mov jg ja jae or test repz adc fptan ja sbbl dec scas ja ljmp repnz add push xor shlb das or cwtl mov jnp fptan lock clc jb jmp imull fldl2t mov mov jmp mov xchg pop xchg xchg jge jno fstps dec inc jb ljmp mov push fsts pop addr16 jmp stos lcall (bad) mov adc ret cld jae or in fst aad leave push fldcw (bad) clc dec ret out enter ret fidivl cli sti fistl xchg sbb int leave jge sti mov xchg xchg xchg xchg xchg ret into leave lret sbb mov lcall mov (bad) add pop xchg div repz out scas div xchg fucomip xchg cmc cmp imul sbb lret outsb add mov jnp xor fnsetpm(287 idiv xlat in icebp stc mov out jmp lds fwait hlt lock dec bnd aaa jp jmp mov mov mov repnz mov mov cmc jmp imul hlt rcl mov pop sub ljmp dec and js jae repnz or jp mov out out sbb jmp xor fsts (bad) lret ja mov adc cltd mov fbstp fisubl out hlt test jg repnz in (bad) xlat iret scas inc ljmp fiaddl push clc fldcw jb jmp aaa push fstps stc jmp pop inc aaa mov xlat mov fldenv mov xchg jb jmp jno mov pop mov movsl jno leave mov enter lds jmp cmc push fnstenv popf mov push fstps pop jmp int aas fldln2 mov lods jb (bad) sti fldcw js pop mov lcall jp mov jmp (bad) xlat ret pop xchg mov push xchg jmp cmpsb aad jecxz lahf cli (bad) xchg xchg (bad) jb jmp mov adc sahf push fsubs jle mov mov inc jno stos outsb mov push (bad) call sti mov jmp fcom push stos lret fnstcw mov mov ret rcl mov pop stos mov mov add mov (bad) fsubrs mov stc mov mov inc sti pushf jmp jl mov mov push mov jmp cmp insb push or mov xor or xor add fcoms pop bound insb push or mov mov add fnop inc pop push jl cs dec jg insb push or mov cld mov xor sbb fsubrs sub insb push (bad) xor or mov add fadds add fcoms jg insb push or add sub mov xor pop fnop sbb cmp pushl jnp cmc sub repz xorl push loopne jmp or loop mov enter mov jmp out jne fucomip mov loope imul idivl stc jp imul jecxz hlt jae jmp jae jmp jae jmp jae jmp jae ljmp js and mov pop outsb push or inc ja lock in scas xlat sti gs hlt test lcall hlt loop mov insb pop xchg mov (bad) push cwtl adc xchg pop sti leave jae in push inc pop (bad) jge mov sub inc lret or hlt into inc adc fdivp cmp xchg jmp fwait or dec xchg sti mov inc or jle and adc push mov xor sub arpl (bad) cmp xchg addl xor cli out (bad) cmc cwtl jae in add push out lret fisttpl xchg scas pop mov fstl mov divl sub add (bad) (bad) arpl and mov pop and sti xchg and sub lret and inc jmp jnp xor lcall fcmovu aaa dec movsl sti bound sub push ds mov stc (bad) repz pushf dec and out xor je sti mov ljmp lcall mov mov cli aas (bad) sub jmp or jbe dec sti faddl cmc push pop cmp sti enter pop xor sbbl push repnz sti in sbb xchg jl mov (bad) xchg push lahf hlt cwtl adc cltd lcall jbe mov cmc sub cmp cs movsb aaa in push xor stos adc inc sti cmp (bad) sbb cli push cltd mov and or sub xchg scas daa add sub sti aas pop sbb inc daa cli mov and aaa sub pop and xchg mov (bad) mov xchg dec sub sti and fdivrp sti enter push xor hlt push mov mov lock cmp (bad) inc xchg in movsb dec jbe mov pop sti pop lcall in xor rcr pop sub push and xor mov adc sar ds dec popl (bad) js push inc dec cmp out test xchg sti sub ret adc sti pop out and js pop sti mov lock sbb xchg cli addr16 mov in in pop push push dec cmp jle imul or pop jnp xchg or sti (bad) cmp xchg sahf movsb cltd sti add xchg xchg jnp lds nop lea sti shrb jb andl push xchg mov add or ret insl inc in cmp adc sbb push and test or push push sti cmc inc mov and shr and mov xor sbb pop xchg test insl (bad) lret xchg mov sti dec lcall sti sub data16 test das clc mov inc inc sti in fxch aad cmpsb cmp rcrl ds imul jmp cmp sub inc jo and iret fimul mov aad or xchg clc push repnz xchg hlt mov sbb out inc sbb rorb ret loopne out pusha sti insl sub cmp or jg sbb lock cld sub jne sbb add xchg (bad) sti js fsubrl in jp cli aad add das mov call jge xchg in pushl cli (bad) cmc xchg lahf lock ljmp dec cltd add xor sti in sbb pop or cmpsl js lods cmp sti ret xchg push add fwait sti sub test sub mov lock or and ss inc sbb mov incl ffreep or je cmp imul push clc pop inc xlat test or cmc and sar movsb sbb fmul sti adcl xchg sahf rorb cli cmp out cmp sbb mulb xor mov jns (bad) test mov mov pop test push mov mov xor cmp or xor pop sbb clc lods inc dec scas jge push insl into js pop sub arpl cmp mov fsubs test mov sti subl lcall adc arpl gs (bad) mulb push sti pusha and into in dec popa xor lods sahf fiaddl sbb mov mov ja sbb pop outsl (bad) mov push lcall adc adc or js cli cmp dec jnp adc shrl clc nop mov mov ret sti rcr iret repnz lock cli fucomip or mov dec setle push sti js pop add jmp sbb push jb (bad) pop hlt imul pop in inc outsb ja (bad) sbb or mov cmp jle ss sti imulb adc xor jno addr16 mov adc push cli cmp ret cmp ss daa scas pop cli inc fisubrl icebp sub repnz das lahf mov and jo repnz cmpsl sahf inc inc call xor in sti gs arpl xor add punpckhbw inc sbb cltd mov adc sti cmpsl mov mov loop out and mov std xchg arpl pop jg (bad) repnz pop dec movsb sti sbb fisubrl sti push enter rorl xlat dec or mov pop hlt (bad) push or test (bad) mov add add mov xlat lds sar jmp mov outsb sti mov mov sti jge cld or std sti jg sub mov add jno inc hlt adc cmpsl sti aas dec ret push mov cld rol push jnp xor inc bnd sti dec jmp sahf or in (bad) cli pop mov mov cmp or fdivrs (bad) push jnp test mov lds adc jp ja loopne sti loope mov xchg hlt arpl test (bad) vmaxsd sbb inc test js imul inc imul movsb hlt or addr16 cmp sti adc hlt dec push outsb fild in lret or jbe jnp xor cli mov mov sahf add (bad) mov sbb xlat sbb jl cmpsl adc fsts cmp push cmp sti xchg push lret aad pop (bad) hlt inc dec ss add fimul and aas nop push jnp mov repnz stos jl ja sti dec xlat (bad) or hlt (bad) cli leave mov fisttpll sbb mov lds mov jns sahf cwtl lods and and adc inc mov insb aam sbb lock inc xor in inc ja sahf pop clc hlt pop loope aaa mov jae mov clc push cmpsl jge add (bad) cmpsb jp cltd scas fdivl test sti popf pop fsubs push in dec negl gs loopne sub (bad) bound test sub movsl jge fsubrl daa fildll cltd call test adc fsubrl sti and invd jge dec sti cmp (bad) int3 cld test xchg (bad) push hlt repnz fcoms xchg mov sti (bad) push mov insb xchg sti loopne push aam jno sbb outsb sub cltd jnp cmp or clc and sbb out add clc js aad dec push inc xlat pop mov cli out xchg (bad) mov mov inc sti nop xchg pop pop mov repnz test mov dec (bad) dec sti inc or enter jno std xlat push xchg cmp lea ja mov pop push js adc xor dec sti jg divl lods testb call in and sbb out xchg add cmp and icebp into mov mov pop aad inc xor fdivp fldl mov int3 loopne pusha lcall sti push inc xchg loop or jmp call sti push mov out mov cld cmp pop pmulhuw sbb insb ret xor sti inc add sarl fnsave test stos stc mov lds and sti cli push jecxz ja movsb lret es adc cli ljmp insb dec pop scas cld push sti aam mov fstpl (bad) bound xlat fcmovbe inc adc sbb fwait (bad) rorb pop (bad) into cmp sti push int pop (bad) int3 cmp mov add mov fsubl sti pop mov (bad) push stos test in mov es sbbl jge inc mov in sti out jle cltd sub push xchg jnp push pop fdivp cmp int (bad) lahf je sti mov imul jne mov mov test ret or arpl sti mov stos cmp adc sbb mov xchg outsb xchg sbb in out iret lods faddl (bad) sti inc mov cwtl sbb fistpll imul scas sti popa aaa mov or mov add xlat jns sbb hlt cs rcll outsl jo stos xchg or cmpsb mov repnz add test clc es stos adc sub mov dec je push mov clc add lahf sti mov int3 dec pushf sti jnp (bad) sbb sbb or push mov hlt lahf dec mov adc xchg sti inc push imul adcl or fistpl or in lcall adc jae adc jno push adc lahf xchg adc or std jnp sub pop (bad) sti fs push cmc cmpsb dec jmp loope loopne and mov xchg add jl cmp aad ja sti ljmp pop sti pop (bad) xor add add ljmp sti movsb les in jb and ret and push mov sbb fidivl push push mov les and nop and xchg fstl inc cmp jp into notl cltd sub sub sti adc sub cld sti popf ss pop aaa jge sti and das movsl sti movsb cmp mov shrb sti adc cmp scas xor pop ss mov add push xchg mov das mov sub stc sub inc stc sub test decb imul pop mov cmpsl xchg or fldenv sti jnp add aas pop sub dec jge gs (bad) add mov psadbw pusha jle or popa lret (bad) jb hlt pushf mov outsl popf sbb insl xchg jo sti insb divps and pop jns mov jb fdivs in js in mov jnp sti and jp das push stos jbe jecxz je sti mov jne sub push fs inc fistl notl push push jg adc fucomip rorb mov xor or push int3 adc push test mov add pop or jg pop pop fs hlt inc adc cmc inc pop push mov jns out and ret inc mov cmpsb xchg jo xchg fldenv inc pushf mov inc cmc add pop push inc jno sti aas js fistpll and (bad) arpl xchg aas inc jo repnz or movsb fs insb leave xlat or (bad) inc cmp or mov repz sbb fisttp cmp mov sti and sbb pop movsb loop add lret push adc mov dec mov sbb push xor mov aad sub data16 jecxz into add pop (bad) sub je adc mov dec (bad) sti repz xor jecxz xchg (bad) icebp sub dec xchg sti ret stos int3 out pushf pcmpgtb fmull mov mov inc sbb cli push mov sarl hlt jmp adc fwait mov push mov pop xor or aaa pop fs lret fnstcw movsb pop sbb push mov cmp sti lods sub inc fdivrs jnp jl aam mov sti inc jg mov imul add mov cmp pop fadds imul sub jb in sub out sbb dec sbb jl cmp sub in adc pop mov adc sti sub jnp xchg in int3 xor adcb out xor dec rorl pop inc and sti arpl jge stos xchg or scas sti aam in sarl or push pop jae (bad) or and ret sub rolb fmull call xlat jae int3 push jl sti shlb hlt add out sbb scas fldl or cld jb int xchg clc in cmpsl stc mov add or sti int3 scas xor jnp and pop pop mov sti sub xchg lds mov jno (bad) xor sahf pop dec stos sbb lahf mov arpl in add in les mov aam aad fcoml fidivrl dec and jo sti dec lahf enter push popf (bad) push cmpsb adc mov loop decl repnz and leave fbstp jns mov rorl add add lret js repnz push adc hlt cmp mov inc push sbb (bad) int3 sar mov mov push dec or ljmp arpl and xor mov (bad) std sub sti mov add ret lods fs insb sahf or fmuls scas fwait jge push insl sub cltd adc inc sbb cmp les inc andl ficoml sub adc sbb insb movsl cwtl lret sti lcall popa ret sti hlt and cli cmp (bad) sti inc dec test repz lods sti mov call sub addb in cs jmp push cmp sti loop fadds sti xor fwait cld dec sti sub pusha xor push movsb mov jecxz push ret std das popf ljmp cwtl jb sub pop adc hlt int3 add (bad) and test adc popa adc xor mov cli cltd in or hlt xchg scas adc and aam (bad) (bad) hlt imul inc cmpsl aad sbb mov sbb sub mov jno adc jp inc test sbb sti add adc or cmc jns mov lcall sub (bad) sti jge mov cmp lea test or fdivrp mov pop fucom sti or push mov xchg xor call lahf pop cmp inc ret cli jnp push sti pop push (bad) out lock clc sti stos fildll in jne clc mov mov mov sub or repnz dec xorb int loopne mov mov and adc xchg stos fcoml sti das subl cmc negb hlt lret gs (bad) stos inc cmp pop sti insb adc data16 pop in and (bad) pop inc sti push sbb adc sub add sti inc scas sarb jg adc inc into hlt imul xor xchg xchg dec fisttpl or sti mov cmp daa clc jle push pop adc inc inc stos lret gs xor (bad) arpl cmp cltd add movntq out lahf lods cwtl cmc (bad) in and in mov push sar (bad) scas xchg jmp es fwait mov mov mov daa mov out jbe std push icebp inc nop (bad) arpl mov and and mov mov lahf mov sub sub lret dec stos xor fwait jnp sub pop inc movsl dec aaa sti fsubrs bound push fsubrp sar jnp pushf divb xor dec lock int3 sti mov mov sti lcall test pop mov cmc arpl sub aas or jmp adc jle stc inc inc fcompl sbb inc daa lock in sbb sti call sbb in arpl jl out inc repz mov fs nop fsubrs cltd jbe xchg lret and pop (bad) loopne push sti cmpb cmp in aaa sti movsb xchg dec and stos jo inc adc inc jae jg push fidivr and mov subb or daa scas xchg scas dec lcall mov jl sti inc lret sbb sti and push sub mov sti and adc decb jae and fwait inc sub sti clc ficom push icebp scas pushf push sti out jg stos (bad) mov insl cmp out (bad) xchg inc test jmp sbb pop sti pop popf sbb xor arpl cmp xor push inc mov int out jp ds sti sarb (bad) dec push inc js (bad) dec inc clc imul add ret test aad out pop in sbb xchg (bad) ja push xchg mov push pop in sub push cmp aam hlt in pop dec or cmp sti (bad) or sti add movsb sahf jnp xchg xor loop lds sti cld daa loopne jb rcrb sti jmp andl mov or in adc es sub repz cmp lods sbb test push aas xchg mov lds and scas pop clc lock mov fisttpl push xchg (bad) (bad) lea mov cmp pop aas xchg sti js (bad) mov pop test das out test lock mov fyl2xp1 in cmpsb idiv aad ss sarb rolb imul inc sub sub iret and mov pusha xchg cmp cwtl sti or xchg shrl repnz push adc lds idiv movsb call jns inc and dec out inc loopne imul es inc sti lock jne sub mov sti sbb fsubl sti js jp in add mov sbb inc xchg (bad) in xchg mov ljmp pop clc add inc sub (bad) sti sub pop icebp sbb or ret dec cmp lcall xchg mov mov dec sub mov xchg les sti rorb aas dec test inc sti pop ss sub lret inc (bad) adc mov cmp test push push and (bad) cs mov fsubs mov and xchg or sti sahf xchg loopne rorl cmp pop sti mov stc or inc sti fucom jnp mov repnz test jnp idivl sti pop mov mov sti gs and sub hlt inc mov or push dec inc ret jnp jge pop js insl sti je fildll cmp stos sti test fsubr addl sub lcall cmpsb clc les out arpl js gs pusha sti push jecxz into add pextrw popa adc (bad) jae daa mov mov sti xlat pop outsl pop out push dec sti mov cmp adc sbb or adc sbb ss xchg lahf dec sti push mov pop adc mov xchg ret dec (bad) shll iret jmp sbb lds xor push mov jbe jl sti add lret jb push xchg pop (bad) in aas sti add ja inc (bad) push sbb or mov pop call sti ss mov or notb cltd jge cmp cmpsl fbstp cli outsb in inc mov js ret and lret pop ss (bad) pop cli scas icebp gs insb call mov sti repnz lret add test sti inc sahf cmpsl pop pop (bad) sti out outsb mov sti fs das push clc ljmp xor sti cltd and nop (bad) adc inc sbb in in jmp loop in ret mov mov std nop (bad) push jg cli movsb xor repnz lods sub xchg cli push dec pop jecxz pop sbb push sti das fcmovbe aas std fwait dec xlat sti sbb sub sti jne dec (bad) xor sti out add rcrb xchg sti test (bad) mov fdivp loopne imul not (bad) mov aas je or (bad) xchg sti sbb lret ret or jnp cmp sub sti das xor js lds andb inc dec aas cmpsl adcl xchg ret arpl sti repnz add jmp xor pushf or lods mov (bad) in clc mov mov outsl or mov mov jnp lds insl into fist ss loopne aaa mov mov rclb pop (bad) and out (bad) pushf aam popf pop mov arpl jmp test dec cltd imul inc jnp push pop ss or movsb adc adc add hlt aas adc inc fildll pop lret mov cmp xor mov mov jl in int sbb ja dec push cwtl scas or push loopne sti cmp ja xchg rcrb aad ss inc std sbb or shrl cmpb nop aas bound pop fwait pop repnz jl (bad) dec (bad) hlt clc out fst mov inc lret sti mov sbb nop sub jl sti js cwtl sahf dec test add and sub adc cli sbb jmp hlt lock pop mov sbb jb add ret popl shr (bad) lods arpl clc cmpsb (bad) add in scas cltd xor ret fsubl sti pop popf dec in push pop push out gs push cmpsl sti loopne lods lret and jnp sub sbb in stos add andb aad das add sti outsb jno (bad) gs test push pop and popf jge or mov cmp mov (bad) sti xchg lds sti fdiv hlt push repz cmpsl xchg repnz pop insb aas sti mov push push xchg jno,pt rcl or pop sbb sub stos cmp cltd hlt and sbb out push clc sub aad js jae dec jge mov xlat inc xchg xor add mov xchg mov push sti jge pop or add ret test dec dec pop jmp mov int mov mov sti clc ja (bad) stc mov mov pop cmc xor adc outsb sti jg imulb stos inc in sub insb out fs or repnz xchg cli repz icebp pop into sub cli (bad) pop mov pop xor fcompl test ds sti shl int3 lock loope sti lcall xchg sti inc push jmp add arpl ljmp scas push mov lret fdiv in insl and xor iret and xor sti (bad) lock mov mov inc cmp sti test lds pop jle (bad) and push cli lret ja lret es leave sub pop push xlat xor imul insb push aam adc sti aad mov scas mov fistl or sti roll sbb fwait mov mov fild sti iret dec test int xor int3 les mov sti adc mov mov enter (bad) fild xchg or xchg pusha mov jge pop cmpl sti jle repz sub (bad) (bad) jnp push cmpl pop xor aas in dec mov mov sbb adc test mov stc xchg or (bad) stc cltd dec jl cwtl mov push xchg fwait adc stos xchg push fbld xchg lods sbb clc inc xchg sbb xchg outsb mov xor mov pop in inc in lods mov dec clc insl sbb repnz scas mov push push fidiv cmc or sti lods add mov in sti mov sarl cmpsl or stc xchg movsb xchg mov repnz cmp sar inc stos jg sbb mov fldt push jne push je sti sahf adc lahf rolb clc sti popf mov mov sbb loopne sbb inc cli sbb or test in dec lahf adc or movsl inc xchg leave pop cmp mov or mulps push fwait pop lcall mov lds adc inc or (bad) sub xor fs pop sti jmp jmp hlt add and add sti adc sti or aad mov ljmp xor pop sti add add and les and mov aas sbb pop jo push sti fisubrl pop les out and xor es sti dec jp cltd push imull pop sti sub xchg sub sti loope ss cld jmp pop sti addr16 and jge jecxz mov das cmp mov pop cmp adcl push xor xlat xor dec ret ljmp jne,pn mov imulb jp mov sti imul shl (bad) push sti mov push data16 adc sbb sti aas xor pop jge sub sti ret call pop arpl inc mov in (bad) negb lret popa sti or jle jb lret outsl sti mov hlt insl out sbb xchg jno pop mov add and mov jae fsubr inc js xchg cld mov fisttpll adc ja das sti cmpsl jbe push cwtl je jecxz (bad) jne mov push sbb sti pop push fildl push xchg idiv sub dec adc jmp adc push xor jp push enter sti xchg mov aaa pop sarl push pop cmp mov sub loop inc mov jns jb fwait and dec in dec mov xchg xchg cmpsb inc and sti xchg inc out pushf inc test sti cmc inc push lret jno inc fistp js mov arpl push xor inc sti aas xchg xchg push repnz sti inc dec or (bad) sti sbb pushf pop pop lock inc ss mov hlt jno sbb mov cmp or sti test mov loop movsb pop adc add out dec add xor mov mov andl jecxz cli push inc add sub aam mov insb mov repz dec mov mov dec je sub int3 stos ret xchg fs clc jbe or mov jne sub push rcrl sub lods mov adc jmp jne mov and add stos cmp or fwait pop mov pop sti aaa mov pop movsb sti lods jl mov push sti and jecxz pop sub lods outsb fadds gs ss jl pop inc std mov stc mov pop insb imul out mov lret faddl pop sbb cmp push sti in cmp cmp mov adc pop push inc mov mov xchg jge enter int3 in cmp pop sub xchg fbstp idivl shlb inc pop scas mov mov (bad) sub imul and loopne sti inc aam inc idivb or fucomip jae jp and loope xchg and shrb cmp push aad scas clc xlat fsubrl mov push mov cmpsl out add sti lret push sbb or inc cld imul jb frstor xchg mov or int3 sbb lret cwtl mov cmpsb nop mov js cmp lds in mov sahf les lahf sti sbb mov (bad) mov les add stc aam ficoml fcompl mov enter xor mov sub decl loop es stc fimull in leave adc adc insl mov daa imul add pop movsl pushf sarl sti js enter jne mov mov mov (bad) loope mov int3 int push cmp leave flds ljmp shll jnp xor fisubr std cli cmp gs popf fildll push sti push fmuls or push and fwait adc sub pushf sbb inc test les aas cli divb lret adc stc lcall cli sti cmp cmp dec inc lock (bad) jnp fimul sub jne sti in xor xchg and clc rorl push ret loop mov push sti test and sti cli jmp sub cld xor push or or sti gs dec ret ljmp cmc sub pop mov outsb xchg add mov stos dec push repnz and popa jnp dec add pop outsl loop in cltd imul xchg hlt mov aam lds imul fst cmpsl inc mov outsl sahf sti mov (bad) sbb test sti int ljmp adc fistpl sbb push mov adc mov arpl daa cmp push sti jge push sub jl ret sti lea aad jg jb fdivl xor mov pop dec icebp sti or fstl mov (bad) jp call test dec sti inc cmp cli jge ret push cld jnp out push fs push insl fildll in mov iret mov mov sti idivl dec inc adc mov fnstsw sti lea cmp das dec push faddl xchg inc lcall in out cmc pop call xchg adc and mov inc jb jmp cli out (bad) dec stc mov add fdivl fnsave hlt xor pop repnz ret out insl mov mov add pop mov jmp icebp div imul clc out out stc in cli in and insl outsl fptan scas mov iret jb jmp fildll fstps aas jmp stc push fnstcw pop jmp jmp mov leave jb jmp icebp push fnstenv push jmp loope popa fldenv inc jmp cmc push fnstenv push jmp in fldenv inc jmp in push fldcw dec jmp (bad) fstps cmp mov push fnstcw pop jmp ljmp lret jmp repnz fnstenv push jmp loop (bad) fldenv inc jmp imulb fnstenv push jmp out fldenvs inc jmp out push fldcw dec jmp fisubr fstps ds call repz in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg in push xchg loope mov push fldcw repz xchg push fldenv imul mov xlat mov push fldenv clc bound repnz mov push fstps inc aad jmp sbb or fildll fldl2t mov loope cmc jmp (bad) fldl2e mov loop cmc stc out mov fidiv jmp loopne hlt ftst cmp sub cmc clc hlt jb fcomip insl mov xor add fdivl out cld mov (bad) in insb add dec out out in in jecxz fsub pop loope fsub add fmull fidivr hlt jb mov mov test xchg ljmp insb push or mov cld mov push jl sub aam pop inc lods cmc ret push icebp pop outsl aaa in mov push (bad) jp fldt rcr lret mov mov sbb fistp push pop push cmp sbb cmc (bad) xor xchg xchg jecxz lahf lret bound push mov or js lcall test adc pop icebp adc xchg call sahf fdivl (bad) (bad) jbe shrb test xor pop mov sar cli pop out stc dec ljmp out out cmpsl xor bound sahf ja pop leave out xchg andl sbb and and sbb adc or add std jmp jecxz fildl lret add addl (bad) out xchg in in jecxz loop loope loopne (bad) fidiv xchg lea lret (bad) mov lea je add test lahf mov setb pop cld mov ficompl xchg arpl repnz xchg pushf cwtl xchg pop xchg fcmovnb mov cmp stos dec enter lcall (bad) cmp leave icebp jecxz xchg jge test icebp jp nop xor aam jl call jnp shrl jnp stos jae xor cmp loopne cmp jecxz roll (bad) mov leave pop cmc ret fmul repz cli dec fdivr fwait leave lcall lret sbb fs cmp jmp cmp jmp fsubs test xchg xchg aad xchg mov push repz into inc mov pop mov (bad) xchg ret out test push mov repz jg xchg pop out xchg loop cltd enter out cmc mov mov mov mov cwtl call adc dec jae lret inc mov rcrl incl mov fildl pushf fstpt shr lret gs push jge fdiv fs xor sbb inc mov sbb leave lret mul pop or mov in pop mov in pop mov in daa mov in das mov fwait in aas mov pop inc mov in dec xchg pop push mov mov je stos cmpsl lret rcrl jae (bad) pop jnp divl jg (bad) popf mov imul mov icebp or scas push lcall clc movsb in mov push icebp pop ret xor pop lret lahf (bad) lret inc fsubrl xchg shrl fcmovu popf mov iret cli lret pushf fisttpl pop jo pop jecxz or mov mov xor data16 mov or stc jl notl aaa cmpsb pop lret xchg repz add mov lcall sbb and jnp xor add fdivl xor data16 sub lret fdivr or insb pop push sub dec test lret adc pop (bad) mov arpl push int pop pop addr16 lret pop aaa stos pop lods lret dec addr16 in imul outsl push lret and xor popf mov or in mov (bad) xchg mov mov jnp mov and sti movsb push cmp mov mov (bad) fildll mov mov jmp (bad) lret je repz ret add out push (bad) dec jmp ret in mov mov jmp mov out mov pop test div in fucomi sbb aad xchg (bad) mov jb mov out test inc enter repz inc loop mov out data16 mov mov pop (bad) or lcall lret lret subl iret mov repnz test xorl add push lret xchg outsl aas shrl fwait or insl jbe scas ljmp xchg cmpsl stos xlat (bad) and div xchg leave out mov xchg fwait mov scas mov mov repz popa or notl mov inc push in cmp mov jns mov scas mov cmc sub sti xchg mov adc sbb mov ret push dec fdivrl xlat stc cwtl xchg mov cmc (bad) pop mov mov aas je sbb jge shrl insl out lds imul xchg xlat addr16 lock inc pop push enter (bad) jecxz stos xlat jnp pop ror outsl mov and mov pop push adc mov mov cwtl lcall xchg imull xchg imull xchg fbld adc mov js pushf mov arpl cltd aaa call push mov mov test scas ja xchg (bad) imul push repnz ret mov repnz popf out (bad) bnd or jg add fwait mov jecxz xchg mov test fmuls out and push xchg xchg icebp jecxz sub sub xchg jne sub and mov pop sbb test inc or pop loop lock mov pop or test inc adc mov aam lahf xchg mov out sub out aam fldt fcmove xor or test (bad) icebp xor jle in jecxz ss addr16 mov jg inc in roll pop lret jbe ljmp mov and in iret sub out out hlt fmulp loopne mov push adc in sbb lret (bad) int3 rcrb lret enter int sbb loop loope mov aam out adc cmp in sub (bad) adc rcl (bad) pop loopne mov pop (bad) xchg dec ret mov mov xor jmp xchg xor or lahf in pop inc pop mov mov jecxz je nop dec out int mov mov mov sub push icebp inc imul inc xchg jg cmpsl push pop inc xchg inc iret adc inc rolb stc test fisttpl lock cmpsl mov aam xor (bad) fcomp cmp push xchg pop out mov stos pushf scas mov mov add fistl jg mov test xchg pop scas clc mov rcl fwait or pop aad aam ljmp roll daa sbb in sub (bad) repnz push ss out das lret mov out cmp (bad) pop pop xchg cmp push jnp xchg movsl popa jae sbb sub jb jnp pop ficoml xlat nop repz in stos mov sub bound repnz (bad) dec push rorl mov mov fdivs and (bad) aaa popf cmp mov xor stc or jb stos imul imul icebp push repz ss in repz dec cmp divl pcmpeqw xchg sbb mov jb add pop negl xchg sub adc push (bad) dec scas mov nop (bad) mov jl fbstp leave scas push add popf xor sub gs dec pushf nop mov std (bad) and movsb aad out adc or data16 add iret jno jae out mov cmpsl adc mov jmp sbb mov (bad) mov and pop repz movsl fistpl dec stc mov inc and out mov loopne push xchg cmpsb lock ljmp out inc push xlat sbb ss jmp sbb fwait das fisttpll loopne push xchg mov fisttpl enter mov daa xchg add (bad) xor dec mov mov and mov in mov pop fstpt pop mov mov cmp shrl mov lret or mov dec push icebp xchg cmpsl (bad) dec rcl (bad) sub leave mov loopne clc jns sbb ret (bad) mov add add xchg imul xor sbb mov test mov ja bnd fisttpl mov test lret fisttp rcll rcr ret push lds pushl loope jmp inc outsl cmp mov (bad) and enter insb adc cs icebp jecxz cmpsl scas pop mov sbb dec mov pusha push aaa mov push lret cli repz (bad) dec ljmp mov es fildl jne cmp add roll das je lods mov fiadd aam (bad) jecxz sbb cmp xchg and mov xchg inc mov lahf sub xchg xchg icebp (bad) iret add mov or aaa xchg xchg mov xchg push sub jns dec lret add xlat jae out test mov jns (bad) jo int xlat lret mov cltd lcall mov xchg pop test jecxz aas sub pop aaa lea add loopne adc cmpsl test pop jecxz jmp mov imul mov lods bnd mov stos mov mov mov test les sarb pop repz mov loop jns mov out cmp jg movsl lret cmpsl loop shr ljmp ja mov xlat (bad) aaa mov mov test lods jmp mov ja mov push mov mov rcll mov movsl test lds cltd adc xchg xchg loopne ja subl cltd (bad) lea sub xchg xchg cmp push fcmovnu pushf xchg mov sbb test mov mov mov in imul jb add repz out push xchg ss lahf pop ja jmp jbe push inc int xor push out insl rclb pop inc fnstsw (bad) aaa je push das je inc scas mov adc dec adcl in (bad) cmpsb iret lret or loopne shl pop xchg enter jl cld xchg push (bad) orl incl stos iret xchg sub aaa xor shr orl frstor pop sahf fistl jnp xor add mov jno into mov (bad) lcall jae cltd jae ja test pop adc test pop ljmp iret add in cltd adc shl mov xor add lods mov (bad) lret ret (bad) mov mov out lahf inc fmull test (bad) rcrb or insl push stos mov repnz idivl inc cmp cli out sub (bad) sub pop fsts mov sub jmp dec push fstps imul jmp lahf push fnstenv daa das jp (bad) ljmp ljmp movhps jmp xor flds dec push jae idiv hlt lock ljmp pop xor addr16 imul fdivp cwtl pushf mov cltd (bad) bnd mov or xchg mov fidiv repz fwait cwtl xchg pushf gs dec push xlat pushf cltd jp (bad) (bad) adc es dec inc mov mov leave pause mov cmpsb out cmp scas aad jmp cltd xchg loop xor lods mov loopne xchg push mov and daa push fwait mov scas rorl xchg cmpsb (bad) out sub sub mov out mov cmp fldenv mov lods inc mov hlt or mov mov repnz rol andl insb push test mov test xchg cmpsl xchg mov sub xor outsb jp jo enter pop dec adc push insb fbld out mov lahf out shrb mov (bad) jne cmp mov scas jae jg cmp das fs add (bad) sub decl aaa out fisttpl xor stc (bad) (bad) mov mov push push pop xlat xchg iret testl pushf imul xchg fisubl ror cmc scas ja pop pop (bad) out mov jmp dec mov imul ja es addr16 jmp mov mov xlat shll sti or daa pop push pop xchg pop shlb add mov jecxz int3 mov fwait xor mov (bad) mull ret jle into mov bound out lods dec mov cmpsl insb sbb inc fstp push cli test push mov ds aad pop xlat adc xchg andl pop das push cli jmp ffree cmp mull mov rorb mov aas pushf pop out fsts xchg sbb arpl fstenv fwait shll jae and stos ljmp dec mov lahf mov jae les data16 fnstcw mov (bad) lret push mov push sarl push cmp jecxz shrb jg mov mov inc add xchg mov adc mov (bad) sbb lods inc (bad) xor inc add mov push mov mov xor mov mov jg sub (bad) or mov lahf ret (bad) xor imul out inc imul dec mov (bad) xlat ljmp pop imul pop out sub outsl or cmp add (bad) sbb stos mov jae (bad) sub mov fwait cmp cli repnz and ja dec aaa rcrb pop shrl sub jmp cwtl xchg jnp,pn fisubrl and notb out mov and push pop xchg int or scas ljmp fcom and (bad) jo xor jae ret or xchg adc sti mov jno add sub lock fildll test mov or add pop (bad) test ja and call negb cltd daa rcr dec xchg jae jnp or dec ficoml lret mov movsl mov es inc loope in xor cmp scas mov mov sbb cmpsl ret jno rep addl xlat insl mov mov out xchg fimul mov xlat (bad) jg jmp fidiv xor cld addr16 in std pop xchg mov mov sbb lods mov cmpsb mov int mov dec frstor push jae mov xchg out push jecxz repz mov (bad) pop rcrb pop arpl add push xor test sbb std nop mov mov xchg add mov fidiv mov leave adc lock gs out rclb jne ficomp out mov fwait test lods pop sub adc jbe fmul je mov icebp iret mov lahf loop cmpsb test mov mov out sub push cs in adc out scas sbb shrl outsl into imul fs aas es imul add jmp pop rcrl mov push fsubrp (bad) mov ljmp xchg (bad) idiv mov or ret mov lods adc call fsubrp in ret sti (bad) sbb int mov pop lret mov pop cmp imul lcall fucom xchg cmpsl aas cmp xlat shlb pop jmp sbb or jae dec mov outsl jbe xchg out push vcmpps xlat ljmp (bad) int jno out or lds insl lahf loop sbb sub rcr out aaa sbb jecxz cmp inc jmp flds stos das imul sbb mov pop sbb rcrl mov fldcw push (bad) jmp bnd mov mov xchg fdivrs mov cmpsl aad sbb pminsw movsl jnp xlat dec pushf je mov das cmpsl pop adc sti mov xchg insb pop scas frstor mov iret f2xm1 inc push pop fbstp jmp xchg xchg push sbb jne out out cmc jno hlt mov loope xchg negb sub bnd test (bad) ret clc cmpsb inc div out adc jp stc repz in lock sarb ljmp nop movsb mov cmc repnz fdivrs out cmc neg bnd insb ljmp mov stc jecxz jbe in (bad) jmp xchg repnz repz out icebp (bad) jbe cmp lods (bad) das push popa stos or fwait jmp scas hlt or loope lds in mov les jbe loopne mov bnd stos div (bad) mov shr jbe out daa xor cmpsb fdivp in imul fucomi mov stc out fcomi fsub les xor xchg repnz cmp (bad) cmc sub rol test idivb imull add icebp repnz out mov ret ja icebp aam out mov jmp mov jno (bad) xor jbe in (bad) jmp inc (bad) sub cmc mov (bad) hlt xor xchg stc test (bad) mov arpl les cmp icebp pop in icebp clc cld in lock adc jecxz xchg pop ret outsl mov inc icebp stos stc lock xchg (bad) iret divb cmc pop icebp addr16 push mov adc repnz repnz jg dec icebp mov sub inc bnd aaa stc pop mov mov in dec rcll icebp mov in int cmc fcomip (bad) cmc test ror in pop in fdiv ljmp push jl push add sbb insl repnz stc xor mov jno mov out sbb ret test lods out dec hlt fistpll sbb stc inc pop clc into add lock in hlt imul xorb sbb adc mov mov jae mov in xchg sbb fild in (bad) aaa jmp out out mov jecxz (bad) aaa loope loopne jmp sbb in clc ret pop insb into test pop sbb adc mov ret notl out lock shll cmp clc mov in (bad) sub jo inc push jbe imul out out enter aaa repz repnz lock mov mov scas repz insl mov mov mov sbb jbe sahf icebp popf (bad) out pop rcrb pop in mov enter sbb enter mov loop daa xchg aaa repz aaa repnz ja aam or aas movsb arpl stc adcl adc lcall subl stos ljmp in rol push les ljmp imull xchg inc jmp clc adc aam inc hlt cs (bad) or sbb repnz icebp mov ret jmp mov fsubr push xor pop in in jecxz repz repnz repz fdivr push sbb fdiv cwtl push xor pop testl jne movsl lret repz push in movsl stc repnz mov or push subl repnz icebp out lock push or loope cmc into mov out mov stos call sti sarl imul iret xchg es imul hlt les scas enter lock or mov (bad) test mov jmp push cmp mov stc ds imull xor pop hlt leave imull jmp xchg xchg clc jecxz pop stc rorb out icebp (bad) mov shl jbe jecxz shl mov iret mov fdivrs clc repnz inc shll push mov pop mul movsb icebp loopne call mov pop aaa cmc iret hlt jbe cmp in mov xchg jmp out out mov push ljmp lock xchg cmc iret hlt jbe repz arpl xchg out iret out jbe in dec in in out out fild in jecxz loope fnop xchg (bad) fidiv fisttpll in (bad) push sbb imul shl mov int fcmove xchg lret iret lret leave dec enter xor mov xchg ret jns into aaa sbb cmc stc loope out xchg fbstp xchg (bad) divl (bad) stc clc div repz loopne (bad) mov pop shl stc repnz jmp cmc push mov jmp out push fldpi mov jmp xlat out in in jecxz loop jb jmp (bad) (bad) mov fnstenv jmp aad aam (bad) mov add (bad) mov push fxch mov lret jb jmp (bad) push fld mov ret jb jmp mov mov mov xlat mov fnstenv mov mov mov scas push fldcw stos jmp repnz jb jmp repz and fprem mov divb in push fptan mov lock cmp cli mov cmp out mov out fucom sub andb jmp sahf out pop (bad) repz (bad) fnstenv jmp dec orb push js es and sub bnd jo dec andl sub dec push fstl fs mov xorl daa fdiv mov (bad) rcl jp rcll lods mov ljmp ror repz shlb test mov fdiv push xor pop lock ret in insl mov fsubr push xor pop call adc div ljmp (bad) jmp jae mov (bad) ljmp jg mov in cli mov fldlg2 ljmp fnop jmp jae mov (bad) ljmp lcall pop fdecstp ljmp (bad) jmp jae mov adc das repz vpsrlw outsl popa mov stc pop stc push lock adc not cltd dec loop out shrb (bad) fsub push sbb fildl test repz (bad) mov roll repz roll dec testl adc mov mov aaa loop into pop dec xchg leave (bad) repz xchg cli (bad) repz in jecxz jp push fcmovnbe xchg dec in sub test pushf xchg imul cmc std cmp rcrl repnz icebp push mov notl call jne in in cltd xor hlt ja ffree ljmp daa xchg inc aaa negl hlt jne (bad) adc pop cltd (bad) leave ljmp pop cltd fsubrs ds adc jae sub mov imul imulb jecxz scas jmp ret cwtl push and sub in loop cmc jmp jmp jmp frstpm(287 mov stc loope loopne fucomip (bad) fnstsw stc fincstp fdiv xlat jmp fcmovnbe mov stc lret (bad) lret jmp fcmovnb mov mov jno into and dec xchg pop rcrb lods imul repnz mov inc jb jmp dec xlat dec mov mov adc pop push lret mov jmp inc fsts neg add testl xchg hlt sarb lret cmpsl xlat repz rolb push xor pop xlat mov push xor pop divl ret scas jecxz ljmp test jecxz pop mov movntps mov in insl mov fnstenv mov in insl mov (bad) pop jmp mov fldenv ja insl mov fnstcw xchg jmp xlat inc adc adc stos sub repnz xchg xor jb out repz mul scas jecxz insl mov stc mul (bad) jno mul leave jecxz (bad) ja not loop push aaa (bad) jmp shl jecxz (bad) xor pop mull daa cmp imull push fnstenv mov divb fistpll jb jmp fistp lret fcomps push rcrb repnz xor imul outsl mov jmp (bad) xlat fwait mov lret and xlat mov mov dec ret lret (bad) aad lret rcll xor aam and jmp int inc out xor shlb pop inc mov (bad) cmp ror jecxz ret shlb repnz xchg aaa lret push xor repnz leave mov ret pop xlat int addr16 not int3 mov sub ja divl sbb lret sbb xchg stos not leave jecxz adc cmpsl pop imull inc mov test (bad) jno test jecxz jno test out out test (bad) div test sbb mov ret shrl jmp lret jae xchg insl mov fsts stos push scas loop repnz mov mov divl (bad) cmp mov xor mov jb lahf and sub test lret fsubrs repnz push mov addr16 xor (bad) mov push das mov scas mov insl mov cmpsl jb fisttp int3 sub (bad) adc repnz jecxz jns add mov fdivs das flds mov addr16 fldcw scas fcomps jg fwait mov fcoms cmpsl fnstcw push fldpi mov fadds imul add xlat stos arpl or divl (bad) lret and inc repnz jecxz dec mov push xor push xor pop stos mov push xor pop fistpl sub (bad) loop repnz scas jecxz insl mov dec jb fbld insl mov jnp mov xchg adc mov jmp fistpl (bad) repnz fisttpl fcmovne shl repnz inc jecxz jmp jb fmull pushf ret adc test rcrb repnz (bad) adc and jmp aaa rolb movsl cltd jecxz inc push rcrb push rcrb repnz jecxz or xchg jecxz push adc jg andl fadds bound xchg mov add sbbl notl jecxz jno notl iret stos not nop jecxz cmc xor push xlat (bad) arpl jae inc call rclb repnz aaa bound shrb imul inc jp mov stos mov mov pop rclb mov xor repz jnp mov xchg mov ret mov int fdivr loop mov arpl enter rcl xor subl out (bad) mov testl sbb push rclb cmpl bnd jae mov xchg push mov imul inc jns idivl cmpsb ret repnz (bad) stos bnd and (bad) bnd push xor push fdivrs mov add pop bnd jecxz sbb insl mov flds addr16 icebp jmp xchg xlat je addr16 ret xlat jae pop ret jmp jb push ret adc ret sbb sarb bnd jae aas das inc shlb repnz ret fildll rolb mov fsts mov fldcw mov das xlat shr xor imul mov inc clc pop (bad) repnz push xor push fsubrs adc pop push fsubrs or xchg push fsubs add mov jae pop aaa jecxz not mov not mul fs loope incb mul arpl xor pop pop stos not (bad) push xor pop imull push mov mov fnstenv jp pop aam shrb negl jecxz mov pop lahf and mull jecxz mov stos not pop jecxz test outsl pop imull push mov adc xchg xchg push push stos mov pop pusha mov pop pop mov xlat repz data16 inc leave adc push bound sarb repnz push jecxz fisttp arpl push ret jae mov push ret xchg jo mov ret fistpll dec aas pop adc xchg xlat stos not dec adc sbb mov dec jecxz push mov (bad) mul dec mov out (bad) dec jecxz or pop dec clc daa (bad) repnz or das stc (bad) dec (bad) jb in sbb push lret arpl inc mov ret imul inc or jecxz ja xchg xor pop (bad) mov inc and jecxz xchg stos popf pop mov jecxz mov arpl iret stc testl jno testl jmp jnp push jecxz idiv idivl lods dec test jecxz add idivl psllw cmp jecxz ret icebp idivl jecxz sahf mov (bad) mul cmp xor cmp push xor imull push mov addr16 xor imull push mov mov fstps jecxz insl mov stc divl (bad) dec (bad) jno divl leave jecxz (bad) ja not xor push aaa sbb not xor push xor pop divl mov flds imull scas jecxz insl mov stc imull jae div sub jecxz ret icebp imull jecxz repnz imull jecxz out mov jecxz fcoml fldt push xor pop imull jae dec fcomi test jecxz mov and flds mull jecxz insl mov stc mull (bad) lcall leave jecxz ret icebp mull jecxz test and xor fldt push pop fnstcw push scas jecxz insl fistl dec jp sbb mov stc negl jecxz fist div sbb jecxz ret icebp negl jecxz aaa mov jecxz sub scas stos not sbb push xor pop imull push mov mov cmpl xchg add adc sub lret pop imull push mov mov (bad) jecxz insl mov stc notl (bad) leave (bad) jno (bad) bswap jecxz ret icebp (bad) push jecxz mov pop dec div (bad) or xor mul or xor rorb jecxz xchg xor imull push mov mov fstps jecxz insl push out testl (bad) (bad) mul push jecxz pop pop jecxz not add fnstcw add jecxz insl fisttpl dec jp add sub testl dec jno testl imul testl mov mul (bad) jecxz push pop scas stos not std jecxz add iret pop imull adc pop imull jae push fcomi sbb push jecxz loop sbb jmp div stc cli sbb iret jecxz xor mov fnstcw jp imull inc stc div (bad) mov div leave jecxz ret icebp div jecxz lods mov mul repz movsl pop arpl push xor imull push mov mov fnstcw imul scas jecxz insl mov stc imul lods (bad) in scas jecxz insl mov stc imul (bad) jb (bad) imul leave jecxz ret icebp imul jecxz bound jecxz pop jae push fcomi test jecxz push push mov mov fldcw jp out jecxz insl mov stc mul (bad) cmp addr16 mul leave jecxz ret icebp mul jecxz sub loop xor pop cmpsl stos not loope push push pop jp loopne jecxz insl mov stc neg (bad) or (bad) jb jmp or mul fucom push sub ja push jmp rcr jecxz repnz pop imull push mov mov fnstenv jp fldcw dec stc neg (bad) rcr arpl not leave jecxz ret icebp not jecxz ret xlat xchg mov pop mov mov or xor push xor push fcom push xor pop imull jae push fcomi test jecxz xchg push mov mov fnstenv jp into cltd sti addr16 push iret repnz sti mov xchg pop stos (bad) iret int3 sti test lock lret out jne mov stc (bad) lret (bad) push mov mov xchg (bad) stos (bad) iret enter jecxz out test add lock fisttpl push jp lds and mov jecxz (bad) mul ret sar out jecxz jno test fsts test xor (bad) int3 sar adc scas jecxz jno idivl mov jecxz add mov cltd fcmovnbe mul mov imull push aaa andnps not mov and test jecxz shrl mov mov xchg inc stos not mov test repnz mov stc divl push mov mov xchg fwait stos idivl adc mull xchg adc jecxz (bad) mov mov xchg fildll test not scas adc jns imull jae dec repnz xchg adc jecxz aaa mov mov xchg dec stos not stos adc repnz mov stc imull mov mov fistpl iret repnz bound mov xchg stos stos not cmpsb adc repnz mov stc mull jmp mull cltd add imul mov fsts repnz ljmp test repnz test push mov mov mov adc cmp negl mov jmp pop jecxz cmpsl mov adc xchg ret stos not cltd inc sti loop (bad) repnz add lock fildl pop jp xchg cltd jecxz jecxz cvtdq2ps mov jecxz (bad) mul xchg shl out jecxz jno notl flds notl xor mull jecxz xlat jnp nop pop xchg mov pop mov mov push (bad) leave jecxz xlat (bad) mov pop jns iret xlat (bad) out fmuls pop mov bound shlb addr16 xor xor push pop push mov push xor mov push xor lahf stos not xchg push xor jecxz xor mov insl mov clc testl testl jae pop jp jmp bswap rclb repnz leave adcl pop jmp lret adc and sub jle clc push xor push sarb push das dec rclb bnd xchg or jnp push mov xchg xchg xlat lahf mov pop std mov or stos not ja push xor push xlat jbe push repnz jecxz xlat out jne xchg in scas jecxz jo mov push fsub jae pop loop bnd jecxz insl inc and divl stos rcl jecxz daa mov mov iret (bad) divl pop int3 mov shrb insl imul outsb dec jecxz mov stos fsubrs mov mov jecxz scas push mov mov (bad) mov push jecxz movsb jmp pop leave sbb imul inc jmp repz fwait mov mov jnp lcall cmp jecxz (bad) mul fs mov xchg stos not arpl push xor or xorb fcomi test jecxz js mov jecxz jo (bad) jp pop scas jecxz insl mov stc negl jecxz (bad) jno negl jecxz ret fdivp adc push pop fnstcw pop lahf cmp fildl pop xchg pop repnz pop add xchg and das repnz jecxz cmp inc jmp xor pop pop das mov rclb push (bad) jb jmp ja sub ret (bad) jb jmp cmpsl jo mov pop add push sbb push lret jecxz push mov out cmp jmp jecxz in pop pop stos (bad) xor adc repnz leave jecxz ret dec xlat dec pop jae push jecxz pop ja dec aam ror jecxz xchg xorl lret jecxz dec fistpll (bad) dec lea test jecxz out jp dec scas xorl inc bound imul inc mov test jns testl pop jns testl icebp testl (bad) mul inc jecxz xchg push stos (bad) int dec push jge jecxz (bad) mul inc jecxz fsubrs mov mov (bad) jecxz ret icebp idivl lahf (bad) mul cmp xor cmpsl stos not cmp push xor jecxz aaa push mov mov (bad) jp cmp out divl (bad) sbb divl divl leave jecxz sarb repz xor and inc fmuls xor adc inc jno divl leave jecxz ret dec xlat xor icebp divl jecxz rorl das pop leave mov jecxz mov shrb mov jecxz stos aas mov imull (bad) mov imull leave jecxz ret icebp imull jecxz lea sub xor shlb jecxz jns jmp imull inc mov mull or (bad) pop fistp jno mull leave jecxz ret icebp mull jecxz inc mov (bad) mul and xor shlb jecxz xor arpl test jecxz sub mov mov fnstcw negl mov stc negl jecxz fistp leave jecxz ret icebp negl jecxz (bad) or mov icebp negl jecxz in mov (bad) mul sbb xor pop xlat stos not pop jecxz fnstenv out imull inc mov notl or (bad) mov notl leave jecxz ret icebp notl jecxz cmpsl mov mul adc xor rclb jecxz xchg xor imull push mov mov fstps jecxz insl mov hlt testl mov jecxz popa pop xlat stos not or push xor pop imull jae arpl imull push mov mov fsts jp push scas jecxz insl mov stc testl add fwait xlat sbb jg mov sbb jecxz (bad) mul add cmc jmp icebp testl xchg (bad) imul add push pop push jecxz out idiv jecxz add std imul or cld jecxz notb cli jg (bad) bound mov fistpl mov fbld das (bad) aaa repnz push jecxz out flds idiv scas jecxz insl mov stc div (bad) call jmp jg div cmc leave jecxz ret div hlt stc sbb (bad) push mov mov fldcw jecxz insl mov stc div (bad) rcr lret jno div leave jecxz ret icebp imul jecxz lret mov (bad) mul out jecxz (bad) sbb gs in jecxz ret pop sbb push xor pop imull push mov mov fstps imul scas jecxz insl mov stc imul (bad) jno mul leave jecxz ret icebp mul jecxz cmpsl test imull push mov mov fxch jp jecxz jecxz insl mov stc mul (bad) (bad) mul loope xor imull push mov mov fnstenv jp fisubr dec stc neg (bad) sbb jno neg leave jecxz ret icebp neg jecxz jnp xchg mul (bad) xor fwait stos not (bad) push xor jecxz outsl push mov mov (bad) jp (bad) scas jecxz insl mov stc not (bad) arpl (bad) mov (bad) jno not leave jecxz ret icebp not jecxz push mov (bad) mul shl xor push stos not shl push xor imull push mov mov fsts jecxz insl mov stc (bad) int3 (bad) jno (bad) lret leave jecxz ret icebp (bad) lret aaa mov (bad) mul leave jecxz xor pop push jecxz das pop sbb push xor pop imull push mov mov fsts test mov stc test jg div ret pop ret icebp test cmpsl (bad) mul shl movhps jecxz or iret pop imull push mov mov jg div mov punpckhwd idivl cltd and mul mov aaa mov mov (bad) idivl mov stc divl jae div mov jecxz ret icebp divl xchg (bad) imul mov sti out jecxz jno imull push sti out jecxz jno imull push sti out jecxz jno divl (bad) jp mov sti sub pop fnstcw scas into sti sub aaa punpckhdq not scas inc sti loop daa out imull mov stc imull push mov adc xchg imul loop jg repnz mov stc imull push mov sar sub xor xchg leave jecxz (bad) imul movsl push sti out jecxz jno mull imul mov pop fnstenv mov fcoms mov fcoms mov stos imul mov xchg leave jecxz (bad) imul sahf push sti out jecxz jo mov pop orl push sti icebp or imul fwait (bad) sti jne mov stc negl jae insb fcomi mov xchg leave jecxz (bad) imul cwtl push sti out jecxz jno notl pop insb iret repnz gs adc mov imul jmp insb dec repnz mov insb in mov xchg xor fldcw xchg (bad) sti (bad) lret mov mov sub xor pop divl fldt repnz xchg lret lret insl imul jecxz mov mov sarb xor mov insl mov mov arpl mul mov xor pop ja not mov push xor jecxz sub mov jecxz daa fnstenv jecxz insl mov stc testl test cmc mov sbb outsb cmc pop repnz jecxz adc fnstcw mov fmuls push fldcw sbb xchg mov fadds push mov jae or mov jle xor pop fldt push xor pop imull inc mov idivl jecxz fist mov (bad) jno idivl fnclex push jecxz das cmp jmp push (bad) div ja add (bad) push fldenv jbe jb fbstp sub ret lahf jb jmp iret jb jmp leave pop repz jo jb mov aaa bnd mov lea push jecxz xlat ja outsl add jg jb jmp xlat jb (bad) jecxz out imul mov pop shlb repnz xlat inc mov add pop xlat addr16 stos ja or push jecxz fbstp stc mull movsl mov xlat mov test mov rol repnz mov (bad) mov bound cwtl fincstp fisttpl jb popa sbb bound shrb addr16 lret xor push repnz pop mov (bad) ja test jecxz jl sbb mov fdivs cmpsl fnstcw push fxch mov fsubs xlat (bad) mov fcomps out out mov fmuls imul (bad) jae pop push aaa pop jae not push inc pop cmp repnz repz sub lahf imul leave jecxz (bad) mul push lret xor pop dec stos not push ret pop xor push mov notl imul scas jecxz insl mov stc notl jecxz fbstp div dec leave fwait adc jg icebp (bad) dec jecxz or dec jecxz add xchg stos not dec jecxz pop or mov jecxz icebp fldcw jecxz insl mov stc (bad) dec (bad) loope (bad) jno (bad) dec leave jecxz ret icebp testl (bad) mul inc jecxz leave pop jmp not inc jecxz (bad) xor pop imull jae je imull push mov mov fstps jp inc scas jecxz insl mov stc testl jno idivl leave jecxz ret icebp idivl jecxz mov cmp push stos not cmp push xor divl (bad) idivl jecxz insb mov mul cmp xor xchg push xor jecxz pop push mov mov fldcw jecxz insl mov stc divl jecxz ffreep jno divl leave jecxz ret icebp divl jecxz inc mov (bad) mul xor xor pop out not xor push xor pop imull jae jne imull push mov mov fsts jp sub jecxz insl mov stc imull (bad) and das jno imull leave jecxz ret icebp imull jecxz pop mov mul sub xor pop push stos not daa jecxz or test jecxz or mov mov fnstenv mull jecxz insl mov stc mull pusha jecxz pop lret icebp mull jecxz hlt mov jecxz out pop cmpsl stos not and push push pop jp pop scas jecxz insl mov stc negl (bad) loopne lret jno negl jecxz icebp negl xchg (bad) test pop imull jae jbe imull push mov mov flds negl scas jecxz insl mov stc notl (bad) jno notl leave jecxz ret icebp notl mov jecxz scas pop mov jecxz test test jecxz movsb push fpatan mov pop xor jecxz mov adc fldcw mov (bad) mov fstps arpl pop mov jae sarb or inc mov lock mov repnz xor jmp lret jg fildll (bad) repz addr16 push sub sbb or insb fildll jb in pop mov imul xlat xchg mov pop push mov pop dec mov xlat jecxz add add outsl rorb jns add bound (bad) xor add xchg rcrb movsl add xor sbb pop xchg mov push or push pop inc mov mov xor jmp xchg cmp (bad) and mov arpl insl mov mov insl mov (bad) jb fbld insl inc movb idiv das or sub aas leave repnz cmp add jecxz insl xchg adc pop repnz jecxz or mov fadds mov fdivr push fldenv out ljmp fldln2 mov sbb lahf jmp in iret out imul mov fisttpl ljmp div imul clc arpl lret push jecxz and imul (bad) rcr jno mul leave xorl mul leave jecxz ret icebp mul jecxz mov lock adc imul push jecxz xchg fsts cmp loope jecxz fistpll (bad) add shrl push xor pop imull push mov mov jmp jge neg push jecxz pop (bad) jp fldt pop stc neg (bad) jno neg pop fildl aas jge neg scas jecxz insl mov stc not lea test jecxz push jnp (bad) clc fs dec loop arpl icebp not jecxz daa mov mov and push jecxz sbb (bad) sti jae jle shl xor adc repnz jecxz ret pop leave inc lret or jg push jmp pop das shrb into push jecxz std (bad) or mov int inc sti adc int3 test shrb repnz ret jmp (bad) jg leave (bad) insl (bad) jg (bad) enter loopne push mov mov fldenv test mov stc test stos jno test shrl push pop fnstcw ret mov (bad) cmpb scas jecxz insl mov stc test jnp div mov stos out idivl mov stc idivl push mov mov jmp cmpl jp mov mov stc idivl xchg jno idivl mov jecxz imul sbb (bad) repz mov xor das stos not mov push xor idiv scas jecxz insl mov hlt notl cmpsl (bad) mul mov xor pop shrl push aaa incb jecxz xor adc test jecxz sub mov mov fnstcw jp lods scas jecxz insl mov stc imull imul stos or fstps push fistpll ret add cmpsl jecxz testb jmp out ret fcmovnbe movsl mov ret jmp movsb pop and not jne add (bad) lret sbb das repnz jecxz dec mov addr16 rcrb outsl test mul mov subl (bad) xor jecxz les mov mov fnstcw jecxz insl mov stc negl (bad) negl mul icebp negl adc jecxz sub pop pop imull push mov mov (bad) notl mov stc notl jno notl (bad) out notl stos (bad) mul xchg jecxz popf or push jecxz lcall jecxz insl mov stc (bad) mov xchg (bad) jno (bad) (bad) leave jecxz ret icebp (bad) mov xchg mov mov sbb fcomi test jecxz mov mov mov fnstenv jp mov dec hlt testl xchg xor stos not test push xor jecxz jbe fwait mov mov fldcw jecxz insl mov stc testl or push (bad) icebp idivl xchg xchg imul outsl push bnd stc outsb jb (bad) jmp inc aad push loop push repnz mov popa outsl shlb jae push loop (bad) mov lahf fstps mov add or cld mov push flds mov or jmp add int3 pop sbb xchg (bad) repnz outsb xchg pop or ficoml ret fnsave dec ljmp shrb fucompp iret xlat mov mov mov xchg jg xchg mov mov cwtl movsb mov out bound fld1 fcomp repnz mov inc jb call repnz pop in jb aam into cli sbb mov pushf call repnz ret ljmp bound into bound inc bound push push addr16 jmp push pop fnstenv cltd jmp aam aad (bad) mov lcall mov push fnstcw call and fwait xor xchg push (bad) mov mov stc jp jmp repnz repz fyl2x xchg (bad) mov repnz pop ret mov pop jb (bad) jmp xor std or and inc bnd sbb (bad) outsb mov push fnstcw out push enter fptan push mov dec sub notl fidiv repnz xchg xchg inc repnz mov push (bad) dec dec jb jmp cmp mov inc jb jmp cmp ja sbb dec and imul arpl mov (bad) ret bnd js repnz mov bound jmp xchg aad (bad) scas pop mov push fnstenv outsl jns repz xchg fbstp jo loop jg repnz fidivrl and repnz mov add xlat and (bad) fstps leave pop (bad) xlat loope loopne fcomip jecxz lret (bad) pop ja sub jbe (bad) shll fcmovb mov aad fisubl bound aad repnz pop ret int3 (bad) (bad) repnz into xlat int iret push (bad) xchg pop stos fucomp xchg fdiv (bad) dec push dec (bad) adc sub inc fldl2e in xchg ret bnd push fxch mov mov xlat les mov mov jb jmp lret fnstcw mov mov mov mov mov stos jb jmp aam cmpsb (bad) mov (bad) jb ljmp mov push fsts clc out mov repnz cmc rclb mov mov out mov xchg jb call das hlt leave loop repnz push fldcw mov stos xlat mov fldcw cmpsl jmp mov xor arpl (bad) repnz not int shrl fxch mov lds jmp into push fnop mov leave jno dec push jecxz ljmp ljmp fabs mov in loop repz mov mov fwait jmp pushf push leave dec dec not stc mov push fldln2 mov gs pusha push enter fptan clc xchg push mov xchg ret repnz mov xlat (bad) mov push (bad) mov (bad) in and and push xlat or pop mov adc jmp sbb (bad) mov adc jmp and fldenv mov es jmp sbb (bad) mov add push jmp pop push flds mov sub jmp cs mov sub sub cmp jno xchg (bad) std in add (bad) frndint mov aaa jb jmp xor fnstenv xor add or cs add fstps insl xchg aad aam mov movsl sub pop out rdpmc loop bound pop repnz mov (bad) ljmp shlb enter leave rolb repnz add xchg bnd jno push fnstenv jae ljmp popa loop jb push repnz in repnz (bad) jb jmp shrb mov jo jb push adc and bound ljmp (bad) ljmp inc das ljmp xor inc mov push fnstenv ds pop leave inc repnz inc mov push (bad) mov in jecxz in fs bound adc popf sub das xchg data16 repnz xchg loop aas popf jecxz gs push popa fldenv pop pop jb jmp cmpsl bound cld leave fimull fst xor imul mov jb xchg and xor sbb fwait ljmp xchg pop fisubl push cmp cmp jmp xor fnstenv mov popa das (bad) and das loop repnz sub sub sub es and and and and push mov jns bound jno ljmp loop leave ret cmc xlat jge jle jg jl jp jb jmp sbb jmp mov flds sub xlat (bad) mov push (bad) xchg jmp xchg push fstps xchg jmp fildll fld mov in jb jmp jecxz jmp mov fucomp mov push (bad) mov int stos jmp movsb push fnstenv fucompp (bad) mov mov mov fdivs jmp mov mov lds jmp (bad) push fldenv aad aam (bad) mov push fldcw shr lods xlat les icebp mov bnd jmp lock (bad) mov ret jb jmp test mov mov xlat sahf lods (bad) jmp xor js push dec and das fisubrl or subl xor fwait push mov wrmsr enter jbe mov jb fiaddl repnz les repnz dec bound rorb stos push fptan sbb adc jb jmp sbb fsts mov adc xor add jp push test insb mov das pop dec inc sbb into loop jge adc in inc into xchg aas into xchg out int3 scas arpl sub leave int fwait adc push push pop ss and (bad) inc scas lret gs je xchg (bad) out adc mov xchg stos push sub ja daa pushf xchg fildll mov ret scas arpl dec jb rcrb xor inc ror mov mov jp lret and sub mov insb fs arpl jp jbe test daa in and imul fist mov fbld call (bad) xor (bad) repz test lret popf mov (bad) jno jmp out sahf xchg adcl mov int3 rcr pushf mov dec aaa inc cli aas jnp jle sub dec (bad) stc int3 les jmp test int3 cmp jb clc (bad) xor jmp add sbb aaa pop lret roll cli rcl jecxz cmp ret ja testl ror mull int adc push mov adc or xor push pop inc jle and xor sbb and dec push or pop add push add ret xchg mov inc mov mov add jb cli add pop gs adc xchg inc add mov sti into outsl mov ljmp fwait data16 mov jmp inc push jb xchg cltd rcll daa (bad) adc pop in (bad) mov mov mov lods pop mov push xchg xchg mov inc lcall jmp inc (bad) pop (bad) jmp into xchg call jg (bad) orb daa addl out pop std jle push or and aas push and dec mov dec ja stc outsl mov inc dec outsl pop mov pop dec jmp xchg add sub sub inc sbbb sub pop daa dec sarb int3 out into jbe (bad) mov push jmp push xchg or sbbl xchg ret ret inc mov jg xor pop pop in and jno fild mov and nop dec pcmpgtb rcl xor cwtl lahf aaa xchg add sbb xchg jg xor xor lea scas lret jg aas cmp xchg nop mov xchg mov sbb xchg daa mov (bad) add aas into orb cli inc sub inc imull movsl scas xchg cmp mov arpl xchg ror jae xlat adc ja cli push ja imul clc mov push jge dec aaa jnp cltd xchg jns mov jb scas xchg lods fwait cltd notl sub xor shl out in mov jmp (bad) ret mov loopne jg fisubr mov scas aaa push xor int push lret pop das leave inc xlat dec fildll aas pop rcll mov adc test sub lahf lods inc add out pop (bad) cmpsb lret rcr imul sahf adc jb or lea dec lcall inc aas dec pop pop xchg push adc nop dec ret jnp jle stos aaa jl (bad) test fild mov mov sbb leave xor cmpsl push aaa fnsave dec shll sahf mov xor jmp and iret sub mov pop (bad) aaa xor inc scas mov mov arpl xor mov aaa xchg adc aaa pop mov test aaa rorb iret jb and aam (bad) (bad) mov cli fs aaa popf jnp add mov sbbb or imul push jecxz mov xor mov punpckhbw or xchg (bad) jg fs xlat arpl pop lahf (bad) xor pop add divb fcomi jmp xlat ja stc dec stos xor test ffreep (bad) push sbb or jb (bad) xor xor fcomip pop lret mov or movsl movsl pop das mov push dec addr16 (bad) inc mov iret xchg aam mov xor push push out pop sti ds dec idivl inc fildl inc jae out movsl (bad) aaa in dec ret jb mov mov arpl loope inc (bad) fild (bad) fcompl fiaddl negl stos insl std out push pop jb movsl xor and inc xlat rolb jb mov fxch mov insl xchg (bad) enter (bad) arpl fs movsl jnp ret (bad) mov and mov arpl scas fs fildll popf mov jb (bad) ret aaa movsb aas cmpsl sbb sti mov arpl fild cltd arpl xchg fs add fs pop mov jb jmp (bad) mov sub rcll inc test jmp (bad) scas sub and (bad) push sub mov jae in adc sti icebp dec out rol pop mov lret rcrl mov aaa gs bound (bad) mov enter (bad) pop (bad) sti les test xchg dec dec sti insl aas call (bad) dec mov arpl pop mov pop scas (bad) mov and insl mov (bad) mov and inc leave sub pop push and dec xchg scas push push test aam mov cltd cmp aaa xor jnp push arpl dec inc leave cmp mov xor sbb arpl mov lret fildll ljmp push xor sub mov sub push lods sub mov jg and mov sbb int (bad) push jg sbb fsts lods adc stos int jmp addb or pop or lahf pop xchg pop dec arpl or (bad) inc das das mov jb xchg cltd jmp lahf lahf cmp push lret int jg xchg cmp pop jb sub popf pop xchg aaa cmp imul sub mov dec or dec inc or ds xor daa fs pop das rcrb sub jmp sub and das imull pop lret rolb pop rcrb and push comiss or shrd and push pop fucomip lods jle incb pop dec xchg pop std push sub adc gs mov int mov xchg mov xchg popl repnz test inc outsl sbb mov push xchg mov push sub mov push jle add xchg xchg ja mov mov xchg insw mov mov adc mov mov mov stos pop xchg cmpsl add stc sbb (bad) mov push mov inc cmp jmp sbb xchg (bad) fucom adc insb push mov cwtl loope fistpl pushf je test xchg mov jmp xchg mov andl fsub mov mov icebp or and scas and sarb imul sub cmpsl xchg cmp pop cwtl mov (bad) iret mov mov fs leave xor xchg lcall cmpsl push sub mov repnz jle outsl loope aam pop movl cmp pusha rclb mov jno (bad) mov popl lods xchg (bad) mov div push jmp mov cmpsl in inc loop xchg test leave xchg pop (bad) stos outsb add insb js or insl jp mov xor sbbl imul out scas xchg bound xor lcall sbb loop push pop and mov jmp ret (bad) enter inc sbb add int3 inc mov aas rorb shrb stos sub int pop (bad) dec test cmp out cltd sub mov or shll (bad) dec gs je adc comiss cmpsl roll mov jbe je ret lret into push ret push (bad) imul xchg aad jne pop mov add out test iret dec lcall lea in jb pop bound or mov mov sbb aad add and and pop roll in mov in pop shll pushf push push popf lds out mov ror iret adc test lret push xor push mov rcrl (bad) mov dec adcl xor (bad) lods insb push aam xchg jae dec sbb sbb call mov mov dec int cmpsl jg lods mov pop xchg mov sub out push repz or fwait sub push dec lock (bad) test in scas mov cmpsl addr16 sahf (bad) out cs sbb mov daa pop jmp out mov fidivrl add loop mov lcall or out sbb lds leave shr cmp ret (bad) loopne jl sub fucomip scas mov adc mov push loop loopne xchg push out mov (bad) jg sub imul test mov xchg loope (bad) scas lcall mov ljmp shr cwtl xchg xchg mov cmpsl inc jg xor jbe mov jecxz addr16 fnstsw push int clc mov loope mov (bad) adc sbb cmpsl adc ja push mov popa pop lods sub lret lcall cmpsb in bound lea and cmp jecxz xchg (bad) jmp movsl bound pop ljmp pop (bad) mov jecxz mov cltd push out cmp push xlat rcr jb xchg repz stc mov test jmp fadds mov and pop out lret pop jmp lea sub lcall rclb out inc pop adc fisubr jg outsl loopne mov and mov jae mov lods mov xchg into loopne aas mov es dec or xchg xchg addr16 rcrl shrl rcr sarl aas addl ret out shrl (bad) icebp shrl inc leave push sub lret popf or push sbb or inc mov icebp pop cmp adc sub pop int std lock cmp adc sub mov pop insb cltd or push imul outsl mov lcall leave lods and cltd jecxz mov lea xor jbe lods push test mov call mov (bad) scas jb sbb jmp loope (bad) test xchg inc dec mov fsubl (bad) repz test in xor jg ret ret mov in xor jge (bad) or fsubrl fs sbb mov mov out imul mov mov stos or sub push inc xlat mov imul jecxz in jg pop mov pop pop sub add mov xlat jg sub xchg out sbb (bad) mov out fadd lret mov imul xlat mov mov out pop jecxz loope jbe cmp adc lea jecxz fnsave (bad) leave xchg (bad) aaa inc mov lret (bad) loop loop les mov iret out (bad) push mov sbb insl mov lret ret xchg push mov leave mov out enter outsl mov les xchg fwait out mov sbbb lcall repz daa xchg or mov mov call test dec jns mov into mov (bad) cmp mov xchg xchg cmp data16 (bad) and xchg ljmp ljmp ljmp in lea push dec dec cmpsb leave pmulhw mov xchg (bad) daa ja pop clc rclb int xchg jp or call pop xchg cmp je fsubr jmp imul (bad) loope test and popf (bad) mov xchg push shl jno (bad) scas in sbb xchg add mov mov pop (bad) hlt insl std jb push call pop jmp jmp decl push jmp inc xchg out mov lret shl mov jno and (bad) jmp mov fistl fcmovu sub inc or or fistp or shr or cltd cmpsb lea push ds (bad) fstpl mov decb hlt mov test dec adc xchg jge xchg xchg mov out out mov jg fldt arpl pop xchg inc adc lds repz mov mov lods cmpsl xchg dec out popa cmp in mov inc lods pop and push cmpsl in adc scas mov and mov cmp test scas adc (bad) mov sbb in jmp mov mov xchg stc hlt (bad) pop mov mov imul mov das or inc stos fbstp repnz xchg fistl test pop movsl dec test mov mov lret or les into rcr iret cmpsl and mov mov mov add nop dec leave jbe roll shr xchg movb int3 shrl inc jno pop mov mov jecxz mov (bad) mov aas mov mov jae jb out push cmp scas aaa and mov sbb repnz movsl ret lcall fsubl sub mov jl scas mov cmp cltd add in push mov sub (bad) icebp mov jecxz mov mov mov dec imul in mov adc mov out jge int (bad) mov loop out jg arpl cltd ljmp out mov push jmp (bad) jle test xlat mov adc lret jecxz and cwtl xchg fs scas movsb fidivr out pushf lcall xchg into xorl cmp es adc pop fmull mov out mov xor jmp and test outsb leave cwtl xchg inc sarl or ss daa sub sub sarb push adc enter cmp jmp add xor jbe mov fs in int3 (bad) cmp mov push lds jae imul xchg mov loop in push dec xor repz movsl xor cmpsl mov sub test insb out js jecxz je pop cmp (bad) icebp cmp shl cmp sti inc add push pop rolb loope inc popa fnsetpm(287 dec (bad) rorl mov out ret orps ret scas mov jge out xchg adc test iret sub push repz cmpsb lea mov ret (bad) mov sbb movsl dec ja andl test test outsl enter sbb dec mov push xchg fldl jle mov lret xchg xor xchg fisttp push aas popf jbe stos jb mov stos pop and in push test fisttp mov pop jo sub pop insb daa xchg jg movsl push mov outsb dec push daa sub out stos mov (bad) test in (bad) mov xchg push jbe test fisubrl mov mov fldcw pop test arpl (bad) test mov mov out mov mov mov sarl adc mov mov out movsb lods fistpll lods lods lea cmp jmp insl jnp (bad) iret push mov fstpt or outsb outsl iret push mov xchg dec xlat jge mov rol xlat mov aam out inc xlat enter sub mov push add (bad) stos sbb mov repnz movsb lret daa xchg insb mov mov iret mov inc stos stos xchg jnp adc add dec data16 fwait loope inc jae pop xchg push not pop aam sbb test lahf lcall mov mov test stos xlat lret push clc out add jno pushf imul push stos and test dec fcmovnu aad cmpsl idivb sub lods mov (bad) lret nop jmp lds pop pop aad jecxz lea xlat sti scas xor lods es xchg test inc out cltd adc popa xor sbb fldt imul pop jmp xchg scas rcrb rorl gs xchg mov mov sub mov sub mov xor daa adc sbb out stos cmpsl pop sub xchg (bad) jno cmp out mov (bad) mov pop mov add dec pop fild mov push mov mov out insl andl icebp jecxz fcoms sub sub mov out mov roll lcall (bad) imul out aad or in push outsb sbb jmp (bad) adc test cwtl aam mov jb xchg (bad) mov xchg xchg lcall mov lea lea outsb ret (bad) shl fild lods test mov lods mov xchg xor mov sbb add addr16 sbb mov insb push jae mov or xor push popa test aam lock std cmp cmp aaa lds fs xlat and mov adc arpl ja sub iret mov shrl out mov sbb das (bad) fwait lcall ret enter xor xlat popl (bad) mov ja out ret cwtl sbb (bad) jl lret das mov dec inc aam mov out (bad) lock out push xchg sub in (bad) in lret aam cmp ret jns rcr mov (bad) fxam jbe lods jno iret movsl jno xchg ret in fisubrl or xlat or cmp jge mov inc push mov mov cmp and xchg addl push cmp out pop push xlat scas push rol pop test pop dec or pop ret lret adc push stos jae out inc popa xlat shr mov mov out cmp sub and mov (bad) inc in iret mov ret xchg in xchg mov mov pop mov jecxz mov xor adc mov movsb popf mov sbb lret iret adc cmp dec jg xchg icebp pop inc imul roll in ds iret (bad) out testl sub mov adc mov aaa mul xchg call lock mov lahf and fsubs or add lods movl jo mov (bad) ja fcmove lcall test repz jge push push xor add rcrb mov mov push sub mov out scas addr16 cmp inc mov xchg push dec mov lods jbe loopne jge stos rep je and add push int3 mov jmp scas mov sbb dec push imul inc mov mov iret mov mov jo xchg push lcall push in push adc fbld loop mov jmp shr ja pop addr16 pop push ljmp fstpt mov sub pop sti popa mov pop incb test xlat sarl cs outsl xchg xchg sbb in (bad) xlat and mov arpl ja push xlat mov ss lcall addl ret xchg rcrb mov dec pop (bad) test negb jmp jecxz cwtl dec mov movsl (bad) pop sbb in aam mov add popf add ret mov imul sbb mov inc mov jb stos mov jae dec sub inc leave out xchg mov pusha xchg push adc or (bad) dec jecxz outsb dec fsubp fmulp shlb (bad) das sub jno xchg inc dec nop js ja dec mov ret and fs pop xchg mov test (bad) daa xchg cmpsl mov out cmc callw out pop and sub push push add pop fistl pop scas inc addr16 test outsb insb jecxz test lret orl arpl rorb ret aad mov mov pop insl fsubp (bad) sqrtps popa mov jmp sbb stos lods push lods pop mov test lea add inc pop lahf sub imul add jecxz mov jg out out ror ljmp imulb imul (bad) fstps icebp jecxz daa in out bound push ret mov pushf xlat dec xchg jl jmp movsl imul sub sub aam lret scas sbbl je push inc rorl mov mov and sarb dec fstp sbb aam mov xchg sub mov test mov pop mov mov mov fistl mov imul mov lcall jo cmp inc xchg inc jecxz repnz jmp jecxz push shrl mov out incb jp out jmp lock mov mov mov sub out repnz lea xor mov mov out lcall stos nop lret test sbb gs push loopne xchg dec adc mov mov mov push imul and dec xor (bad) push jmp adc out in repnz xchg mov (bad) aam jmp cwtl imul (bad) xchg mov push xchg adc xchg sbb jecxz leave in loopne mov jno jecxz pop imul fistp jno mov addl adc lock dec sub repnz adc xchg cmp jno jmp mov mov xchg lret stc jmp rclb push mov (bad) out bound push xchg imul sahf add ret fistpll ret je insl out imul mov (bad) aas mov je ret fcoml xchg xor enter ja xchg ret jecxz insl jecxz inc (bad) inc inc mov test int test ret imul mov xchg push (bad) cmp cmp ret pop xchg pop sub push xlat add add jl pop jecxz xlat add xor pop lods test dec mov mov pop adc jge jecxz fisttpl lea dec fistpl or (bad) movl out test test jo cmpsl mov cwtl lahf mov (bad) mov out jo iret sub mov fistp xor jbe jecxz jno pushf and in fildll push jmp xlat mov mov xlat xchg (bad) cwtl mov movsl inc test out xchg add fstp fbstp xchg rcr int3 mov icebp lahf gs add ja push xchg (bad) fisttpl xchg pop fisttp jg mov fucomp ja push xchg mov mov test fbstp xchg cmpsb inc leave ret inc pop jns movsl fdivl inc mov jo and sbb push push mov pop iret (bad) mov es xor mov lock (bad) test sub mov add push push rcrl mov or xor jmp cmp fmuls pop xor and pop push dec mov adc fld jno and (bad) dec idivl xlat (bad) sbb fisubrl sub in jecxz stos mov stos add daa les xor movsl fisttpl ret outsl mov mov xor test out ret insb mov decb cwtl pop xor pop or mov ret add mov xchg pop ror test nop test mov (bad) repz lret push mov js jbe out repz xchg daa xor (bad) mov out not ffreep loop push out into mov and dec out xchg orb outsl in add dec call xlat mov pop push xchg jne cmpsb pop out pop jno mov jmp push push cmp mov (bad) aas aas push xorl aad inc out aad mov adc pop jl frstor stos and out push repz shll iret jecxz aam sarl sub lds sub into mov dec rcrb dec cltd mov cwtl ror mov (bad) fidivl out dec push mov jp,pn lret adc in or popa xchg ror dec into or push scas inc test leave das pop ret (bad) (bad) mov mov lock (bad) movsl inc cmp decb jb test mov add mov out repnz jg mov jns test add stc out imul lret mov inc pop jmp dec jge into sub add xchg int cmpsl dec faddp (bad) cs xor (bad) leave sarb enter (bad) mov test cmp sbb inc shrl mov pop int bound mov mov and call jno fistl sub popf pop scas push xchg gs lea icebp xchg mov jmp push mov test mov lahf call mov in pop mov jb test push push cmp push rcrl sub cmc rolb xchg dec arpl jmp iret int3 mov movsb jae or ljmp test and (bad) mov int3 adc xor cwtl dec or dec (bad) outsb xchg mov fnstenv mov js xchg push ljmp iret movsb mov jecxz iret iret out nop daa data16 inc into mov int3 mov pop push cmpsb sub into (bad) iret sub call popf sub pushf fwait xor repz add (bad) push (bad) mov (bad) or jb hlt jmp or insl mov pop incl jne cwtl aad push mov lret scas dec inc inc push and mov fnsave mov lea shrb jge add loope jecxz xlat and ror rcr pop mov xchg add mov and test sbb push pop adc orl shl fwait jb sub lods ficom push cmc dec lock lods stos cmp bound adc lea (bad) ja aas add rolb adc xchg lahf adc test imul test fnsave stos dec mov lret push inc rcrl in test mov loope icebp jecxz xor mov xlat mov cwtl insl mov ljmp add pushf or lods rolb inc sub nop lret dec and jb jge add mov shrl inc popa insb decb sbb std pop push bound ds insb test rcrl loop lret push arpl jle jge pop xchg (bad) lret push or sub mov add test cs ret iret nop incb inc test adc addl ja aad pop mov imul mov ja dec test mov out (bad) in sbb push sub out call push mov mov jmp je loope xor jbe (bad) xlat aad shr and mov shrl cmpsl sub push jle in into xchg dec shrl rcl xchg push lds jns lds lds sbb test cmpsb push sti fwait mov mov pop push add scas cs mov mov pop lahf mov scas jmp jg xchg mov xchg cltd ja xchg icebp lock loopne mov ret jmp or inc push fistl ja push sub xchg scas fdivrs mov xchg fmull mov mov movsb inc push sub mov bound int3 sbb pushf js lea jb jg mov jecxz add shlb rorl fs and repz adc xchg imul das inc lcall pop imul jae cltd rol cmp fildll push or mov pop fisttp subl sbb loopne pop and jecxz xchg (bad) mov enter jecxz xchg out jmp push inc push push inc push jmp cwtl cltd outsl ss xchg sub xchg mov int (bad) mov enter les inc adc (bad) pushf out xchg xchg sub rcll push jb mov cs or test in (bad) pop xchg rol addr16 sub arpl lods add fbstp repnz sbb mov int3 add (bad) mov and xor aad addr16 movsb jmp cmpsb lods insl mov adc mov pop push shlb lods jmp mov out aam mov xlat leave jne out and mov push leave aas leave sbb daa sub mov mov lcall std cld sbb mov xchg pop sarl fwait movsl mov (bad) repnz cld adc pop ret out fs add mov pushf imul (bad) popl or cmp mov mov repnz cmpsb mov mov jle aaa xchg popa repnz xlat enter ror inc jne mov ret pop mov jge ja pop es jo sbb das (bad) mov out mov adc gs sub xlat jnp fistl stc popl dec push inc aaa jne jbe movl jecxz out popf adc sub pushf es ret mov decl je icebp stos scas push xchg hlt ja push pop call sub xor aaa mov cmpb dec xchg pushf mov neg pop cli fdiv out jb bnd mov pop cli lock insb mull adc dec mov jmp pop das adc fisttpl mov and jmp scas stos out je jmp aad repz cmc loop jl aam pop adc cmp or xchg sahf ret scas stos pop insb add jmp outsb leave fwait bnd stos movsb ljmp daa mov adc scas int3 sbb aam stos adc jmp ret imul pop repnz repz fwait pop jmp arpl ljmp pop jbe pop cli mov cli mov jl fdivrs or fnop divl imul fnstcw or stc sbb lret gs pop push cmp mov rolb stc sbb fdivr pop (bad) mov fdivl stc int mov or jecxz jl add inc inc rcrl or fcompl mov mov fcoml add fcmovnu push test push pop push push pop sbb scas add sbb mov adc (bad) mov jecxz fadd jno push jge cmp (bad) fcompl or lods push sub inc mov cmp jbe cli xor jne bound pop push jae push cli fs ret fdivrs or fdiv jae fs pop cli repz jp or xor imul fcoms jecxz in cli int mov cli repz lock ret or fucomi or mov pop int jbe cli xor imul call rorb add push or jecxz ret or push sub je ret (bad) test push pop (bad) ret mov sbb xor jp mov stos pop insl sbb imul and pop fistl push xchg aaa cli mov fdivs insb push aaa pop pusha jge aad adc add sub cltd leave lret negb xchg xchg add (bad) dec dec repz movsb and mov xchg jmp fdiv repz neg pop fstps stc fldt pop fmul pop call fmuls clc scas ret stos adc jae add fistpll dec mov cli ret inc fcomps (bad) mov pop fisttpl repz mov push push mov out ret mov mov mov ret ljmp jecxz xor movsb push xor (bad) cmp or sbb push push pop sbb stc mov push push jge fsub add xor push push mov push in xlat fucom push repz mov ret jmp fdivl add fisttp mov sbb gs push stos ficoml ret and push push aaa pop jl push and outsb xor mov sub sbb push jmp not pushf jle sub sarb sub enter (bad) mov fisubl popf mov (bad) cmp sub iret daa imul (bad) (bad) lcall (bad) xchg std adc outsl sbb insl mov shll sub inc dec mov paddb rorl cmp jbe roll jmp lods mov push dec sub sub cmpsb loop fstpt ret sbb subl mov mov fs push in mov pop mov and jmp stos mov push lret imul mov (bad) mov in stc sub mul cwtl into adc mov out repz mov or sub pushw loop xchg mov sub lods sbb call cmp in cli jo mov pop mov xchg test lcall xchg xor (bad) neg mov mov xchg cwtl pop cltd sub mov ds mov adc xchg roll add xor jno jno inc movsb mov xchg dec mov jo xor call test adc xchg xchg shlb mov pop pop pop mov jl sbbl clc neg imulb (bad) hlt insb add fdivr fdivrs add cmc icebp cli js hlt mov mov out mov out push xor pop jmp scas outsb jnp stos ret mov dec cmpsl outsl and scas jno popf (bad) (bad) or (bad) repnz (bad) cli xchg mov rcl sbb iret sub add cmp inc aaa xor out repz shlb push jae shrb push aad inc cmp idivl cmp lods sti ljmp imul sbb or jmp jecxz insb imul movsl mov (bad) out rcl iret jg jb in test push and mov or fwait add cwtl lahf mov xchg mov mov aam add mov jo mov fcmovnbe inc mov data16 dec mul mov inc rolb (bad) int3 sarb idivb adc or adc lret data16 scas rcr sub cltd fisttpll dec fxch nop sbb loope jle dec add (bad) lret mov addr16 mov int3 gs lods jecxz cmpsl mov dec mov mov sti shrw jp adc (bad) gs cli pop cld (bad) mov xchg (bad) loop pop sti jnp in push adc xlat sti lret mov inc sbb inc dec jecxz push in dec (bad) imul mov (bad) fdivp std jns jmp hlt loop add and nop xlat cs mov test (bad) mov pop sahf sti bound xor inc sub lret (bad) ds mov mov es pop sti mov pop pop inc push insb xchg ljmp test inc div jbe out (bad) dec push push mov mov inc and and aam ret cmpsb incl in fsubrp ds jnp jl call clc cmp movsl cmp fnstcw sarb lahf (bad) les fadds scas fstps pop mov mov jp jbe jge inc mov in sbb mov mov mov mov pop faddp imul xchg mov jns cs sar cli sub mov lret dec decb sti int3 push sbb sti notb jecxz sti pop (bad) cld jp jmp insb stos call sti ret int pop (bad) jbe xor sub cmp je fsincos cmp dec xor sti or dec xchg push sti pusha arpl cmpsl cli rol cmpsb stc or jg jg sti mov sbb iret mov imul fidivr shll out adc lret or inc cmp fwait dec sub pop cmpl mov sti pop (bad) into sbb loope dec hlt mov push orl ss sahf dec mov mov xchg rcr inc sti test das xchg in leave ja push pop and cli push inc (bad) sti stos mov insl (bad) popa fsubrl ficompl jbe or mov sti inc inc jb insl or sbb movsl loop stos (bad) push cmp rorb sti (bad) mov mov or fsubl nop stos sub cmc inc divl cs sti mov inc mov ret inc fiaddl sti rorl scas mov popf test mov sti aam call enter jbe xchg mov lret ds xchg cli jecxz rorb andl sti negl jle cli and mov movsb pusha sub jnp mov mov bound stos inc sti cli mov mov mov mov test stos jno dec add cmp gs jl sti cli mov repnz sub inc sti xor pop mov inc mov inc (bad) xchg repnz jnp lret sbb loopne sti mov sub xor sti das fldenv sti (bad) pop pop out cwtl xchg push push sti arpl ret in and adc mov mov xchg sub xor mov mov mov xchg (bad) fdivrp inc jno repz mov jle mov test lahf jnp dec push xlat pop cli jnp jne and lret aas aaa cli xchg xchg mov sbb lahf sti push mov mulb int fsincos jmp divb push cmpl fwait jnp cltd (bad) nop cli es in rolb ficomp les outsb sub or gs rclb sbb enter pop inc xchg mov add fs test sahf sti sbbl mov mov notb rolb sub aaa dec xchg (bad) insl addr16 add loopne jl mov cld add (bad) nop cli sti pop pop or sub xchg mov sti int3 dec jle les addr16 icebp in add sti pop push jp das enter rorb add cmp mov aam jnp mov jle adc adc sahf dec sti lea pop mov dec sti xchg jecxz fsts cmp dec andl popf sti popa pop sahf imul jae pop lock test in repnz xor jnp bound sbb adc or movsb popl es sti bound xlat pop mov mov clc outsl adcl sti iret ret dec repnz sti stos (bad) fiaddl pop aad movsl jnp or mov inc lret adc scas cli jo and cli xor mov mov sti jp pop inc cmpsb sbb fdivrs jo inc lods sbbl sti mov ret fidivrl out fistpl mov mov icebp jbe jne xchg mov adc sti movsb testb lret xchg cmpsl dec sti pop xor and sti (bad) cli stc daa arpl sti inc out mov insl jecxz imul mov sub lahf xor in jnp insb ret aas fdivrp cmpsb rorb mov imul sti lea bound push rorb sahf adc jg mov xchg stos and ret aaa pop sti (bad) adc push sbb sti aad jp jge gs xor xor jg (bad) mov shrl dec adc cmpsb test cli aas xchg fdivp dec das test add mov nop sti in or iret mov adc sbb adc pop pop pop ret and lods sbb jl insl adc sti mov in pop in sub lret xor xchg (bad) call mov add in ja or cmp cwtl (bad) stos dec mov lock insl mov cmp stos sti (bad) (bad) mov sti sarl sbb cmp xorl pop add ret sbb rcr repnz add mov add or arpl push dec je cmp pop mov jbe ret test sbb dec xchg lcall jmp pop ljmp lock sbb (bad) or push add iret stos sbb inc push xchg cmp mov icebp jnp imul sti jne dec cs jae int mov or sti sbb dec and mov fldt mov jmp or in out test sti xchg (bad) mov sub lds xor jmp (bad) adc jo jmp pop mov mov in sti add jo pusha into out sar fwait jg iret mov xor sti dec adc cmp pop imul addr16 nop sti xchg loopne ret pop mov adcl div jne jmp (bad) adc jae and sub sbb das xchg add popf or sub loop iret xchg mov sahf adcb sarb add push cs adc mov jb scas rorl lock cmp cmc call idiv out jmp std dec dec mov cmp scas sti ret iret sbb sti pop test lds push push scas ret jge sti push insb pop sti push nop cmp test enter mov cmp push popa xor inc dec push xor jmp sti cs iret out gs out pop rorb enter mov (bad) hlt fbld cmpsl xorl jp jb ss add mov inc xchg insl push clc mov mov xchg jb cmp in call fcoms cmpsb lret clc jle pop xor notl stos les push cmp xor aam repnz xchg sbb sbb bound sbb repnz addr16 mov scas add out mov sti inc (bad) sub mov movsb aam notl clc jae sti test rol ljmp lret add pop lret mov cld mov sbb add add cld push in mov cli fstl ss cmp sbb jecxz pop sbb (bad) out add clc and in cmp jle jnp pop (bad) ficom sub sbb mov sti rcll cwtl sub cmp jns jae popf ror pop mov aad (bad) in in xchg mov xchg daa add mov push mov pop mov sti enter sbb (bad) roll adc mov xchg in inc inc and in sti repz push jl sti (bad) mov add mov hlt cmp mov cmpsb mov lcall adc setp cli or test fcomps cmp int3 push push lcall add inc dec cmpsb pop cltd data16 sub pusha (bad) and mov add in mov and sahf push add in ljmp mov jbe cmpsl loop mov insb add shlb inc stos inc dec sti pop adc cmp int outsl add mov insl imul sbb push pop cli mov jnp adc sbb push jnp pop (bad) jnp ficom out stc cwtl pop cmp xor sbb sbb ret imul sub movsl push sahf add into in scas pop bnd fcoms (bad) cmp xor sbb jae out sti push adc cld xchg pop adc sti cmp hlt mov hlt jo adc sti pop mov jno and cltd cmp dec push ror aam sti mov popf sub mov mov out jno push mov icebp jnp cmp out repz (bad) jne push jnp xchg (bad) and (bad) mov push ret cmpsb xor data16 pusha rolb sbb cmpl push int3 cs in mov sti dec dec xor scas cmc adc test jmp dec push lods mov sti inc and inc shll jecxz out hlt pop loopne repnz nop movsl fidivl ljmp mov in cmp jmp mov inc xor addl mov fcompl sti enter jecxz mov hlt outsl lea sub mov cld mov loopne add stos mull sti lret shll scas push in jbe mov xchg daa jno shlb clc sti push push jb and (bad) cmp mov xchg mov testl movsb orb sbb fisubrl sbb and clc add sti sbb cmc mov clc mov mov aad icebp adc xlat in imul enter insb ret push lods push jo xor fidivr call aas ljmp sbb addr16 jnp dec sahf ret jmp jnp lds sub and and or imul bound push or imul inc jae push sti or lods cmpsw pushl jg hlt sbb hlt call pop inc icebp push addr16 and (bad) xor roll dec hlt and xchg fs jb pop movsl lcall test sti cmpsb popf and arpl cld (bad) sbb xor jae faddl js dec mov jb cmp jmp pusha lods fldt stc icebp sti fwait loop inc xor adc stos int3 addl clc or pop cltd jne cli es (bad) ljmp adc mov aas (bad) (bad) fistp xlat or imul jmp enter sbb mov fwait test repnz lret stc mov xchg jnp sti in insb adc xchg sbb sbb push ljmp mov adc dec dec push sbb cmp push and mov out cli pop jp pushf in add sbb sbb cltd test mov cmp sbb (bad) sbb sti imul das or pop sar sub fneni(8087 xchg roll or mov insb mov das imul or cmp inc inc out sti les pop mov and ljmp mov mov ret loop aas aaa push cs test mov xor iret jb mov scas les dec jbe xchg mov add dec jb inc jle int xchg xor jge sti outsl push stos (bad) icebp mov sti sub cmp cli dec rclb push gs add fldcw cmp mov sti cmpsl call es lret fstl imull xchg cli sahf pop push sti mov inc jbe jge loope or or pop out cwtl sti push loop nop push icebp scas pop sti lea lcall (bad) loop add cmpsb sti mov cs or jno hlt movsl sbb jmp add sti cmc pop mov sti lea loope or mov mov jl mov mov in pop and fldcw mov sbb outsl repnz fadds fcmovb dec mov jp cld ljmp add sti sbb dec js inc fcmovb xchg hlt xchg jo add adc mov xchg repz push clc (bad) sti cmc adcl sarl or xchg push xor mov mov mov test sti xchg jno fprem fimul and pop fidivrl mov pop jnp pop inc push je push js mov jb jp sub aaa sti scas cmp adc cmpsb loop lret (bad) pop test repz or int pusha and fucomip (bad) jb xchg sti dec dec xchg lret xor or fildl sti mov inc adc (bad) ficom pop adcl fcom addr16 fucomip pop sar sahf sti cli idiv fidivrl mov or push test cs fdivrs movsl and dec cmp mov cli das and in sti fistp outsb imul hlt cli push mov cmp jecxz sti arpl mov ljmp pop xchg dec adc lahf sub aad cmp (bad) xor mov xlat ret test sti dec mov mov es into (bad) jae cmc inc (bad) ja (bad) pushf jnp stc adcb mov dec jno sti pop lret mov mov pop sti pop push jp mov lret cmp testb (bad) outsb sti inc push imul lods outsl mov dec sbb int or jge sti pop jnp sbb cs fldt cld xlat out fild adc in inc stos mov (bad) in push dec jns xchg (bad) xor or cmp clc (bad) movsl sti or ret (bad) push mov aaa dec hlt scas adc (bad) mov xor mov fwait or sti rorl mov in sti std bnd hlt xor inc add fwait jecxz inc push jmp or dec cmpsb mov sti mov sbb in mov cmp rcrb sti fwait or insl push aam sti leave stos xchg adc jmp and pushf (bad) mov push pop pop sti andl mov popa sarb js daa adc fstpt popf sub sbb mov repnz pushf sub mov (bad) sti mov add mov (bad) nop lahf add cmp or mov xchg xorb or push xchg adc dec aam push pop fs mov jns (bad) andl cmpsl pushf cli sti sahf mov sub dec mov nop out in xchg xchg mov sti test scas dec fdivr mov clc pop (bad) mov jnp movsl mov lods shll lcall rolb push jmp test inc xorl cli mov sub inc fcompl add loopne jp xchg inc icebp stc mov sbb push jmp cmp pop idiv int3 js xchg les pop aad mov mov imul sbb (bad) cmp decb sti lea imul pop jp pop fs es daa fwait xlat jnp cli ja in push mov dec notb scas inc sub sub mov test arpl in sti xor sbb js sti fbstp clc mov jnp fildll sbb lret outsl subps xor (bad) sti mov pop sti mov cmp dec push lods hlt cmp jnp inc fisttpl loope sti dec loopne (bad) lret xor cli cs out call inc jnp jecxz sbb cli popa cwtl pop dec push and jl sti ret inc lret and fldl sbb test jmp cli fistpl ret rcrl mov push mov hlt in lcall fsubs mov jl outsl sti pop in jge fimull sbb mov inc or pushl outsl or cs nop push sub ja push cli ds add xchg movsl sti push (bad) (bad) mov jecxz cmp jmp adc hlt inc xor jl sbb cmp mov in daa out mov push push or xor adc aaa push ret sti cmp push mov bound clc jne or ret cmp stos and sbb adc pop insl bswap loop sti orb mov lahf das jb inc mov aam push sti pop inc xor jnp test mov mov jno movsb cltd push insb mov dec sti push dec test int3 divl sti pusha in or mov sbb mov push adc cmp pusha or xor pop pop in ficom mov js jns inc int3 adc out sub dec cmpsl push cmp sbb sti mov mov sbb andl leave xor jge mov cmc xlat mov xor fildl scas mov daa and dec xchg arpl clc jmp (bad) leave pop das push xchg sti enter xor psubusb fnop mov mov mov xor fwait jb sti mov fisttp cmp test pop test scas out out mov pop mov pop std push push xor dec in pop test dec cmp mov ljmp xchg sti dec adc dec lods mov mov dec lods fistpll (bad) sbb (bad) xlat aad lods inc jmp icebp clc gs imul and (bad) ss pop xchg sbb cli jo imul fdivs sub jp std add loope inc insb jmp pop push sti stos xor and add mov xor mov pop cmpsl mov rcll pop inc sti in clc add in adc sbb std mov add cmpsl fst sar jnp cmpb lock sbb test pop ds xor inc (bad) mov in mov mov jb push popa imulb pop push cli cld loope out ljmp (bad) jae jae jmp lahf jne mov sti pop adc lahf mov inc sub xor xor sti sahf and sbb shll fsubl sysenter sbb or outsb in jne xchg arpl add jo push adc fwait or outsl sbb sti push test into dec push and jle inc lds and rorb movsl iret sti xchg mov push add (bad) icebp stc loop cmc cld aad lods mov jecxz lods call or outsl ja xchg pop fwait stc cli rcll mov push xchg sti cmpsl sbb mov jl pop mov movsb (bad) orl pop sti and pop jbe pextrw dec and pop leave cmc sti add or dec loope cld push (bad) sti xor mov dec add in pop mov xor jecxz lcall movsb add clc negl imul xchg xor inc inc push inc push divl mov or fcmovbe mov in sbb jmp test xchg ret jnp mov jb (bad) cli adc cmc pop imull aas clc ds inc xlat pop bound sarb ret sub cltd aaa xchg cli ret repnz dec inc das loopne lret imul sti sbbl xor cmp ret in jnp cltd mov or or fwait hlt and sarl jle xchg jno or cli xchg rcl sbb cmc jnp test into xor xchg dec orl cmp push inc jmp in fild adc jl xor sub (bad) jb or outsb inc mov in sti leave dec mov scas clc sbb je adc in cli stos repnz aad cmpsl mov movsb sti sahf arpl sub scas sbb jmp out cli pop lcall cmp (bad) jno scas pop xor (bad) jb (bad) xor xor scas das push dec xor lcall int ljmp mov sub shr mov sti jb add push sbb push or cmpsb lods aam adc (bad) push cmpl adc popa cmp jno pushf push (bad) dec in jp dec push inc repz add orb into popf es bound sbb lahf mov mov inc (bad) fwait xor or sahf jnp dec push repnz leave and movsb hlt jg lret (bad) mov xlat jns movsl push mov aam xchg test or decb sti or ret pop leave jg out pop jnp cmp fsts sti in imul sub mov push cmp movsl sbb jbe test or mov nop aad outsb pop xchg cmp lods push jae xchg pop or lcall in scas mov pop push xchg pop mov and arpl sbb inc mov sbb and mov push sti xchg add fsubs pusha xchg cwtl (bad) daa test dec hlt xchg in aad (bad) inc sbb sti adc jns,pn dec cmp add mov mov roll sub pop mov pop jbe cld test inc cmp or push mov scas hlt pop mulb dec or pop rorb popf iret mov push push test stc add cltd xchg (bad) sti mov pop lret (bad) sbb mov test icebp jmp dec sbb fstpl add mov je xchg xchg xchg roll in clc inc xchg (bad) in cmp je pmaddwd loopw inc out hlt mov mov sti push loop cmovbe sti sbb adc scas sti rcrl jb mov std jnp fs dec mov sti ret sbb cli mov call sub cld mov ret (bad) stc xor and (bad) pop cmp das lods cli sti dec mov sub sbb sti mov in scas decl mov lods cmc and dec jae xor clc push imul pushf testb das pop sti push sar mov mov mov cs jne lret fmuls rorb sub inc sbb pop cmpsb cli mov and rorl das ja push mov hlt inc inc iret or jno (bad) cmp into test pop jb sbb hlt dec call mov push outsb test xor movsb in fldl nop push add mov lret (bad) clc popf decb xor stc jnp sbb sti add call cli mov sbb lret mov jmp add jno stc insb fstpl xchg aam int push bound std out xchg lret hlt jecxz stos adc jbe hlt jge jae loopne lock cmp add clc gs adc fs cmpsb push icebp clc imul fild sbbl mov xchg inc in cmp jns inc cmp sti ja pusha sbb xchg and sti pushf mov cmpl and add lods xchg xchg xchg sti sbb (bad) out sti pop mov stos sti shll out leave jae addl jnp lock pop pop lock cmp imul push dec jnp repnz sti into lahf push in insb inc sti lcall negb xlat scas mov inc arpl into xor daa mov xchg mov fildl dec in mov movsl jg xchg cmpsb lods or pop xchg in pop sub push sbb add cmpsl jg mov movsb xlat mov sub jg sti lds hlt rcrl cmp mov cmpps (bad) movsl aad gs rcrb jnp loop mov testl and sti call daa push xlat sti cli sbb nop pop sbb hlt cmp sti fs sbb cmpsl mov mov fstpl or gs lods dec addb push sti fcoms movsb pop add sti sbb lret mov sti cli dec rcll sarb pop repnz add ss movsl jb fistl lods sti adc pop xchg imul int3 (bad) dec xchg sub cmc push sbb push fnstcw (bad) pop fwait inc cmpsb fs outsb pop jne mov test stos pop cs imul sbb cli (bad) jmp mov ror jnp push cs xor cmc fsubl (bad) dec das sti pop lods es inc mov in cmp into ja xchg sti pop mov add jne xchg imul sbb sbb cmp or arpl mov ss mov scas aas add nop ret fsts jb aam fimull xchg pushf sti cmpb cltd and pusha sti test jns mov (bad) mov ret mov jg jbe and hlt (bad) hlt stos inc in jns jmp push imul dec js and jno daa xor test xor sub rolb adc dec mov shrl sbb (bad) fwait imul jns or out and dec idiv (bad) xchg sahf jno ret cmp dec iret fimul shr mov xor rcr dec adc cmc sub (bad) mov cs lcall or popf inc cmp jle out mov jl jbe dec scas adc les xor sbb popa mov mov in loopne andl hlt sti cmp jecxz in cmp pop sbb fsincos cld xor mov mov inc or or outsl ficoml pop adc shlb sti mov and adc dec jb push mov outsb pushf pop cmp loopne iret push pop jbe aas mov mov xor scas int3 cmpl add out mov sti cmp add jb sar xor push out in lods cmp mov aad fs pushf pop pop movsb lods inc call lock pop es mov mov or add je adc out or dec mov mov lods dec call hlt mov sbb xor push mov sti jae sub push (bad) fs xchg fiaddl mov push jno adc test movsb fisttpll push add and testb popf cmp jnp fbstp mov cmp inc flds loopne cmp xlat xor adc sbb xlat push mov push jmp or cmpsl mov fstpt ljmp xorb daa loope das jae pop jecxz loop cli jnp sbb jmp imull adc adc xlat push ljmp adc pop mov jae loop cmp jp push sub sub imul mov fstpt jmp sub push ljmp mov add (bad) add and mov jae add and push jmp add mov and mov fisubl jmp xorb cmp push jae cld jnp in sbb xchg dec lods mov aaa mov jecxz clc (bad) cmp dec fistl jae idivb jmp dec (bad) jae out mov mov hlt repz push fsts mov inc jae rep mov arpl mov (bad) in aas mov ds jp jmp divl cmp cmp ljmp mov sbb pop sbb sbb pop sbb aad jg push ljmp adc pop out adc or fnsave aas push (bad) jae xchg mov or daa out icebp repnz fmuls sub xchg stc mov in dec and (bad) jne xchg xchg jle nop mov outsl mov xchg and pop xchg xchg enter xor xor leave cld xchg mov fadds (bad) jl movsb (bad) ljmp leave stos (bad) and aam adc shll outsl lock int3 xor and inc outsb (bad) test rorl (bad) or ret lret (bad) jbe add addr16 ja ret lret xor repz sahf push sbb sbb int3 arpl (bad) lret (bad) lret ret leave ret mov sub dec lods mov cmpsl push mov jecxz sbb enter (bad) adc sahf pop dec and lds fsubrl mov mov lock or sbb and popf push iret outsb jp leave popf dec inc lcall iret push enter mov cmpsl jge leave jbe adc mov xchg movsb and pop lods jg arpl shrl outsb mov jl sti mov jge aad (bad) push ds lods push and xchg jl scas jbe xchg xchg cld ljmp repnz mov pop addl sarb lret xchg pop adc mov inc (bad) idivl pop fcmovu mov icebp rcr fisubrl clc int3 fidivrl (bad) int3 ficoml lahf pop cmc int3 fisubrl mov rcll out (bad) pop in (bad) pop loopne jmp ficompl in imul jecxz imul loope imul in pop or in imul pushl rcr ja jmp mov repnz cli or stos xchg mov fildll in jmp rolb jns dec jge ljmp rcl (bad) idivl pop xchg mov pop (bad) xor (bad) aad cmpsl test mov cltd pop cmp sub fs push or out add jle jle pop add pop jecxz mov sub and in sbb outsl std stos mov scas mov adc mov mov scas outsb push idivb fsubr cmpsb and movsl inc je ss xchg in jecxz jl sub add push dec movsl cmpsl mov sbb sbb cmpsb add mov (bad) jmp insl lds into aaa fdivl inc mov popa call imul add push add cmp stc cmpsb scas dec bound pop adc pop mov jg pushf int rcrb stos jle (bad) jo xor xchg mov cmpsl out jmp jmp in pop jg xchg (bad) leave xchg pop dec (bad) push cmp cltd pushf sbb pop pop fbld ret icebp daa sub (bad) rcrb sarl fbstp arpl rolb cld jnp test dec mov mov (bad) push sahf xor mov (bad) aas push (bad) rolb gs push repz mov pop mov lcall pop sbb shr mull lahf cli mov test xchg mov fcmovnbe lock inc sub mov lods call movsb scas pop (bad) out jmp push test mov lea sub loop popf cli xor jmp js insb xchg and xor cmc iret pop cli std mov jl aas sbb lea sbb cmc idivl (bad) insl fstpt inc rol rcrb dec repz fsts and cmp adcl push cld (bad) ljmp jmp lods movsb add aaa leave aaa dec lods cmp stos dec mov faddp jnp fcomps mov (bad) jmp lods adc imul enter mov (bad) mov (bad) jae mov fmuls add mov cmp mov mov mov and mov (bad) ret (bad) jmp dec jbe add repz mov cmpsl pop test (bad) dec or cmp into dec xchg popf data16 (bad) xchg mov push lcall rcrl jns (bad) aam fcmovnbe lret lret sub hlt mov out mov or mov (bad) jae xchg adc aam inc xchg add and xchg imul add das iret out insl mov lret jb mov xchg repnz rcrb ja jae sub scas xchg cmc insl mov xchg ret sbb xor repnz jecxz rcrb imul jmp sbb or mov xchg int out (bad) mov jmp stos inc mov jecxz jns xchg pushf stos xchg orb pop fwait cmpsl lcall pushf addr16 add lds ret lods test mov (bad) rcrl pop adc mull test mov int3 jge mov pop fmull repnz jae das fcmovbe dec mov xchg lret pop xchg bound lret pop lods mov sbb aad mov imul shrl xor (bad) cmp jmp aam ja roll cmp jge mov outsl test sarb dec pop shl push jecxz ss push rcrl ss lods fstpt mov inc inc arpl ficompl loopne sarb mov repz mov ja fimull lcall (bad) icebp pop xor out sbbl inc add dec test iret sahf pop nop scas push sbb subl pushf repz mov mov push (bad) lcall mov stos iret push xchg xchg adc int3 in stc imul jmp (bad) xchg int3 pushf loopne cmp mov push mov data16 push inc xor xchg dec cmc pop xor pop mov mov mov mov xchg push pop imul xchg mov call lret mov mov scas lret outsl mov out pop rcl loop ljmp aam jmp aas imul pop lcall aaa mov das xchg out jmp mov loop pop stc gs cmp pop (bad) out loopne pop ret pop ret lret repz fcoms jp aam adc xor movsb mov gs push cs or cmpsb scas out test mov repnz jmp addr16 (bad) sub fldcw jb (bad) fisubrl fwait jmp xlat push fxch mov cmpsl jb jmp cmp inc mov fsubl cmp stos (bad) arpl push addr16 jb scas pop jnp sbb mov lcall push jmp cltd insb gs insl lret mov pop pop xor xor pop mov fsqrt test stos (bad) mov clc out idivl stc aaa fmull ficompl fimull mov mov xor inc lret aam mov imul sbb data16 and stos clc pop fbld adc lret xor cmp sbb rcl subl add fs pop pop adc fnsave and out stos xchg fildl mov xor lret repz (bad) ljmp sub inc fbstp xor rcrb and sti jae mov ljmp rcll xchg pop movsb xchg rcrb add (bad) lcall lods or dec cmp sub out inc dec push fidivrl insb (bad) aaa lahf leave bound leave ret jae jo leave mov cltd mov inc sub mov enter or ret popa (bad) in sub pop mov pop enter jb pop arpl aaa dec repz imul push push or sbb (bad) sti test jae sub outsb sub push sti xchg enter rcl cmp lods push sbb aas dec test xchg adc (bad) cmpsb in lods dec cld xor (bad) fcompl pop iret test cmpsb mov mov xor jmp lea shrb cwtl adc pop jmp and mov jecxz mov fisttpl cld imul out jecxz repnz mov std int clc int3 push out dec mov out rorl icebp fcoml fwait xchg cmpsl add pop cmp imul fnop mov jmp ret fcmovnb push dec xchg pminsw xor dec das pop ljmp xchg addr16 xchg jae nop jg loop xchg popa ljmp ljmp sbb xlat setns (bad) cmc sbb inc mov mov mov xchg push jb les jno mov aad mov lret sbb jecxz dec mov sti jp adc mov test ljmp scas sti dec (bad) fistpll jnp xchg rcrb aas jnp jns mov scas jb shrb gs clc jae (bad) cmp jb ret fstps gs mov cltd adc popa out stos mov imul arpl clc daa pop adc mov adc in test jns cld mov stos lods gs arpl xchg xchg or jecxz mov in push stos jmp mov xchg jne stos scas inc jno int3 add (bad) mov add rcrb mov push sbb test cmp jl xor hlt int xchg loop lcall mov test ljmp popf xchg add test (bad) sbb pop pusha jo xchg clc mov (bad) jmp lods xchg cmp or jecxz fcmovne adc loope adc jne pop addr16 dec lcall mov xchg out je (bad) pop rcrb or push or in jmp mov fisubrl lea repz xchg inc pop fldenv gs mov add cwtl mov jno out out out out pop ds (bad) out mov mov out mov lea mov or push ret test lods mov or scas test push test mov dec inc rcll scas xor push shrl pop fist fnsave ret pop jnp jmp push inc (bad) fdivs aam fwait jb shrl gs and jecxz aas rorl repnz rorl adc cmpsl popa adc adcl pop loop outsb shrl pop mov popa dec fpatan xchg daa rorb mov jmp das rolb cwtl out mov mov rcr lret inc rorb ffree xchg dec roll (bad) jnp mov pop shlb jo test inc pop pop scas xlat pop into clc test lcall adc sahf popa or mov pop mov repz (bad) dec push jno leave (bad) inc xchg ljmp xchg sub outsb pop lock or xchg out imull adc jmp imul lahf (bad) dec mov mov lret cld nop ret mov pop ror cmpsl fwait xchg lret roll popa stos shr xchg pop adc incb inc popa sti ljmp mov daa mov ror cli sbb dec out xor outsb jp push into aam bts cs push pusha stc inc xchg scas es insl data16 or jbe mov mov xlat int3 leave repz jle sub jnp addr16 loop ret fstpt mov outsb push (bad) idiv ret mov add je subl hlt cwtl jb adc mov adc mov sub pop jae daa lock std push fmul push sub call or pusha out or fsub adc push into leave mov jecxz xchg mov fistl lret xchg xor vpunpcklwd pushf add or cltd inc pushf mov inc popf push test stos mov push aaa cwtl jbe adc bound sub and iret (bad) pushf lcall adcl jb ja jbe daa sub xor call out ljmp iret xlat (bad) (bad) lahf stos jg ret mov jmp lret fucomip in (bad) stos stos mov mov icebp fwait cwtl mov repz cld ret xor sbb cmp xor repz sti hlt in pop jbe outsl js insb in lret clc stc orl jo jmp sbb jmp int fidivrl out mov push pop jae pop leave stc pop pop sti sub fiadd or mov bndstx iret addr16 push out clc lock cmp in in stos scas fbld dec outsb lods mov fcomi das fucomip mov cli mov jae push (bad) fildll cmp or cmp and sub loop fstpt aam pop mov mov loopne sti sub ljmp xor repnz push mov jmp pop js adc xor shr cli out fildl jne pop repnz cmp les aaa cmp mov push pop jne jmp jmp insb int3 daa sub cli out lcall inc in dec ja mov sbb idivb je int fucomip in fsubl push loop xlat ljmp stos test mov les sbb cmp decb cs hlt iret fsubr int3 xlat mov jnp cli jae jo out stc in aaa push pop or sti pop pop jns (bad) cltd lods int imul scas mov lcall repz mov adc mov sti aas dec insb mov sti or cmp aaa cmp idiv ja je out imull decb sti sub xlat pop sub (bad) iret fldln2 int mov jmp cmc aaa fcmovnu mov sti xchg cwtl mov xchg cltd mov data16 pop or ss imul jae jno mov push das dec dec cli js jg lods mov addl mov addr16 ss xlat fchs cmc aad stc jnp pop outsb clc into pop sub pop cmp lret sbb arpl enter dec pop insl int leave cmc (bad) ljmp ret lret repz (bad) push pop je mov mov (bad) jnp aaa cli adc sbb xchg push idiv (bad) xor xor das cmp div mov cli pop aaa sti cmp jae jb xchg mov shlb sub loope or ret imul mov jns stc aaa mov div decb sub jnp mov ret mov clc ret mov cmp sub daa sub clc inc dec jae out clc sbb outsl jns in ret mov fdivrs jnp push ljmp sub loopne pop hlt ja (bad) lret (bad) lret or cmp ret in repz (bad) (bad) cwtl lods int3 jge in out mov mov insl mov or outsl ret cmp jnp push pop jno inc dec adc sti scas mov mov sti ret enter sub (bad) xchg fwait mov jg lods mov clc and xor or test mov pop aaa jnp sti bndldx into mov mov cli inc dec jbe rcr lock sti mov add xor sbb jge hlt inc dec jb dec mov sti insb fcompl or xor pop sbb jns ret adc xor (bad) lcall fcoml sbb xlat or cmp lret das cmp out jae xor xchg jmp leave icebp shll sub sbb clc (bad) (bad) idiv hlt jb enter sbb cld jecxz call divb mov jnp xchg cltd mov rol fyl2x mull jno fs fbstp and shrb imul dec fs adc mov aaa int test mov xchg add bound and test inc roll or xchg sbb sahf push test sub jmp xor push loop mov sub (bad) xchg push push xor imul enter push movsb and push rolb push imul xchg mov sub arpl sbb jo inc int3 mov push int mov mov add xor sub jo xlat mov popa adc cwtl xlat mov iret (bad) or sub mov daa dec inc or shrb xchg inc jmp push push or xor fild xor push lahf rorb repz xor sub stos int3 scas lahf pop (bad) addr16 int3 enter push dec cmpsl imul imul das inc jl ja aad cmp (bad) mov jg mov xor xchg je imul push imul sub fs lock movsb (bad) sub mov xchg xlat rorb xor pop sbbb sahf arpl dec push xlat aam pop mov addr16 jmp push cmp adc mov mov jnp fsubr imul (bad) insb sbb in mov outsl push mov stos inc mov lock push pop add dec mov fldt in adc ja jb sub xor mov xchg fadds inc scas (bad) idivl cwtl sahf imul mov repnz mov out sbb iret hlt mov mov call mov enter xchg mov (bad) mov (bad) xchg mov pop nop inc dec call repnz decb adc pusha (bad) jmp js fdivrl (bad) or dec cwtl mov (bad) iret enter iret rcrl xor iret and mov int3 xor loopne arpl jl mov pop dec in movsl mov adcl dec or gs fbstp fcmovne dec mov mov sbb xchg cmpsl xor ret (bad) aam (bad) enter mov mov add xchg pusha mov repnz adc and jmp stos rclb int in fs lahf call sbb mov mov repnz lcall sbb ret repnz fmul rol mov jmp stos test cmp outsb sub stos mov xor pushf stos lcall idiv and xor je mov ret inc pop mov repnz lock imul xchg push sub stos test pop test stos (bad) aam xchg sub xlat clc jmp in iret or push (bad) jl sub mov js and add and inc (bad) xor push (bad) mov mov dec clc mov mov add xor mov pop sbb scas dec iret sub or sbb push cwtl clc xchg mov popa je stos test and push add xchg mov (bad) imul imul xlat fcmovnu sbb push sbb test xor js adc outsl fs loopne call (bad) cli mov dec (bad) sub xor mov push push dec mov pop popa cwtl push shl aad jo sub pop sub adc xor xchg mov xchg call jo push ljmp xchg clc aad cmp push loopne test add xor xchg mov mov cltd adc push add push in sub cli mov stc xchg pop dec addr16 or cmp js sub xchg in or mov lock xlat insb fstps mov bnd dec cmp call inc mov test cmp addr16 dec mov mov leave je jo loopne sub imul fldenv ret call xchg sbb enter shll leave sub push push ja lret pop cmp gs jmp xchg je xchg cmp adc lret cmp lret sub mov iret cmp jp call imul or mov fs lcall lods gs inc cwtl sarl lcall (bad) sub dec sub clc mov adc dec inc mov jo lcall int3 imul mov insl nop mov and lret in lahf lods push divl gs jmp mov dec gs mov mov shll sub stos hlt mov lock (bad) pushf mov fmull hlt sahf sbb aam neg dec dec insb fmuls sahf lcall dec hlt xchg sub (bad) test cmp inc test dec fucomip dec adc push mov xor mov jnp aam stos test ja sub jo pop js fidivrl in mov ret and sbb call sub iret hlt mov jmp mov leave repz push or sub jne shrb sub mov insb xlat fdivs xor adc xlat fsubrs nop add mov jbe repnz or sub cmp cmp es push out imul inc sub xor (bad) push push enter shll cmc popf rclb cs shlb pop xor pop test jae jl imul rclb mov mov sub jo xlat mov popa adc cwtl gs mov in (bad) or daa call les xchg inc xor mov xchg mov xchg outsl dec je jo aad adc lahf or fs mov xor out xor xlat (bad) testl inc xor (bad) int3 scas sub stos int3 scas repz int dec gs in dec lock clc imul add popa cmp sub aad mov dec jo ss jno push push push cmp cmp leave movsb test adc mov adc popa xor push xchg jb insb mov mov mov mov mov jnp push mov or jno fs mov fs loopne fadds fdiv sub mov mov jne inc mov test scas jo jns or fcoms mov scas mov insl popa add outsl je icebp mov in fsubs inc lods push sub mov insb in mov jns push cmp mov mov rcll shlb jbe mov mov pop mov stos enter mov add cwtl in pop pop mov addr16 in mov xor mov movsb mov dec inc mov pusha stc lcall or cwtl (bad) xor mov cmp iret or jb imul int nop imul sahf jnp int in inc mov imul in mov xor rcl test imul iret mov push mov mov repnz xchg add dec pusha mov fsub xchg ja xor lods inc xor mov mov in mov mov (bad) out dec xorb mov data16 adc mov int sbb bnd cmc mov mov ffreep push ja mov call hlt cmp xlat int bnd cmp mov lock clc xor ret add sub pop (bad) mov and int3 int cmp addl loop push inc push rcll std (bad) mov pop and jge fwait mov test insl cltd scas xchg jae jo sti pop in mov stos call bnd leave ds mov xor data16 fstps and fwait dec fisttp push outsl or jmp sarb sti lret pop mov in sti and or sti pusha aas addr16 sti add cmc cmp sti int3 xor adc sbb ja mov dec (bad) scas xchg shll sub mov pop sub popf mul push (bad) sbb xor xlat push sti stos pop pop mov bound sti jbe inc inc cmp (bad) cmpsb fs add arpl jno dec negb clc jmp popl sub sub sti pop push iret cwtl in mov push out ret (bad) loopne repnz jnp pushf inc dec cs int or mov push pop sti test push fistl dec adc repnz outsl (bad) mov mov mov sub adcb lock inc cmp cmp jo jo jo jo jo jo outsb js fdivs jo jo jo outsb cmp inc lea lahf rcrb lods dec mov mov mov mov adc in lahf stos lahf test lahf mov lahf popf lahf lcall lahf xchg lahf nop lahf mov cmp jo jo jo jo jo jno xchg divl jne jb jno outsl ss ss imul arpl pusha ss ss ss ss ss ss ss ss ss ss xor inc ss ss ss ss ss sbb ss ss xor xor cs ss ss ss cmp adc adc (bad) or or or pop ss add add std ss ss scas cli adc fsubr in xlat sbb stc (bad) hlt or sbb imul or sbb pop jne and notb and idiv jmp and test cmp add fucomi mov cli into stos adc mov imul mov int3 push jo mov lret push ret xor cli inc mov iret mov flds in cmp cmc mov sbb (bad) inc mov int3 pusha sbb cltd or mov ss repnz (bad) sub bound add xacquire mov aas mov int3 or mov std scas ss jmp (bad) fisubl inc jmp xchg (bad) jmp in inc mov int fisubl xlat in pop rol fidivl stos mov mov int3 or pop cmpsb jl jmp push inc jmp or repnz setl and ljmp or (bad) popf flds in cmp or push xor mov or stc inc out adc dec jl xchg lret ljmp jp or push jo pushf flds in cmp jg pop stc mov sbb inc and scas ficompl int3 bound into ljmp ljmp or ljmp cmp jle pop pushf cltd add and adcl test pop cld lock ljmp aaa pushf fldcw mov push lds fldt fistpl or ljmp aaa pushf fnstcw loop jmp mov aas repnz es ficompl std push ljmp sbb pop cmpsl (bad) and push inc fistl flds in cmp jg movsb sar xor sub scas fcompl sbb adc add repnz or stos adc mov jg jo fstpt jnp jo pushf fscale in loopne mov jnp int3 push jo pushf fnstcw and cmp cld int3 push jo pushf sbb in cmp cld int3 push jno sbb add cmc les mov ljmp enter add xor (bad) sub adc ret xchg fcomi sahf (bad) in inc mov pushf flds in cmp shl xchg mov in cwtl scas ficompl int3 push leave pusha repz jo pushf sbb in inc jmp or sbbl repnz add xor add repnz ss or (bad) mov cmp mov sbb scas out stc es pusha mov in cmp repnz cmp mov mov add xor mov mov sbb enter xor mov jo pushf flds in sbb add xor add repnz inc sbb jo pushf flds in cmp scas add stc aad xchg jmp sub and add rorl fucomi fdivl (bad) push popf flds out mov mov pushf cltd add fimull cmp dec enter cli (bad) rcr mov mov pop mov ljmp or fcmovu push lcall ficoml flds out fildl int mov pop push stc mov xchg mov adc popf or sti mov stos pushf scas mov push scas or stos mov ror mov (bad) ljmp adc mov mov scas lods sti lods stos stos test repnz mov aas sti xchg xchg xchg xchg nop (bad) mov mov test mov insl addr16 or or jg sbb lock mov push pop cli clc div cmc hlt fwait add div out out in in cmp call in loop vpavgb sti (bad) (bad) fcmovu fcom sti (bad) aad rcl rcl iret out int je fdivl dec xchg pushf add jl xchg add ret mov arpl movsb clc push idivl movsb jge hlt and fisttp jnp mov (bad) not add mov jmp sbb adc xchg repz xchg popf out outsl xchg repnz cmp xor repz loop das inc sub (bad) sub repnz mov loop bnd loop repnz dec mov xor mov push jmp into lea rcr and loop (bad) mov shll xchg rolb shlb sbb jb std xchg xchg pop pop in mov out mov fidivr mov je mov inc mov push (bad) xor out pop and cli imul and cmp jmp and cs sbb clc stos shl mov jo fisubrl scas fwait pop or mov mov push cmp or stos repz mov data16 mov ja jns cmp in repz sub loop push (bad) or repnz push les sub adc ficompl xor out fs test (bad) mov cmp pop mov xchg loop into mov das pusha jns (bad) fdivrl push cmp xor lret in outsl mov ja jle icebp jecxz popf pop mov cli jno notl ret jecxz stc imul fcomi leave jmp ljmp xor xchg loop mov pop loop lcall sub call push mov aad stos xchg push adc sbb popl inc test stos lret popa shr repz xor out xor (bad) mov and movsl daa mov mov je push lahf addr16 pop mulb outsl daa cmp pslld mov add push pop ret lods push jmp mov cli jno notl in shlb xor repz movsl test or test andl xchg cwtl loope fs dec adcl sbb sbb mov arpl mov mov fldt cli lret aas mov lods mov hlt inc divl fst lods xchg icebp out cmovae out xchg mov (bad) cli insl jmp jmp sub or adc sub imul gs jnp jge mov lret sbb insb repnz xchg pop sub test pop fild lcall test cs xchg xchg sbb movsl cwtl sub stos inc xor movsb xor pop inc repnz repz ss enter jmp add lret mov sbb insl sub sahf sub sub outsl stc ja jnp jno mov mov imul cmp inc mov jmp ficom jae mov adc inc jmp mov pop out jmp push pop lods push or sbb jmp sti pop fwait lods xlat pop scas jp push repz jecxz fs (bad) push icebp jecxz pop adc (bad) jecxz stc cltd cmp fldt stos mov sub cmp cmpsl imul cmpsb or lret sub ret addr16 lret cltd xchg push loope test mov sbb push in lret cmp mov int3 ds sbb (bad) sti jmp test enter add out cld jmp xchg je cmp mov push movsb push and push in xlat sti cmp inc add out cmp clc lcall sahf mov dec stos nop cmc rorb (bad) pause or sub (bad) stos xchg cltd jae and mov fstp jb mov dec fwait (bad) jl sbb rcrb pushf sub fucomip ret mov cmpsl shll jecxz inc mov dec out dec push fprem1 mov mov rdpmc dec sahf fcomps jcxz (bad) lea lret xchg or loope pop cltd mov rolb outsb jae mov or xchg mov add iret push pop into popa cwtl xchg inc (bad) lock aas shld (bad) pop fwait lahf data16 adc cmp xchg mov xor xor imul sbb inc xchg xlat mov xchg inc stos jo (bad) xor mov lea inc jmp mov jae lea or in jmp (bad) lret jl jae pop (bad) jecxz sub jmp (bad) cmp cmpsl mov (bad) xchg mov jecxz add lcall sub arpl mov xor xor add jl mov dec pop sti fisubrl mov sub and cmp cwtl jns xlat or repnz lods or lahf or push add cmpl out fcomip fist in lahf icebp in and ljmp jecxz jmp adc (bad) pop sbb sub inc ja mov sbb cs lcall xor cli in (bad) pop repz test and and push (bad) fildl stc fstpl fdivrs test out inc ror push aas outsb fadds ss test leave lret jo rcll arpl das pop in dec fstps mov psrlq imul dec sub mov aaa xor jnp xchg test xor xor mov mov mov xor sub rcl xor dec lock sarl cmp fs (bad) ljmp cmc sub pop and sub repnz test mov pop or daa test rorb shr mov xchg or out inc int3 jae push test mov lahf jb adc pop adc addr16 mov jecxz push mull pop testl xchg daa cmp mov call push mov popl adc adc pop (bad) lahf pop sbb xchg cli cmp push mov xchg ret mov fmuls pop xlat test mov cmp xorb ret jl lods jmp sbb xlat pusha mov (bad) cmpsl sbb add sbb in aas scas lods stos pop xlat push or cmc arpl mov pushf push movl daa adc mov xchg (bad) inc mov roll rorl push xchg stos les add (bad) repnz dec std jmp repz lods mov (bad) or lcall jge fcompl aam push xor mov test fcmovnbe push sub mov push and lea in xchg ret mov movl dec or test cmpsl out scas in jecxz lods int test loop imul test or inc repnz loop repnz mul xchg fucomp cmp test jle fwait icebp add and jmp mov cltd fistpll jp out adc out stc fist cmp (bad) jg adc push jecxz or jnp mov xor pop jae ficomp xor int3 (bad) leave daa inc imul sbb repz cmp jg mov ss xchg fildll dec xor jb xchg mov jo (bad) dec outsl xchg sbb inc jg lahf mov dec jno dec mov sbb inc push cmp rcl addr16 mov inc arpl imul and jecxz stos cmp sarb inc out pop sub pop mov stos (bad) jg repz addl push sbb (bad) mov (bad) lods cmp fwait sbb andb cmp jno sub mov (bad) adc add jo andb pop ja mov pushf add aas sarl jo jl js jecxz sbb push pop ja (bad) xchg ja adc arpl (bad) out inc adc sub imul (bad) xchg push xchg (bad) arpl mov inc ficom pop int xchg mov jmp mov leave cmp sub mov pop out mov mov mov mov int3 jl das int dec stc mov and add add adc ljmp lods jbe lret or popf stc out xchg fimull mov iret jp mov cmc stc leave nop enter lret inc cmpsl cmp jp jnp sub mov add pop mov jo andl or ret clc sub push mov inc mov jbe or inc xor xor mov mov daa xor xchg or outsl and out xchg rol arpl sbb lods (bad) repnz cmp dec and imul mov jg cmp mov out mov in lods ret mov mov mov enter jnp lcall out repz cltd rcrl repz and jmp sbb push fdivrp xlat xchg fildl es shrl pop sarb mov testb rcrl sarl test cmp jno dec xchg icebp jecxz ljmp jmp repnz (bad) jb out adc enter fptan (bad) mov (bad) jmp (bad) or daa mov inc jb jmp ja xchg xchg mov mov (bad) jmp push ret mov leave ret loop insb add lods mov mov shrl xchg push pop gs xchg ja iret mov mov mov adc cmpsb cmp ficompl bound (bad) jmp fcmove into cmpsl cmp push insl insb mov mov out push outsl adc pop sub cmp dec out ljmp jae in test mov mov jp lret arpl xchg rcrb mov lret out sub rolb call cmp jns mov cmpsb pop aaa sub pusha xchg jo sub push sbb movsl fs cltd pop push mov mov fstps stos pop aam push addl mov jle sub lods test push mov mov scas vpsubw out pop and std mov lcall nop fmuls sbb jns repz pop xorl jg rcrl lock sub fstl jge movsl data16 imul ja mov xchg rcl and stos cmp enter adcl outsl jmp mov aaa rcl cmpsl xchg pop cld pop (bad) push sbb jmp ficoml scas imul xlat fcmovbe jmp fcomip jecxz rorl adc xchg and lds ljmp mov fdivp (bad) notl push mov popa mov cmp push xchg fidivl pop jp xchg movsb xchg push repz lret mov inc data16 lea xchg popl lcall repz xchg (bad) mov dec mov xchg (bad) lcall ret xor test pop iret mov mov xchg movsb loope inc push dec imul (bad) cmp sti push mov movsl fldpi int3 mov xlat xchg movsb fsubs scas mov cmc leave xchg jmp mov jne xchg cs fidivrl xchg popf xchg dec mov mov and jmp test out jnp mov scas stc mov and cmpl xlat in inc out cmp ret shll into pop inc fstps lods popf cmpsl out (bad) pushf fildll leave insb aaa mov in pop repz (bad) aam stos data16 mov popf mov sub stos rcrb push mov lods or dec lret mov or add mov inc jmp cmpsb repnz movsl fwait and xor out jb je inc inc cmp pop aaa xchg je sbb or loop,pt push adc xor mov xlat movsb mov dec add mov mov roll ljmp lret dec jg or fsubrs aaa stos xor mov or outsl pop cli int3 daa jno pop jnp xchg jae mov popa mov jnp jno divb rcrb gs dec jae dec jno adc push fbstp push jno xor push jecxz addr16 jmp (bad) repnz imul jno xor dec aaa fwait jb jg fs mov jle mov dec sub mov xor (bad) xor mov mov or lods push stos scas mov jb push out int3 std test and jecxz lock imul xchg out sub outsl stos mov lahf and xchg mov add scas fistpl mov (bad) mov mov das divb rcrl lods dec into mov int3 xor insb jp lods fistpll dec jl (bad) lcall cwtl lcall cmp pop mov das lret pop sbb cmp jae stos icebp out leave lods sub mov mov jmp mov pop aam jecxz daa lea fldenv jno push dec loope,pn sbb dec loop jg pop mov jp jmp loopne xchg aas repz (bad) xchg xchg xor push (bad) jl std mov pop adc xchg pop mov dec jmp push test (bad) pop pop dec (bad) aam xchg jl imul lret mov sbb ds fwait daa push add das adc ret inc pop mov cmpsb jno adc mov mov cmp ljmp enter addl add fistp pop jecxz xchg mov imul jecxz rcl jecxz hlt and adc stc push mov inc arpl shl xchg (bad) cltd stc mov rol pop out xchg negb (bad) rcr xor sbbl nop mov test jmp mov add xchg bound mov jae mov (bad) lea inc out push loope flds xlat add jmp insb mov fbld mov repz push (bad) cmc repnz (bad) lret sub (bad) icebp insb out out popf pop cmpsl pop sub mov ja (bad) out push insl cmpsl mov jge mov divb xor mov stc cmp testb sub ficomp fcompl js jns cwtl mov xchg mov ja lods in mov lcall mov aam ja jo mov ret pop ret push ret dec ret dec ret inc ret cmp cmp ss xor sub sbb sbb push ret adc or or add repnz xchg test (bad) out loop loopne (bad) jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge fcomip stc lock (bad) fcomps fnop pop ret pop mov pop movsb pop mov pop xchg pop nop pop test js je outsb pop push pop push pop push pop dec pop ds ss sub and push pop sbb or push pop add not call je push (bad) xor adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc sbb div xor sub and sbb adc or add mov lods add add add push add dec add add add add add add add add add aam mov insb sti in in loopne aam shrb sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub cmp cmc out push fdivrl fsubrs rcrb int3 or or or or or pop or pop or inc or or or or or or add add std or hlt call pinsrw pop mov lods (bad) stos (bad) cmpsb (bad) movsb (bad) lcall (bad) jo outsb (bad) pop (bad) pop incb inc (bad) cmp xor cs sub sub and sbb adc push incb test in shl fidivrl sarb mov mov mov js pusha mov dec mov cmp mov or push mov hlt rcr fdivrs int3 mov mov scas mov mov mov jbe jb insb mov push mov and mov std in call insl lret in mov sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub cmp lock cmp sub sbb movsb or or or bound pusha or or or or push or or or or or out ljmp pop (bad) dec int3 cmp sub or or push data16 dec or inc or xor sbb push or or or add js clc push fdivrl fisubrl rcrb into or or or jbe je jo outsb or push or or xor or or or or or or std or or in in ficom fimull aam int3 pop movb (bad) mov movsb (bad) mov decb (bad) je insb (bad) data16 pusha decb inc incb cmp sub es and push decb add hlt (bad) in lock mov xchg (bad) je push lret adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc sbb jmp aam mov xchg (bad) je push ret adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc cli mov out aam into ffree pop mov mov mov pop xchg pop mov js outsb pop pusha pop pop pop push pop push pop push pop cmp sub adc or push pop add (bad) fdivl push lret adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc nop fsubp (bad) pop into ffree pop mov pop lods pop movsb pop sahf pop xchg pop xchg pop mov jp je jo push push pop dec pop inc pop cmp and adc or pushl fcmovbe int3 mov xchg (bad) je push scas xor adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc sbb cmpsb push fsubp pop (bad) (bad) pop rcr rcrb mov pop mov pushf pop xchg pop xchg pop nop pop jle jl js insb pop push fs pusha pop inc pop inc pop cmp cs and add hlt in aam mov mov fucom pop loopne (bad) pop enter mov pop cmpsb pop xchg pop mov xchg fs pop pop push pop dec pop inc pop ds cmp sub and push pop adc add add sbb enter sahf insb cwtl sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub cmp jecxz push les shrb sbb or jle jl jbe insb or pop or or inc or or sub and and sbb push or or or or loop pop lret movzbl mov stos add (bad) push (bad) pop (bad) push (bad) push decb inc (bad) xor sub and push (bad) std (bad) clc ret shr in fidivrl int3 mov scas mov nop mov je jb push mov inc mov es or fdivs (bad) sub and sbb adc or add add add push pop add add add add and or add repnz aam rolb mov jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge inc push mov xchg test add ret jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge (bad) (bad) pop lock pop in (bad) pop rcr int3 pop mov pop lods pop mov jb insb pop pop pop pop dec pop inc pop cmp xor xor sbb add std fs (bad) pop in fsubp pop ret pop mov stos pop xchg pop xchg jbe push fs bound push pop dec pop inc pop inc pop sub adc adc pushl loopne fidiv push enter scas adc adc adc adc jle jb pop or dec or cmp or or push or add incl cmp push mov lods sub or or or dec or inc or or and push or or or or or or fptan pop in adc push (bad) cmp sub sbb or or or jl jbe je push pop or or or or or or or clc fdiv pop lock psrld int3 pop enter mov stos (bad) test mov (bad) js insb (bad) data16 push decb dec (bad) cmp ss xor es push (bad) sbb or or add test lock loop sarb mov mov (bad) mov jbe pusha mov inc mov xor mov push mov cli (bad) hlt lods call in lret insb mov mov add add pop add dec add add add and sbb add add not mov xchg test adc sarb jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge dec je loop movb jg jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge fnop (bad) hlt pop out fsubrp pop loopne fcompl lret pop mov pop mov pop xchg pop xchg fs pop pop inc pop ds cmp and sbb push pop add clc (bad) not ljmp push mov sahf adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc sbb shr xor sub and sbb xchg add add jb jo add inc add add add add add add add insl xchg rcl lods lret sub in mov sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub cmp iret in push int3 cmp sub sbb or or or or inc or or and sbb sbb adc or decl hlt into ficom fcoml rorb or (bad) xchg decb (bad) pop (bad) push decb inc (bad) ss xor sub sbb cli ret (bad) hlt shr loop fdivrl inc inc (bad) mov decb jbe push (bad) pop (bad) push decb inc (bad) cmp cmp cs sub adc adc test repnz lock aam sarb mov scas mov mov mov push mov sub sub mov add cli lret out lods fsubrs sub in shrb xchg sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub cmp lret loop fimull cmp sub sbb or or or bound pop or dec or or or or or (bad) fisttp (bad) pop rcr (bad) pop mov pop nop pop mov test outsb pop bound push pop dec pop dec pop inc pop xor sub sub push pop or hlt enter mov xchg (bad) je push mov mov adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc sbb (bad) in xor sub and sbb adc add add jo push add push add add add add add add add (bad) mov xchg mov xor insb stos sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub cmp (bad) ljmp mov jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge (bad) (bad) clc pop hlt fsubp pop mov fsubrl xchg outsb pop pop pop push pop push pop xor sbb or add test aam mov xchg (bad) je push mov mov test movsb adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc sbb ret fsubrs (bad) and sbb adc add add js jo push data16 pop add add inc add add add add add add clc rorl adc sarb jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge fnop shr loopne fisubrl fisttpll pop ret pop test mov pop sbbb pop pusha pop pop pop push pop push pop dec pop inc pop inc pop cmp sub sbb push pop pushl out aam mov xchg fdivl (bad) xor adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc sbb mov loopne fcompl ficoml into or add add mov xchg (bad) add add add dec add inc add add add or idivb test sbb fdivrs jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jge jmp dec loopne sub sbb (bad) or jo push dec or or or or or or or or mov rorb lret sub or or or push or inc or or or adc add add repnz out fisubl imul sbb pop mov pop test push pop ds cmp xor or or idivb fcoml xor adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc adc in rcr (bad) mov les mov outsb mov push mov ds sbb mov repnz lods in fsubrs in shrb stos sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub sub cmp mov push fidivr mov jge jge jge jge jge jge jge jge jge jge jge cmp pop pop xchg cld cmp mov imul sbb cmpsl ret (bad) add dec repnz jp ljmp jg jae cld xor ret jmp clc repz stc pop repnz mov stc or clc lret in (bad) jae repz (bad) test xchg movsl xor repz outsl movsb jmp xor pop push push lret aas sbb imul add lret mov mov aas mov (bad) mov mov fsubs ljmp mov imul pushf fs fdivr jecxz loop fwait xor xchg cwtl xchg xchg neg xchg cmc or dec cwtl mov sbb mov dec leave rcrl cmpsl rolb pop lret bnd sbb leave pushf mov or jg in push sbb xchg sahf gs (bad) mov jg cmpsl ds mov leave mov data16 jnp push gs insl ret dec scas pop xchg adc pop aam stc cmpsb int shr dec int clc xchg or cmpsl mov (bad) xor lcall shrl or out ljmp lret iret mov lret clc in rol mov xor or pop xchg mov shl ficoml mov xchg cli (bad) add mov mov pop jbe icebp pop cli stos cmpsl jnp stos push pop cltd mov mov scas out int3 ja mov mulb mov scas mov push xlat jp mov mov jno xchg mov cmpsl popf shr jno jnp mov mov xlat xchg out xrelease in adc (bad) lret out test xlat mov lock fbstp jmp repnz bound pop in out out xor push add test out out push xlat jae bound loop fisttp jno lret fnsave cmpsl fldz mov pop xor leave sub and test out shlb mov out push pop out xchg aaa lret inc (bad) out loopne dec xlat cmc mov fwait jmp imul and scas fwait cli out daa jnp ljmp cs jecxz mov out xor mov stc out jg (bad) imulb xchg cmc push push fnstenv ret das repz dec inc jnp mov repz repz add aaa arpl jae rep mov fs push add aaa fwait shr push mov ret mov push adc xor mov mov xor iret ja pop mov push imul xchg inc jge mov xchg out flds daa fmuls mov out (bad) add (bad) inc loop jae test or mov int sub mov mov popa cmp adc mov aas inc pop mov lcall int3 and data16 mov jno (bad) push test cltd jnp cmpsb out jo push jl jnp mov ljmp xchg out out mov mov adc andl popf or arpl xchg fs roll loopne pop int3 daa fbstp cmpsb shlb push shll dec insl pop xchg xchg xchg divps loopne jmp pop push mov (bad) mov (bad) sub jle or aas mov cli add and ret mov push mov push jbe push or imul shr push xchg dec inc addr16 xlat sub jecxz fldl test (bad) jmp inc adc and jg call mov push sbb inc inc repnz movsb fdivl mov test daa jb or add imul pop mov sbb outsl ret (bad) (bad) stc sbb mov cli jecxz jb xor out (bad) xor mov leave imul cmp push (bad) jb rorb mov xchg stos leave ret sbb fsubrs jo xchg movsl test test xchg (bad) orl adc in xchg stc mov imulb ret mov sub mov mov insl insl ljmp mov (bad) cli push jecxz lret sub repz ljmp daa out mov lret mov stos iret mov ss ret pop mov (bad) fwait mov cmpsb adc int divl (bad) sub cmc lods pop pop int (bad) mov or aaa leave fwait jge fwait mov rol dec fistpl mov adc dec dec (bad) (bad) clc adc mov imul fsubrl test (bad) nop xchg sub imul mov add pop xlat dec cmp dec dec inc dec jl mov jecxz dec xchg sbb jecxz add jnp mov fwait jg jae mov push xchg mov mov xchg sub ja daa outsb mov iret daa xor sbb and fs mov mov jge bound inc ja mov or and rcrl jnp mov sbb jge push cmpsb push fucomi shrl mov or cmpsb out mov sub and xor mov popl sub movsl test andl push out cmp fisttpl xchg push and dec xor add push imul push dec rclb cmc mov xor sbb repz mov test ret mov mov les mov jmp pusha ljmp mov ds ja repnz clc movsb jae gs lret lret mov mov stc mov fcmovnu ljmp xlat xor out push jmp inc addr16 jnp mov pop shrl jmp adc dec push in push and test out mov xchg out sbb xchg out test pop out jae repz jae ljmp sbb scas and jl mov loop test aas mov pop or sti xchg mov and outsl shll jae fistpl cmp (bad) mov test add pop lods mov push pusha xchg inc mov sub adc dec ret or cmp sti out lcall cmp fstpt mov fldt loope or xchg push into (bad) jb (bad) and (bad) leave subb repz push mov addl shrl lahf int3 jecxz pop pop movsl (bad) out das jl jae cmp shr (bad) sbb or mov int pop pop inc gs stc ficoml clc mov sub mov jbe repnz mov xor imul jae adc addps push pop idiv ret xor push repz shr lahf inc iret xchg and xor xor fisub int3 or adc iret sub mov or sahf xchg rcrl cmp push mov jae xor fucomi xlat ljmp xor (bad) ja xor outsl xor (bad) ja call mov ret mov loope xchg inc mov xor or dec mov (bad) mov pop notl ja mov push or sti out arpl jo mov (bad) pop out sbb add lock cmp pop stos xchg xchg repz lahf (bad) mov xchg dec cmp jnp push xor repnz out jo xor xor sbb in ficoml mov repz ret mov cmp ds fwait mov mov rolb pusha adc mov mov lret adc mov pushf push jmp xor scas mov in jno aas mov das lock push push pop xor fwait mov inc jle jecxz and push (bad) fwait adc orl rclb aaa ja (bad) shrb das stos mov arpl stc mov stos imul bound repz inc ret jb fmulp (bad) cmp dec imul in xor ret outsl out imul ds xor mov adcl inc adc cmp rorb push ljmp jmp aaa sub aas cmp push aas sub popl pop stc mov pop mov ret dec ret xchg les lret cmp shl or mov cmp lds mov sub mov mov adc mov cmp dec mov incb jae jle add mov mov or xchg (bad) xor movsl xor xorl pop daa mov xor inc xor inc mov mov shll mov mov ret cmp jg int movsl push push jae push cld add iret sub jmp inc orl xor and (bad) jecxz jae adc (bad) ret mov loope push (bad) push ljmp adc bound rcll and or loope mov cwtl mov shr repz cmp sub sbb inc jae cmp ss ret sbb mov mov jmp adc arpl sub xchg mov jg lahf int3 xchg ss cltd cmpsl fmuls mov xor pop lahf push fisttpll mov in lods lahf addr16 cli stos jecxz into mov lret out mov pushf add jae data16 mov (bad) test xchg adc mov mov push jns pushf adc pop cmc mov xchg int mov fisttpl xchg mov nop jbe (bad) movsb ss mov jecxz dec adcl jmp jno cmp cmc mov sar rolb push shll adc cs inc xchg jmp (bad) xchg mov or mov inc mov leave mov sbb cmp sbb dec dec pop out and inc push fcoml sub pushf pop sar xchg mov mov xlat ret mov flds out push fwait sub jg fist test jmp ss mov outsl sub add icebp jmp mov arpl (bad) mov xlat and dec xchg fcmovnb ret movsb int3 pusha lcall cld (bad) sub out std xor push into fbstp ja nop mov adc shrl and (bad) test dec (bad) pop xchg push and repnz inc data16 pop cmp and xchg fucomi outsl repz push cmp push add das cs dec xchg in xchg sbb jno popa rolb xchg mov inc mov mov (bad) jne push addr16 ret jecxz mov (bad) mov repnz xchg (bad) jo fisttp (bad) mov add (bad) xchg in jmp (bad) mov xchg in push add daa add or mov dec and andl mov adc popa lret movsb cmpsl mov or (bad) rclb cmp shrl mov rolb das push xor lret pop sbb jmp xchg xchg aam addr16 gs jne jp mov dec pop (bad) cmpsl (bad) jecxz push xchg mov jl fwait xchg mov sbb fcmovnu fistl mov inc dec add xchg or adcl sar jecxz add inc adc je cs cli stc sbb sar ret mov inc (bad) ret mov pop stos jno xchg test pop add or lahf mov iret fcomi je not add adcb fild push lret push stos mov or ss mov and lods add sti cmpl cli sbb mov pop out movsb add inc sar mov add loope push jl and sbb das movsl test jns mov imul jb (bad) notl jecxz jecxz pushf mov mov jb jle imul mov stc ljmp cs lret mov lret sub sub sub adc leave outsl or int push dec jle mov sub notb xchg adc pop xchg stos repnz mov pop cmpsb ret mov jg xchg ror mov fiadd inc jecxz cld bound mov into fwait mov or xor addl negl movsb in mov enter or push mov loope loopne les xchg ds ljmp icebp loop fldt mov jge mov enter lret mov xchg test xchg test xor adc (bad) lret sub mov xchg push in jo and popa pop jge addl xorl in sbb mov pop cltd das jl mov and stos mov and mov pop fisttp rcll push ret fldenv mov sub inc call add inc jae push lock or adc push or mov inc jecxz xchg lahf xor imul mov arpl and (bad) popa je cli mov xlat xchg jnp fsubrp aaa mov jg ret and cmp or roll mov sbb out dec pusha mov xlat pop add mov das inc sarb mov movntq lods add insl cltd sub adc jno dec out xchg shl sbb leave (bad) in (bad) mov lahf iret nop testb outsb or jmp cmp shr jmp fldt add inc (bad) mov xor mov test and (bad) xchg imul mov leave push sbb lcall jmp push or pop adc loop jo sub (bad) mov xor ja repz int mov xchg aam xchg sbb jl (bad) int3 add xchg rolb in lods ds lods cmp repz pushl imul mov pushf mov rclb shrb je ret jbe push xchg out outsb sub (bad) je sub lea mov dec cmp push sub mov cli les ljmp inc popf jnp add dec inc mov call shll insb ret jmp jmp and insl mov jnp mov ret fwait mov jmp cli ret pop dec push fwait cltd mov pop inc mov fimull cld (bad) and ret and cld ficompl ljmp aas mov add inc rcll pop cwtl stos aaa mov aaa (bad) aaa arpl int3 jmp iret sbb sarb cmp push in push into aaa cli mov push dec pop inc repnz pop jae jnp mov outsl mov sbb and cld mov in fcomi sbb fsqrt push mov mov xor (bad) arpl aaa repz sub cld rclb fwait mov cmp sbb rcrl fdivrl mov movsb mov mov mov sbb mov cmpsl ret jecxz mov mov xchg loopne imul je xlat hlt addl faddl add (bad) aad sub push and push cli test jmp nop and and mov jl std lahf jp cmp push mulb sti pushf jne cmp je imul or lock sti gs adc sub aas xorl lret push adc sti cmpsb (bad) mov pop add sti jp aas xchg loope repnz in hlt jns addr16 jnp pop frstor xor sbb aas adc mov test xchg adc and pop aas hlt leave or or jp jmp push push flds ret jmp decb mov jmp pop push fnstcw lea xlat loope pop fildl adc jmp imul cmc mov (bad) out fdiv popa cmp repnz mov mov fdivr adc (bad) into stos jbe adc xchg jp lds xchg and bound inc fptan dec cmpsl gs xor xchg push fldcw cli add clc popa lret repnz push clc pop jg xor subl mov (bad) jmp aas lcall fnstcw stc ljmp mov push fldcw jns jb jmp leave push mov scas ja repnz jmp outsl push flds mov mov adc loopne inc jnp push sub mov shr fcmovnbe in out push jmp or movzwl and ljmp xlat loope jmp repz or jmp das imul mov repnz fldenv daa inc cmp mov push jb call repnz jg ja outsl lret jnp leave push cltd lret pop sbb arpl loopne pop adc fptan ja sbbl dec scas ja ljmp repnz add push xor shlb das jp insb or ds sub in lock (bad) mov push fptan mov divl jmp mov fldpi mov push icebp fwait in inc xchg pop bound xlat gs push flds fwait and jmp push push fldenv jno jb call repnz push enter fptan cld fcomi or in jb jmp stos sbb jo xor push push test movsl mov roll sti mov sbb pop sarl (bad) ds xchg push dec out enter sti sub adc mov (bad) xchg mov aad (bad) adc out out xchg mov ret sbb xorl outsb call rolb fistl push jmp fnstsw ljmp js dec mov push sti cld add cs ss sbb out jae lcall xchg in cmp mov push lcall sub mov cmp cs push xor sbbb stos sub call js clc insb loopne xchg xorl mov pop je or fnop bound es pop adc std sti je cmp int fsubs fs aas into adc sbb adc jbe fwait addr16 cs adc dec repz jns mov aam jp mov sti jae pop (bad) loope test mov sbb daa mov test lcall movsl daa sti sub mov cmpsl jp dec sti stos (bad) xlat xchg outsb faddp lret xchg mov sti (bad) icebp fnsave repnz hlt jmp outsb or push mov mov adc movsl adc pop out lods daa lahf mov sbb dec outsb insb cs push in or addr16 jge push lods sti jne inc sub xor cmp les or cmp imul mov sti dec pop (bad) in jns fwait sub fstl mov sbb adc mov sahf aas xor test iret sti repnz movl push outsb in ja add lret lret js or mov sti notb pminub hlt fucom xchg inc cmp mov hlt inc sbb aam lods (bad) and aas add in jmp xchg in sub dec xchg adc lret dec adc cmp hlt imul in jmp pusha in test (bad) imul xchg xor imul push sub (bad) cli push mov add jae sub lret cs or xchg dec hlt mov mov rorb rol loop shll fisubr inc int3 jp jecxz xchg cli hlt clc cmp push jl jnp pop sub es in or lock ja stc insl call pop push and mov into pop jmp adc sti ds in (bad) int (bad) jge ret data16 (bad) fimull inc sti nop addr16 adc dec js arpl mov sbb push and cmp push test mov jbe pusha mov mov (bad) mov ljmp out ret sbb sti pusha jne mov mov scas loopne mov mov cs out fs mov xor loopne pop (bad) in sbb test jp sbb mov pop fistpl mov das push sti cs les add adc icebp xchg andl and sti mov adc jmp cmpsl or cld aad stc cmp int3 inc xor hlt pop (bad) dec add or mull test je xor mov mov stc nop inc pop (bad) enter hlt sbb insl icebp xchg test jl dec fwait mov push sti add mov es sub fwait cwtl ficoml dec sti xchg xchg push rol (bad) icebp addl mov cmp pusha out je mov mov repnz test sti imul pop inc cli nop mov cs cmpsb or jmp addr16 cli sbb cwtl faddl nop mov pop rcll leave and iret daa (bad) sarb sub sti fstpt add inc mov pop in jnp or sbb fidiv in negb jge jl sti mov out inc ret jecxz or sahf pop add mov mov fisttpl or pop pusha mov popf mov iret sti mov or jno mov pop adc (bad) push test push int3 sub sbb out testl jnp lahf jb ret sti pop dec aas xchg push popf add mov divl scas cli outsl add (bad) stos inc xchg test mov adc mov inc pop lret or (bad) loop aas dec int3 fldl dec ret icebp or mov adc (bad) cmc hlt jno lock scas jnp fwait imul aas jge dec jnp nop into mov xchg sti cmpsl sbb or aam mov bound jnp pop (bad) cmc push xchg cli fwait (bad) jmp cmpsb mov aam gs aam sub rolb in int3 call mov jmp push inc or lds pop adc adc sbb loopne jnp cmpsl pop cli dec inc inc sar jp adc mov inc das sti out mov adc divl popa push sahf imul mov es test adc gs hlt dec loop sub stos out cmp lods pop cmp sbb dec test inc sti xor adc pushf stos mov mov test inc inc mov fisubl xchg (bad) lock adc xor cmpsl xor xlat mov (bad) jne sti (bad) mov jns (bad) and mov cmp outsl xlat push fdiv dec mov fwait test es stos cmp ret je cmp and ret push add mov imul and aas lahf pusha push test out push sti iret pop ret jmp clc lahf push pop inc cmp mov cli (bad) (bad) adc int3 xchg lret arpl xchg sti xchg xor cltd or xor int3 dec arpl xchg push jp test sub out lcall scas push mov cmp rorl test push incb cld push sti in xchg push jo push stos es and jnp mov out lret sti add into cs jecxz mov sti sub clc mov repnz int sti fcmovnu lods das stos pop pop sub dec inc cli mov shr (bad) fldl imul sbb insb mov aad sub hlt mov xor imul cmc movsl sbb in adc sti inc cltd cmpsb fs arpl xchg repnz sbb cmp (bad) mov inc xchg ja (bad) lods hlt ror clc push cmp push in pop mov adcb sti cli out mov sbb ret ret ss mov daa mov in jae sti (bad) sbb cmpb jno xchg lret test cltd or jnp jne mov popa dec arpl stc and pop adc add add aas mov xchg xchg pop adc aam loopne lret pop sub scas js mov inc xchg (bad) test jnp,pt (bad) dec aad sti out mov arpl push and jae cmp daa lods ss or stc inc xor sub sti (bad) aaa or adc sbb in fnstcw push sti pop sub cmc dec stc or jp jb hlt pop (bad) push pusha or jg not sbb hlt fs sbb jno in aaa jmp (bad) lret mov mov lret pop repnz std lock cli or int3 sbb pop push enter fsts sub sub dec ret inc mov xor adc inc xor mov lea xchg (bad) pop or mov stos pop push dec bound push push or and hlt mov addr16 sbb stc cld (bad) ret lahf xchg mov stos push xor add pop (bad) mov enter add mov aam push in pop test pop in je fistpll push leave ja mov aas and push scas cmp sbb adc fistpll (bad) sti es int pop sbb jne cli inc xchg aad push jns (bad) push cld cmp outsl (bad) shr lea pop hlt stos push imul dec jno fistpl data16 push lods (bad) les in push dec sbbl ret shl lods adc mov jmp ja xor fistpll or lret sub mov (bad) ret mov mov inc mov (bad) and (bad) in add push movsl mov jecxz adc cmp in sub sbb enter rol pop xchg fistp xor dec mov cs xchg adc xor push ret cs fistpll hlt pop mov sub push fdivs dec inc lret in das out or idivl mov ret jo ret inc jne lds or cld jbe pop mov gs pop sbb or dec sti std cmp movsb shlb cs bound and pop dec popf mov les jp xor jle jmp xchg clc adc mov sbb adc push das push pop jnp hlt cmpsb cli test cltd jns jmp push sti adc loop imul cvtps2pi cmp mov xchg fstpt (bad) ret in sti dec sbb stos popf js inc inc sti sub jle pop inc push mov out ss push scas and fildll aam inc sbb inc jp sbb sti cmpsl leave out fwait mov push nop ljmp mov leave popf out nop jo xor pushf sti fs jns sbb sti insl idivl xchg mov stos mov mov jge dec out sti add iret adc sbb mov dec sti faddp xchg lods jns add jb enter insb fstpl out ret inc lods ret mov mov mov js daa xchg rcl cmp jns cli xchg jnp jo jno mov add ficoml imulb popa insb cmpsl or test arpl pop cli jns aam cmpsl insl mov sti mov adc push jnp,pt movsb lret lock push sti mov xor fadd lods dec hlt bnd sbb inc xor mov pop xchg loop sti data16 inc sti iret pushf pop into out hlt add mov add xchg cli pusha insb xor pop push pop fistl int cli sar cmp nop mov pop loope add stc xor xchg int3 dec sbb fs inc and pop (bad) clc mov sti xlat cmp sub dec sbb sub push sarb ret test sti orb clc xchg scas rcrl mov fs xlat jns mov dec mov jnp testl jge add in push pop or test lock movb icebp in lds fsubr (bad) xor jne push movsl das mov add cmp sti inc xor scas daa ret sahf dec call and lret lret loope sbbb insl std sti arpl add fstl sti (bad) push xlat imul sbb inc mov jb negl imul or icebp mov mov in cmp arpl inc jge sbb repnz cld sarb imul jge ret (bad) mov xor mov (bad) stos xor dec arpl add cltd cld cli clc mov pusha sbb scas cltd addr16 popf cli sub cmp scas cmp out ss aam xchg fidivl sub push sti jmp pushfw dec clc mov jb sbb stc sbb push inc bound jmp push mov scas push inc idivb mov gs jmp insb cmc sahf mov dec ret adc push fbstp sti inc fdivrl push pop fwait xchg fistpll movsb add repz xor cmp out xor mov mov sti insl stos mov in push loop jae inc ja pop popf inc mov mov xchg cmpsl scas neg or clc daa fnop in pop and jns or jo (bad) sbb jg or sub push (bad) pop in fidivr jp cld cmp adc jnp mov jbe test jle ret inc jmp ja dec lahf sub (bad) dec jl push mov pop scas jnp sub pop sub push add add jnp divl out loopne sbb jmp call mov jecxz in xor jge xor imul cmp inc sti inc hlt xchg sub in xor hlt mov mov push push cli push mov and stc test call add push gs arpl insb gs add adc callw add hlt outsl mov addr16 add add je outsl imul outsb outsw jb popa je outsl outsb add add gs push gs outsl jb popa outsb arpl outsl jne je jb not push stc pusha ror call cmc test call add jae outsb popa insb add jne add add and or into sbb jmp mov inc fisubl fst sahf inc mov popf in mov mov jnp mov and cld popf insl aad stos fdivl in lds stos mov aam pop pop jno jnp push dec dec pop jp dec fs or out popa sarl mov mov cmpsl (bad) mov jnp inc ret mov jge jg ds mov daa and push sbb mov sub and dec mov mov push gs clc call push xlat mov sbb pop ret int and xchg rcl stos aaa lods adc iret and lea mov aam dec inc fs cmpsb sbb mov imul repz pop outsb loop xor pop xchg sbb enter mov mov sar pop and mov dec lret push in jae aad dec nop out in mov push (bad) in fidivr addr16 test movsl repz movq lea je pusha movb push lea jmp call test add pushf pushl push lea jmp call add inc jb popa je inc imul sbb repnz add jl (bad) std mov mov pop xchg xor cmp addr16 xchg lret add pop mov ret sbb data16 sub jle jo adc mov pushf movl lea call push mov adc pushf lea jae push jmp lea jne jmp add push gs outsb jne push popa insb jne inc add push jle add mov and jae clc cmp pusha pusha pushl jmp lea jae stc cmp push call add ja jo imul add je jns je insl inc imul jns add add imul insl bound insl jo push xchg shrl jae inc pop xchg jb mov mov adc hlt in sti cld xor sbb cli jno jnp rclb cmp pop and mov test xchg ret sti les fnstcw mov (bad) fwait xchg cmc in xor cmp or ss ffree adc adc add mov and ret ds adc fldz and xchg jo mov js test lock pop hlt inc pop repnz cmp stc movsb jg jecxz je shrl out fs cmp call push stc movsl dec xchg cli xchg mov lock aas and lds (bad) mov jg negb lcall je out adc lret js mul inc or pop mov in xlat push lds jae xchg xor and xchg jb mov add mov add imul insb iret ret xchg popf or xchg add pop mov (bad) clc dec cmp or fsubrl movsl lcall mov xor rol adc xor dec pop repz loope pop push xchg (bad) cmp (bad) ss push cmp mov outsb imul pusha lret in sub inc adc pop fwait ljmp stc shlb jmp repz in mov push stos cmp outsl add out rcrl out leave mov idivb mov fsubrs sti into call and lret not xlat jae push mov xor jb test pop mov fmuls jp scas or pushf add adc aas xor and pop inc cmp xor imul sbb cmc and mov popf cmp adc fstp and sub addr16 jecxz or aad cmp pop ja jnp testl subl jnp pop fnstenv iret pop add fidivr (bad) cmpl xchg pop fwait imul pmaddwd loop insb jmp cmp (bad) sti ss xchg adc mov insb jp (bad) mov or add lock push push pop jp xchg ret sbb (bad) cmpsl mov ljmp pop test jp pusha aas js and adc push sub sub sbb loop pop repnz cli jo jbe xchg in pop xor xor dec push pushf gs ss mov rcll add pcmpgtb into sbb stos mov jno or imul ret mov repz jne sub jb cmpsb mov leave (bad) push lret mov jo cmp xchg ret int3 leave imul push bound leave iret nop push inc cmp pop aaa frstor stc adc cmp inc push push mov mov stos movsb ljmp sti xchg leave call popa mov ret fist pop add lcall xor pop repnz or add loope imul ss loopne cmp add loope adc mov adc leave mov sti andl es mov jb dec fisubr jb adc xor test std mov mov fdivs cli fwait xchg inc sub dec mov pop mov movsl pop sub dec mov lret adc push xchg lock push jge pop lret push subl ds stc leave mov out cld jae lcall out gs aaa xor clc fildll cmp sub enter cltd in adc mov stos mov mov in sub nop idivl scas cli dec pop cmp test fs cmpl pop add imul push clc cmpsl jp cltd into pop jecxz pop fisubrl and lock test pop cmpsb mov call push fadd repnz jo js sahf push (bad) fwait icebp fwait mov adc test aad mov cmpsl mov xlat and pop cmp lahf jns jle or std push adc (bad) or popa cs sahf pop cmp outsb fbstp fs int jo pop in sahf cmp inc out outsb push jno mov lcall movsb or outsb adc pop adc (bad) pmullw idivl out pop and movsb push stc iret mov ja jno hlt fstpt jge stos (bad) mov inc cli pop cmp add dec popf dec (bad) hlt mov mov xchg sub stos push ret (bad) je xchg jb popa mov sub je and cmp clc (bad) pop sbb sbb pop inc sbb and xor js cld xchg dec push xlat xchg sahf das jo arpl adc add or out sub (bad) pop xchg stc mov fwait cmp mov divl adc loop push das sbb inc (bad) or xor cmc xlat test pop (bad) stc outsb mov pop aaa push idiv push (bad) mull cmp cmpsb cltd xchg pop out mov cld stos movsb inc aad stos fdivl out adc mov fbstp popa out jns js (bad) pop or mov cs enter loopne rcrl jecxz inc xchg clc (bad) repnz jae sbb mov push mov pop jmp pop lock add aaa loop das out push cmpsl add cmc in jae add repz lret shr adc sub test in push xor jbe add xor je lcall ds sbb add xor movsl int bound jb (bad) jbe loope (bad) fistl dec mov enter mov adc cmp cld xor dec cmp adc test fdivrl push ljmp loop cli in push mov popa stc mov int3 fsubl jp in cmp or adc sbb push cs fwait mov (bad) ror cmp hlt jp (bad) repnz cmp sbb imul xchg hlt sub mov adc add dec or pusha jle js iret pop pop sub jecxz mov xchg mov cmp xor scas negl sub ss scas test in icebp jae and scas and int in fdivl cmpsb pop mov outsl jbe mov mov test std jp push clc jnp cld add iret inc xchg cli rcll cli enter pusha cmpsl aad (bad) cmp xor or lds adc mov mov cwtl jmp mov push imul adc pop ja push lret aad and sub fisub cli add cmp adc cmpsl mov pop rcr jno mov dec rcll jns rcll ret sub jno stc shrb jge stos cmpsl sar cmp stos mov sbb cmpsl (bad) and rclb pop pop shll or out repnz cmp dec lods jae out pop inc pop aas push test cmp jmp inc mov shrl in cmp movsl (bad) addr16 shrl cmp adc pop mov adc sbb pop jp std scas movsb ret insl add push and (bad) add sub loopne push fwait xchg mov scas jb inc int3 mov addr16 and fwait jnp in dec jge int jb push (bad) or jmp stc mov jge fwait bound aam xor (bad) mov imul mov cmp cmc int3 imul pop mov mov jnp hlt sub or jb mov push jmp sub xor neg jb insl les add orl adc push (bad) and pop adc sub sbb ret xor inc div js add aas sub sbb and out jnp scas or adc pop add fsts fiadd pop jb insb add push arpl push mov jo push out addr16 lret xor inc cmpsl in (bad) dec push push mov out arpl insl adc sub jnp mov jnp xor sub xor cmp (bad) jne mov cld and lret sbb gs mov push inc (bad) inc outsb inc in hlt dec xchg imul or sbb je lods jnp fcmovnbe xchg sub jns add fdivs lret out movsb outsb jnp sub push insb fwait sub ret or add adc xchg xlat jo ja xor jae (bad) stos insb imul je push (bad) and jl in mov loopne xor mov add jmp imul ds inc scas jb jmp paddw mov push dec cmp hlt jnp jne sub jp std and lock jb jb stc idivl or ljmp outsb pop xor sub add xor jp pop outsl push ret sbb jb fwait adc cmp jnp jnp sar mov lret adc pop and adc stc (bad) lret and cs pop xchg pop pop daa jns mov push cli xchg mov jecxz mov mov mov fisttpl push fsubl fsubrs popf mov fwait mov jb push lods fstpt jnp js cli outsb sti out data16 add adc or (bad) or mov ret mull jmp int3 stc xor and lods push pusha xor aad add pop mov and cmc ret and sub xchg dec out fwait iret clc ljmp sub lret fcmovnbe dec mov adc div push push pop fstpt test enter loope add inc cmpsb inc adc or pop mov movsl (bad) dec shl in repnz mov mov cli jnp lret add cmp adc scas cmp xor cmp pop jo jbe scas pop add mov jmp and aas leave gs adc mov repz mov cmp (bad) sbb jmp mov out cmp adc notb sub jmp push adc cmp mov xchg daa mov ret xchg xchg in in sub pop fbld xchg mov push outsb mov lock and jbe lahf mov dec in testl icebp cld cmp jns add xchg mov pop hlt inc mov jae insl daa cld mov scas jae push xchg fwait jmp cli int clc dec cltd adc stos repnz fwait xor mov arpl adc enter jno hlt jno shrl cli lods iret mov mov (bad) (bad) xchg stc add repz inc mov adc mov or jg insb and inc fild cmp mov mov xchg add sbb xlat jnp out lock cmp mov (bad) sub imul jp popl pop fwait xchg bnd pop fstpt cmp mov notl pop pop jmp add fidivrl add mov sahf xor fistpll xlat ret inc outsl adc add push inc movb cli dec jne jo fldt adc xor dec aad mov sbb pop loopne dec cmp mov (bad) adc push sbb add insb ret sub and popf push sbb xchg repnz push jo mov mov xlat sahf cmp stos xor popf (bad) lret cmpsb data16 dec add addr16 repnz cli enter and push sarl ss mov repnz mov pop adc jo (bad) jmp jbe push mov ficom movsb gs or cmp ret push stc xlat ret push inc stc push repnz or add inc aaa xchg and push std jns jle sarl push mov lcall sub mov fisttp dec cwtl pop pop in adc sub dec fnstcw jb push inc mov (bad) jge js jne daa xchg shr cmc call adc mov xchg fiaddl scas dec rclb mov xchg fstpl cwtl pop jnp mov cmpsl sub arpl in test repz jns lock jmp xchg (bad) call or xchg pop lods sub jne mov ja adc cmpsl insb mov adc inc mov packsswb sbb notl jp rep add inc rclb les xor mov fldt mov sub mov jecxz fxch fild jo in scas pop mov shl rorb jle jno adcl (bad) pop jmpw jbe pop push jecxz adc mov pop push sbb add xor adc mov lds jmp lods icebp sbb cmp inc sti mov jp add mov cmc cli xor js repz aaa (bad) lock or cmpsb jp or jne sarb add add aam stc hlt inc (bad) jb sarl add or fldt pop inc xor adc test or mov pop jne jecxz inc mov mov adc fsubs and dec out push fwait mov (bad) repz aad jno shll jae sub sub push call pop add jecxz sub inc dec or testl xchg adc add in aam dec xor outsb push xor stos out adc fs and xchg cmp lcall in pusha test lcall repnz in jbe pop mov ja xor push aas imul jne xor std imul mov mov fimul push outsl rcrb adc sbb or jecxz ja mov out add enter fsubp repz jecxz lret repz push cwtl addr16 lret imul or ret jmp xchg mov sbb popf imul jecxz fistp dec xor mov fisubl add packsswb push xchg imul pop popa imul fldcw stc iret jecxz push xchg xchg iret scas pop repnz adcl rclb fstpt out or mov das fstpt jnp xor adc inc andl rorl movsl cmc pop xchg stos ja pop (bad) sub jnp std mov jnp pop mov movl jo or xchg xlat popa add mov add jnp cmpsl xlat lret stos xsaves call ljmp mov inc rorb mov scas mov xchg cs mov pop mov xchg sub jmp out (bad) and xchg popf testl mov stos sbb sub daa loop notl (bad) adc mov fcmovnu jecxz jmp scas xor pop out ret push dec xor inc xor (bad) jecxz jae clc mov mov (bad) mov imul sub xchg addr16 cmpsl cmp jns jmp xor xor rcll jmp loopne lock push sub mov jb mov lods add fwait or pop ljmp xchg test push fstp pop jnp xchg mov sub cmpsl mov iret pusha jnp enter mov mov cld sub mov xor inc (bad) dec sub xor xor stc cmpsb jnp mov or sub inc sub cmp fs jne jp into (bad) jb lcall lcall (bad) pop lods std push xor sbb pop sti sahf or pop es lods jo orps sub test lods popf mov stc scas out sub into je inc stos mov inc inc add mov popf mulb test mov jle sahf rcll js inc inc lret mov inc fcoms scas push (bad) arpl lret adc push or push rorl adc jecxz xor loop dec xlat inc inc loop push add cmp imul gs adc out je jnp insl xchg cmp inc sbb sub sub test sub popa mov xor lods xchg outsl mov (bad) adc test das paddd in outsb gs xor (bad) hlt jecxz push (bad) sub adc neg ljmp and js mov sarl popl adc push or xchg jb (bad) nop fstpt jne cmp movsl xor incl xchg cli cld adc inc hlt and xchg fistpll lods fwait sti sbb pop mov lds cs (bad) mov pushf fild mov jmpw cmp mov push sarl mov adc enter clc (bad) iret popf push mov adc or pop repnz xor mov sbb mov or lods push aam jne push jmp jae stos push adc jg xchg movsl mov pop mov ja push int3 lock in xor gs addl sub cli cmp cmp sub adc out stc jb xchg sub mov dec push (bad) stos test sub push daa mov xchg ret insl dec out lock iret pop pop jb hlt add sub adc sub mulb or sbb push mov mov in aad outsb jg cmp jmp adc pop and stos and cmp lods xchg stos out adc cmpsl bswap dec inc call mov xchg pop test dec incb and je fidivrl into push fwait ja push lret (bad) inc rorb add loop loop or jg shrb cli and lret add shrb push adc inc enter dec das (bad) imul add daa std sub cmp inc iret sub testl jmp adc xlat adc xchg push pop idiv sub jbe mov add popa in mov inc inc cmp fidivrl pusha arpl hlt jne cmc adc adc add dec fwait or (bad) movsb std mov adc jmp (bad) and outsl mov mov cmpsl je imul sbb aad sub push xor sti mov popa fsubs bnd pop call push mov and addl mov das mov push push push sub pusha xchg lods negb jns jns adc jb inc cmc popa or cmc and mov pop imul out jb fwait outsb addr16 cmp cmp les sub or push xor dec inc stc jmp mov sbb mov inc pushf and out push and out push test (bad) dec (bad) and test cmp adc adc xchg mulb test (bad) enter aad sbb cmp and mov push mov jae (bad) (bad) or js repz stos xchg ljmp lock cs dec pop mov pmaddwd cmp adc sub daa mov jnp or inc xor cmp mov ficompl sub inc fidivl fnop xchg and inc inc out xchg or cmpsl pop ds dec lods fdivr dec stos inc cli dec fwait movsl mov mov out inc inc fs pusha mov push ja fist fstpt push and adc addr16 je out stos in sbb add cmp jp popa and test xchg mov scas cmc jnp cmp xchg pop (bad) repnz xor scas mov xchg cmp adc repnz into jp adc xchg (bad) xchg std sarb (bad) dec repnz movsb lods inc jecxz (bad) push pop cs sub out imul jnp pop pop inc fmul sbb xor sbb (bad) fisttpll ret test les add test xchg adc pop rolb jp adc mull lret push pop lods ja mov adc (bad) fcomps cmp jmp pop jmp je stos setg add iret sbb jb (bad) jnp ds stos xor or hlt shrb es adc and dec mov add jnp push mov test ret aad clc sbb adc add mov or sub aaa fwait in cli and adc pop ret and in cmp stc cld cmp add xor fmull movsl and xlat idiv sti jb (bad) popf repz adc adcl inc cmp stc add jns (bad) sbb imul xor jnp pushw in adc jge clc inc or xchg je xor fdiv adc outsb in dec pop cmp leave sbb es loopne xchg xchg (bad) sub push push push jns sbb mov bound sbb cmpsl mov test mov xchg fidiv fwait stos sub pop cmp mov sbb imul jno jecxz push mov dec das mov jp sub add mov adc dec mov add dec mov shl js add sub pop jmp mull sbb pop push (bad) mov jp cmp (bad) jmp jmp push or (bad) dec fcmovbe adc lret or jg iret adc mov adc inc cli out sbb cld xor mov or aad les jns sub jp in iret jo shrl sbb pop lock add js push mov test loopne jns and cmpsb dec dec scas push xor (bad) push loope jnp xorl ret lods cs mull pop jge mov mov add pop inc sbb shrl adc mov mov or iret ret mov adc ret push xlat mov adc adc out add lret sub in push add in (bad) push mov stos pop pop jmp dec test mov ja (bad) xchg fidivrl mov jecxz add fwait xor and movsl int3 loopne xchg pop push jg rep mov arpl adc adcb xchg sbb fldt imul movsb (bad) jmp sbb pop cli xchg (bad) jp test dec rcl or rclb pop fnstcw xchg sub xchg sarb adc push flds lods jp adc jnp jecxz aas cmp xchg or dec inc xor ret inc out repz dec jmp ja or mov jge pop fistpl test cmp out dec ds jmp out sti call push push jnp jg repz add mov negb js mov loopne ljmp call sti scas pop xor arpl sbb mov loop sti movsb ja repz or sti aam (bad) into add or enter add sti cltd xor ljmp repz add fistp dec popf stc mov clc mov inc adc adc dec lock arpl test inc flds cmpl pop mov cmc mov add popf jmp sti call std mov jnp (bad) loop push pop mov lret in lods adc lret daa lret add ljmp insl mov les fadds hlt call addr16 xor mov adc fwait in fwait ror or out insl adc and popf negb into (bad) mov sbb xchg pop inc mov cwtl push sbb mov add leave or inc dec pop sub popf imul add btc cmc or (bad) mov add outsl inc sbb mov inc cli mov jg jae inc jecxz or call cmpsb (bad) and outsl mov call mov lret call pop les test aas cmp pushf mov or faddl xchg dec mov or ljmp lret pushf inc clc jl dec mov nop cli call (bad) sub lcall inc adc out cmc clc (bad) jno sahf add push or adc jns mov popa jnp aas mov xor out pop imul sbb and aas xor mov xchg nop mov pop sti popf lret cmpsb popa add pushf jecxz test cwtl fistpl jp dec pop outsl std push jnp sahf xor sti lahf dec cli ljmp push std sub lcall push inc or mov lahf sbb mov mov cmp sbb call (bad) stc push cmp mov lahf sub or jmp js mov dec lret xor mov call add repz popf push fcompl jmp inc out fisttp jmp xor or call pop mov cwtl dec inc out scas (bad) in push call or cli aaa push repz ljmp rcll jg and cmp cltd scas test dec cli fwait inc lret stos push je es gs call mov cwtl les out fisttpl pop out aaa jne insl call js test mov add cli sbb sti lahf pop loope pop push mov pushf (bad) repz pop add jnp dec push or fucomi aas stc pop fcoms mov push inc flds push clc mov xchg imul pop int xchg mov outsl (bad) jecxz add std lcall inc (bad) push sti mulb daa push pop addr16 cmpsl ds mov stc imul add xlat mov xchg sti jmp cltd inc or xchg loopne daa mov xchg (bad) mulb inc xor dec cmp mov fwait mov loopne sti pop movsl or sub aaa imul test cmc fwait sbb lcall hlt sbb aas (bad) mov xor mov sbb (bad) fadds sti pop in cmp xchg aad sar jle pop sub dec ret fstpt scas setns xchg pop jbe cld xor call mov insl das ds sbb add sti mov ss and sti jns insl sub lret (bad) xchg movsb adc pop xchg stc in fistp or push addr16 mov dec or stc sahf jmp ret cmp mov fildll cmp cmp adc iret sub push test lds xchg adc clc or or push imul stc sti popa xchg mov jl xorl decl dec das imul jg sti xchg mov inc into sti popa push fmull (bad) cli dec in jle fnop scas mov loope loop (bad) (bad) sbb sarl in adcl xor dec add fcmovnb sbb or test hlt test xor jp rep nop aam and out mov into insb loop jnp notb je out nop xchg stos mov aas icebp inc sti lods xchg arpl dec (bad) sti jge jecxz inc bound cmc sti xor (bad) cmp sub cmp add pop sti jne push sarb mov mov xchg sti (bad) push xor insb sarl cmpsl stos and cmp popa xor add xor push mov inc xor lock or xor mov push cwtl lret sbb aas sti test clc popf add mov push xor insl mov mov xchg fiadd clc add pop sbb cli push cmc push fldt mov cwtl xchg das sbb aad pushf sub fldenv subb ret inc bnd jle add pop mov add imul pushf inc stc pop mov shrb xor dec cmp pop cwtl (bad) jnp cmc push cli lds lods and insl scas and add outsl call cmp cld iret cmp pop push or ja in jno xor clc sti and inc (bad) mov ljmp sbb pop sarl aaa add loopne (bad) (bad) sti mov and fimull je sti popf out stos bound fldenv imul mov pop sbb cli jno sub cmp scas add adc sti cwtl lock call fsts adc es test mov not cli icebp test sub cmpsl rorb (bad) or xchg mov xorl xchg jecxz or jmp mov add repz pop inc out add xchg lret mov lcall xchg (bad) gs outsl cmc xchg divb sarl dec xchg stos adc cmp enter (bad) sub mov sti push subl cli mov sar or imul fisttp stc lahf xchg cli mov mov jno lds xor mov pop cmp (bad) cmc test pop jg test jle bnd outsb sub mov push fisttpl scas in pop into mov (bad) neg daa out mov fadds sbbb call sti xchg xor stc insl mov xorb pop mov mov imul sbbb push stc call ljmp sti mov push sbb je sub xor pop fildll stos or outsb pop ja cli dec es xor xchg in fstpt jmp (bad) daa clc or jae add sbb (bad) jno jnp sar pushf mov pusha lods sti mov addl cli push fldpi mul ss or mov js mov and push and cmp ret lcall lret fdivrs xlat and or jns xchg mov sbb sub pop add push sti xor popa addb scas (bad) pop movsb cmp push scas jb sti and test (bad) xlat sti fnstcw lahf mov cmp cmp hlt cmp (bad) push (bad) cmp sar push mov cmp cmpsl ljmp cmp mov hlt or inc mov sti push cli cld lret sti imul scas rcll (bad) sti cmc dec rorl (bad) (bad) mov xchg jmp aam or mov cli mov call sbb push cs add rcrb imul xor in push lcall xor outsb data16 mov sti div jne aad iret rorl mov xor ret add es push (bad) cli cmpsb out inc adc fldt jno call dec pop jp inc lods jmp xchg bound xor sbb mov dec clc pop jl dec mov in int3 inc fnsave xchg lods cs and pop xor jno mov in and sti ljmp lcall xchg iret add iret jae sub jno int3 sti aaa inc lds out adc icebp sahf cli nop mov sti mov pop sbb add hlt outsb aas out sar or nop fs dec pop and cmc mov hlt xor cli in stc test push sub insl xchg xchg stos call and clc jecxz jb mov cmpb and (bad) push xchg sti out mov sarb ljmp pop sti inc fbld outsl push subb out call test lods or mov bnd call sub xchg jnp imul xlat stos jmp mov pop and sub cmp and xlat xchg pop jnp push add pop sti jp jns fnsave sti fmuls clc jg ret and mov push add mov sbb pop or inc dec dec fnop ds mov jge pop or push repz pop cmpsb sti ret in jl adc and pop sti aam add rcr jnp out dec sub cmp (bad) bound sub sti jae dec ljmp loope mov fisubr xlat insl in sti pop and sti xor push xor scas xchg loop ds pop aas cs pop and xchg cmpsl test xor adc fisttp mov cltd movsl call outsb sti push arpl and subl jnp (bad) xchg fidivr mov dec xchg (bad) dec mov jne imul mov add sbb jnp clc js jns clc stc mov mov addr16 pop out pop in cmp sti xor add hlt jecxz repz pop sti dec (bad) jae pop js and cmp xor xchg jmp addr16 sti inc add rcrb popf jecxz or imul (bad) int stc adc cmp xor or pop and repz insl lret inc jecxz lds mov loope clc in enter fldl test (bad) lret sarb in xchg push sarl jmp scas rcrl faddl xlat dec push imull push inc movsl jmp pop xchg aaa cmpsl sti xchg or imul cmp pop repz fdivs push sahf mov mov push adc loop in (bad) push push aaa hlt inc cmpsb aad mov lea jge (bad) clc xchg mov add ljmp sbb lret cmp mov (bad) xor loopne cmpsl adc push rorl mov repz outsl pop sub jnp and push or in leave clc aad xlat mov jg mov and mov pop sti out or xor jle mov pusha xchg and cmpsl aad pop sar inc sub adcl lea fmul sti lret imul pop cmpsl imul cmp js jge mov lahf or xchg cs rclb pop mov stc inc shlb stos sti sub cs cmp inc push xor dec mov sti clc ss fisubrl inc in mov lahf sbb mov sbb sbb push push sti enter adc cmc nop int3 xchg test psubq jb dec fiaddl sti xchg sub xor stos pop xchg dec lock test lods mov or in ljmp test jne mov loopne out mov add icebp jo jmp (bad) hlt cmp push or orl jbe mov sbb xchg xchg in xchg push hlt paddsb jns fwait jb jg add shrl ds sti mov scas or add add sbb addr16 outsl (bad) into and jg int (bad) sbb incb fmulp cltd idivb push enter stc sbb jmp xor repnz jbe test xor sahf sbb ss orl or out jnp adc sti add cmp es sub dec xchg fwait sti mov into movsb pop sti cmp dec cmp jle add jns insl leave in jmp jo add add (bad) and jbe pop sti and pop push dec cmc xchg in mov add aam sbb pushf add or sub mull mov jnp mov cmpsb mov sti lds adc lcall inc stc les test jl call push sub mov bound cli int sbb insb rorb ret aaa movsl cli decl cmp cmp dec in cmp push inc fistp mov mov mov sti out (bad) mov xlat je,pt cmpsb lret je xchg fistpl mov ffreep shlb mov jnp mov addr16 (bad) cmp call add data16 imul dec outsl arpl gs imul bound add test pusha lea je clc clc pushf mov lea and mov call add addr16 outsb jbe add data16 popa add add jne jae dec fnsave popf or hlt xchg adc mov mov fnstsw loop xor pop sarb cmp pushf push in add je call test in dec jle,pt dec (bad) aaa rcr fwait sti cmp scas or xchg or loop out lds stos fstl in imul lcall mov addr16 dec pop int out fiaddl pop inc dec sbb mov aas cmp aam jle mov mov xor loope loopne (bad) and cmp xchg hlt movsl cli in fldt mov inc and mov fild jle clc js imul (bad) jo mov xchg or adc jae (bad) in leave lds lahf adc dec dec movsbl scas addr16 mov das rorl mov pop pop xchg js popf sti loopne sarb (bad) out mov jecxz loop push and lret ljmp pop js (bad) repz xlat adc ja ret fnstsw stos add cmpsb repz lods incb loopne lea je data16 testb add not rcl mov call mov call call pushf pushf jmp pushf movb lea jae call add inc jb jo inc gs jbe dec gs add inc fs jae push outsl imul jb jbe insb gs clc add push push lea jmp add pop pop arpl inc imul movsl (bad) incl add arpl data16 add je jae jb bound arpl outsw jb popa je outsl outsb inc add add add add jo outsb fs outsb jbe jb outsb insl outsb je je imul xor add pusha pushl xchg lea mov pop pushl lea jmp add pop inc dec pop jo outsl insb outsl add jp add add gs inc imul bt cmp call sti cmp mov mov mov xchg mov (bad) clc vpcomw rcrb xchg xor or out icebp sbb cltd mov fwait lock scas mov lahf sar xor hlt mov cmpsb scas sbb stos jae (bad) lds (bad) xchg dec jmp mov xchg sbb cli repz fidivrl cmpsl fstp rcl out andb mov sbb mov fsubrs scas scas sub cmp mov xchg xchg mov (bad) dec xchg push fcomip xchg mov icebp shlb fstp lcall mov shlb push mov mov xchg std movsl mov jecxz rorl mov roll or fcoml mov rcll add negl (bad) ret out or push mov out mov test jbe xchg (bad) pop loopne jnp ret stos scas ret xchg jmp jae jecxz cwtl xchg sbb fidivr dec adc lret mov xchg mov add jecxz outsb cwtl mov mov stos xchg add les mov lcall cltd pop jecxz inc fcmovb es ret inc iret mov xor mov out mov fsub stos xlat xor fbstp fistl test ret in lods sub xor iret js xchg mov jo or mov push cmp xor stos xchg ret mov pop les test lea mov or push imul aam (bad) xchg or jmp pop dec (bad) cmpsb test ret hlt lods mov scas insb jb fidivrl lcall sub mov repnz test push xlat adc pop mov les movsb mov jmp ficompl mov scas stos mov mov xchg mov mov xlat mov test jp (bad) mov inc xchg push mov popa jbe adc mov stos lret das notb out jmp xchg and cmpsb xlat mov adc loop jo pop sub dec sarl xchg mov popf push adc ror jne adc (bad) stc hlt inc insb pushf pop popf jmp es in fstpl rcrb loopne stos sbb and jg out pop cmp fldl inc jmp mov iret mov fucomp adc fs mov cmc (bad) loope or gs (bad) jmp mov popf or pop rolb inc sub out sbb loope fcomi (bad) (bad) dec in jmp bound or out and insl test fldz dec sbb sbb in mov notb inc inc mov pop adc cmp push pop (bad) enter mov insb cmc test cmp daa xor push pop jg inc (bad) popa in jge sbb xlat divb lret jle sub ja movsb lods fnsave inc leave mov mov jp pop rorl or leave leave repz xlat dec mov (bad) in jg jle es mov and push add pop lea fwait jns sarb mov adc loope cwtl int3 dec mov ret out or mov jmp jge jne loopne repz inc add rcr sub popf adc mov pop imul sar int3 imul cltd cmc (bad) mov popf repz xlat (bad) jno cmc xor sahf out call jne,pn outsl cmc fnsave mov push out jge mov gs xlat inc add jns idiv jno inc insl scas in inc push loopne sti imul mov sti fs data16 adc jb (bad) lret out sarl ret cwtl ror sub les (bad) mov xchg cmp xchg xchg add mov (bad) repz inc xchg inc lcall loop ret xchg mov ljmp out stc stc jecxz xchg push repz outsl adcl int gs mov ss xor jno ljmp lods int pop mov mov xchg dec out icebp test adcl xchg iret out sub lea mov jmp mov out fimull leave jo lcall pushf mov mov xchg sbb das imul rcrl (bad) iret stos sub xchg pop add mov in pushf mov lods cmpsl jmp adc int inc sub hlt scas lods mov pop cmp mov adc xchg rol mov mov pop js lods jno mov jmp cmc mov test (bad) mov xchg out (bad) fbld mov xchg xchg sbb (bad) cltd push pushf test es aaa mov adc stc stos mov test pop adc popl fimull lea test push fcmovbe pop pushf jae insl push cld test loopne jp lahf mov mov mov mov mov mov mov mov mov scas scas jb jmp stos push fldcw movsl jmp mov addr16 fisttpl lea and xchg ljmp adc inc lea setb fcmovnbe out xchg cltd in pop jmp enter arpl in scas xchg out adc dec or fcmove clc ret mov mov mov les (bad) int push inc (bad) (bad) xor adc lret cmp mov enter push ja jg sbb mov std adc movsl repz popa cli loope xchg int fidivrl arpl adc test iret and xchg repnz cwtl test add jge add inc jmp mov jbe mov inc push bound mov test adc lret leave push idiv repz jbe sub lods movl lea pop ror cli push lcall push incl mov xchg test pop add fstpt xchg mov adc add mov cmpsb xor mov xchg mov jbe sti repnz mov mov or mov out js mov pop cmpsl cmp mov and test or (bad) mov sbb movsb adc jns (bad) repnz lds mov xor aam adc (bad) pop clc lret out stos rcrb sbb add test outsl gs adc (bad) ss flds xchg stos ja addr16 lret test jmp (bad) cmpsb sub jbe lcall jae repz sbb (bad) in rcrb sar lret aam (bad) jecxz stc cli xchg jecxz jmp push out jmp mov repz cli xor or stc clc movsl aaa movsb jno clc imull outsl lods shll imul add sbb sarl out rcl mov lcall aaa sbb fdiv push fdivrs and (bad) lret and sub notb stc mov cmp cld mov hlt je jmp cvtdq2ps in adcl fwait aaa ret mov repnz fisubrl or icebp mov cli aaa push sahf xlat ja (bad) lcall imul cli mov shrl jb jmp imul int3 xor addr16 lret push in imul jmp inc subl ljmp and xchg icebp imul sub mov sub jg in lret jno add scas lcall leave fwait lcall scas lcall jae imul in or loopnew inc rorl jae gs mov cmp mov lret jmp cmp lret (bad) lret mov enter add jb fcomps sub add jb fcomp sub add (bad) fcomp xor push (bad) clc pop xor lret aaa jae (bad) fstp outsb lret xor loop lcall fwait jb fcomp sub add sub add pop mov lahf mov mov (bad) mov mov pop mov add adc (bad) mov mov fistl lret (bad) mov mov fistl lret (bad) mov or mov gs xlat mov stos or js lret pop lret and jns fwait mov aam loop pop bound mov sbb (bad) mov jbe sbb push cld xlat jne sbb jecxz je sbb jae sbb lret and jp,pt aad push bndstx out out jnp imul stc fnsave ficompl lods xchg imul add popf outsb cmp xlat sbb repz ja fs sbb lret and (bad) xor add push imul aad push movswl aad push psrlq cmp mov push lret cmp ds mov aas jp mov mov push leave pop lcall das lcall xor out mov lcall ja repz jmp or lret jbe stos mov jo or ficompl ljmp cmpsb ret mov push lret pop or in lret sub push leave and in pop or pop rorl outsl dec lcall addr16 (bad) out lret icebp or xlat out mul pop lahf mov lret mov mov lret into mov (bad) (bad) jmp or lret insb or fisttpl fwait push jmp dec jmp pop jmp dec lret or jmp arpl mov lret repz push add cmp fistpl ds lret xor dec stc dec cmp out ret cmp jns (bad) pop data16 jp sub sub daa mov push fldenv and jb jmp push push fnstenv mov xor push inc xor xchg xor xor das jmp lahf mov sub dec jno imul adc enter (bad) mov jecxz pop imul repz repz add imulb jecxz mov ljmp repnz icebp mov ljmp in jmp in fiaddl cs pop repz cmp aas lret fimull fcomp arpl fdivs xlat mov (bad) mov repz cmp xlat lret into out fmul div lret pop das (bad) lss ja fcomi pop repz fisubl jmp jl mov fwait inc ja mov mov imul pop addr16 dec outsl push fwait dec call addl xchg arpl fwait push fldenv repnz push fnstcw out jmp fildll fldpi adc repz out fnstenv fidivl jmp fsubrs (bad) mov (bad) jb jmp aam push fxch mov (bad) jb jmp mov add mov push fnstcw add jmpw fldl2e mov push jmp cli gs imul dec out jecxz repz loop mov rclb arpl lret mov sbb cmp mov mov pop mov xchg mov jmp fwait repz pop inc jle xchg ret mov ret xor (bad) dec jmp push (bad) cli cli stos xchg repz call fbld call das addr16 xor push adc mov xchg add mov push repz ret jmp test pop fcomip inc xchg sbb fsubp (bad) xlat dec ja imul jo jno mov stos jns out shrb ret bound cltd mov repnz lcall mov repz rcr sbbl mov mov (bad) idiv xchg negl mov in ljmp inc mov mov in cli sub cli fucomi in mov in cli out xchg push fistl fwait repnz sbb jmp lods (bad) imull mov or sub pop jbe rcl mov dec mov lret fbstp jmp jp divl ja mov repz cmc mov xchg sbb inc mov fstl jmp mov aaa fdivs pop cmp mov stos mov aaa ljmp dec dec repnz mov ja mov out jmp cmp dec xchg jmp jecxz jmp repz xor cmpsl mov stos ret fwait push (bad) fmul mov stos jbe mov shll imul jnp lret lock cmp ljmp lret mov ljmp outsl xchg repnz mov pop jb jmp pop push scas orl and loop loop mov aad pop outsl fisttpl adc cmp jp sub outsl cli enter inc fpatan mov jns test dec jecxz mov dec jnp jp jecxz xor mov mov mov mov shl fisubl and lret rcr pop aad mov sbbl lret je inc fisubl cli jmp clc fucomi loop (bad) sub dec jmp loopne outsb pop iret repnz sub jno mov mov outsl fstpt jb fwait insb aaa popa push daa outsl sub dec cmp xchg lds test iret icebp (bad) int3 mov push jg daa mov ja ret popa jmp repz xchg xchg das ljmp ljmp ljmp popa ljmp ljmp pop stos repnz sti (bad) out loope mov movhlps push scas in cli scas sub dec xchg jae aaa add or jecxz movsl jns enter push xchg jae ret push xchg ljmp ljmp ljmp repz dec clc adc daa mov enter push fmuls test xchg ljmp jg push mov shrl mul insb repz out xlat jecxz imul lret pop mov adc and sub lods inc cmc mov repnz mov xchg clc icebp mov (bad) scas pop stos fisttpl mov rcll push outsl mov rcrl fcmovnbe stos mov xchg out popa jmp cmpb movsl aaa scas stc mov sahf out sub sub sub mov mov repz stc es fbstp movsb jmp cld imul jo mov adc icebp cmpsb ret mov jbe push pop sub dec mov stos mov lahf lds (bad) repnz xchg xchg pop rorb enter jge ljmp mov xchg jg jle ja jmp fcompl int mov frstpm(287 stc lret xchg jnp push jno jo mov je sahf jae outsl lock push jae imul scas mov fidivrl jns (bad) cli dec sti add dec outsl outsl imul arpl jne je imul js imul insb add add dec outsl popa fs imul add and add xor add or lea call push pushf call add push gs outsl jbe inc imul jns add mov inc push dec pushf inc add not test xchg daa clc mov pusha add mov sub jp push mov pusha mov shr lea mov pushl call lea jae bt test cmp cmp pusha pusha jmp pusha pushf lea je sar stc rcl shrd mov bsr neg mov neg mov call cmp cmp push ror pusha mov call add dec gs imul cmc fidiv pop inc and je and (bad) ja cmp jl push out xchg lea mov mov (bad) jb jb test scas ret jbe push mov adc cs jae mov push gs jo outsb dec gs js add out shl push mov bt clc stc clc and cmp pushf stc clc add sub cmp bt add jmp cmp cmpsb jo jp jae in clc test movsb and xchg iret sbb sbb enter in lret ja ret sub xchg fcmovnb stos adc scas or xor jb or scas rep test or stos js xor repz cwtl jmp mov add jmp int add add jae (bad) xor pop out mov out cli (bad) sub das pop inc out (bad) mov mov js out stos movsb stos jle out cmpsb or fstps xchg mov ds cld (bad) fdivs and xchg testl jmp stos pop mov stc push pop jns inc xor daa icebp mov jmp mov js jmp jg stc xor cmc mov xor (bad) mov dec sbb cli arpl mov hlt push add dec fwait outsb test stc xchg cli xchg test (bad) fild xchg js adc add fdivs ret (bad) fcoms cmp xor cmp mov xor xchg lcall fnsave stos test mov and icebp out and dec movsl xchg loopne call jg sub imul and jmp jmp leave fisub mov out sub jmp mov repz jecxz dec fdivs xor jmp adc clc cmp inc test iret mov popf out aam mov pop and fstpl pop lods sbb stos lock pop cmp cltd fstl xchg xchg sarl out rcll xor movsl inc xchg xlat cli cmpl jb or punpckhbw push fldcw aaa jnp add xchg stos data16 mov out rcrb (bad) jne mov stos movsb adc xor aaa mov push pop (bad) out xor pop imul out daa clc jns (bad) cwtl sub mov adc adc push push mov xlat inc sbb jbe fidivrl out xor inc dec mov icebp (bad) xchg xchg or ret test sub bound nop pop lds stos cmp (bad) xchg rclb jmp xchg addr16 nop dec mov stos sub push xchg fsub test or push aaa scas daa add cwtl jmp dec push push movsb fnstenv jecxz fsts inc insb test test sub outsb (bad) xchg cld enter shrb and loope cmp push pop cli es mov negb adc out (bad) std mov enter jg xchg out inc fidivrl pop cmp stc fsts push xor and in xchg mov mov pop js inc outsb mov push ss cmp mov cld jns notb and flds mov repz adc jns xlat sbb adc xchg jmp inc xchg mov jne cmp (bad) mov out sbb ret loope (bad) in pushf and xchg rcr aam (bad) xor xor lods xor in leave clc leave test fidiv add bound mov bound jae push mov jb idiv (bad) (bad) repz adc jo out in lret push add xchg mov or cltd jle mov scas (bad) (bad) out jp jecxz pop movsl insl cmpsl mov sbb loopne ss test test cwtl and call cmp or jge xor xlat lret or xchg fildl movsb aad inc in ss inc dec pop xor add into xor mov pop xor stos stos imul mov inc or pop rcrb (bad) xor jg jl cmp mov inc xchg inc xor fild repz scas js ficomp xchg xchg xlat repz lcall hlt adc testb mov mul dec mov xor jecxz mov jb iret lret mov mov imull data16 addr16 or pop jb add mov push out mov lock pop bound rcl aam rcrl dec cmp stos div lds inc mov idiv in ja out call xor std fsubs mov fldenv rcll ljmp jne inc mov call mov mov fisubrl cmc push xchg test adc push fsubrs out or lea push aaa sub insl scas cmp jo xor cld out xchg jnp pop (bad) repnz xchg sbb das xor dec xchg sbb inc xchg pop repz xchg adc mov loop vmwrite aad pop xchg out mov imul jmp dec lret xchg in lds fdiv mov loopne push jg cmp ja fcoml fistl imul pop dec sub out stos xlat mov (bad) out arpl arpl repnz mov clc repnz jae pop sbb shr int fldl jb push outsl repnz jecxz repnz dec pushf jno jmp mov xchg fld imul cmp loopne les pop inc fisubrl jne (bad) cmc jle xor and out das xor sub loopne mov loope inc lock fisubl ret mov dec xchg stos mov aad out js leave setns xor pop arpl adc and test fsts lods fs clc jae test addr16 xor sbb movsl adc or mov out clc add inc cmp stos inc jle loope outsl das inc enter xor loop movsl xchg xlat inc sbb or mov mov jmp movsl les cmp cmpsl inc inc xchg pop repz xchg pushf icebp pop cmp pop repz mov lds aam pop push xor repz xchg xchg out adc arpl arpl scas mov dec xchg xchg cmp pop add popf dec test xor add repz lods pop ficoml pop inc (bad) fsubl xor mov out out test dec adc jo jno aaa xchg in cmpsb out mov mov in xchg mov repz push loope std repz mov aaa outsl sarb aas (bad) or lahf xchg jg xor ljmp (bad) imul bound mov mov dec insl jno call (bad) adc pop (bad) xchg subl jbe (bad) rcl mov in push mov ss jb pop sbb inc outsb (bad) sub inc push mov arpl pop or (bad) lods lret dec mov outsl adc rolb ret xchg pop lret mov loop xlat sahf jb adc (bad) ret jno xchg push mov jbe rcrb push push out out test scas (bad) xor lret fwait mov in mov in adc (bad) je imul jbe fldt loop mov ja mov pop pusha outsb scas out adc cltd push pop movsl mov out cmp clc mov lds js loopne adc (bad) fistpl adc xchg loope jne in js ret cmc movsb adc cmp push mov sbb rcl (bad) jge dec push adc cltd fcmovb cmp mov outsb lahf or (bad) pop sbb cwtl clc (bad) movsb test push and adc dec mov (bad) dec xlat js (bad) icebp adc outsb mov icebp pop mov lock out shl add or mov icebp imul adc stos cmp sbb push mov xor push ret xor mov mov push pusha xchg in xchg popf jecxz movl test mov stos jmp xlat scas push push (bad) mov cmp pop mov movsl jo mov rclb mov push stos ss mov clc rclb sbb inc (bad) (bad) aam mov inc push std pop je or dec stos inc out ja add cmp fimul jecxz (bad) sbb jp (bad) ljmp push mov jno (bad) mov repnz out mov scas cmp mov sbb popf hlt mov jle js out sub ret mov dec repz lret sbb xchg mov loop lret adc mov rcrl adc jmp ret lods (bad) mov out mov stos inc je les cltd imul xor inc sbb push aaa stos sbb lds lret out arpl sahf call pop pop stos ja jmp leave js jmp or xchg mov cmp pop ss sbb rcrb (bad) fiaddl out xchg jp jmp call add cmp aas cli ds (bad) sbb cmp and xor and adc out cmp (bad) jmp lcall mov add out pop arpl jb mov loope icebp call add imull pop rorb mov les adc movsl (bad) lock inc xor push out imul jo imul add pushf mov lock mov (bad) outsb xchg cmp repz sub adc xchg mov out rcrb push aas movsb mov mov mov popa in pusha scas jmp inc inc push fisubrl push (bad) jne mov call pop cmpl pop cmp inc mov icebp into repz ja push or cmp mov and mov insb lret jmp or mov xchg jmp addr16 pushf stos ljmp xor sbb dec lret lahf test jb jbe sub stos xlat xor bnd ss daa mov into mov jl,pt mov dec cld out lock addr16 push (bad) lods dec lret shrb shll mov dec daa xlat jo (bad) das imul jmp mov ret repnz and jnp sbb jmp stc jno xchg mov jb cmovae stos mov push out cmpsb pop sbb jbe inc scas xor and fucomi (bad) jmp (bad) out mov stos cmp xchg movsl imul xchg je cmpsb xchg js xlat je fcompl mov push inc push aas testl pop mov mov pushf ret cmpsl inc int3 fist inc mov fs or add xchg xchg inc adc cmp xchg cmp lret (bad) jmp add stos outsb mov push stos fwait lods notl adc ljmp pop leave xor pop imul sub repz aam fdiv int hlt into ja fiadd std les or pop pop ret pop push lock adc ret rol ljmp out mov adc adc jg xchg cmpxchg cli test stc and testl fimull jb andl xchg out scas in jae enter xchg imul ss leave rcrl push cltd ret and outsb aam sbb imul pushf std test xchg jmp rorl mov fs xchg cmp stos fsub jp xor (bad) repz imul fcmove inc jge cmp mov xchg ja inc sbb fist adc cmp shr sar pop sub in xor pop lods mov push loopne xor mov fidivrl xchg out cmpsb mov jo sbb stos nop mov rcrl pop loopne push hlt sub notl mov in cmp lahf add inc xor xchg sarl (bad) mov and pop mov mov xchg xor (bad) in call xchg in jbe rcrl in mov mov lods shrl jae (bad) mov xchg flds jle mov adc out xchg fild testl mov enter leave jle call jmp sub lods jle dec adc pop lahf loop nop sbb adc in xchg out popa jle fidivl pop adc orl mov adc sbb jno sahf enter lret repz cli adc and jecxz stc mulb cmp clc enter ficomp jle repnz xchg pop xor (bad) dec (bad) bound adc shrb pop push aaa aam sbb push adc call out leave lock mov jae or mov out xchg pop (bad) add mov xchg fcmove push in arpl fcomip ret xchg out mov push mov lock xchg and addr16 ljmp dec fnstsw jno outsl sbb out sbb jae das lock cmc add in adc sahf in inc cmp mov sahf loopne xchg std sub test push xorb call dec dec mov adc imul sub ds rcrb stc out fidiv jle stc ljmp shld mov mov xchg js adc fidivl icebp cmc js rep or jb negb mov out adc (bad) xlat in ret data16 rclb cmp imul dec ja out cmp add cmc fs jecxz (bad) repnz sbb fldt inc mov mov arpl xor adc sbb fldcw adc xchg sub imul repz imul insl and pop jae jp or adc xor adc cmp mov dec sub stc mov repnz leave (bad) inc pop adc jns and pop pop jecxz dec outsb imul dec dec mov notl repnz or fiaddl hlt movsb js cmc inc mov jle mov mov sub mov hlt jns rep sub movsb mov ret test cmpsb out ljmp (bad) push aaa pop mov xchg xchg jecxz jno mov fsub cwtl sub jns adc mov into das inc jp xlat scas dec arpl hlt lods idivl sarb es incb mov hlt outsb cmp xchg out jge in outsb cmp dec lods xchg out add ds in pop pop repz std xor push cmp stos mov push out push pusha das out xchg mov test (bad) jb rcr jns rol insb shl adc (bad) iret scas xchg cld jmp call jns out cmc or dec ljmp lods jmp enter stos addr16 in sbb push repnz (bad) ja sbb push cld out loope adc stos out xlat cmpsb dec stc mov mov mov pusha jmp bound xchg cltd jp sub loopne (bad) out cmp rcll test cmpsl insl fcmovu bound loope cmc orb repnz pop loopne jecxz fsubrs mov lods dec jmp dec jg xchg icebp adc call mov fdivl or push out fmuls aaa jg movsl lret mov mov iret jae aaa jecxz aad (bad) hlt jb jecxz ja in fidivl ljmp loop repz sbb jmp jae aaa mov xor lret dec outsl flds cmc mov ficompl ljmp inc ljmp fidivl xchg jae mov cltd stos ljmp fcmove ljmp cmp push jmp dec lods mov mov and jle outsl dec or iret repnz andl push sbb mov xchg (bad) cmpsl sub lret jae cmp xchg scas or adc aaa mov (bad) mov adc add negb iret mov les jns jo (bad) sbb pop test outsb out test pop (bad) outsl jle pop repz sub xchg cmc cmp outsb jle or xlat out adc mov adc sub test pop push xchg popf jl push jl cmp es loope loopnew seto cs xchg stos pop mov ds rcr aam outsb test stos imul out (bad) popf xchg loope sub repz test and pop adc sahf inc (bad) push stc or xchg in xor jl mov mov jmp xchg stos cld xor call xchg stos mov jbe sub cld xchg shlb jae cmpsl cmc out add xchg (bad) cmpsb add (bad) stos xor mov mov lds call clc mov mov popa jmp cmc inc xchg xchg cmpsb mov popf dec add mov cmp push dec pushf or stos loope lcall jmp pop int enter dec jb mov inc xor jecxz xlat lret jo mov mov xchg mov push xchg push add out jl in aam call mov js mov in push xor lret mov xchg loop iret imul mov leave push imul mov lods dec xor add mov aad jnp adc mov movsl (bad) fst inc fidivl faddl dec test rclb es push pcmpgtb fldenv fistl mov push mov pop int3 cmpsb jg insl mov cmp inc cs jmp in adcl ret gs movb adc and fwait jb xchg addr16 cmp orl ja xor xlat mov mov iret or fcmovnbe push cmpsl fnstsw mov aad stos jecxz jge lret xlat cmp inc stc dec adc push cmp arpl jecxz jo and xchg ss lock mov ljmp (bad) in mov mov or ja in roll divb not ja mov pop imul pop lcall jns jl cmc outsl sub icebp out ds jp cmp mov daa ret mov loope and mov (bad) mov jb (bad) mov data16 mov leave mov in int3 jmp add in mov jns xor movsb push sbb outsb scas enter mov pop stos movsb or cmovo add and pop sub mov xchg xchg sub cmpb mov jb push repz xor jmp push sbb ret clc and jge xlat xchg out mov test lods cmpsl imul sbb xchg push ret xor jmp adc pop mov lahf xlat xor dec inc loope sub mov aad and (bad) in sub ret inc js out inc push out mov call (bad) sub popf xchg jmp sahf xchg adc cli popa movsb xlat sahf inc sarb fbstp sub mov mov popf sahf or jmp stos ficoml lret fistl stos fnstcw sub movsl dec mov adc push pop aad jecxz cs or (bad) imul roll aam insl test sbb add pop les add mov movsl mov push repz (bad) ror mov sar adc fimul jg fcmovb int3 (bad) jo push adc shll pop sub inc test icebp cld mov leave dec popa adc adc in stc sbb adc aad xchg lea lret xchg mov adc pop add icebp fimul cli jp cli test adc inc out fs popf add push mov mov pushf test popf jmp fildl arpl iret mov push mov jb js movsb lret adc inc ror mov cs mov stc aaa sahf (bad) sbb xchg xchg pop rolb jns lods addr16 stos movsl xchg mov (bad) jbe stos test add lret xchg scas enter inc mov loop xchg jmp xorb sbb mov dec xchg into repz sahf xchg mov jle ror faddp aas test mov xchg mov adc pop inc and leave cs imul xchg push pop adc mov cli xchg mov rorb (bad) jb xchg popf mov loope xchg clc sahf mov (bad) push sarb rcrb scas or (bad) dec or pop scas pushf add daa pop movsb mov ds nop test mov xorl jmp push mov xchg dec rcl movsl rcrl mov stos aad mov add ficompl jbe xchg (bad) or imul push push repnz dec out ljmp cmp cmp xchg xlat out (bad) inc and (bad) cmc xchg cltd test pusha lods mov jbe push xor int gs pop push int rcl jmp xor cli pop cmp mov mov adc outsb int3 (bad) or sbb roll in repnz pop aaa sbb fisttp pop dec xchg popa xcrypt-ctr cmpsl sbb xlat dec movzwl and sub xor jb sub lods (bad) jb (bad) idivb test jne push imul js jae sbb cld push lret inc (bad) cmp mov inc popf jge cmp test pop divl adc dec scas scas lods sub mov pop sti stc adc rolb clc sahf and icebp je adc pusha inc mov outsb mov or fidivrl out pop mov cmc push and cld outsb jbe add aad xor stos jb mov fsts mov fcomp xor adc pop jns inc idivl lcall mov js pop sbb aad addr16 xor decl jns adc ja adc cmpsl arpl outsb div gs xor out adcl dec repnz cmp push test rep xor jle fidivr push sbb imul push and (bad) cmc adc jl sahf pop imul (bad) jne xchg mov pop xchg loope mov sahf jge imul or rcll enter mov (bad) repz int3 aaa faddl fcmovb pusha mov pop test mov nop sub insb icebp fiadd jb (bad) and add cmp ficompl notb lea (bad) jbe fs cmpsb and (bad) leave pop hlt cld scas pop mov ds and das icebp das jle xor cmp aad call test inc repz test sub dec cmp push leave sti xchg jp cmp movsb adc jns push lock xor mov loope,pt pop mov xchg jo adc dec xor mov stos xchg xchg mov inc jae push aaa sbb loop jbe sub (bad) mov insl in add sub (bad) jne lock cmp dec pop (bad) sub hlt pushf inc std sahf adc xor stc (bad) int pusha mov xchg add sbb int3 dec lcall fcoml push xchg cmc pop cmpl movsl jmp mov mov aad outsl xor movsb pop (bad) mov xchg nop inc sub (bad) or inc ljmp cmp dec or mov pop dec bound out fwait xor ja lcall scas xor mov mov xchg aaa es pop xchg lret xor inc out sbb scas out les pop call sub sub sbb ljmp (bad) adc adc orb add lahf push stos jbe scas or xchg out jne cld xor (bad) mov push andl out xchg test and pop sbb leave ja or dec dec (bad) pop pop call cmp aam sub daa out sub cmp push pusha cmpsb dec adc jo enter mov movsl in and daa int3 (bad) fidiv push jge pop int jb dec and mov nop jmp nop daa negl adc mov aad push sbb fcmovu mov and stos outsl fs call mov divl stos mov sbb fdivrs cmpl jmp arpl aaa addr16 mov in ja sbb add push orl inc sbb (bad) rcrb cli xchg in adc int sbb dec xchg push (bad) cld out in div xchg je inc ljmp fs xor sbb mov inc leave mov cmp cli scas xchg pop out mov add inc fiadd lock ss fxtract jnp (bad) movsl into cwtl sbb repz loop mov in dec xor lock int jae dec ss int3 mov xchg xorl mov out aam lcall add mov lcall stos jbe jb xchg push xchg std das jl pop lds int3 add (bad) adc outsb xchg (bad) mov shrb lods xchg jecxz dec test adc je push xlat mov xchg cmc inc and aam push int3 push cmpsl jb call jl fnstenv mov ja je pop clc cmp sub pop adc mov mov mov sub fsub cli dec (bad) je (bad) xor stc xor (bad) mov inc mov adc xchg fisubl movsl int imul data16 test inc ds movsl cmc mov test inc dec out inc fdivl add push jno xacquire sub stos add ret aaa xchg push in push mov jge cmpsl cmpsl in and cmp loop add out jno,pt inc pop stos sub (bad) scas (bad) cmc pop stc and dec pusha pop adc mov (bad) sub outsb add icebp enter repnz addr16 ja sahf add out xor (bad) xchg pop leave xchg mov pop sbb in gs cmp mov andb fistl xor and aad in arpl ja leave test in jae iret pop mov jge jo rcll adc jo mov xor jp jge jae pand mov data16 inc call shrb (bad) nop decb adcl lods add shlb cmpsl imul ja push mov (bad) out rolb push xchg icebp movsl enter jnp test jo push mov in jnp mov out mov lock sub mov shlb jecxz insl adc jp inc fistpll add mov xchg test in xor adc cmpsl sub stos lret jmp xchg xor ret lret push push pop test add mov jo fisubr std bound sbb mov dec add xor lods push add fs fwait stc or sub aas mov imull adc mov mov ret cmp pop mov out pop pop pop inc (bad) xor jl les jmp fmuls mov mov push or cmpsl or pop dec cmp jne andl test lods mov ficoml or and xchg adc (bad) (bad) jae shlb xchg cmpsl xchg dec call mov aas enter inc stos dec aad mov hlt fpatan inc mov aaa jae movsb sub mov jecxz scas mov cmp dec sub aas add arpl pushf shrb xchg dec leave lret dec dec jle (bad) jo push xchg (bad) pop cmpsl jae jo outsl je sub mov fst inc cmp xorl (bad) fidivrl dec xchg ja aaa push dec (bad) sub repz inc fdivrs lcall jecxz lret mov scas jne push pusha pusha mov mov movsl and sbb inc movsb cmpsl push roll sti xor test repnz (bad) xor push cmc inc jecxz test aad lds stc ja mov pop mov adc mulb jae fucom push jmp call hlt ljmp aad push imul insb inc ret pop loope and jbe (bad) enter inc xchg shr cltd pop movsl mov les in jns pop cmp mov xor jne sbb std mov fildl mov mov icebp loope cli fidiv adc jge push xor ja xor rclb or out pop arpl pop call (bad) pop xchg cld mov (bad) cmc cmp insb jg push pop imul inc in xchg (bad) jb icebp inc mov (bad) jb icebp cwtl xor test (bad) cli ja push jno icebp push cmp mov test mov out cmp leave fdivs ja repz fidivrl imul xchg jae inc cmpsl mulb popf fistl insl add testb adcl sub out jae pop mov cmp xchg sub fs sahf sub out cli mull xor mov mov subl mov movsl inc adc push xor mov push add out shll and fisubrl andl (bad) xor lret dec fsubs imul adc jecxz test into pop pop inc lea stos cmp ljmp ss adc pop incl pop pop pop testl xor mov stc das repz sarl push movsb imul daa ss (bad) mov pop xchg (bad) inc ja mov adc cmp out push mov int stos jp or jmp mov adc enter adc fidivrl xchg jns cmp test push and test ljmp outsb jae (bad) std (bad) (bad) jb outsl mov fucomi insl jnp test push mov xchg inc sub (bad) (bad) lret jo xchg mov gs pop push sbb clc adc andb push fs repz adc or mov cmpsb jb sbb fs gs sub xchg sub pushf fcmovne out lods jo mov stos shl mov sbb jbe xchg cmc xchg into out sub and repnz ljmp (bad) fnsave jp int gs or hlt aas and ljmp xor stc jmp movsb push adc iret rcll in sbb (bad) enter push repz mov xchg (bad) je push orl inc jno ret push pusha mov xchg adc les inc jae stos (bad) jno fisttpll incb mov inc mov ffree pop fidivr pop imul push mov dec cltd mov arpl or movsb outsb lods ret adc push lds jl cwtl cmc repz out imul repz jecxz pop push push call enter cmc xlat mov imul adc test jmp fidivl and addr16 lock jecxz mov xchg mov repz bound ds stc xchg sbb jg cmp aaa cmc into or icebp (bad) cmpsl dec in push xor jb jno notl lcall mov aas jg outsb jge lahf imul adc rcl subl inc mov xchg mov pop inc inc push out mov push xor and xlat pop xchg das adc xchg push int lock out xchg lcall sar aas sub inc popa pushf sarl pop inc fwait lods cmpsl dec gs push cwtl inc mov add rcrb clc cmpl xor pop cmc add ljmp clc fs cmp jae or xchg in test jmp loope sub xor or lods and push sbb lret dec mov rcrl jae mov jecxz je cld scas std insb fnstcw xchg imul push lods aam jmp and inc mov bound popf fwait roll aaa adc push dec out aam or out (bad) out mov inc loope adc dec gs test jl rcrl pop or or test cmpsb cmp pop jbe jp (bad) mov fstpl fwait mov stos arpl out stos and mov inc stos ficompl sbb lods xlat movsb vcvtdq2pd imul fyl2x jno inc fidiv ja stc dec ret (bad) jne mov stos (bad) (bad) mov mov icebp enter mov adc out inc jmp ja insb aam xchg div lds (bad) lret out pop fxch cmpsb fwait mov sahf sbb adc (bad) fdivrl lcall inc pop (bad) or aas ror hlt adc xor leave sti bound add xorl adc mov jle jp fnstcw scas fs call jo or or clc inc jae stos inc mov pop fild xor lock loope adc in cmpsb jp inc jecxz (bad) pop stos dec push iret repz imul push fnop xchg mov jecxz inc sbb push mov out iret xor (bad) mov inc rcr ja outsb js ja xchg dec mov in mov xor int popa mov sub jecxz sub jmp xor jo or mov negl mov jmp push mov in js popf sahf xor jne jecxz xchg int3 mov outsb scas out pop adc arpl mov inc xchg jmp inc inc pop icebp xchg les lock mov adc test enter hlt aam xchg pop jnp or ljmp pop push lahf xchg scas int3 aaa pop dec xor cmp mov (bad) inc mov adc insw xlat adc (bad) pushf fstpt das mov lret adc fdivl bound out sti (bad) cli in dec xor sbb jp ret xlat lret xchg stos out or sarb stc mov xchg sarl pop cli mov xor and das ret shl iret adc adc ja push mov in call sub pop repz int3 xor rep repz in sbb js jmp movsb rcll stos xchg pop cmpsb loope fsub xor fiadd cmc jnp xchg sub mov mov (bad) pop push or inc and int3 imul stos test movsb xchg ret mov in mov test test and (bad) fadds inc mov xchg jo repz mov leave in roll dec cmp out push xchg das sub add ljmp fcmovb jns and mov jle ret sbb (bad) divb test (bad) ljmp jmp out jno icebp out push repnz repz ret repnz loop repnz dec xchg mov xor xchg mov loopne xchg cmp mov cmp mov cli loop xchg iret (bad) jle into movsb (bad) cmp cmc jno (bad) repz mov test push mov and fs shll aad jmp inc sub (bad) mov dec (bad) cmpsl repz xchg push test stos and stos jnp pop sar movsl mov pop and repz or inc mov jns scas cmp pop (bad) repz adc dec jp jecxz add sub ret outsl out ret push jg aad xor pop shl mov jbe pop jne cltd or subl mov mov xchg pushf mov lods or ffree (bad) and fisttp sub icebp mov call imul clc mov rol mov cmc or pop ja std and ja jb pop xchg mov mov xchg scas jnp insb sub (bad) loop stos scas mov (bad) sbb out xchg lods adc jne push out pop pop xchg std jl push pop stos cld insl aas sub aas cld repz push and dec jnp aaa pop out (bad) push mov and cmpxchg sbb pop lods mov push clc or or pop add or outsb pop mov int3 je test mov mov (bad) mov jo mov bswap jb aad jecxz fucomi push leave imull jnp fisttp mov js push repnz loop decb lret xchg popf mov std add push xchg fldl scas cwtl pop aaa enter flds jge mov adc std test xor pop loopne fadd aam jl mov icebp jmp (bad) daa fs mov lret mov call fmull sbb adc mov or sarb es mov adc jg ret xchg (bad) and lret cmc loope jmp and daa movsb xor daa jle xor xchg mov sbb out rcl fisubr std nop cmc cmp mov adc mov xchg rorl adc (bad) fs cmpsb xor push popa adc (bad) xlat movsl repnz ja xchg adc or xchg jae sbbb test sub or scas js out clc adc mov xchg stc (bad) jb sahf xor sti imul int cmpsb cli loop ljmp out sbb movsb add loopne mov divb imul push and (bad) dec enter cmp xchg pop shrl xor daa xchg pop movsl xchg fist sub add pop sub scas out test dec rorb mov stos and out pop push pop movsb fbld test call pop xor cmp xchg orb mov int3 pop cltd js cld cli out jmp aad imull jnp xor dec rol dec adc mov imul (bad) into test lea dec das fldcw movsl insb out cmpsl push xchg orl fsub cltd xchg lcall pop std rorl movsl and stc cmp int sti xchg icebp enter (bad) or hlt inc stc hlt adc inc std pop xor cmp (bad) ds loop (bad) lods jecxz ret dec das pop shlb ss dec loop push idivl in ss lods cmp test shll aaa sub push and sub adc enter das pop rclb je int3 fsub stos cli mov xchg mul jae mov cli cmpsb loop lret pop sub fdivs dec popf pushf jl push lcall fist lcall lock jl jle xor xor (bad) and ds sbb gs ret xor (bad) je imul mov xor adc sbb jae mov std jle jns (bad) xor out xor out icebp int3 push aad jo (bad) repz lods push cmp adc inc sahf push roll mov (bad) int sbb dec cli add (bad) leave sbb xchg shrb inc xor (bad) jle sub loope cld pop add outsl xchg mov repz mov inc std lret data16 mov jae dec xchg add aaa mov out push cmp mov leave in shrb decb cmp xchg pop jne cli bound adc dec enter pop xchg jle in out ljmp in outsb inc dec ds pusha out jmp lcall adc push cmc addl cli hlt jo xchg mov fidivr xchg mov in fsts or repz dec mov ret out xchg sub std and aad lods rolb fidivrl push pop in je fcoms mov test imul mov fdivrl or pusha xlat xor inc jg or add mov test lahf mov clc xchg lret aaa movsl (bad) jnp mov and mov lds mov pop hlt (bad) mov rcl ret in mov rcll out test xchg sbb dec repz std mov aas addl icebp fistpll inc push jb ja pop push sub out xchg dec mov pop push add loope mov lret fsubs mov cmp loope pop mov jnp mov out movsl and xchg adc adc cmp mov aam ret xchg out div popf das jne mov pop inc push or jg movsl add pushf jmp mov inc pop (bad) pop mov add (bad) dec mov test sub fsubrl or jnp stos dec inc jmp fist or mov xor rcr cmp bound shll cmp aad xor lret jo nop sub sub xchg fldt push and in inc mov pop ja or or lahf inc out jne fcmovnb jmp mov aaa jae add ja (bad) mov jae mov xchg cmc fcmovnb push repz mov sbb or adc mov mov push sbbl xlat mov mov adc iret adcl cltd jo xchg pop lahf icebp mov jne out inc stos aas jmp iret rorl sub addr16 out dec push mov xor mov repnz ds jae daa sbb rcr mov jp adc dec xchg push leave divl (bad) aas aad mov fcoml jp sbb daa push pop fst (bad) mov add addr16 lcall jmp jg popf inc enter cmp cli test push pop outsb lcall jl mov into movl hlt jmp (bad) in cmp out jb ds in repz xor in adc dec cmp sub in lcall sub sub adc lock dec stc jecxz adc test popf icebp mov jae push or aad or lret mov sbb into cmpsb imul jmp (bad) adc jb adc lret inc cmpsl cmp cmpsl jle mov out fsub adc mov call sbb int in and js imul mov insl jne lea data16 push and inc ja push xchg adc daa (bad) xor or add outsb cmpsb mov scas call stos movsb jo (bad) adc inc push adc out and int mov shl mov ja das call fildl mov insl dec hlt out jb mov dec in out js jg out jno stc (bad) iret jmp loope jmp ds cmc jo pop mov xchg loop xor (bad) (bad) shlb loopne lret aas repz (bad) jmp add imull add cmp mov cli pop pushf xchg mov stc adc fwait ret pop out in mov outsb (bad) call xor in xchg insl leave pop loop mov clc jno jle pop cmpsl pop dec xor ss push mov xchg or mov xchg test sbb jae insb cltd or pop sub adc repz add xor cltd xchg add jbe cmp adc imul pop jmp rorb add push pusha adc into inc fwait add cmp add and cmp pop inc cmp fistp fcmovbe jo fdivl gs pop iret push (bad) notb arpl push xchg dec mov stos xor and test push pusha call test jno movb mov (bad) int3 adc in inc cld jnp mov or and fnstenv jns xchg lahf mov (bad) les mov mov out jnp mov lds dec mov mov cmp and cmp push shlb mov jbe inc inc addr16 in stos repz xchg fistl aas jmp xor shr ret repz loop push push int hlt xchg lret das cmc fcomp clc pop ss pusha xchg pop dec push enter lods sub cmp jge notl mov xlat sbb mov insl ja mov push xor cs or decb mov or add loope push aas fcmovb dec icebp pop jmp aas jle out rep xchg jne insl or jno loope stc (bad) (bad) mov xchg mov inc lret xchg push and mov out jne mov adc mov movsb fiaddl jbe sahf fildll aas pushf mov pop mov addr16 gs (bad) jae je stos adc scas xlat outsb stos jl addr16 add (bad) rol mov cmpsb repnz jp adc xchg nop mov movsl inc (bad) mov xor lds inc mov sub mov or lret mov outsb xchg rol xor mov sbb or stos ret mov jo jg test or in ret pop (bad) in repnz int sbb jne lret xor stos scas into lea jle push decl lahf mov cmpsl cmpsl mull aaa jno jo int je jp push xor jo lahf aaa loop lock scas push push xchg jl (bad) xchg loop fiaddl mov pop xor fisubl xchg mov adc push xor in out mov (bad) xchg into lcall mov cmp daa jo xchg ret xlat xchg mov dec adc xor cmc adc rcrl jns js cmp xchg push xlat mov jnp and lret mov mov jbe pop jb mov shrl lea xchg jno (bad) mov cwtl std mov pop add sbb lahf arpl bound ret jns push cltd out daa or pop sub mov (bad) popf inc mov xchg adc sarb mov pop mov cmc xlat jmp mov mov cmc out mov stc ret idivl adc or cmc imul lds mov sbb fisubl fdiv and (bad) repnz sti leave add mov xchg xor cli mov lcall in cmp jl push cmp hlt jb pop adc push xchg ja cld and push xchg test push test repz jmp add jae mov xchg add ret xchg mov push mov dec lods daa pop cmp or leave jmp inc mov lret aad cmp push js lods mov andb dec pushf xchg or cmpsl dec pop movsl stos mov mov inc fwait into xchg ret (bad) xchg fildl push jle nop pop fbstp pop jg mov stc mov xchg jge repz out lock mov (bad) mov pop out xchg subl mov rcll lret xor fwait test cwtl mov mov mov mull adc in push and or js stc mov adc mov sbb cli pop sarl inc push and jo sub stos mov movsb xchg cwtl dec iret fistp out fcomi dec not ret xor hlt jae mov mov jne fdiv in inc mov out dec lods (bad) jbe fwait sbb add inc jb pop (bad) cld idivl stc movsl push pop add push sub (bad) aaa (bad) repz and sbb jmp pushf push fnstenv lods into lret add xor jg mov cmp in clc pop jo lods push lret sahf fwait adc push sti repz jp rolb lret adc roll adc xchg adc fldcw and mov ja ret cld loope icebp pop lcall push popf mov cmp jp lcall xlat xchg (bad) fnstsw push cmpsb mov out popa test out xor xchg mov lods div int3 cli mov aaa xor cltd fistpll (bad) cltd scas stos movsb pushf inc push sub fisttpll sbb sub jg mov fadd repnz rcr stos enter mov ret testb push clc xor mov (bad) mov xor (bad) mov mov shll clc and push mov dec pop cmp mov shrl push mov mov ret jmp xchg mov jo cmpsl movsb mov mov js leave (bad) push scas pop xchg aad jmp xorb xchg cmp jl mov lods add xchg push pop dec adc jns test cld jns adc loop clc iret jne pop imul ror push mov pop test pop pop jne mov bound pop movsb dec dec pop std lahf loope dec lods cmp pop mov cwtl ret mov jmp repnz jbe test add std jns jge push pop icebp fimul sub cmp and lcall icebp adc add test pop aad xchg mov jle (bad) dec mov cmp jo leave pop roll cmp loop jae adc dec or lock jb movsl xchg (bad) outsb mov imul mov cmp jecxz cmp lret iret lods jae,pn mov ret popf jmp repz xchg sub pop pop mov add xor rcl mov pop pop (bad) (bad) iret dec xchg mov adc xlat ret out sub mov jmp lods fildl cmp (bad) out mov xlat push hlt frstor mov mov cmc cmp ret (bad) (bad) dec out cmc lret adc cmp hlt sub xchg stc mov outsl mov ret sbb xchg repz mov outsl stos xchg pop mov out aad into fwait adc (bad) rcl (bad) mov pop push lock test adc shr xchg sub test sub repnz cli cmp xor xchg fistp call iret outsb mov scas jecxz mov mov pop lods stos push jge pop cmpsl outsb mov cmp test mov or out jge (bad) scas outsl jecxz,pn outsb jbe outsb pop pop mov divl arpl popw lock lret dec sub mov mov xchg clc mov (bad) jo or ret repnz out das divl divb push xor ffreep gs dec or js jne in adc jae fisubl jmp popa stc lock sbbl into jb add xchg (bad) aad cmc jg mov scas xchg test fnstcw jmp mov xchg jp (bad) ret inc xchg sub xlat mov cs repz outsl adc popf mov dec aas mov mulb call and sub js inc leave cmp add fist call iret inc jecxz cmp daa loope int3 sub mov push loope cmpsb sub test imul jb or andl js scas sbb or xchg ljmp repnz xchg loope mov sarb lret mov jmp xchg ret fwait push shrl xlat cmpsb (bad) sub jp mov jecxz cli out mov push icebp dec pop or inc xor incl add lods dec loope das xchg cmp sub cmp mov mov dec xlat xor cli sahf mov imul xchg arpl adc cmp jle add jg cmp int mov add dec ja lock or mov mov loope imul iret or hlt cmp stc jae jo in fild loope jecxz repz mov mov cmp sub jae pop fistp jno icebp divl stc jmp cmp pop rcr sub repnz and jns mov jae mov stos ret ja in in daa rorb mov into popa repnz mov stos inc add repnz adc pop jne fcmovne fidivl lods lret cmp out jp testl dec arpl jg pop jl inc mov loop sarl clc and clc lock (bad) ja xchg xor in jo sbb add or dec out scas stos adc cmp mov xchg es dec into xor (bad) jge dec fcompl jb ljmp jns mov push sub sub mov push test ret mov xor push mov mov test rclb sbb clc in repz jno jmp imull push sarl stc push mov jno ljmp cmc shrl stos sbb (bad) test stos loope ficoml in jmp inc cmpsb cmp (bad) mov xchg adcl int or push (bad) jne cld out addr16 adc ss sbb sahf cmpsl lahf xor ljmp (bad) xchg in mov push mov in (bad) sahf vmread notb pop cmp inc mov (bad) mov fisubl mov pop rcl jb in pop jecxz imul dec xchg xlat mov ds hlt push dec xchg loop adc mov hlt cld (bad) aad fdivrs lods out test lret jbe outsl jge imul stos stc rclb mov stos mov popf out ljmp mov and lock idivl mov fwait in (bad) jl mov loope xchg inc movsb jl movsl out jl cmp js xchg add popa jecxz dec mov xor xchg lods stos in lods xchg mov add loop insl cmp leave iret test ja mov adc dec push clc ret and cld in into jl mov push lock movsb and call xor jmp movl jb mov mov cmp mov mov lods mov sbb fs (bad) out jae push (bad) sub jl pop aam xchg ja cld outsl addr16 mov push lock fimul shlb mov icebp sbb push adc sub rcrb jge ds aas adc dec lods cwtl jbe push push xchg mov mov push dec xchg pop into xor je divl mov or mov dec rcrb test in enter test add test outsb mov mov add sub sub out out ljmp dec test pop jecxz jp int test frstor bound fstpt push js rorl stos fistpll mov out jp (bad) repz mov mov repnz add movsl xlat mov mov call outsb dec jmp imul xor aam aam xor xor sbb mov jg mov aad mov stc cmp cmp or jb xor fnop ret push jae xchg imul mov mov lahf hlt add xchg mov fwait pop je sub sti mov push add add xor pop mov fdiv jecxz adc mov jo jle add mov popl fsubp ret mov shrb sbb jg (bad) clc xor icebp xor pop movsb stos iret movntq lods out (bad) inc mov xor jp out adcl mov shrb into fwait cmc or sub jns sub or fs cmp cmp mov je xchg data16 xor aas jp stc loope xchg adc (bad) iret iret pusha rorl test ret mov idivl and shr cmc xor mov xchg pop outsb outsl in add or and cmp outsb out gs mov xchg mov cmc (bad) mov aam lahf icebp sahf (bad) mov call shlb dec loopne add fdivs mov mov xchg mov nop out sbb (bad) xor test sbb push jae cmc repnz js mov in add mov mov push ret outsb xchg inc lock mov fwait sbb mov enter cltd cmpsl fidivr mov rorb ljmp cmp add int3 or test jmp xchg ss or imulb imul adc jp xchg fcmove out jmp pop or loopne xor shlb repz test jo sti jnp push inc cmc pusha mov sarb fidivrl fdivrs fbld jecxz cltd into aaa stc xchg push lcall outsb mov and mov mov fcoms clc sbb ljmp (bad) jb xchg cld mov imul rol hlt mov iret mov out jbe push or push sub faddl js shl jl repz out adc jns ljmp icebp rcrl out cmp xchg mov gs in rclb mov cmp xchg fwait std movsb int arpl fdivp jnp clc imul jp out test stos jne clc inc xor cmc jb push mov arpl jp fcmovbe fisubl cmp das pop cli adc cmp hlt mov jne repnz outsb imul push xchg mov test jno addr16 jl lds pushf sub in mov call mov mov hlt jmp ss cmpsl mov mov xchg bound fwait xchg fwait sbb sbbl mov fcomp leave imull js mov subb gs imul mov out or sbb repnz or or add add dec repnz std (bad) out inc xor bnd idiv mov test aad in lcall mov int scas incl jmp jo push ret xlat scas mov in scas fldl2e add rolb mov and ljmp jp xor pop lret iret clc and jnp or jp fcmovbe jb pop adc inc pop je inc mov stc out mov jno in jae lock in mov outsl ja ret stos roll sub sub or dec idivl lock arpl rorl insl jo mov das sbb jo sahf paddd jno (bad) (bad) cmc rolb jae stos (bad) icebp fcmovu mov shr jbe test iret cmp int jno idivb mov jge,pn lods xor adcl jle outsb (bad) stos jmp sub jmp mov loop mov test ljmp out and inc test shld outsb or cwtl mov fistpll jp jno outsb imul mov sbb or fdiv mov (bad) icebp fcmovu mov shr jbe daa mov das xchg insl idivb jb lock hlt xorb mov out and out jb es sbb cmc std call pop add or icebp ret inc negb adc cmpsb in scas jge xor les inc fisttpl inc add mov xchg jp fwait xchg (bad) mov mov push pop jbe xchg and movsl add fiadd cld lock testb shll repnz xchg into push in jns aas lcall mov xchg mov outsb jg std jmp movsl xchg stos mov sbb test lods shr aas xchg mov mov mov pop js mov ret cmp and scas aad test xor (bad) fsubs les mov pusha mov push dec test adc (bad) xor daa pop dec clc mov ficoml cwtl pop test inc lock push adc ret cs test test divl mov mov xor (bad) xor and icebp mov sub pop cmc shr insb flds adc andl in sbb sub dec out mov (bad) mov scas dec outsb mov mov scas ret mov cmpsb iret icebp dec mov mov fbld and bnd fwait or push into adc test cmpsl popf mov (bad) xor fistpll mov stos or stos out cmc repz jecxz mov jae notb jmp (bad) out xor mov and iret jp stc ret hlt mov dec (bad) scas inc inc cmp dec out into popa fldenv mov ljmpw sub lods jge mov fdivs dec xchg lret (bad) ds or fisttpl and (bad) adc fstpt fisubr hlt cmp pusha cli sub add mov repz or mov in jg icebp or pop pop xlat jbe (bad) adc ds in (bad) and test lret dec leave leave sarb adc sbb (bad) xchg sub xchg inc test clc (bad) mulb add pop fcomip add cmp aad mov clc shr cmpsb pop aaa xor sub xor jl (bad) outsb fistpl inc mov and sbb jl (bad) mov add iret cmp divb jns hlt cmp gs jno mov in repz pop push jbe dec imul stos and (bad) jbe jb stos in xor jmp jbe sbb and pop lods shrl das hlt je ficoml mov outsb sub xlat adc mov jmp mov dec stc jbe rcl enter jnp (bad) jne dec dec aad cmp shl (bad) lret or xlat sahf in aad add (bad) addr16 or add and aam leave sahf jmp out mov popf xlat ds cmp jp push in jns xchg sub in inc or ljmp cld repnz adc sbb jp fs sbb add mov jo mov or ljmp xchg push inc mov xor popl xchg call cmp pop xor clc cmp leave inc in roll imul inc mov icebp stos ds jmp mov ret cmc insl mov fdiv push xor pop lock ret in insl add jbe js jmp lock outsb sub pop xor xacquire pushf sub aad loop mov out mov xor push mov js test xchg adc and add idivl sbb lock xchg dec (bad) fimull jae pop notb aam xchg cli hlt jb jecxz into shrl fucomi loop out into xlat jne jg ljmp fcmovnb mov dec out in and clc sub fbld xchg rep inc (bad) icebp enter jb jnp divl fstl call or dec pop out push jne out pop jb jae addr16 leave dec popf test rcll cli js out jge add or adc xchg repnz push push cld mov out arpl bnd lret (bad) stc cmpl xor inc pop out (bad) decb mov jmp sarb adc or in (bad) imul mov sub pop push in jnp clc jb test rcll sub sahf mov mov cmpsb xchg insb cltd cmp jne push repz pop out xchg mov xchg mov (bad) insl push xor inc stc test loope imul insb test mov test mov lret iret mulb repz jge (bad) xchg mov pop cltd ljmp mov lock xchg adc lea mov or adc pop mov iret jae movsl sub repnz adc and scas jne jno outsb cmp cmp lock jg imul in fldt jecxz es mov or jle jge rolb lods in imul stc xchg outsb jne pop mov and xlat push out mov outsl out dec cmc mov rcr sbb jmp cmp pop (bad) pop fcoms clc push adc mov adc outsb lods in divb test pushf testl mov aad movsb ds jns jl vmovddup pushf imull dec test dec rol xor ljmp mov cmp ret out and inc outsl (bad) cmp jae xor cmp xor mov lock fucomip cli dec sbb fyl2xp1 ljmp jecxz xlat in cmp lods dec fdivs sbb adc dec mov fdivs dec jo ja cmpsl push xor add popf sysret and push add mov mov jmp or xor xor mov loope movsb pop mov lahf pop cmp out ljmp sbb cmpsl out mov scas jb lods jle das js imul (bad) fstpl repnz add xlat lahf xlat jp push lret mov clc rclb idivl imul mov lods repz mov (bad) jae mov ja mov jo push clc xchg xor loop ficompl dec cmpsl pop ljmp xchg (bad) idivb jnp mov stc aad jne mov sbb push jecxz pop jb arpl jne fsubl cmp aad jg int3 mov out lods xor xchg outsb stos adc test fwait push movsb in xchg push outsl jne ja movsl mov fst adc mov jno cmpsl leave call jb push inc je divb or pop movsl xchg jo das clc icebp imul outsl mov arpl (bad) xor mov mov icebp cmp cld push (bad) ja mov xchg mov stc jmp jno inc jo scas test (bad) cli stc mov (bad) pop pop fdivrs mov outsb aas xchg sbb insb outsl daa lret adc xchg jp mov imulb mov sbb add fwait xlat jmp icebp clc xor fldcw fwait js movsb jl or jae mov fild out iret and mov xchg jno push daa sub testb into mov int call xlat lret loop aad sbb shrl inc imul jnp jge enter dec jns xlat loop pop xor pop xor mov aas mov ds scas adc inc adc out pop cmc rcll fstps lea inc je sbb jno aaa xlat jns xchg outsl and cwtl js sub scas loope aad push mov inc mov inc jns fnop clc in add jae sbb lea push outsb fldt and lock jge shll xchg push stc scas fdivr jl lahf pop out imul fwait iret or shlb icebp mov mov je fucomp pop clc xchg or cli dec bound jbe xchg mov clc lcall dec sar xlat add (bad) mov push cltd sbb fwait movsl pop outsb lods call push in xchg mov aad push add mov out adc mov mov out jbe insl jl xchg jecxz inc in jae sbb mov stc cmp js or cmp mov out lret xor xchg fcmovbe cld xor lret mov inc push mov mov and pop and jmp lods pop cmpl pop sbb test and in xchg in shrb imul sub and jmp mov movsb or xlat leave jecxz test mov stc dec out and cmpsb sbb repz add repz cmp sti mov mov jmp outsb mov imul aaa jae leave (bad) iret loope mov mov fistl jae stos cwtl pop mov or xor xchg and inc cmp cs mov sbb or pop setg stos stc arpl hlt popf or stos notl pop dec sbb cmp adc xchg jp jae inc cmp mov add fidivr cmp mov sbb xchg xchg cli pop jp push jmp in insl cmpsl push repz movsl call clc loope js or fidivr outsl hlt call push (bad) cld roll pop icebp in cmc popf outsl mov popa pushf js pop xchg mov jae outsl jno cmp mov jge mov inc add sub out repz push mov sub (bad) leave mov out mov adc mov xchg sahf out sub mov and test (bad) in mov gs (bad) fdiv jmp imul inc (bad) bnd imul movsb gs enter data16 jb rolb mov maxps xlat push xor dec stos xchg loope (bad) out std jmp xor jmp or cmp mov mov ds or mov shrb fldenv icebp lahf mov or sbb outsb push jb sarl loope add jnp mov lret jge int dec jg cmp xchg mov mov or cmp popa push cmpsb pop cltd addr16 jg xor xchg push (bad) mov jmp rcl and ja nop out rolb cmpsb jbe inc cmp ja pop lcall and inc out xorl pop sbb pop inc (bad) sub xor pop arpl mov loope mov sahf pop add gs jmp ja lcall mov movsl sahf mov adc icebp in insb in es cmp jbe cmp mov or ficom mov in clc mov push aaa outsb cmpsl mov fsubr push push xor movsb or push repz imul hlt bound adc cmc mov push (bad) pop and out jno jge mov test pop mov je pop stos imul mov arpl xor out ljmp jae cmp outsb out (bad) clc sar shrb sbb jns les push (bad) jne je loop jo xor dec clc sub arpl inc pop mov mov cmp cmc stos pop lcall pop xlat loopne push shrl dec inc cmp cld jl jne jo push fnsave lods cld and lods fsubr incb jnp push sarb inc inc xchg test push push and or lock push cmp mov subl adc data16 push hlt add out stc push push mov jle push pop push mov aam xor add lds arpl mov fcmovb (bad) aad add cmpsb fstpt xlat jns add repz jae rcrb jmp or cltd sbb fs push xor jmp push mov adc push cmp (bad) (bad) in jns jno lock in ret outsb popf gs rorb shrb mov fbstp jo jb ss sbb pop push fldcw call popa lcall stc jno js push pushf mov mov jno adc inc mov lods jp jg cmp out jecxz in ret das jb lods (bad) fstpt xchg in arpl iret cmp jp js cli lock sbb xor repz in jl push adc addr16 dec jnp les sbb movq jecxz outsl pop mov and cmp sbb mov lret rcr leave jo cmpl lock push ds repz sub insb rorb xor lret adc jbe jge jmp andl mov jne lods jecxz cmp mov adc outsb daa sub add jnp add sub jmp out xor outsb xchg cli inc jmp sub lret rol mov mov cmp cmp mov lods push aas lret ret ljmp push pop cmc mov out adc xlat repz mov int (bad) jb in loop mov jmp mov xchg xchg sub push test cmc out xchg xchg mov xor loopne xor and xchg cmp cmc jnp mov rcrl cli pop lahf mov movsl sahf jmp xchg jecxz mov push jnp jge imul ja ss mov fucomi xor outsl (bad) sbb jmp jno (bad) sub xor in notb ret ficompl addr16 sub movsl inc test enter les xor in icebp fisubrl mov int3 (bad) test xchg ret aas not jo pop mov xchg out movsl ljmp adc (bad) rcr notl std push push les pop flds das xlat imul iret cmpsb jo sti out movsl jbe movsb xchg out in out mov adc cs dec pop ljmp xchg adc add int3 and cmp inc xchg sahf movsb push dec add stos jecxz push loop js adc pushf aam sub dec mov dec jno shl mov loopne arpl mov (bad) leave mov fwait imul mov gs lds test aaa movsl mov test xchg test inc mov dec fwait roll cmovo out or adc das pop mov andnps adc xchg xor ja mov clc cwtl test pop rclb mov jle fwait xchg cmpsl sti pop jae out adc cltd aad (bad) enter lcall push pop pop xchg dec leave inc xchg out (bad) mov out iret test (bad) mov ret xchg mov xor in dec jmp push xlat divb (bad) mov jo lods fldenv xor pop mov test xor test or jae push stos inc or (bad) mov std test (bad) jmp xor pop add adc js (bad) sbb jnp mov mov fsubrl or rcll jecxz pop shlb js jecxz test sbb pop loop mov rcl add scas xor mov jle aaa fstl cmp cmpsl movsb dec idivl stos mov clc push push rcl cmc out stc xchg jae jmp fadds mov mov cmpsl (bad) xor data16 aam xor ja (bad) xchg sub push lret nop jne mov fildll adc popl cmc jo adc rorl add adc inc fcmovnb add int3 inc (bad) jno add mov sbb mov xchg cltd mov xchg sti xor jae outsb insl xchg xchg mov mov out repnz jg mov mov in xchg (bad) mov jmp dec push mov leave mov jno xor jmp in (bad) int fwait out mov rorb jmp sahf fild jle xchg movsl adc mov test jmp (bad) jb mov jae mov jmp jno (bad) out jmp inc scas mov mov incb lret inc lret movsb arpl in mov cli dec call fimull cltd mov movsl fs jbe ja jae mov cli in xchg cmp mov cli cltd ret lret dec jecxz leave cmp std lahf mov fdivs int3 mov mov stos hlt aad pop and dec shufps pop cld mov mov fiadd jo mov shlb stc xchg push out push scas std ja scas (bad) dec xor ret inc sti les sub and loopne push xor mov jb xor inc pop dec mov xchg (bad) out lcall shr ljmp jae inc pmaddwd gs or fucomi jbe add testb out jns add bound jnp push (bad) enter mov xor bound popa lret add int3 add int3 outsb (bad) push out arpl gs mov lcall cli lods fsts xor cmp sbb cmp cli cmp icebp fidivrl mull pop sub shll repz test cmp adc fcmovu xchg stos stos ljmp jno lret test sub fidiv jecxz sub into popf lret mov mov jno cmp mov jno stos mov ret call ss xchg jnp cmp pop mov outsb mov xlat in je mov (bad) arpl mov xchg in in sbb pop jg (bad) jb in push fnstcw xchg loope xchg jae dec lock xor (bad) cmp mov stos imul or repz gs or cld in xor insl mov jns lods pop push jb shl (bad) mov in loop xchg movsl cmp mov push fwait xchg movsl stc dec andb out pop xor mov divl out sub mov add jmp add repz mov xchg inc jno repnz pusha jb jmp and aas ljmp repnz icebp pusha out cli cmp (bad) out idivl fdiv hlt repz repnz fnop imul cmp addr16 push (bad) mov mov std cmpsl jae dec dec (bad) mov mov iret sbb fistp ds xor (bad) out mov (bad) mov mov mov fildll or xchg insl jmp push sbb push lds push scas (bad) sbb ljmp in jmp mov jbe mov int3 (bad) jmp int mov cld scas fdivrl lea repnz dec jb jmp sub fstps mov fnstsw icebp das loop repnz jb jmp mov push (bad) flds jb repnz shrb cld pop cli in jmp jmp out in cmp jecxz imul loop icebp mov sarb pop pop push test pop pop clc mov sbb push addr16 (bad) idivl cltd jecxz mov in arpl imul fcomps out mov int3 imul xor lret add movsb lret cmpsb jb fnop push adc test mov in insl push cwtl fcmovnb adc or mov lret sub loope xchg or pusha push je sub mov mov inc push adc test out out pop stos scas cmp adc add scas sbb rcl jb mov mov loope xchg arpl fcmovnb lods mov mov iret pop fisub lods bound gs inc lcall sarb int arpl add stos scas les and bound xchg (bad) xor pop fs pop lcall out rorb push cmc pop in stos cmp (bad) test pop and out xchg loop xchg mov sti int (bad) clc xchg jnp sbb xlat jno scas (bad) cld ja (bad) popf jg (bad) jl imul icebp pushf lret in clc add xchg (bad) xchg daa mov fbstp jle ljmp stos leave repz mov inc fnop sbb out jg push jbe out test in lret push xchg test cli ret xchg mov stc fildl mov adc xchg pop mov jo mov dec pusha mov mov out out mov stos inc not sahf ljmp jmp cmp rclb movsb xchg call loope aad (bad) mov xchg add cli aaa inc xchg or gs aam enter mov xchg ficoml call (bad) jo cmp xor bound rorl jne into sbb out adc fwait jecxz (bad) cmpsb fwait or iret cmc lret inc cmpsl lock (bad) push pop xor xchg xchg es cmc ficompl cmpsl push mov sbb cli into inc mov inc fldenv rcl cmp cmpsl aaa (bad) adc jp push in lret adcl xor ss pop (bad) xor mov xchg xor adc loopne loop mov mov mov notl test jmp lret cmpsb std ficomp out jo icebp stos outsb mov inc fdivp cmp mov jne lea add lcall xor repz jne bound add adc jne imul jae idivl ja inc rorl outsl aaa scas iret or outsb ficompl lret fimull ljmp aaa pop leave clc (bad) outsb sbb adc mov dec xchg in mov shrb cli dec lcall mov mov dec and mov arpl jge shrl gs pop fdivl js mov jge cmp push out lahf dec mov repnz leave mov out pop mov cmc scas loop out cmpsl jno lock jbe aad mov xor mov icebp xchg (bad) mov (bad) jo call adc icebp xchg jo (bad) push jl call xchg mov mov icebp inc jb fimull divl push in jo inc divb cmc stos pop cwtl jp xchg mov cmp je lock sub fstps xor pop stos mov mov cmp repz fidivrl push lret mov sub shrb adc mov mov ljmp inc sbbl lret cmp or pop xchg jnp out cltd mov and fwait pop adc mov mov lods jno jmp jb jle mov aaa call mov push (bad) jmp std cltd insl outsl jmp ja outsl fsubrs scas push jae adc test xchg enter inc xlat call scas jbe addr16 jecxz lahf jecxz shrl sub lret call test pop jmp jbe mov inc icebp sarb ret mov fs xchg add push iret fst mov jae xor out bnd mov jns adc cli xchg jmp xchg cmc mov (bad) fcomi add les stc xchg cmpsb adc jge xchg push inc repnz fwait loope pop jmp adc mov pushf js adc (bad) xor mov aad mov out (bad) data16 jo or in mov fisttpl sbb stc xchg jo iret repz shr stos mov js jp dec movl loope fnstcw push mov add hlt faddl inc outsl pop aam pop lock pop out adc fidivrl adc xchg mov icebp push (bad) xlat pop mov sbb repz cmp or cmpsb add in mov pop cmp xchg mov cmp mov add xchg jecxz add stos cmpsb pop pop mov outsl rolb xlat push mov imulb stos xchg in into jp pop add cli adc dec movsb lods cs lcall test out in ret arpl push fdiv jnp xchg xor push add enter mov out adc mov mov ja in cmp sahf leave fcmovbe insl test jo cmpsl idivl xchg mov addr16 mov add adc test aaa and jae andl fist cmp orl adc (bad) jb add mov shlb lds xchg adc icebp or cmp aam dec mov je inc jbe rorl push or dec stos dec xchg rcrb push mov inc push sbb mov es jle xchg xchg dec sbb mov xchg mov mov pop out (bad) xor pop stos mov and fdivrl ret add out leave stos scas inc xchg mov adcl xor xchg xchg int3 sbb ja lret ja cmp push pusha repz scas and mov sarb cmp cmp shr dec pop sti mov push repnz dec inc in push mov jb jecxz nop sub test push repz sub pop adc fucomip cld push jb and jne call cmp outsb out fildl out push push sbb mov xor mov adc mov repnz scas outsb imul pop push jmp fcoml jle mov push jns adc adc jge mov repnz cmp mov add (bad) in outsb and or jns mov jbe gs lds lods sbb fcmovu outsl jb stos ljmp xor lret enter loope pop insl push ja adc arpl xlat adc stos mov pop jae xchg cmp mov and repz popa inc int3 jmp jg cwtl mov mov shll stc xchg adc aas cmp movsl int mov push into test mov jb xchg clc adc xchg jbe in ja clc ljmp mov imull mov (bad) mov mov fwait dec jmp call mov add inc lods xor imulb dec (bad) cmp in dec xchg cmpsb pop cmpsl mov push dec sbb jecxz hlt sub sub push int out ljmp pop push adc xor mov push dec sbb add push jnp jne flds push jge stc adc lods (bad) leave ja in pop out stc neg lods add pop mov stc cli xor xchg rolb mov sbb adc stos fadd cmpsl mov (bad) imul adc xor lret xor adc adc ret sub ja bnd stc add pop aas cli cmp jb xchg mov cmpsl jge lds jp pop pop out xor xorb or imul mov gs mov icebp rorb mov pushf jmp cli jmp daa test jo cmpsl or cmpsb pop inc hlt mov fld or jb stos jo lret xchg xchg dec cli insl mov add jno jecxz imul dec negb lods ror pop jo daa or andb js into cltd imul jns dec jnp adc loop xchg mov sub (bad) data16 clc ja jno (bad) jmp stc test xchg xchg into xchg rcll pop cmp or adc xorl xchg jo dec inc lods mov daa and xor pop ss xchg jmp ret in test mov mull arpl mov dec mov sbb adc (bad) xchg and div xchg imul test adc push or pusha fbld mov scas mov jno insl mov xchg jp gs xchg aam (bad) (bad) xchg push xchg daa pop jmp fsubrs aas test mov mov cmpsb inc jp cli clc mov mov (bad) mov arpl mov std sub lock movsb pop and test jno ljmp dec outsl enter jmp sub pop icebp xlat sub xchg nop dec mov push fcoms (bad) cwtl repnz stc mov pop jbe push in cmpsl rcl loope scas (bad) out movsl or das pop addb xor lahf out ja insl hlt (bad) pop push insb imul push mov hlt jae push mov mov movsb je xor mov lret add pop fcoms mov test int sbb shrl adcl mov pop repz shl fnstcw sti repnz xor or cwtl inc mov call sbbl jmp jb out (bad) add aad ljmp pop xor push mov in mov adc dec in (bad) xchg (bad) repz dec cmc mov lock decl in insl stos jmp adc test jmp xchg imul push (bad) xor pop lods ljmp out aad pop in mov jb out ret shr mov jmp out imul clc push call xchg pop test push insl fistl arpl or enter movsl (bad) repnz and inc sbb adc inc adc stos fstpt psllw ja in inc pop sbb mov pushf pop push mov fnstcw add xor aas adc mov pop (bad) mov sbb and xor (bad) cmp sub xor jle jp jmp test mov pop int3 sbb enter inc pop insl xor fdivs or iret adc xchg xchg xor add shlb jae outsb jecxz call push push mov mov dec cmpsb jmp push jno pop xchg cmp pushf repnz dec add pop jae test cmp xchg pop push add lcall and fxch insb sbb fcmove (bad) mov xchg stc lods (bad) or xchg inc and arpl mov inc and jno repnz cld cmp push and in aam aaa lcall jle test movsb repz cmpsb xlat jl int mov jl pop sub int3 dec xlat or (bad) xchg (bad) popa imul dec int and pushf xchg (bad) xor cmp ret pop pop stos and sarl enter fpatan jp mov or xchg adc xchg pusha sbb (bad) idiv xor pop in popf mov repz in mov js add adc adc (bad) popa inc rcll jge mov cld stc jg gs xchg lahf cmpsl (bad) (bad) mov test stc mov cli mov clc xchg or (bad) xor push ror les fildll test hlt in roll or shrb js mov ja push ficoml repz ja (bad) xor addr16 aaa fnstenv divl ja jge push cmp mov repz sarl jae mov jecxz mov pop inc fnstcw mov xchg test jnp das push mov xchg (bad) fldenv repz ja inc lcall mov lahf daa mov inc addr16 inc enter call arpl stc ficompl add jae dec mov lods xchg push mov mov popa in ret repz lret fxch adc mov out jae sbb in sbb mov test movsl or or out adc or arpl movsl cmp mov movsb iret jne dec pop sbb scas mov cltd imull pop xor push push lret lret lret hlt push push dec (bad) outsb and movsl push (bad) dec pop xor shlb cmc fimull sub daa xchg and pop loop out mov fildll out movsl dec jb iret stos pop imul out divb movsl movsb cmp pop mov mov inc lcall mov jbe pop sbb jg negb lcall or xchg pop div xchg inc imul ret sub mov nop mov clc xor mov mov mov cli dec lock je pop out push (bad) in jbe stos test inc inc fcmovnu xchg jb lcall fistl jle add pop mov cmp enter adc pop mov fldenv std mov dec jge cmpsb jmp jg jmp cli jno xor cli movl repz adc mov inc jmp cmpsb daa xor iret jmp push xor xchg and sub into mov data16 lcall fdivl sub je mov jle push jecxz add jg mov sub out cmp seto cmp cmp insb and outsl sbb jmp ljmp (bad) dec clc mov js sbb ja jmp jno jge cmp stos mov (bad) iret sbb jnp push jb adc rep data16 cli cld jb leave test mov mov push adc inc dec or js inc jle icebp fisubrl jne mov repz xchg outsl mov xchg xor scas pop pop les xchg stos (bad) notl (bad) xchg popf jo fxch mov ljmp outsb xchg dec sti js fildl xchg lods mov test addr16 stc test cmp andb (bad) scas imulb inc jb and pop std mov pop scas sbb pop leave and js adc lods add xor and in push fucomi popl push shrb out in stos jl and xchg fidivr jnp in movsl cld nop insl into jl das into jp pop or push cmp fdivr dec stos lods je insl int3 repz mov xchg movsb stc sub jmp (bad) (bad) lods inc jns cmp iret sti xchg rcl test ljmp faddl lcall push adc mov icebp inc stc xchg lods jecxz outsb vmptrld cmp ret rol rclb insb das inc loopne repnz movsl cmp call and outsb adc aam out out fdivl (bad) sbb cmp sbb mov loopne rcl cmpsl rclb out sub rcrb out jl xchg jb xor int mov cmpsb cmp pop jecxz ret iret adc insb (bad) enter setnp repz push daa lods push int3 inc xchg (bad) and xor sarb jecxz push jbe rolb xor movb mov ja jae mov lret idivl scas (bad) stos cmp rolb inc loope jmp stos loop,pt insb (bad) pop or fs jmp stos pop inc sbb ret stos lods incb neg xor add iret ja hlt movsl test lods lea call ss xorb inc xchg mov jne push and mov stos xor stc jge int3 and call repz and pop rcl call xor fcmovnb fwait push in dec leave jns paddsw mov mov fidivl and movsb aas call sub pop xor and lock andb dec cltd ficomp loop loopne data16 mov jns mov xchg and or xchg cmc out mov sub dec ret std push imul mov xchg xchg pop clc fdivr and jecxz call fbstp mov sbb xor or clc je loop lods (bad) scas pop (bad) xchg push mov loope jb jo and push and sarb fidiv dec ja gs jb hlt xor cmp aaa movsb jne push fnstcw es rclb fst scas mov iret movsb fist std push shlb fwait dec sub mov add xchg mov rcrl into fcmovu test jbe pop and mull lahf (bad) and (bad) push dec adc jl jp xchg daa loopne inc (bad) push in and cmc lock imul mov xchg js int das fidivl fucom out repz push mov jg ja stos mov inc mov and inc mov out aaa cmp cmpsb into jns testl push repz mov fnstcw repz fldenv jmp xchg jb repz ja sbb jmp sbb mov fnstenv ljmp pop ja pminub jg imul push pop stos daa add call (bad) adc rcll sbb in inc nop push jns push cltd push out jg lock jb ficompl jmp out repz jbe xorl mov (bad) pop out les into xchg sbb aaa mov neg (bad) repz lcall mov push lcall (bad) dec or call out and iret jecxz push push sbb ja out adc fldt xor mov dec dec iret add rcrl pop inc (bad) xchg mov loop arpl mov adc loopne mov dec arpl out pop rolb ret iret jb inc insb sbb jg jo jmp scas int3 cmp adc mov loopne cli pushf popf xchg xlat (bad) dec pushf in adc aam jo jmp imul fsin ds pop adc ja in jp out leave xor in sbb xchg call xor mov (bad) push ja divl fs (bad) ja xchg test jnp in outsl jl dec in sar adc ljmp (bad) idivl inc lock inc mov xor adc imul jecxz jl test clc adc scas add out scas adc mulb ja adc (bad) arpl push xor fwait sub mov scas hlt gs adc out imul sub bound mov loope mov test jmp xchg es inc push loopne repnz mov or fs push repz aad ret xlat push cmpsl lret fcomip stc dec stc clc inc cwtl testl mov repnz les cld push rep divl (bad) jbe jmp fs mov icebp and push iret fdiv fsts sar push call rol fstpt sbbb lret pop lods stos cmp xor jbe xchg dec mov add ret or or imul repnz cmc and das jno,pn push push jge out pop scas movsl fwait popa lods mov add addr16 cmp popa lock adc jecxz cmp test xchg pop mov add and cltd outsb and bound int pop loope fcoms or push push jmp fucomip scas add daa push movsl repnz movsb jb movsl (bad) repnz insl xchg ret fstpl jmp flds xchg jg lret (bad) in mov jo xchg repnz adc es clc ss stos cmpsb mov sub adc (bad) ss mov inc fildl sar lcall stos fcomps mov jnp popf stos fidivl jo jnp stc jb in repz sbb ret dec add lea in divl inc loop gs movsb stos out mov mov jp repnz sbb out pop pop out xor mov es fisubr ret dec test or sbb sbb push divb fcomip out pop pop out js jnp pop jp dec fsubrl push daa push mov js jnp pop repz sub mov mov stos jmp xor add cmp xchg jmp sahf sbb mov stc icebp sar (bad) rolb sbb loopne js mov enter mov repnz mov cmp fidivrl jmp dec mov (bad) dec xor je lods sar add and jge stc iret outsb mull sbb dec jmp dec sarb xchg dec (bad) popf cmp push ja loope ret jmp sub and mov les stos sub mov xchg mov loope sarb dec stos out xchg jmp fsubrl sub scas subl (bad) sub je jb or mov dec lock pop mov cmp ljmp cmp jg out adc shl push xor or int cli cmp jge outsb mov cmpsb imul add mov mov out pop jb icebp lret mov out xchg lcall in or cmpsl sbb add xor add jb and into adc js outsb xchg aaa (bad) stos stos ss cli jl push adc push popa mov lcall mov pop loop test jbe jmp test arpl adc repz mov push (bad) fcmovu adc mov loope call adc popa ret ja add add (bad) dec dec adc stc push dec xor mov xor push inc mov sub sub (bad) divb jp xchg dec (bad) sbb pop into add and jb fistl cmc push fdivs clc jno lret shrl cmp pop jmp lds js cmp cmp lret xchg xchg ljmp scas lcall jecxz xor pop xor jmp and sbb pop push push add aad out jo (bad) iret xchg into inc and and iret push mov rcrl or xchg hlt daa je,pn xor xor fsubrs loop fsubrl fmull fsub out jecxz or add lock stos or pop jnp lret mov jg sub mov sbb add lahf and movsl inc mov add cltd aam pop int inc xor xchg and adc mov jg lock cmp call cli or sub shll (bad) lods divl in decl cmp and ret ljmp cli cmp or push xor fstpt lcall adc pop xor popf push (bad) arpl leave lea mov test repz sbb mov jb imul pop dec lret xchg mov jb fstl sbb pop in arpl (bad) or cld movsl xor mov jmp or mov mov lods clc aaa push pop (bad) mov cli dec ljmp fstpt (bad) cmpsl dec xor lret cmc xor or in ja stc sbb push and (bad) mov stos pop dec and movsbl mov icebp imulb ss push fwait inc xor jg popf push jne pop test inc jmp in sub out jge jb (bad) cltd jmp sbbl ljmp jae aaa fcomip mov add jge fcmovnu xor pop cmp repnz cltd (bad) out xchg dec loope cmp leave leave out mov xchg das popf clc or adc sbb jmp hlt add loopne mov aad arpl stos iret add mov fstps xrelease (bad) push dec sub jnp clc flds test mov mov iret adc icebp notl mov mov adc rol add shrl lock mov jecxz jb xor lds xor cmpsl pop shrb push push icebp pop shr movsl imul jbe mov inc into mov jmp add mov push in sub nop mov int3 mov sbb test out dec add lahf push adc adc fucomp adc pop sub jmp insb int3 mov in clc stos shrl push jb push (bad) mov enter jp or aam fdivl lods negl cmp pop or arpl fwait add push mov (bad) jle iret xor adc lret test mov cmpsb jno inc mov lds xor in xchg in iret arpl cmpsl sub mov jecxz dec (bad) cs sarb iret mov stc iret mov (bad) dec iret mov jg mov xchg fucomi mov xlat mov int3 pop rol dec and aas adc pusha adc repnz out cli loop pop ret xchg shr mov mov mov fstps aaa hlt jno mov idivb jmp jl inc mov imul mov cli clc pop idivl imul out ret fcomps leave rcll testl jmp fistp fwait xor js or mov push mov fs mov fdivrl xchg gs fdivr fdivs orb test pop out jmp xor mov sbb mov fcmovu nop (bad) xchg pop xchg fidivl ljmp inc lods imul pop pusha imul gs jecxz (bad) fdivs in adc lock sarl inc popa fs pop out mov and xor repnz lret adc xlat jl sbb pop cmc icebp fdivs push sbb (bad) imul les xchg mov pop mov lods aad cmp in jge mov jae push pushf mov sbb jbe repnz (bad) repz stos ret xchg sbb adc adc push inc xlat aam and sub test mov push xor dec jae jmp jae jmp jae out int je enter or xchg sbb pand inc adc adc (bad) ja jp jmp jne test dec or mov mov cmp or jecxz adc and and divb ficomp pop fstp out addr16 pop jg scas repz push aad dec mov jmp sbb mov jno es jbe or das add icebp lahf sti pop jmp adc int mov and imul cmp enter xchg out fcmovbe xlat jmp mov (bad) hlt mov or popa es sbb adc adc jo mov inc and jmp jmp fimull out jle shrl mov add call leave imul loope push sub jle leave cwtl pop jns xchg pop gs adc rcll pop xchg xor mov cmp xchg push sarb adc mov sub mov sub loope or sbb mov movsb inc fisub mov mov pushf lods lcall cwtl mov testl and dec mov xchg inc xchg aaa cld fdivrl clc sarb js lret mov scas xor dec sahf mov mov mov cmp js out dec repz stos pop xlat ret jne pop mov aam lods (bad) mov js out fcmovnb test in mov fiaddl popf test adc stos cs push dec shrb lcall jb dec ljmp or out xlat ja stc roll call or icebp xchg std (bad) pop jmp loop cmp out mov addb mov fldt ja mov xor movsb mov push jecxz loope dec ret inc rorb lods xchg or lcall add mov icebp jmp cli mov xor jbe add ljmp ljmp repz enter test mov mov sbb ror mov repz fdivl mov daa fstpt test cmp sahf xchg lahf mov mov cmp fidivr aad jl mov and or fcmovnu cmp jecxz (bad) mov imull movl dec or icebp (bad) or (bad) dec pushf dec (bad) sbb pand insb push pop ja adc test jae xchg cmp imulb adc popa jle pushf andl pop jle sbb sbb sbb mov aas (bad) lahf inc sti mov jno mov sbb mov in out mull cli test inc iret in jp repz hlt push (bad) (bad) in ja out xchg sahf test jb clc dec scas popf ror mov sub mov jge jmp lret mov rorl insl push data16 mov inc leave mov xchg int3 jo (bad) xlat arpl pop enter in pinsrw popf xchg out loopne fmul sbb stos dec es mov inc es jns in ja jecxz fxch add jmp hlt leave pushf mov jp ja cmp add (bad) lahf insb jae fldenv les mov andb std loope jl call inc xor sub add repz fmull aam adc lret lret jne cmp in scas leave hlt jo (bad) enter inc jmp mov ljmp les out rorb adc and and mov dec jge mov adc mov loop xor out data16 or out fild cli add mov mov (bad) (bad) push and adc je jp mov (bad) sti mov in insl mov stc xor mov test rclb cmc fisttpll repnz adc fnstsw mov mov repnz js push adc sbb xchg iret sti lret idivb jo test sti cmp cmp in mov add stos mov mov jl mov mov mov jb test clc cmp push or aad lret add data16 jmp mov jmp inc mov xorl adc dec out jg mov mov (bad) adc in gs repz subb sahf aas ljmp mov (bad) ss inc inc xchg int3 inc mov cmpsb adc aas int3 sub int popa clc xor xchg test sarb and pop xor xchg scas cmpsl jae mov aaa and or movsb fwait inc test out xor jle xor popf lock add aas mov fstpt fnop rolb mov adc ja push jge movsb clc push and nop fsub xor cld mov fisttpll jle shll adc or daa lcall icebp dec fdivs (bad) mov out push jmp call aad dec (bad) mov sub xor mov out cwtl stos dec scas cwtl mov push lods cmpsl xor jo jecxz jmp int3 pop push scas out mov mov inc xchg in push jnp push loope stc sbb sbb push popf mov les loop outsl xor stc xor pop bnd movl rorb jg idivb adc lahf mov hlt stos test sbb lret cmpsl std xchg repnz imul adc lret add insl movsl mov rclb xor jp (bad) jno mov jmp sti pop jns jno fbld push f2xm1 (bad) shrb scas jecxz in (bad) shrl jne stc fcmovne test push jno movsb inc jne lahf fisubrl stc in outsb add mov cltd jae cli cld test jmp idivl fs adc or dec ja std adc mov call xor jb xor push shrl outsb roll mov movsl jp inc cmp testb push ja loop xchg aaa fcoml pop mov stos dec out jbe int3 cmp inc pushf aaa out xchg cmp (bad) jns shll rcll dec xchg pop repz and sbb xchg test mov jg adc push dec push js jae sarl add (bad) xchg xor push imul mov les mov inc lcall in clc mov out adc inc mov (bad) hlt fstpt repz jae sbb mov pop cmp inc jmp or cs sahf lock xchg xorl sub lret ss and out lods jmp test cmp dec adc lock jmp repnz gs mov out cmp sbb xor and or jb jmp cltd sub popf jne psubsw clc xor (bad) je xchg stos pop ljmp lds arpl inc add int3 mov jmp iret mov and jno movsl push adc stos sbb mov mov or sbb mov sahf iret lahf icebp jecxz or lret jb mov mov xor popf cmp out je stos dec insl (bad) adc jmp adc sbb cmp in scas test leave inc test jo pushf jns insb icebp int3 xor dec jbe sub int add jl jmp (bad) push loopne out sub jbe ja into push mov loop aad jns jo jno out mov (bad) cmpsl pop (bad) sbb fucomi adc xchg xlat mov data16 jnp push pop and ja jo,pt fnstenv movsb imul jo inc mov adc jnp xor ja cli clc pop mov jns jp loope pop mov or loopne (bad) and mov xchg repz sub xchg out rcll jl pop jmp cld push mov push mov and jnp jne jecxz jp wrmsr jge repz mov scas jg and xchg in (bad) not in jp outsl xlat jae push (bad) ja aad inc clc mov in jb lds xchg cmp lahf jl lcall test in cmp ds mov jnp mov mov aam and loop out aam mov mov mov jb icebp jl into jle adc test movsl ja mov mov jecxz mov or loop (bad) lods jns pushf out mov mov mov int3 xchg dec clc and sub std jbe (bad) cmpsb lock push dec popf enter lcall out shrb pusha jp ret or enter stc mov cmp mov fisttp ret mov je cmp xorl jmp mov cmp dec mov out mov sbb pop stos testb xchg icebp jae or stos data16 daa mov add push fs enter ret or jno mov aaa and sub int3 mov mov lock sbb repnz aas outsb mov outsl hlt in pop cmpsb pop inc cmp rol xor push cmc std jne inc pop xchg or es xor daa push pop out xor data16 out xchg or out js sarl (bad) test cmp adc inc push fs fwait xchg or in outsb insb mov cmc adc fs xor xchg xchg in js fidivl (bad) loope sarb mov outsb ja stos adc loope jecxz mov cmpsl mov adc jno outsb push stc xor jbe data16 les pop call gs cmpsb in xchg scas inc sti call adc loopne popa das cli sbb sub repz divl rcl sbb ss xchg fildll andb out (bad) and (bad) mov test fcmovu ja mov outsb jge mov or jmp pusha ja stos dec jmp jae add outsl dec mov xchg mov sub xor cmp sbb subb sahf add push xor mov pop sar mov ret push jecxz jnp ja dec out shl jmp cmc cmc add mov (bad) adc or add adc pop jbe dec jb xlat pandn loop mul xchg mov jo ret fidiv shrb xor add stc mov incl adcl out out test icebp cmc fadd ds shl orb add (bad) mov mov or xchg gs ret jns push repnz shlb mov cmp dec fwait xchg mov jae pushf push lret mov cmp sub out rcr inc inc flds das jae inc test sahf mov cmc mov mov pushf or xchg addr16 mov xchg test jnp fsubp imul or xchg lods ds cltd xor out jmp fbstp fistp cmpsb lods inc nop outsl int3 fldl lock repz faddl mov and cmpsl daa (bad) es ja shrl sub ret jecxz fnstsw jno mov jmp fadd xor jnp mov gs add jnp (bad) jns mov dec push add inc jmp xor and movsl push lock jge fbstp jne mov hlt inc shll outsl push mov jmp imul lods cli adc sbb xor int3 jae subl nop (bad) cwtl mov insb adc xchg ret push ds enter aad xorl xchg adc or scas xchg stos (bad) jp pop aam xchg out popf movsb dec push mov scas xor les pop push in notl imul stos cmpsb mov ret (bad) jae (bad) dec inc rolb dec ja shrl out js xchg jmp add mov mul xchg das xchg sub ret jmp jnp mov mov ljmp xchg je jmp jbe out xor xchg add adc xchg adc cwtl in (bad) movsl std adc mov stc mov jp (bad) in cmpsb loop fld pop ficom shrl (bad) jp movsl enter jb (bad) pusha data16 xor test mov xor aas mov adc mov jg daa lret aad jmp test jbe dec sub bound mov xchg xchg insb lcall aad inc insl (bad) jae push hlt cmp mov add clc jb jecxz mov adc xchg sahf int3 rcl xchg test sarl xor adc gs test sbb add es pop outsl ljmp in xchg nop adc xor shll mov imul cmpsb mov dec movsl add inc loope jno addr16 pushf in mov std call pushf jb,pn les jo fiaddl stos sub in push je pop mov xchg mov xor stos icebp repz adc lods stc (bad) cmc pushf inc (bad) xor jno icebp xchg jo (bad) cmp xchg (bad) inc and push lods dec mov xchg xlat mov mov cmp sarb sti call and div mov inc xlat xor sub imul mov sub mov rcrb mov and ffreep inc test push pop int3 jnp jnp and inc iret std mov pop adc sbb inc mov fistl lret and in icebp cld out pop (bad) xor cmp test adc lock jmp jne push mov (bad) rep inc outsb mov adc divl jae call call jb mov cmp cmp mov arpl incl inc xchg imul or sti fidivl out imul sbb loop test cmp jbe icebp jno into out icebp (bad) xor and mov push inc jp jecxz repz neg xchg in movsl xor sub repnz mov sub fadds jmp je jmp in mov jg and in jge sbb jecxz jnp jecxz (bad) sbb jb mov xor fstps jmp fdivl jecxz mov xor loop add or inc pusha imul xchg inc lock lret stc jnp (bad) stos stc repz insl add jmp into add jge sbb fistl pop pop xchg jmp ljmp out xchg mov jmp cli xor or jle add jb inc mov stos test test jne mov lods movsl (bad) sbb mov xchg movsl fwait mov stos loopne adc movsb or xlat push int3 (bad) lret stc movsb test out inc mov ret and pop les cld movsb inc cld enter adcb pushf imul lods push stos mov xor outsl xor push xchg movsl or add movsl in xchg or dec or lret jnp movsb mov stc enter sarl test stos xchg lahf adc jo add inc mov xor inc fcoms loope jmp pop cmp aam jo lahf mov xor lret push clc and movsb and dec (bad) push pop pusha insl push aad into jmp test and leave and and jmp pop stc cmp fild ds out sub js mov outsb inc mov xor pop (bad) mov rorb mov jp xchg mov jmp adc fisubrl (bad) nop jno sbb xchg scas fsts in mov notl int3 daa ss cli sbb jno mov pop cmc mov inc mov or stos add in push ds mov xchg mov cmpl mov or inc ficoml adc dec iret or loop hlt jns cli xchg jp add mov mov jnp mov cli inc mov mov mov adc pop movl orl mov shrl scas xlat xor xor out xor xchg fistpl ss inc and push enter jnp jb mov xchg repz dec (bad) jmp lds cwtl (bad) jb in or sarb in mov push leave mov push imul pop or xchg (bad) fldcw cmpsl repz test inc fs mov bound (bad) mov fldt test jb movsl cltd xchg jae incb inc or out dec mov adc adc xchg addr16 lcall mov xchg add push bound sbb adc xchg ret mov xor cmc scas fnstenv data16 adc in icebp notb icebp jp adc sti cmc xchg outsb jne arpl sub ljmp cmc inc jmp lret outsb mov add popf pop stos repz fnstsw jo and or pop mov test xor in xor and cmpsb jmp xor loop lock mov fsin movl out (bad) in mov cli mov insl aas (bad) inc dec ret pop mov cmp lock sbb pop and adc (bad) jo orl add fwait jb test clc repnz adc pop les pop cli ja pop movzbl mov notb aas jae jne fsub ret jmp xchg movsb adc aam loope pushf fsubp loopne push aaa sbb mov into mov insl inc ljmp gs dec jb stos fcmovnbe xchg test inc xor imul ror add bound adc dec (bad) repz push and ret jae cltd mov outsl mov ja ror scas (bad) xorl ja sub fcmovnb jbe push mov into leave mov add inc insb jp mov pushf out mov cmp sbb mov popa lahf mov xchg xchg js mov je mov sbb sbb cmp into andl push jne fildll cmpsb add (bad) cli mov cmp iret xor add loopne lret add call mov fld aaa or emms (bad) sahf loopne insl cmpsl mov das repnz int3 jmp xchg ror mov mov mov call fmulp pushf repnz jo pop push fldcw mov in mov xchg mov push cli or std out cld lret sbb imul (bad) jbe sub lcall xor into or aad jmp adc lahf add sbb xchg sbb test repnz mov insb jmp jb jle or xor scas mov (bad) mov imul mov mov idiv jle clc push xchg das daa outsb sarl dec add inc mov and fdivrs inc iret mov mov mov int test push adc rcrb sar outsl shufps jp pop stos je ficoml test jbe lret pop push test (bad) add xchg sahf lcall movsb fstpt cltd lret adc bound stc mov (bad) adc mov lock pop or addr16 jbe nop lcall sub aaa int3 mov push jo mov in rorl lahf icebp sbb loope enter pop pop xor fildl cld jbe jmp aaa addr16 jae fs xchg mov ret cmp movsl push jae cmp ficoml scas lock or repnz jecxz sbb fldl cmpsb lret adc stc xchg cld iret mov (bad) pop sbb lahf ret in inc into jmp lods fwait js (bad) sarl push ret mov movsl out repz cmp test sub in mov pop inc mov rep mov fnstenv inc jae cwtl sub and sub ficom aaa push dec sub add jne xchg mov call bnd ljmp sub jmp hlt cs or push mov fcomi cwtl mov push fstps (bad) fildl xchg fs fistl inc data16 (bad) hlt cmp repz iret icebp inc push jge cmpsl pop repnz idivl xlat out std fsub scas fs jle cld jg fwait add jno in cmp sub inc jo mov (bad) push cli fsts ret into cwtl addr16 fptan dec mov sub jmp cmc cli or (bad) or imulb outsl dec adc out inc ljmp pushf mov lea inc mov and cmpsl push sub push pop inc adc sbb (bad) cmp sbb xchg ds sub cmp and gs clc or das sub pop (bad) dec imul inc stc or fisubrl mov jge and (bad) clc lret push cli xchg xchg js inc lods cmc movsl jb in mov insb inc shll pop cmpsl sbb mov sub cltd test xlat aad lcall repz (bad) std cmp pop mov enter sub clc nop out pop push lock xor scas clc jmp movsl daa mov loop mov lods dec push cmpsl push dec jp mov pushf pop (bad) or fidiv jnp sub pop mov jb ud1 out jnp repnz add push pop mov popl pop pop sub xlat stos adc cmp cltd push inc cmpsl xor or mov data16 pop jmp fwait xchg jge movsl pop scas call test sbb push test mov mov mov daa lcall push je inc mov jmp (bad) mov push cmpsl jo mov lahf pushf frstpm(287 movsb xor pop pop out (bad) repz repz sbb andb (bad) cwtl test mov jb stos dec shlb xchg sbb fidivr sbb mov pop dec jl test mov dec pop mov push rorl xchg lcall aam push out and js add xchg stos inc xlat movsb or mov inc (bad) ficompl cmpsb jb fsts mov into mov pushf mov jnp adc xchg daa or mov popf and cmp (bad) xor pop fidiv add ficompl fldenv ss add jp clc mov fstpl mov jmp out daa imull lret inc dec xlat mov mov bound mov mov dec mov into xchg adcl pop into mov mov push call adc pop dec test or mov inc jnp push data16 and lea add mov jae mov test popa sti gs lea movsb iret sbb in mov add clc sub outsl ret jle mov add xor fwait mov loopne clc xor jl xchg loope ja add lods xchg mov test mov cmc inc push jmp push (bad) xor and jb and cmpsl fs and shl jbe mov mov mov movsb loop aad int nop jp (bad) addr16 stos nop sbb add js or push fcmovnbe jno xchg jo jle dec xchg mov sbb lahf push ljmp dec add xor stc test dec clc and das mov rclb mov mov inc xchg ljmp data16 in test pushf xor (bad) dec adc mov stos cli les sahf jle xchg push fcmovnu mov adc add dec xrelease addr16 and outsb sub sbb (bad) xchg scas mov lret fmulp and into xor adc (bad) jnp sub pop cmp popa lock lods xor jnp dec (bad) popa adc shlb xchg xchg or pop leave mov outsb lods inc pop jbe xor mov add test push outsl arpl movsl cld loope jbe popa aas push dec imull fucomi lods fnstsw ret inc mov push xchg test js out pop jae daa mov idiv out nop daa push jae (bad) sub mov xor ja cltd add ljmp mov dec jbe (bad) in or lods insl push int3 inc fiaddl (bad) stos inc mov push outsb inc hlt lock repz aam jp mov cmp psadbw mov sbb cmp ss push cmp xlat repnz testl xchg fistpll cmpsb xchg inc mov lods adcb rcrl jmp lods mov int3 mov hlt jnp cmp jmp sub scas add mov outsb cmpsl rcl mov clc test adc test jo lods adc outsl mov lea popl mov xchg xchg pushf iret push lock out mov sbb mov cmp mov imul mov sbb cmp insl inc popf sbb das into cmp rorl jge jecxz stos movsl out out cmp enter mov mov sub mov mov xlat mov xchg jae sbb stos cltd loopne test subl jne movsl xchg cli jle adc enter sarl push add repz cld aaa cmp fldt loope imul mov mov push mov insl cs jne movsl movsb (bad) jae pop add test xchg ror iret jmp aaa xor int3 ljmp dec stos cld out mov pop mov into adc in fnstenv js xchg push nop lods mov jbe jmp stos jecxz int cld outsl jo ret cmp lock in cli popf stc xor movsb divl cmp and clc jno jb pop sub fiadd jp jp loop fs int or cli xchg lods lock mov lock pop sbb std fdivrl addr16 mov ret and jecxz jbe xchg js add aam int popf movsl repz jle sti test xor xor stos into xchg in inc stc jbe mov mov xor mov jnp add jg ret xlat xchg ret (bad) mov (bad) icebp stc or hlt clc add add cld imul imul test jae adc int3 (bad) dec clc test loope,pn imul push pop data16 mov jp mov dec daa pop cmp mov pop cmp sub push call test jns adc jb push mov mov stc ds outsb imul cmp mov jmp idivb mov mov lcall stc jmp (bad) lea ret aaa rolb xchg cmpsb adc lock mov mov (bad) sub das or aaa dec xlat xchg inc jb aas outsb push mov js out (bad) movsl mov (bad) jmp cmp jge mov repz sbb lahf sub adc sub and mov insb imul and push pop mov cli mov sarl stos cmpsl cmc push xchg pop test adc xor shrb stos pop pop push mov jo mov nop in mov stos add loop fwait in xor cmp aaa inc repnz cmc cmpsb or hlt cmp jg cmp ljmp fsubr test fpatan imull hlt mov nop in and sbb gs mov cld cmp test loop push in pop rolb enter fcmove imul int outsb mov stc das subb jb jmp inc push flds stc cli (bad) addl ja and pusha jecxz clc je add imul mov sbb gs outsb ds out in into jo mov shrb insb pop fdivrs cmpsl mov aas fnop xor adc mov add dec jno (bad) cmc (bad) mov sub repnz stc addr16 ds jp adc cmp cli adc fcmovb roll shl ljmp sub roll dec icebp adc add dec loope adc jne movsl adc mov push rcll jb call push or out jmp popa adc mov (bad) push shr inc aad test insl bnd idivl out add jmp outsb (bad) icebp test shll jb shrb enter jmp lahf pop pushf (bad) xor roll xor mov cli jne das insl bound mov mov xor into mov rcrb out jmp (bad) stc mov inc cld jne test cmp or rorl xchg insb ljmp jne,pt push jns mov xchg js shlb push push (bad) (bad) mov mov mov js add mov sub jb in enter in in cmpsb xlat xchg inc fisubl repnz (bad) pushf mov inc (bad) add jns jmp dec pop jae push adc mov dec mov icebp imul push mov jno xchg flds fwait stos jne cmp mov fsts push xlat fimul xor jp cli jg outsb icebp loop dec sti jns aad fs dec and jae pop test mov (bad) xor ljmp mov (bad) cmc mov cli fldt stc shrb xchg push lock js xor (bad) xor sub inc push add shr or repnz jae addr16 push into mov dec arpl rolb mov jge pop mov ds cmpsb cmpsl xchg jecxz loopne ljmp cmp adc loop jae xchg loopne xor test and pop add mov nop jb push test push xchg (bad) sub mov or in paddusb mov cli jb jno bound or imul pop or nop push mov mov mov in lcall inc repnz sarb fmuls inc sbb adc mov ljmp push mov (bad) sbb idivl imul js mov or mov push ja cs dec cwtl ja cmp fmuls lock mov mov loop data16 push cld cmp repz xor adc push xchg jmp ja mov xchg imul icebp cmp stos push pop and in (bad) repz sar outsb test cmp test pop xor (bad) (bad) ljmp or mov shr sbb icebp push xor fldcw (bad) repz cmp stc sahf sbb into in aad add jbe cmp mov adc (bad) dec in rcll fcomi stos sbb lock jbe jb jmp xchg mov fistpl adc out mov pushf addr16 (bad) leave dec fldt ror jne bound jb jnp ret sub mov mov imul mov dec adc mov sbbl inc or bound xor sbb lret dec aam test das lea sahf aad aas push xor fcomps pop dec xor xchg mov pushf dec sub insl sub pushf roll jge bound jbe out push (bad) daa rcrb sbb in out fmulp rol pop rorl cmp mov sti fldt clc stc stc test push ret jl (bad) xor (bad) mov pop sub bound lods ljmp int fbstp insb mov cmp sarb xchg fsubrs dec daa scas add (bad) xchg jb jge xchg xchg jb jmp icebp das lds pop sub shl xor fnsave mov cmpsb dec out out jmp sub in mov push cwtl push jmp mov je je rolb xor jae cli jns in leave fcompl sbb ljmp test push movsl push xor loope clc and xchg or cs repnz adc sbb cld mov shlb xchg pushf jno xchg lds jae pop xchg out ret dec mov xchg lret popf notl sar xor test mov push sub in js clc and xlat aaa je xor sub jno fcoms or jo lock add inc adc js outsb out shrb inc rcl xchg xor shl mov push lahf loopne (bad) add stos movsb inc xchg cld in jno shrl imul push (bad) xchg mov pop mov push adc int3 or call mov cli add lods rorb xchg jp inc lods add out jns lods dec mov icebp adc hlt negb das xor ja out jae mov iret jbe push daa shrl and dec rclb fcoms cmp fwait das cli xchg in xchg out stos movsb jg xchg and or repz or iret jns je push inc cmp movsb icebp dec testb adc xor ljmp mov jp or jns cmpsl lret lret test pop fcoml and nop pop ljmp in call push outsl dec push lret (bad) mov sbb mov mov sar (bad) aaa cmpsl lcall popf mov mov lea xchg aas rcr xlat sahf inc sub aaa jmp xchg inc jno mov add mov cs cltd xchg inc xchg jmp inc cmp in repz cmp dec roll (bad) jns xchg insl xchg mov add push (bad) repnz cmp into cmpsl jno movsl push into fs sbb push inc enter inc mov das test xlat inc jb rclb jp sbb in mov insb push (bad) test xor in mov push jne and cwtl push out xchg test mull out aam dec das inc cmp mov mov insl icebp insl mov stos mov in leave jnp sahf sbb adc ljmp xchg cmp sub jb adc mov inc das pusha sub jae sub fnclex test lcall push repz mov test xchg mov nop cmpl adc xchg xor adc enter out add lret xor and adc pop repnz or jmp test cmp cmp enter icebp cld xlat jae and (bad) fisttpll push cli jnp rcll or insl add loope ljmp (bad) rclb jle lea stos jge rorl fnop into call stos xor xlat icebp leave mov lods adc stos push loopne push cmp lret jne test adc lods test ljmp xchg xchg cli int xchg xchg dec sbb add push or cld mov loopne mov mov fdivrs xor or gs movsl int dec or insl jecxz sbb push pop jo movsb jmp push jmp ret mov sbb (bad) and push adc jge pushf insl (bad) in ss (bad) cmp rcr mov sub add mov xchg lcall stc mov mov iret in xlat insb ss cmp mov dec outsb pusha ja fcmovu insb or (bad) (bad) inc mov daa ja call fwait shl mov cwtl mov icebp in loopne jmp cwtl xchg insl inc mov push lods arpl movsl jb (bad) lret adc xor cmp (bad) cmp enter mov nop push outsl push mov jmp pushf (bad) sahf jno (bad) mov fild sub mov movsl mov enter in pop cmpsl lods loope adc xchg stc add mov add sub xchg movsl lahf add jnp sub lret add dec lret stos out jnp jmp ret faddl imul lret pop lods movsl shrl ret jae xlat xchg push (bad) mov lds or cmpsl mov cmp jmp jns mov lcall xchg out xchg icebp testl fld sbb rclb inc ror push fimull int (bad) push push imul sbb adc cmp cmpsw (bad) adc and jns jmp movsl mov adc or jns lods fstp popl outsb xchg fwait jae dec push cmp movsl repz je fstp in xchg lcall test jecxz movsl (bad) or out jp fist mov and mov leave push sbb jnp (bad) jb sbb into leave ficompl out outsb clc in mov and shlb dec push aad mov ret loop repnz imul out push pop bnd jnp int3 adc mov xor push (bad) int3 mov movsl mov push test pop xchg pop jecxz xchg lcall adc xor (bad) jmp popa das push pusha adc test jo or (bad) jnp fstpl jb push fcoml push push sub int lcall mov (bad) xchg popf jmp enter sub xlat xlat and dec jae sbb leave int ljmp arpl int3 lret mov lret stc jnp cli bound movsb xor out in mov sub jmp jns leave ds (bad) xor jmp rclb jmp test pop outsl pop mov push adc cli pop sarb lds mov (bad) mov clc push imul (bad) lahf lcall out fsubp jge das (bad) lret (bad) jbe adc cmp icebp inc rorl mov sti (bad) mov inc jne mov mov stos mov cmp xlat xchg test jmp hlt and movsb fs js xchg pusha add stos ja arpl push inc (bad) negl rcl dec mov push out xlat cld ficoml adc dec xchg fs ja mov lahf jnp inc adc fxch xchg cltd cmpsb xlat jae cmpsb mov repnz ret outsl push repz jmp movsb imul ficoml (bad) mov loope movsl xor or cmc cmp push dec mov mov add test sub test (bad) lcall jg sbb icebp adc insl repnz leave xor ss aas lods hlt mov cmp push xchg inc out fistl pop fdivl test mov movsb push xor sub xor mov adc (bad) jle mov dec or add fistpl decl inc jb repz (bad) fcmovnu mov adc int3 xchg (bad) stc bound or cmp xchg ja jbe inc pop lcall jo mov hlt add dec push inc lea movsb cmpsb push jle mov call stos outsl fcmovne mov repnz mov stos loop mul popf ja mov lds scas leave movsl bnd in testl xorb jmp arpl cli subb or iret sbb daa jg mov lods mov ljmp (bad) movsb pop ss cmpsl arpl mov loopne jge data16 icebp aam roll int outsb into call bound push test pop insl fisubrl int3 sti push adc jae mov adc push frstor in jmp movsl mov imul pop push jo mov inc mov jno cmp test xchg rcrl aam (bad) xor mov ror js fstpt xchg cmpsl imul stos pop loop push fsubl popa outsb xor push and push outsb jge pop jae sub (bad) mov out out pusha iret xchg inc jb shll ljmp cmp cmp cmp in out or lret xchg inc gs sbb lods aad int or fwait arpl stc out mov sub mov cli (bad) xor les movsb in pop (bad) xor out aad into aam jb and jae and push in popfw imul mov hlt xchg mov stos loope fldt ljmp xchg mov loop (bad) int3 adc in or mov xchg repz add shl xor (bad) divl fucom pop pop fucomp icebp fsts loop xorb cmp ss mov std mov pop mov imul mov mov out es xlat push rclb mov repnz xor adc iret mov lea mov xor repnz js fucomi cmp fnstenv rolb idivl jo xchg push jns xchg (bad) xchg or mov mov lcall loopne iret xlat out mov inc and int3 cltd xchg ljmp out inc and sub mov js mov (bad) lock mov cltd pop push repnz xorl sub xchg aaa or dec xor out xor aam lock xor xchg (bad) scas clc adcb sahf ret out mov mov lods pop sbb jp fist js sub pop jmp mov ja add sbb jb dec push inc cmpsl out mov decl mov mov stos push in lock rclb add and or scas xchg ror clc data16 adc xchg mov mov inc fsts jle push mov jae pop jne adc jae xchg mov push inc mov adc xchg call and add push inc xchg iret ss (bad) jmp int3 adc cmpsl aas adc nop xchg adc jb call ret rorb xor jbe inc dec lret leave (bad) popf mov xchg inc (bad) adc adc pop repnz push jecxz out lret test sub xor out jae xchg movsb push xchg ret sbb cltd movsl aam bound lock stos sar addr16 fldenv stos adc (bad) data16 jno bound and and push shrb inc ret call fwait cmpsb sub scas std jne movsb jne cmpsl xchg and add icebp out mov pushf mov xchg in xor push popf mov mov rcr icebp xor xlat dec outsl jbe es jecxz cli mov mov and xor int adc sbb iret jbe test rolb outsb xor stos enter sbb (bad) mov popa in daa in xor loop repnz dec push fnop (bad) xor adc jg xor add xlat xor addl add clc sarl jns lock xchg data16 sub push incl inc popa inc sbb sar ljmp dec nop lods (bad) cmp in inc dec pushf into iret or pop test mov and adc icebp xchg adc adc aam int mov cmp bnd clc and pop fwait push out stos clc aam sub xor dec jmp adc cmp jne (bad) mov sub adc mov mov jno dec ja in je push lret xor cmpsb stos mov mov ja or ja or dec lcall inc jg pop dec push mov iret out pop inc mov sub shrl int mov ss (bad) test call fcomi test cmp and mov cld mov add in loop lret pop rcr xchg out adc mov in rcll mov adc fidiv jmp je in jnp mov into pop pushl or jmp fildl inc shlb decb adc ja adc xor mov xchg fwait pop jmp mov mov das test pop lea sbb (bad) xchg fnstenv pop imul xchg push inc rcll add daa fistl pop call pop out push pop imul or leave int3 mov loopne outsb mov cmp cmp push sub sbb nop dec cltd je cld repz rep pop lock (bad) xchg fwait in stos clc test pusha xchg fldenv push enter cs repz clc mov jns ljmp test mov mov push mov adc jb push movsb dec stos add xchg nop sub repz cli jae jnp dec xlat add lahf mov xchg mov or or xchg cmpsb imul mov lahf ret sahf jb aad xchg (bad) sarb sub cmp mov add xchg lods pop lds pop jb movsl mov jb arpl sbb ja scas cli inc pop mov stos jbe jb arpl pushf sahf mov mov ja xchg ds test push aam and push fidivl scas and movsl stos lcall push mov test mov mov jmp cmp rolb push push cmpsb or lds jge out xor jmp cmp cmp test xchg push out inc int dec pushf cmp inc push add outsb jle xor lret jge xchg pop push shrb repz clc (bad) xor loop adc inc leave jo inc add adc outsb pop int3 fwait push aas lock mov out aam xor dec dec test scas adc mov fwait inc add add mov jae dec cmp adc notl pop repz (bad) sub test add lock (bad) les loop insl cmc add xchg outsb lcall mov fcoms loopne popa int3 fs stos test hlt imulb mov lds addr16 mov aad mov lcall jge xchg in not sarb (bad) adc pop lock jmp pop jge pop cli out outsl push xor out xchg mov lret aam bound lea mov or ja out mov test leave fsub repz cmp ret mov imul push cli add into jb aad xor mov mov sub jb subl (bad) lcall jno js or ret jecxz sub lods cmc lds in in or push ljmp popf adc mov xorl or jmp bound adc inc jne mov mov out adc mov fcomi mov pop cltd mov inc pop lret push cmc outsb mov orl dec mov out leave daa lret lahf jle jb repz test pop mov or adc mov jno xor notb sarl repz and xchg movsl (bad) cwtl (bad) mov jb aaa jmp movsl pop and ja mov jb leave movsl call fiadd stos out adc icebp push stc xchg out (bad) adc int in xor pop (bad) dec (bad) xlat cmp stos adc sub jo imul xor scas stc ljmp lock pop cwtl xor in outsl std cli clc jnp cs out sbb push and jno dec jmp mov movsb jmp ljmp int test lea xchg mov mov dec mov mov adc mov fldt cltd (bad) mov inc xchg xchg pop js pop fiaddl mov fld ljmp pop jl push arpl adc out daa loopne and adcb movlps mov movsb cli adc inc adc mov mov cmp xchg repz or xchg lret iret outsl and inc lret push and jae cmpsl mov push nop and data16 jmp fmul adcb test and adc dec sub mov rcl adc jns lds gs or cmp cmc sbb pop jecxz pop fistpl ret mov dec outsl pop add jbe or cltd (bad) stc mov or xchg xorl cmp adc negl jg mov in daa imul xchg (bad) and jmp mov mov add sbb xchg inc in mov lods xor fisubrl cmpsb sarl std add inc and or xchg or (bad) xchg lock dec sub loop fwait adc mov test pop cli jns negl fcomip adcb jne add mov or jmp adcb mov ja subl jge lret xor push out (bad) jb add in mov mov push fmul or in jae add jl rclb (bad) or add jecxz push mov repz xchg bound sar out clc test stos mov std out inc jbe xchg jb mov aas mov jl (bad) mov int sarb mov adc jg sahf scas loopne mov inc mov lods aaa (bad) hlt jbe sub sahf adc inc sbb mov jmp jl jmp adc jnp pop xchg dec mov xor push or push mov ret mov outsl cmpsl fwait int3 mov pop imul xchg out push dec (bad) pop mov test leave stc out movsb xchg xchg icebp popf sbb push repnz arpl xchg push push cli rclb popa bnd int3 mov jp cmp push pop cmpsb out divl dec adc push jbe stos out xchg imul leave mov stc mov xlat test sub lods mov sub push jnp roll or pop sar test adc jno lret cmp jp (bad) xor or adc fcomi lods int3 clc or jnp push fwait push jb lock stos pop mov sub jg push repz shl inc test aaa sbb jne add aas jmp push rcll jmp or movsb aas inc sbb adc adc test pop shrb push lcall (bad) push adc mov mov or push jb lock adc aad int xchg sbb (bad) cmp daa rcr jmp jno mov js push cld data16 int3 xor arpl pop pop cmp xchg jl sub imul or out mov jns lds lret das or stc stos cltd scas mov mov aas mov xchg dec cs (bad) fcompl jo sbb lock sub daa stos push std and out loope xchg shll xchg dec (bad) notl mov hlt pop lds js cmc jle or into hlt lret jne jo mov cmp cmp jecxz jb bswap mov sahf sub lock mov fcoms push jmp sub leave cmp sub call or repnz cmp or ficompl pop dec ret dec jo shll mov loopne aaa mov call sub popf xchg cltd aaa loop mov jl int je aaa push inc and aas mov mulb jl not xchg mov jae inc gs movsl mov sub xchg sbb pop out push fldl lret nop fnsave cmpsb mov stos js mov or repnz mov (bad) popa dec xor sahf out xchg mov dec out xor ljmp data16 (bad) loop addl jge mov sbb add pop jbe jl xlat mov cli inc jno pop pop mov pop sti xor cmp repz imull dec js pop (bad) cmp pop outsb xchg or mov jmp jle cmp mov stos pop sbb loope push movsb popa mov mov jle push mov pop pop or lret jecxz cmp mov aad mov mov mov xlat push (bad) rolb mov mov dec jl mov iret fptan rorl mov mov add aaa mov aaa adc pushf ja (bad) push cmc fidivr std jecxz out out push pushf cli (bad) adc jbe ds mov dec and aaa fcmovbe mov (bad) in push mov and int (bad) outsl stos mov aam push fidivrl jno mov imul xchg int cmp fucomi jae fidiv jb pop ss or cmp and mov mov adc out inc xchg push dec data16 imul clc mov mov jmp divb jbe jl jmp xchg test arpl out dec mov (bad) sub jo jae and popa xchg and loope pop push xchg mov test (bad) cmc sbb mov cmc sbb lret push push mov mov dec xlat or xchg jp sahf rcll xchg mov ja hlt adc inc test push sbb mov imul push and xchg test inc pusha (bad) ljmp mov xor adc cmp icebp (bad) testb test and imul mov stos out stos xchg int3 or push mov das (bad) cmpsl mov fnop iret pushf xor out popf movsl stos push push std jmp (bad) add sarb and cmpsl jb cmp inc sbb clc cmp in cmp push mov es movsl cld cmpsb jmp fldt insb call xor push hlt push sub ja add dec jmp inc mov hlt push mov (bad) out stc pop inc add andl data16 sbb iret scas loopne movsb jp ret arpl test flds dec out in pop mull dec das movl stc add divl adc dec dec imul out push mov out push and std jne in fcmove repnz cltd sbb xchg xchg mov ljmp into xchg jl movsb lahf mov fldcw push jnp xchg ret stos (bad) call cs daa clc jae xchg popf (bad) mov mov clc xchg stos jmp cmc push xor icebp push icebp out xor push leave pop scas pusha dec cs imul xchg fistpll (bad) cld repnz xlat xchg lcall sbbl add imul mov mov jecxz addl pop cmp fs push aaa or cmpl jp loop mov rcll or in repz insb aaa cli push mul fptan sar shl (bad) idivl jecxz jb sbb xor test fcom in mov dec mov jne mov flds popa dec xor pop int3 jg cltd lahf loop sub jp adcl xchg mov inc pop sahf xchg mov (bad) stc or call inc pop jl add xchg popa push rcrb adc out arpl (bad) or lret cmp pop jb push dec xchg std lahf inc mov stos mov (bad) cltd mov orb movsb sub or aaa pop jnp fldcw sub adc sbb pop and imul xor mov sub jmp aas sub lret fcmovnbe and jmp lcall jle loopne jmp sub jae push fld adc pusha repnz aad xchg fiadd fldt cmpsb (bad) push leave inc andb sub aad sub std dec and pop fldl2e repz sub mov fildl push sbb ljmp cmpsb (bad) rolb jb or cmp adc aaa ret inc stos jno inc fstps xlat enter pushf dec cmp xlat stc clc mov sbb jecxz and push add call (bad) xor push dec sbb jecxz scas jns fild pop cmpsb mov jp call int push neg push shrl xorb popl jae xchg or shrl dec gs push cmp or (bad) jae sub shr rclb pop out mov sub jb mov sub movsl inc dec in rcll mov jae cmp js add fsub push dec aaa xchg inc fdivrl aam icebp mov lcall xlat in (bad) fistl popf jns dec idivl repz cmpsl jae xor xchg xchg lret leave aaa clc jo adc jge mov iret jb ror sub cmpsl aam push popf jmp js aad dec lret imul push repnz aam stc les insb out mov (bad) push inc daa ljmp inc repnz cmc push imul adc int3 rorl sub imul push in mov xchg scas scas aad int3 mov pop fimull push sub cmpsl adcb adc jg out mov add in xchg sub rep mov enter jp and mov push mov mov fadds mov aaa hlt or sbb movsl cmp sub cmp cs dec push push (bad) fdiv jge scas mov mov sub adc adc adc xchg (bad) or test hlt stc movsl cmc daa test dec pop es test cmpsb lods or insb push lcall mov scas aam jl dec test sbb cmpsb lret cmc adc cmc push mov test sbb lock or xor jle icebp jg mov repz mov lret leave mov outsl dec out sub outsb mov push xchg mov inc xlat fadd adc fwait repz das dec xchg jmp xchg dec dec rcll mov pop dec mov loop in int sub in push (bad) hlt arpl movsb xor xchg jne mov (bad) jmp fbstp inc and test js mov jl xchg cmp mov jmp je lret repnz adc (bad) and leave inc mov jp out mov lods repz adc push ljmp in (bad) mov or in (bad) xor (bad) push push aas fstpl jnp test dec movsb or jbe imul push fwait dec scas cmpsb push jb push xlat pop mov fmulp in out push jmp xchg inc pop (bad) xchg ss shr (bad) (bad) and mov mov jge fldt mov insl mov sti push ret cmp xchg cmpsb outsl inc add in jae fcom mov iret neg fmul xlat adc test dec jmp out sahf and int3 mov lret or idivl repnz push sahf shrb dec mov xchg rorb scas lretw std xchg popa sub out divb xchg enter mov xor fs int push jbe xor stos xor ja inc xchg sbb out pop std xchg les cmp xchg push stc xor push mov data16 fildl dec inc pop and popf aaa push stos push mov hlt pushf cmp mov js xlat dec push pop cwtl icebp jo xchg stc fs mov inc jle test jb mov sbb (bad) lahf push insl push pinsrw enter test inc test movsb inc xchg push addr16 mov cmp push xor (bad) push push je jo xor dec mov notl fdivrs sbb addr16 es fucomi movsl stos scas inc stos inc mov dec out xchg aad sbb fsts jecxz cmp lret pop int (bad) lock cld dec cmc pop mov xchg add sub adc jmp (bad) jge push and mov jp xor xlat push mov (bad) xor mov ficoml jns xor adc js gs sub mov pop fild (bad) jp jecxz test stos add add pop movsb mov push push lahf or leave lahf jge mov aaa cs hlt jbe (bad) jp testl outsl js ficoml add imul pop imul ljmp pushf mov xchg mov pop mov xor inc imul enter fscale mov lods clc arpl neg jnp repz sbb cmp xor jmp or out mov mov ror jp ss movsb dec scas jno stos jp (bad) or sbb jge mov repz imul add mov xor mov inc cltd das sub test std in cld add (bad) clc inc dec call sti mov fidiv adc sbb cld push outsb rcrl fist in jo push gs ret inc dec addr16 sarl cmpsb mov jns adc arpl jl insl xchg inc or or jmp mov in insb sub xor lock jns jne int3 stos idivb js add cltd pop insb into std ljmp jbe addr16 cli jo mov int3 push cmpsb cmp fdivs rcl call mov pop call mov imul outsb test cwtl pushf cli xchg jp hlt mov clc pop in mov inc into mov dec pop jb or in or bound xchg mov pop mov fildl mov mov jecxz ss leave loope out xchg or mov aas fbld jb int push fdivs cmpsl cli mov xchg jmp mov in nop cli scas cmpsl js xchg lret and lods aaa jo test iret cmpsl popa js xchg rolb aaa dec jle icebp jb repz add mov negl ds sub test (bad) or cmp or test clc cli outsb jae or sti fsubr (bad) je mov dec inc (bad) pop loopne in jmp lret sbbl (bad) je rclb shrl pop (bad) adc testb fucomp call pop daa inc mov mov scas ret outsl ja test popf (bad) cmp pop xlat xor pop popf cli (bad) insb inc sbb test sahf and stos scas jle hlt clc and test mov addl mov lahf mov rclb mov test jmp (bad) lret mov outsb movsb lods out imul mov inc jge xchg push jmp rorb adc (bad) jb rorb imul jnp xor out aam or imul and ret add out lret ret jb lret sbb stos outsl out imul mov ret outsb mov xor add inc lret loope stc pop cmc jo xor lods add mov neg or (bad) addr16 imul call cmpsl and inc pop aad arpl push push out push call clc cmp add push stos xorl ret fimull imul fsts sahf out icebp inc notb fs sbb mov lods int cwtl mov aas jne jae imul aam cmpsl dec push adc and mov xchg xor popf push xchg mov out add jbe fwait jae jo imul xchg xchg add or mov pushf sbb lret xchg cli push les outsl lcall ljmp jecxz fucomp mov jge adc out repz xchg gs mov lret xor xchg int3 xor sahf sub inc jl fldpi sub push push (bad) shrb mov imul mov adc adc orl imul push pop lahf int3 add xchg sbb fucomp popf sahf lods add test push push lods pop add (bad) xor mov stos out xchg emms sub test lods cmp cmpsl xchg fdivrs xorb (bad) ficoml std fsubrl xchg mov xchg push (bad) rorl jbe xchg xchg (bad) mov mov aas pop call daa in and xlat mov repz fsts jo adc loop ljmp jae mov mov addb push jno mov loope sub mov rolb cmp mov sahf mov adc mov xchg jae cmp fptan data16 cmp ja mov movsl xchg mov (bad) ja leave adc jp pop (bad) fcoms int3 addr16 xlat cmp fistp dec sbb popa imul push sub xor fisubrl pop mov stc jbe cmc xchg jmp mov jno or cli sub pushf jp inc jae stos mov (bad) sub sbb out mov aad mov jbe cli loop mov ds cmp movsb adc mov inc fs ljmp jg pushf lcall xchg jnp imull xchg test mov push lock cwtl mov daa ljmp movsl mov cmp sar jne icebp popf dec mov hlt inc test (bad) inc (bad) in jb (bad) jo cmpsl cmp jmp add std sarl in leave roll cli popf ljmp in jo test and lds (bad) push mov test imul xchg xor (bad) outsb (bad) std dec adc movsl (bad) out inc dec shll mov das push (bad) mov lods fldenv lcall fidivl cmp loopne stos movsb cmpsb mov arpl (bad) outsb int lock mov icebp adc insl lock and pop mov iret lods add add gs mov rcr pop dec adc aaa test xchg jle outsb or fcmovu add shr add xor call movsl dec xor stos and pushf dec mov call cmp jae jnp popa xbegin cli stc mov xlat cmp inc jbe test and loope cmp mov (bad) leave in or ret adc dec push or aam dec jecxz xchg sub test inc dec push repz jnp cltd push lret pop or mov je mov inc rcll mov adc scas sbb push adc ja arpl jge fcoms jge pmaxub pushl test repz fdivs mov inc out mov fiaddl xchg inc shrl mov and inc mov push cmp sbb fsts je stc jecxz xchg icebp lods imul jo cwtl xor inc cs cmp jmp adc outsl push sub movq test in repz cmp stc xchg test lds out inc repnz test rclb ljmp aaa std xchg inc outsl jmp add lods movsl ja jmp ds scas dec mov fimull scas out jmp ret movsb ds push ds mov int sub mov mov (bad) fdivl xor movsl pop mov inc jmp xor loop (bad) mov and sarl clc mov or (bad) sbb and movsb pop stos in decl xor int3 cmc mov xchg (bad) hlt clc inc mov arpl add jo test fucom dec mov cs shrb xlat jno mov pop js mov cltd jne push dec or xchg insb jo lret outsb sahf loop fistp int lock jle nopl or fcmovnbe cmp (bad) jg lods std xor aam and into aaa lock movsl mov dec ret adc movsl stc sbb roll scas mov adc shlb fdivp push xchg jbe stos sbbl arpl adc out pushl cmp test fsubp cmpsl clc outsb push mov lahf mov ds stos sub fldt fldenv jl sbb or aad leave mov adc imul in ret mov mov test and (bad) jmp xchg test mov xor lret aam in push pushf movsb cli and push jp and arpl jecxz mov jecxz mov scas (bad) mov fist sbb mov push repz sub xchg ljmp fildl xor adc xlat adc hlt ficompl cmpsb repz pushl jmp gs imul out je clc cmp or rolb fisubrl pop sub mov scas mull push sysenter cs fnop fisubrl and and pop xchg mov fmuls jb jge cmpl movsb adc sub ljmp mov (bad) shll ljmp iret mov outsl lcall mov lods cmp xchg data16 pop pop sub ljmp pop insb jmp or divl lds scas les mov add in (bad) aaa scas mov add jmp xor movsb cmpsb mov cli adc lahf xor shll repz fidivl cmp inc xor mov mov xchg xchg ss jmp ret inc jmp (bad) cli movsb mov xchg hlt mov fldcw mov adc inc hlt jb fstp (bad) es adc ret sbb add ja add out inc aaa pop mov mov jb add jl test test movsl sarb movsb jecxz mov jmp iret sub xor mov data16 jecxz ljmp fidivrl aaa mov push inc xlat call sub sti mov (bad) ja cmc mov mov mov mov jmp mov popa repnz push and popa xor fcomi fistpll mov lahf fist out out mov adc cltd cli andb out or jmp and lahf imul call xor inc xor ss xchg loopne test inc jmp (bad) lea lock jb pop jne dec cwtl js add shufps adc lea mov pop cwtl xor movsl jb pop fimul xor repz mov push test add clc adc jg mov (bad) push lods iret mov fnstcw jecxz call jge test jo add jg xlat fisubr xchg xchg fistp or jmp mov sub push stos repnz clc pop dec ja add xchg daa mov sub leave pop mov and ljmp push fs xchg mov aas inc loope xor (bad) icebp push jge (bad) std leave adc fwait cmp iret pusha loop mov sub shlb dec sub push push and jle and imul lea mov or repnz popa stos inc jge add push jo xchg movsb mov (bad) mov adc mov or stc out cmpsl fnsave (bad) daa ret (bad) in arpl outsb movsl test xchg xchg jmp jle fcompl repnz pop and xorb xor lret leave (bad) (bad) sub jb adc inc arpl xlat mov in sbb loopne stos out jbe jno push mov repnz cmpsl test cmc je ret fs jnp cmp cmc out sbb cmpsl stos mov sub les jno arpl daa mov pop mov jp mull push popa jp stos mov cmp lock repz cmp (bad) or arpl ud1 sbb (bad) js cs xchg push es inc add jl scas mov aam stc lret adc pop fistpl nop test test dec aas jecxz outsl call pop pop and jmp sub adc arpl aas xchg mov jmp dec pop mov aad (bad) jmp mov fsubrp jp rcl mov (bad) test push cmc cmp jne jnp sub sub ja fwait stos jns int3 pop mov into arpl adc ds lret jg inc cmpsb jb xchg jecxz data16 pop jns adc fsubrs ficompl jb jmp call mov divb xor nop pop xlat xchg cmp shrb cld cmp stos incb sbb dec (bad) jo xor divb addr16 xchg scas lret lods push mov clc popf adc add and in jns xor mov rorb add pop sbb (bad) repz loope sub stos dec jae daa sbb loopne mov in adc jle pushf or (bad) imul mov xchg push sbb cmp push push or jae scas repnz (bad) cwtl or jge ja jmp stc insl je es lock shlb cmp jns icebp jb movsl push flds xchg sbb jb lods xchg xchg repz lock movsl xchg clc mov fcmovne outsb sbb xor std in bound test ficompl or add xchg imull out rclb insb jge (bad) (bad) xor rolb clc and (bad) xor inc movsb sub (bad) pusha scas sarb jb mov clc sbb outsb cmpsb add pop mov negb dec push adc call test xchg add (bad) stos (bad) into sub cmp sbb dec jle xchg cli gs and mov dec or sbb pushf pop xor inc jnp fisubrl divb sbb stc rolb xlat imul ja jbe ja and cmp aam dec xor repz xchg pcmpeqw ret out aam icebp out out xchg add jb or rorb xor insl out data16 movsb test lods (bad) (bad) (bad) jbe add into cmp pop mov scas sahf mov mov rclb (bad) cli cltd subl ret sahf cmp arpl cld icebp xchg ljmp inc mov enter ljmp jmp mov int3 clc (bad) cmp jb cld xor rclb cmp rclb mov call dec fisubl loop fisubrl scas jno data16 outsb push daa mov add (bad) mov xchg ss fsubs aam cltd mov addr16 sarb idivb cmpsl jb xchg mov cmp sbb out sbb dec jno or inc dec cmp cmp rcll mov in in outsl hlt imul subl push int nop (bad) cli mov xchg mov fcoml lock mov mov push xchg mov in movsb hlt inc loope mov and bnd repz lcall (bad) push inc push leave add pop pop lret xchg les cmc xlat out and (bad) lret enter out xor (bad) jmp imul out jae lret mov mov mov out mov jmp xor (bad) xchg mov jp xchg cltd (bad) cltd lds jnp mov in sahf or pop push add xor out clc add or ja jmp inc pop (bad) sbb out ret xor add push xchg cmpsl mov enter mov outsb ljmp fs mov ja scas jmp test in lret xchg mov outsl jge lds nop mov lds movsl stc cld adc ljmp (bad) mov jmp mov arpl adcl mov adc xchg rcr sbb stos xor jecxz bound jmp cltd insl push out mov mov xchg repz mov fs xor fnstenv mov out inc or into out roll fbstp pop xchg push gs dec xchg mov xchg mov sbb movsl stos pop ret movsl push sbb shlb (bad) jecxz jbe jno xor sub lds loopew into sub jae add ficomp adc cmpl mov pop jns and inc shl sub dec aas fs jo fwait sbb sbb sub jnp fstps add fucom cmp jns dec sbbl lods push xchg fiaddl mov cmpsl lods cld pop popf ss lods sub pop dec pop js pop scas popf fstps push repnz out popa xchg pop movsl inc lret rcr leave lahf (bad) xor nop test insl outsl push sahf push xor push (bad) xor aaa push mov cld jge js cmp add in call outsb stos jg orl jmp out inc pop lock jbe xlat (bad) test adc cmp xchg jnp mov jl lcall xchg jne mov scas inc fisubrl xchg divl iret ja xchg pop out mov lret ss mov fsub adc mov xchg in rolb xchg and fimull mov jno clc and sub xchg leave mov scas aaa xchg sbb std incl aaa adc ret out jne in xchg add (bad) mov mov adc xor lea push jle in outsl je dec in mov jnp or notb arpl xor imul jmp sub xrelease mov cli pop mov daa xchg jnp js out xchg sbb jle fcmovu (bad) notl out cmp mov lcall jbe pop lret aad add cmp lret lods mov repz jnp mov mov popa in (bad) cmp fdivrl ud2 lods repz inc cmc test outsl mov push xchg push imul in xchg out cltd neg repnz sbb inc push dec add adc cmpl cmc jge jp mov cmp outsb inc addr16 and xor fnop bound jl inc sub jmp xor call xacquire or xchg or lock jne jp pop jne mov mov jle cltd stc and nop pop inc lods fisttpl jb out movsb cld ret jecxz pop ja mov xchg cmp (bad) into jge das add lods testl mov sbb fldcw (bad) aam inc mov jmp lcall or insb fisubrl sbb ss or fs mov mov cmc not jg repz or dec (bad) (bad) push jg fwait popf adc (bad) pop in push mov movsl orl sbb js call cmpl jno xor xchg xor leave jae add lret loopne pop or jno aas nop sti (bad) out dec nop stos xchg jge inc (bad) je push lcall lret outsl pop cmpsl addr16 push jae xor or enter (bad) test das jo (bad) loop lods xor enter xor (bad) ljmp movsl cmp xchg jmp sbb cwtl test jns jp test sub ljmp (bad) out rorb xchg lret or test dec add or std jp aam pushf leave inc aaa scas cli lods (bad) dec pop imul outsb push imul adc lea shrb cmpsl ret cmpl stos pop xchg adc or fmulp push mov fprem shlb dec nop fildll out inc push icebp int3 lds jecxz out add out nop mov jmp int3 mov imul push push outsl mov andl jecxz push (bad) lret xor mov (bad) (bad) cmp mov (bad) sub das cli popf inc add sbb outsb out mov test lret sar xor lahf in jmp (bad) icebp xlat mov outsl mov call shll cmc and (bad) mov pop lods stc imul test lret xchg testb adc cltd sarl into (bad) jns push jge mov sbb ljmp test lods leave (bad) jmp mov ja xchg das sbb xchg jo mov outsl sub (bad) xlat add stc lret or in dec popf or inc gs jo pop xchg lea mov mov sub aad call es test add (bad) mov xor pop fwait repz inc test mov movsl rolb lahf not xchg sub adc subl stos mov (bad) jb dec int adc and int3 mov sahf dec pop mov pop mov aam inc jmp scas int3 loop iret push jmp dec into mov push imul stos fwait outsl in adcl inc out adc xor ja mov out repz cmpsb adc mov lcall repnz leave cltd stos cwtl jmp push mov icebp and or push xchg fisttp in (bad) das jb dec movsb call pop leave das add rclb leave dec ja xchg repz cwtl (bad) sub fdivs pop xchg rcl rcl mov aas shll xchg imul jg lret mov cli adc call or jae aaa xchg fcmovnbe movsb ficoml dec xchg mov lahf inc push push sbb stos sub arpl push in xchg xchg leave call pop jecxz push mov dec ret mov mov pushf fwait mov repz icebp xchg mov or ror jb and cwtl inc fwait repnz cmp jge nop daa je adc rcr imul mov in mov imul int xor stos mov mov (bad) stos or inc mov pusha sahf jo lret std repnz ret xchg (bad) orps cmpl dec fildl (bad) fnstcw fldenv in xchg subb jbe xchg int3 mov jae (bad) mov mov push sbb or flds add (bad) mov js lret push adc jp cmpsl out add mov adc cltd and mov (bad) iret adc cmp ja test dec les xchg in cmp test mov (bad) xor xchg iret leave into loop out int3 jne rcr shrl imul mov push fldcw mov mov push sarb inc shr cli out icebp cs stc cld lret out push push pop aas adc out (bad) addr16 roll fsubr imul pop sti mov and cmp movsb enter cmp push dec outsl out jns mov dec ret push ja or das jae sbb stc push cli fdivrl xor andl stc push xchg in in sti scas adc xlat cld jb in jbe pop cltd lods sub mov xor inc les cli repz (bad) aaa jbe jecxz stos push inc sub call xor ffreep outsl mov movsl ja repz imul jns adc xchg test je addr16 test inc out mov add mov dec mov adc mov push (bad) imul fcoms in jmp shl xchg fyl2xp1 fisubrl dec mov outsl pop stos je jp and ret push imul ja (bad) mov mov xor rclb insl jbe rep lods lahf push loope cmpsl ret fwait jp repnz aas pop xlat stc xor and lds (bad) fildl jae test xchg adc cmp lret rolb repz jbe stos in in stos jae and sbb pop lret std add enter fimull push mov aaa bound sbb xchg loop mov cmp jmp sbb adc xchg lds (bad) outsl xor mov xlat mov aaa rcl xchg jge sbb mov lds sub add ljmp shrl dec enter or cmp stos xchg inc roll (bad) mov lock scas sarl xchg test xchg mov into in pop insb or mov cmp gs mov push push or sub popf jmp aas arpl jl cld out lds das stos mov push xchg das xorl bnd or sub sub xchg mov dec cmc lods loope (bad) adc orl cmpsl (bad) push out pop shrb push xchg mov xor add dec cmp or xchg mov pusha jg sbb push negb cmp or jge mov jecxz lods adc daa push jl and (bad) call inc fs lret inc rorb xor sbb lcall fild int3 test jno jo pop addr16 pop (bad) repz cmp pop int mov sbb sbb inc leave jecxz in bound ljmp push (bad) mov int stos aam movsb cs (bad) icebp jo movsb xor in shll jne pop iret fcmovbe jg ss icebp out inc jle lahf push jb stos mov cmpsl jae adc jb jo lea cli xchg in lock push xor or or pushf jmp test mov mov fistpl test (bad) outsb mov pop in mov neg imul pop sti xchg ficompl jns jns dec mov loop fisttp iret scas jno add arpl jp addb ja aam jecxz mov mov mov ljmp fcmovb aaa pushf fstps push xchg ret out push jo mov lds fnstcw mov shrb sbb addr16 mov mov push (bad) or add push xchg sub stos out mov fisttpll mov stos imul pushf stos insb lods (bad) addr16 (bad) mov je mov or loopnew loop jae xor xchg loopne pop test jmp fnstenv sarb mov mov mov xchg js jno sarb mov pop rcl lret fsubr clc sub jmp leave imul push jmp mov adc int3 (bad) fucomip lock cmpl sub out outsb and xchg (bad) test xchg pop jmp jb scas imul mov push mov imul push mov cmp ficoml testb push leave push mov fcompl inc jecxz xor jno cli cmp leave and mov or mov aad stos sub and das test jae icebp pop enter icebp fistp add add sub sbb push repnz lock jmp push sub popf lea bound push imul stos sub in aad outsb (bad) out sar pop jno lods sub aaa ss mov popf test fisttpl in jg xchg and add repz idivb sbb jmp jae scas xchg and iret mov insb add movsl movsb cld call sti stos adc test adc iret ror jecxz push mov mov popa shl dec cs (bad) mov xchg stos inc mov jb popf bound xchg and xchg sub test push divps (bad) and lret cmpsb rsm jmp test xchg shrb cmp ja pop pop insl mov xor xchg outsb push stc sbb sahf cmp mov inc sub inc sub dec mov outsl enter imul inc idiv or imulb (bad) fsubrl testl xchg mov arpl ss pop into ds xor out ds sbb adc adc jne imul pop xchg cwtl mov icebp sub (bad) movsb aam lret adc jns mov repz cltd jo mov push cmp add fs mov (bad) leave ds push push daa jp gs lret jne push xchg jno ja jno cltd xchg repz add jmp xchg dec jne out or mov lcall ret push mov test mov inc das icebp (bad) data16 xchg mov jl pop nop stos negl add lds or ret sarb pop xchg inc jae outsb in mov add out fwait daa jo mov test mov or nop aas add mov jae fwait pop jg pop stos mov or aas xchg push icebp lods push jns add xchg sbb xchg fidivrl sub mov lea in test lea cmp daa test mov sbb ja dec in ja cmp inc imul mov scas sar sarb imul popf push xorl call mov popf jmp cmpsl lret jo rorl push xchg add hlt jl repnz repz mov cmpb jge or (bad) icebp jle pop lret movaps fwait lret shrb lret sbb sarl rcl add out jp mov sti adc loopne dec data16 ss call add pop and push jae roll jp out push icebp into hlt xchg adc push mov repnz sarl idivl into adc push fdivl dec stos mov fmul clc push adc cmp mov divl aam stc leave ljmp scas das jne jae fistpl lods push outsb mov sub mov aas loope out lcall mov jnp mov or icebp test lcall inc inc dec ffree push mov cs push jecxz cmc aam fdivr dec or ret addr16 jecxz in jbe jmp xor cld lock ret inc jg pop inc mov rolb jl js out push fistl push mov lret shll fadd pop es call clc rorb adc dec add mov mov (bad) mov (bad) push push add xlat sub jmp jne jmp int out push das add xor insl insl gs xchg cmp movsl rcll jmp xchg mov (bad) sub jmp dec xchg pop sahf fs add leave mov jge mov push fdivrl jg xor sub push adc push shrb adc mov out jne repz call adc cmp adc sbb scas ja clc sar mov repnz jno and test or push lock loope mov cmp ja loopne xchg jno scas in lcall cmp jge shl cmc inc leave (bad) and xchg in push repnz (bad) repz shll xchg aad (bad) dec push jge in mov lock stc jmp xchg mov repz mov mov fistl (bad) fisubl les test (bad) stos negl mov leave adc fist and push repnz imulb cmpsb fs jmp jb out mov lahf fisubl out pop int3 inc dec stos fbstp sbb nop sbb fstps icebp lds push xchg loope outsl or out jl (bad) cmp push popf (bad) push xchg lret cmp or in (bad) nop sub lahf lret test jb scas aam hlt pop stos adc mov repz xchg jb jbe out xchg cmpsl stos dec bound or lahf imul in je mov inc mov xor out in fildll shrl lods sbb lret jmp mov mov stos xchg mov out mov mov mov push pop ja xor cmp ss jmp push xchg sub sbb adc repnz push add (bad) lret out jmp fsubrl fnop mov les jmp lods push fldenv neg cltd cli cli inc icebp stc clc mov (bad) mul push pushf lods hlt out jmp out jmp dec icebp out out dec icebp mov loope inc fmulp (bad) mov movsl dec les jno jnp jns xor roll mov fistl cmp xchg mov lret rcr jne (bad) jae (bad) jns movsb cltd cli cli shrb jg aam cmpsb mov dec sbb iret xlat jnp sahf jb cmp (bad) fwait and mov jae (bad) lods xor mov cmp or mov fldt mov rorb inc (bad) js popa adc dec stos loop lea lret imul ficom data16 loopne mov and cwtl rcl (bad) sub int3 stos test cmp outsb mov pop icebp ret test adc jl repz repz jecxz push movsb imul outsl mov sarl mov fistpl data16 test mov jecxz (bad) shrl divl es loop cmp fs sbb pop addb xchg loope sub mov dec add lock mov adc jo fisttpl fcmovnbe int3 ret and fld mov lods ret test mov jg scas fstp sti pop jecxz pop cmc adc xchg gs and fdivrl fistpll fnstcw sub icebp cmp test ret lock xor or outsb lahf sub cmp fwait clc dec xorl stos pop scas or movsb out pop (bad) mov hlt mov int3 mov icebp stc push cli xchg jo mov and jo xchg fcmove insb in push xor mov cmpb pop pop out push pop xchg icebp outsb mov push loop dec jno jmp jb jg jb push xchg stos fs repnz stos xchg in addr16 (bad) repz sub int neg xchg leave xchg rep xor add mov movsl mov loope add mov mov xor fimull dec xchg inc xchg cmpsb mov into mov xchg (bad) cli pusha jp (bad) flds pop (bad) mov xlat movsl je cld jae cmpsl cltd stos shll ljmp in mov jb sbb mov mov roll xlat jne and test ret pop mov pop push mov adc pop and mov adc push or ja int3 xlat mov pushf adc sbb push clc jp ja jmp int3 mov cmp jnp cmpsl or inc into xchg scas add loope sahf (bad) xchg movsb lret cli fnop cmp mov dec cmp js xor insl push push aas int ret sbb mov jbe xor xchg and dec or stc xchg xchg testb sbb addr16 cmp enter jo cmc sub and mov fisubr jae aaa fcoml call lds scas cmpsl mov das sti sub repz and mov add inc imul jl aad dec inc sbb jecxz lods jp and jp jmp scas cmp cmc js jo stos repz sub mov mov hlt jmp mov jg jge (bad) mov xchg xor add (bad) xchg cmpl add mov rorl mov testl icebp mov jg insb adc fiaddl (bad) lock sub out jl mov push cs ljmp (bad) jb mov dec inc sbb clc sub icebp xor je pusha scas loope leave mov cwtl sbb jge mov inc adcl add xchg inc dec int lock (bad) mov sub sub sub flds cmp andl jnp iret or dec xchg xor mov mov or mov jae jne sub popf fs (bad) shrb lods mov out dec lcall mov mov mov fldcw fsubrp mov (bad) sub jbe mov js add icebp lock stos clc or xchg in mov pushf dec (bad) push add inc dec xorl or ljmp loopne loope out xchg mov out or inc in jge jne int3 pop fmuls xchg jnp cli (bad) lcall in xchg mov shr cmc inc jmp add sahf fistpl sti idiv mov imul loope test scas (bad) pushf shrb jle sbb sahf xchg sub sbb test xchg xchg stos sbb xchg inc cltd sahf out rorb fldenv mov stos stos xor cltd lods sbb enter push lea (bad) lret jecxz rolb xchg xchg clc mov mov adc mov fcmovnbe icebp outsb mov cmpsb and (bad) icebp xchg shrl fnstenv jae jle add inc cmpsl xchg xchg and adc xchg mov into xor or stos outsb mov or dec lea into mov sar jno xchg cmp lret adc mov pop inc add jb cmp cmpsl loop xchg or jb es ret jge (bad) jb sti insl clc sub add mov xchg ror pushf jmp jns mov jmp shll xor pushf js popf test xor aaa push decl gs jg,pt mov aaa jecxz (bad) jmp into mov nop inc jno rcll add aad cli add xchg jl cmp rorb jbe mov lcall imul addr16 sub xchg ds mov fcmovbe cmp xchg rolb nopl aam movsl out xchg pop call movsb iret inc jmp stc jns adc (bad) repz jmp jge cltd sbb repnz loope pop jmp loop mov movsl xchg cmp icebp jl mov (bad) data16 fcmovbe outsl mov movsb adc xorb int3 sub jge push mov lcall scas xor pop sub or out mov icebp xor sub jmp lret negl daa and pop insb inc out mov into add jb repz popa pusha mov pop (bad) pop (bad) fdivrl clc sarb xchg leave pop repz fsts mov cld xorl sub (bad) jmp mov js xor cld lcall repnz ficom xchg lods int ljmp mov (bad) dec pop test cmp push out stos call jae jnp jae sub ret jb jns mov test jnp mov jl pop testb mov stos mov stos cmpsl cli repnz rcr and adc xor xor mov push sub mov bound xchg rolb mov out (bad) cmp jecxz in mov ja (bad) adc dec inc scas cmp and adc xlat leave xchg cmpsb sbb leave jae imul mov scas push inc xlat dec xlat and scas pop dec clc cmpsb sbb jmp fwait sub repz xchg xchg add xchg jo jecxz inc mov ja adc sti nop lea push xchg fisttp daa bnd clc es sub jo mov sbb lcall mov pop mov xchg fbld adc icebp sarb cmp cld adc arpl cli insl mov ja lds cmpsb aaa out into lea jne addr16 xor mov ret jg mov jnp rolb cli mov outsb lret mov fdivrs jecxz xor pop hlt call (bad) das ja mulb xchg push stc outsl sbb iret push mov jno mov and or outsb mov clc add mov outsl cwtl cmp mov xor lods clc push mov stos and clc sub repnz es adc xchg jge pop fstpl xor lods aad pushf in dec push push test dec cmpsb subl pop sub out mov fcomip add fsubr repnz jae sub add imul (bad) mov imul or mov out js insl rep insl ja lret aas aaa or mov jmp outsb jne inc out ljmp out xchg test adc outsl enter (bad) xadd rolb inc pop sub sbb jo outsl pop xor rolb (bad) push test mov or and xor jmp xchg lods mov call js dec jmp cmp sub loop aad mov adcb adc mov lea mov cmpsb and repnz int3 aas and and fsts popfw jnp sub les pop sbb fcomps mov fnstsw loop jbe imul mov in push int pop sahf mov cmp or test outsl push int mov stos rdmsr jbe in shrl shrl hlt jnp jb lahf jo test ja mov iret fisttpl into jbe and hlt testl stos mov leave fistpll adc stos lret inc sbb cmpsl mov call sbb mov push pop or dec int cmp and in jns jp (bad) (bad) fwait aaa mov adc xor sub stos dec pop fstl into iret lcall xor xchg ss enter sub pop iret in adc repz mov sbb mov out aaa xchg loop callw std repz into pop aaa cltd xchg xchg es out mov sub mov out inc sub mov imul out arpl cmp cltd mov mov adc jae sahf jnp jo push lcall cmc roll xchg dec fwait movsl jmp stc data16 cmove lock cld outsl add vshufps fidivl enter mov js test inc rol sar outsb movl pop lret jg out xchg adc xchg insb xor sahf mov xlat push notb jp divl mov test push imulb xor sub mov add push and (bad) xchg sahf cltd mov jo arpl xchg inc shl outsb jmp or mov test insb pop roll insb outsl jecxz popf jle dec sbb roll iret sub mov mov imul jo imull cwtl add adcb adc mov sbb pop test mov outsb sub push rorb mov (bad) mov cmp sbb cmc mov xchg sbb cmp aaa jne das fisubrl imul and repz jne pop ficoml push xor loop out lret jae aaa cli sarl or and cmp sti xlat pop mov add mov adc xlat xchg in dec or adc xchg cmp sti fdivs stc add push int mov adc push mov shr dec sub outsl jg fwait pop xchg mov outsl dec rol cltd ja mov cmc (bad) repz js jnp inc jl cli mov sbb movsb pop insb es ja (bad) push jne in add mov idivl daa xchg add lret mov sub in outsb xchg clc in adc je jae mov jmp push ja mov xchg sbb mov xor loopne pop fistp cmp xor fucomi jb addr16 (bad) imull icebp stc adc movsl repz adc jg fwait scas mov out fldenv (bad) scas adc jae sbb jnp cmp cmpsb adc cmp jae sub pop sbb or xor cmovae xchg nop fstl push outsl sbb add aam mov aas cmp hlt jno stc inc insl stc and mov fcomip mov out pop fsts div lods adc ret xor xchg jmp clc fsub inc pop cli into add repnz cmc add stc or cmp mov jecxz sub in addl cmp shrl scas mov scas dec and push pop lock cmp repz idivb xlat in pushf pop in loop sub rcrb rcrl jmp lret mov lods test (bad) aaa test inc ljmp cli enter push cs push stos jo fidiv ret jnp xchg test ret jnp xchg cmc repnz or inc cmp rclb insb mov call je movsl roll adc pop ss xor lea das mov in out jg push sbb mov xchg stos lret pop repnz ret shrl ja xchg mov (bad) dec cmp cmp jp mov sub fnstenv adc jmp xlat movsl addr16 hlt adc lcall or cmc dec cs negl pop test mov dec xor mov sub pop xchg jnp,pn sub inc repz xor fldt ds jno in test adc jb lret hlt add push les sub icebp je lds movsb mov mov (bad) pop cmc xor stos jecxz test push xchg ret ss fisttpl arpl and pushf pushf sbb imul lret jp mov mov lods add imul int cmp pushf jmp or dec xchg xlat or std daa test mov inc xchg jns imul out xlat (bad) leave repz or ds lods cs iret jp and xchg loop ret xchg aad lea into scas fisttpl dec ljmp push aaa jmp test pop jno xor lea pop clc pusha dec mov dec fsubr adc clc pop mov xchg loopne fs sbb cmpsb outsb sti mov dec xor dec jae sahf aaa mov ret push in out sub or pop lock adc stos ljmp pop push cmc mov roll (bad) mov cmpb mov lahf push xorl out sub repz test pop pop xchg fiadd hlt or lahf insb mov dec jmp jo or dec xor dec in fldcw mov test cmpsb cmpsb pop push mov aas xchg xchg jmp (bad) and and jns xchg cli pop andl adc dec xor (bad) (bad) xor and push ja cmp adc out jp cmp sub add pushf dec and lret mov jle shrb loopne cmp mov leave jbe and (bad) add or mov stos out lret outsb add jbe ja cmp cmp jg aaa xchg mov mov out insl adcl in fcmove call push scas into cmpsl leave ret aaa iret faddl scas mov inc mov mov mov lock out ljmp cmpsb shl lods push ror (bad) movsb out repz test adc xchg cwtl inc jae (bad) or mov or gs das mov dec pop jns adc insl or fdivs mov mov ljmp fdivs mov loope dec test jo stc movsl xchg lock getsec clc repnz push and repnz hlt addr16 push outsl call pop not out adc mov popa shl popf cmp jno mov out or int cmpsl jns popf in pop iret xchg jmp xorb mov fist rcrb push mov sub sub repz and rclb sub out lock jae test out test hlt push or out aam sub into xchg stos stos xor fistl cmpsl mov shll call out out sub popf push iret test jg pop stos xor shlb testl rclb or out cmp jmp xchg mov fabs out and fdivl fucomip jo cmpsb (bad) push enter das enter pushf jo ljmp out inc add adc icebp loopne jge stos aad mov andb lahf jno (bad) int mov out imulb jmp adc jecxz add sub and pushf sub cwtl loop or (bad) cmpsb or mov fbld mov mov popf imul xor sub mov shll movsl sahf and adc add jecxz fwait xor (bad) xor add sub (bad) adc dec mov push insb (bad) xrelease mov push xchg mov mov xchg xchg stos ljmp fcmovbe jg jnp fmul repnz jns movsl js (bad) mov pushf pop (bad) ds adc sub and imul xchg (bad) adc xchg ret iret xchg out out or repz cli bound imul jno in pop xchg mov js (bad) in icebp test jg mov adc inc jb or iret dec imulb in rolb movsb mov jmp pop xchg mov lods fcom lcall rcrl stos icebp inc mov xchg lea or stos jmp cmpsl or test pop lret mov stc dec xor icebp sahf or adc sbb adc mull (bad) jne fisttpl mov lret xor fidivr (bad) push push xchg fsts ds out das jno jne das out lahf mov sbb aas ja add fdivr sarb js fidiv jg adc mov in ja mov stc mov jmp dec movsb shl mov mull mov dec fidivl or inc dec sub gs ljmp adc icebp mov sub jmp in jnp lret rclb movb xor pushl lock and jne push ds hlt mov or int3 mov iret stos insl mov jo mov popf repz clc movsl xchg fldcw push outsb int3 sub shrl mov xchg mov mov rcr into sub mov pushf ljmp add aaa pop sbb ljmp xor xchg int loop cmc xchg pushl mov sahf das in and push dec stc idivl push pop or jmp repnz dec add mov setno cmp pop bound adc cmpsb push xor lret mov out stc jle (bad) out pop jmp pop stc (bad) jbe incl xchg pop add scas fisttpl jle in lret mov add sbb jl and and cmp aad jmp push (bad) sbb sub inc (bad) push in test (bad) push dec push adc scas cmpsl jb and fmuls ja pushf push ret std imul int3 cli rcrl mov pop mov shrb cs movsb inc rcr mov inc stos test sub inc push xchg sub fadd (bad) cmpb out arpl imulb lret movsl stos imul cmpsl outsl or icebp es jb,pn fnstenv push fisubrl cld push leave fidivr addr16 mov test lods fadds rorb push jge fcomp cmpsl loope jbe mov xorb aad sub (bad) sarl out fs adc scas mov cli sar test (bad) (bad) ja lcall cli xchg jb iret inc (bad) xor push repz aas fcmovbe adc (bad) xchg pop sub jno leave xchg jns sub fs mov cmpsb xor xlat ss sarb shrb xlat test xlat and add push call or mov outsb lods sbb mov and popa sarb std and (bad) jno mov dec add arpl mov pop jge xchg mov jecxz dec shll mov inc push out dec mov in out mov mov xor jmp mov sub orl lods adc push adc adc popa jecxz dec (bad) stos add sub xchg test sbb in xchg xlat shrb daa out (bad) jb push xor or lds clc or hlt mov xchg cli int or inc add mov adc call xchg cmp aaa xchg mov in pop sub jns cli in jne push nop lds xchg ljmp sub and mov les xor fwait dec sub mov sbb ljmp sbb (bad) mov lock jmp jno div (bad) jae ret or rcl pop js jb ss and push cmpsb lds xchg mov mov int3 loopne pusha fnop aam push mov cmp imul cld loop fwait aam sbb or int3 push push lret repnz sbb mov mov jl sub cli test add push ss mov mov mov ljmp push jae xchg xlat (bad) sti mov sahf cmc add pop int3 in and mov jmp mov ficompl out mov sub xor dec out movsb jae out sub push imul stos sbb add mov mov pop or in aam cmpsl lahf addr16 imul leave push in pop push mov dec shrl js cmp cmp jnp mov icebp mov imul lock aad adc aam cmp int sbb mov push lock sub in pushf pop mov mov mov cmp lods stc inc add ret stos jb mov pop leave mov in outsl xor notl fistl bound push repnz mov cmp mov jnp mov mov mov or repnz sbb in inc repz adc enter push loop hlt notl dec dec aam ja adc sbb sbb movsl push popa mov int mov stos gs xchg int3 in fnstsw imul popf repz (bad) xor adc lret stc add inc fs sub adc xlat iret jmp jns adc adc xchg mov scas sbb jo and mov sub jae repnz mov es and int shrb clc add add jnp fcoml mov in subb cs mov adc pop mov jge pop cmp cmp jo mov xchg cmp fisubr dec stos ja popf leave out fistl xor pop repz xor push test xor scas mov sub js mov test xchg mov mov outsb mov mov imul add daa pop movsb cld idivb add add movsl push aad clc jae mov or jae pop mov test xchg daa stos repnz cmp jecxz fiadd push ret and fisubl jle cmp add mov int3 jp test jno xor mov fadds stc sahf gs pop pop cmp lret call fstl addr16 hlt mov xchg pop pop jge test in sub fisubl call ljmp outsl adc fistpl inc stos mov arpl mov xchg xchg rclb lock fnstenv sti sub mov mov push xor mov mov dec icebp adc (bad) jae shrb (bad) cmp or jl adc xchg cmp aad enter loopne in jle clc add popf outsb imull inc test adc hlt pusha arpl xor mul cli cli xchg subl pop dec arpl mov sbb fcmovnbe dec roll in imul inc fistpl inc jg mov (bad) pop rclb lret fstpt sub enter das cmc lea cmpsl mov xor mov mov xor or cmpsl out fcompl push shr arpl mov sub fdivr xorb cmpsl stos pop sbb mov cmp mov cmp stos ja cmp cli imul aam inc mov popa mov xchg pop (bad) out aas out jnp jb repnz xor push push push jnp adc mov pop jle lret iret push je js in mov scas jge pop pushf adc hlt jl xor test xchg (bad) xchg ss ss xchg popa jmp fnstsw sbb push sahf bound adc and cmp scas or dec dec fsubrp int3 sbb pushf jp pop shrb or insb pop xlat out mov iret xor sbb cmp outsl and fcomp mov int cli test jbe fisttp clc scas stc lcall das and jmp fistp cmpsb mov inc mov arpl xor or test rcrl xchg mov mul xchg xor (bad) jns out lea jecxz jb cltd (bad) scas ret ljmp pop out sub call test cmp inc cwtl jae cmp popf lock out add xlat pushf int ja cmp ficompl inc shr hlt or push adc jmp fidivrl es movsb sub mov in mov ss pop outsb out and rorb jne (bad) in icebp cli jnp divb jo sbb xor fnop mov xor cmp dec mov aam xchg push in jg inc push sarl cmc fistpll sbb xor jecxz jle hlt mov cmp mov gs test add add fbstp xchg inc add imul shrb add in pop stos ret ret ljmp fisubrl xchg mov sbb cmp sub and xlat lock jmp mov rep dec jae jge (bad) cmc cmp mov js (bad) jg mov bound (bad) call inc shrl mov jl jp adc push add sbb adc push add xlat push das cli mov mov test push mov cmc loope xchg lds fidivr cs add mov ljmp cli scas inc fdivl xor iret sbb mov jp pusha sar lods js or or push out lds jmp sub mov jge and notl stc xchg sub or lock jo inc (bad) out dec ljmp mov mov fstl std stc out push das mov (bad) xchg jmp xor mov out cli adc jo (bad) (bad) insl (bad) scas bnd mov cmpsb push cmp daa into adc out and and pop pop dec or jb adc clc imul out mov or lock test sbb inc jp ljmp add add jo ds insb das pop mov aaa hlt mov loop xchg sub (bad) sub test mov ja in aaa imul jp sub cmpsl jns xor mov stos xchg mov push imul mov adcb cmpsb xchg pop inc outsb ja add jns cmp dec and subb out rcll pop fwait cwtl pop push fiadd fwait xchg dec dec push movsb add out xchg ja jmp push sbb sub sub fnstenv push add hlt pop add ljmp stos xor mov cmp fild test outsb cmpsb pop (bad) xor lret test gs shll insb idivb adc lock out fstpl clc rolb sarb icebp and fucom mov pop xor ljmp daa stc jo adc fstps aam sub fwait sahf xchg xor xlat out mov out outsb push xchg scas xchg lods loopne dec lods fcmovnb mov or jb mov mov add fidiv es and (bad) mov pop cli mov cli lahf push mov jb dec aam nop imul inc pop push fist jp mov push scas ds sbbb lret dec jl js pop aas in outsb leave or xchg (bad) xchg ljmp lret fbstp jb mov xchg sbb push xlat out push bound rolb add xor push xchg rclb mov mov imul stos loope sub xlat lret stos stos cmp jnp and push aad push in ja dec pop fbstp fiaddl out mov idivl ret and xchg clc adc or andl mov sbb push sbb vmulpd dec stc outsb lods lret mov pushf jmp call dec jg adc std rolb add testl icebp jbe pop movsb lock insb clc leave es cmp or mov sarb inc outsl out cmp imul jb in movsl mov imul mov insl (bad) xor mov pop das cs repnz jne ja gs lods (bad) lods mov sbb ja aas dec in call (bad) test rclb dec xchg jae repnz cwtl xchg into addr16 push inc jbe and outsb out push jp scas inc and cld xchg jb popf lock sub test mov test cmp test mov xchg jle scas sub jg cmpl mov repnz popf push sbb dec cmp pop mov xchg scas nop mov jno out repz movsl cmc jg jb loope mov nop pop loope int3 jo fwait mov xchg cmpsl cwtl mov into sbb mov mov fsubrl pushl repnz popa sbb ror mov add stc or cmp mov les fsubr cmpsb jmp dec test (bad) lock and or add and mov xchg lahf movsl sti ficompl push mov xlat pop lods iret cli insl pop mov subl jae mov inc xor fdiv add or fsubl sub movsl jmp jnp mov lods dec dec mov xchg xor outsb shl lds pop outsl es and rcrb sbb cmp push mov repnz mov add outsb mov je rclb and mov ret repnz jb out push sahf pusha add mov lods pushf mov jp mov dec into movsb cmpl in (bad) pop and loope in sahf mov (bad) cmpsb mov insb push das or jle or jmp jg xchg in xor jp lahf xor nop mov push in cmp mov aaa add or lock xor and jmp pop gs stc adc jle je movsb inc mov ret pop in mov pushf push insl sahf xchg mov mov mov loope xchg push test ret xchg gs cmp cltd xor pop pop xchg dec icebp scas push sub into cli dec mov xchg mov pop or movsb add sbb pushf stos add jmp add imul adc dec mov or push push in xor jecxz mov jp nop mov out lret ljmp pushf adc and enter xchg roll mov adc stos ljmp rolb adc std mov adc stos aaa loop shrl dec (bad) mov sub pop push xadd mov stos call lock sar hlt jno outsb data16 imul xchg add mov add (bad) and xlat sub imul push movsl (bad) or xor rcrb pop mov xchg xchg cmpsb adc out stc inc xor lock ror push push (bad) repz loope mov in outsl lock dec pop add in outsb out mov popf lods aaa aas sahf stos ficom mov repz push mov jmp out xchg fwait lea mov jnp mov popa in es mov fsubr xor push sysret xor cmp cmp xchg loope or movsl jmp std stos xor test int fsubs in call jb or ret mov ljmp es mov fiadd in pop fmuls popf mov jecxz (bad) xchg popf movsb jb cmp into jb in mov lcall imul scas lods nop repz (bad) out gs repz lcall repz add jge adc outsb mov mov xchg nop scas mov repnz sub pop xchg cwtl dec cmp xchg or ja jecxz xor pop loope xor bound xlat xor sbb jae ljmp hlt jle loop int xchg jecxz movsb xchg lret xchg pop push mov rcr int inc mov inc ljmp adc in jbe jb add aad jns xchg and nop shl stos pop cmpsb stos jmp rclb repz xchg mov les outsl jp rcrb (bad) (bad) xor fwait push add mov fstpl or dec pop out pop mov jb pop repz push (bad) scas div inc add mov clc sbb mov jle int dec fsubrl mov imul jbe and jns mov sbb mov add mov xor or adc icebp pop hlt and (bad) rcll dec push lods sbb (bad) fisubrl adc (bad) sahf or xor rcrb mov shrb jecxz or sbb jg xchg jl addr16 movsl mov repz fwait add pop ja adc lret xor mov repz lods jo mov arpl (bad) arpl adc addr16 pop movsb xor int3 addr16 dec mov ja sbb std aad mov mov sbb loop cmc sahf mov xchg aad add add test jecxz lea (bad) ss cwtl popa out xchg ret sub outsb (bad) dec jo cltd xor pop inc jmp loop jp js push sbb xchg jp jb xchg add jp fadd das (bad) shrl ja xchg and fnsave addr16 xor inc pop inc fcmovnbe adc fwait (bad) cmc push aaa add mov mov mov sub loopne mov xorb push imul (bad) ljmp mov in outsl ret clc dec pop jecxz sahf stc or mov ret adc dec mov fldcw xchg lock icebp jecxz mov jge jecxz call mov aam ljmp out mov cmp cmp in outsl mov (bad) push add pop sub arpl stc push aaa xchg mov adc adc mov mov mov (bad) jb pop (bad) pop notl mov inc inc xchg fidiv scas loop xchg fdivr add xchg add sbb mov (bad) rclb lods adc leave push (bad) jmp xchg or (bad) fiaddl outsb xchg out shr sub cmpsl fucomi fiaddl add push mov jb cmp movsb pop xor pop mov xchg clc lods cmp out dec pop mov mov jmp out mov call cltd mov push pop adc or rolb fisttp xchg fnsave movsl popf test enter push dec or hlt jbe mov xor jno push push in dec vpcomub pop out fmull jno (bad) loop test adc jo in lock mov xchg out or hlt pop xor (bad) xor movsl mov push das mov add push out xchg les sub push (bad) icebp ljmp loop mov mov subb jb push jmp sub loopne (bad) xor arpl fs push inc push jl loopne pop fnop pop fxch xor test aas mov scas jns pop jb rclb (bad) ja icebp movsl adc outsl jbe jmp dec stc fcoml (bad) and stos jne (bad) into test fucomi in stc push or push aad mov xchg (bad) test sub test push push das test cmp inc jbe aas sahf mov std out dec lret cmp stos dec jmp movsb in outsb push pop paddq and movsl xchg mov or mov jnp or xor repnz daa xchg or mov cmp or fistpll je lahf push lea inc cmc (bad) jo divl test shlb xchg emms test das cld xchg or fwait stos jl stc insl cld shrl lock in xchg (bad) add out adc cmp fwait push das out test and pop xchg cmpsb xlat pop movsb into xchg or lret adc gs into or ljmp (bad) fwait and cld ret xor or jns mov imul jge ror mov aaa movsb cld cltd and mov add test dec iret imul (bad) bound fcom dec pop dec rolb jmp shld sub jmp fisub mov data16 or mov lock or ror fsub (bad) mov imul jne mov mov push inc adc addr16 lcall imul int3 jmp add int3 in dec notb addr16 negl pop mov adc (bad) jnp movswl pop jb sarb and and (bad) mov rcrl arpl aam cmpsb (bad) int rclb jno in stos (bad) cli out (bad) mov data16 pop imulb (bad) stos xlat arpl aam mov stc ret fbstp push js addl mov sbb adc bound fwait fs xlat or jg sbb popf scas fnsave mov (bad) pop cmc movsb outsb mov jne cli jge divl sub outsb xchg or jg and push shrb out out sti mov jmp (bad) jae inc jns addr16 or fisttp fcomi mov idivb repz and cmpsb xchg add rcrl mov xchg (bad) aam xchg sarb xor push lret mov lds xchg mov cmp jge (bad) xlat jo mov jno stc outsb pop scas jmp stc mov in in imul rclb fs mov ficompl arpl imul xchg (bad) mov bound and jmp add pop jo popf in fbstp adc inc jge cmc mov rorl dec jp ljmp fsubs fistpll sbb incl push mov stos xor mov push movsl sarb lock pop mov add clc jb ljmp add mov test cli sar cmp dec scas data16 jmp test add mov icebp (bad) js jb mov out pop lcall stc mov pop lea cmc add xchg in fcomi fist pop cmp std inc jmp outsl mov adc pushf repz aam add inc and xchg adc cmc push xchg jae fisttp or adc jb xchg xcrypt-ofb cmp test (bad) cltd xchg jl imull rcll in adc fstpt cmc test int pushf stos les fwait sbb inc out imul sub add cltd add push subb add fcmovne inc mov jno int negb das movsb xchg cmp cmpsb adc movb out (bad) stos test inc icebp dec aad mov xchg cmp adc xchg mov imul jecxz or jno jmp (bad) xor sub in stos fstps sbb or loopne sbb xchg sti test sub xlat push test loop adc fidivrl (bad) add lea mov (bad) or cmpl sbb divl (bad) lcall cmp out (bad) out xlat xor shr iret fcmovne mov stc mov jmp fldt lahf sbb ljmp or lods lods adc mov imul clc cs fildl mov add cmpsl rcll scas push xchg in push lock movb and lahf inc orb rcl xchg shlb (bad) cmp repz fbstp lahf mov shrb je cmp jo ret jnp sarl xchg jecxz sub clc xor in (bad) or iret dec xor arpl fmuls and add je sub xchg pushf cmpsb jne jmp scas dec icebp clc outsb (bad) dec jecxz cmpsl xchg push dec push (bad) sahf das scas in sub xchg mov (bad) outsb out xchg or xchg sarl xor clc jb xchg iret xchg lahf cmp xor cmp cmp pop jns movsb dec sbb (bad) jb movsl jno (bad) stos out push in mov imul stos jne mov mov negb cmp ds shrl pushf xchg pop dec in jecxz sub std jae sub movsl mov mov (bad) dec int3 push mov inc (bad) icebp mov imul stos dec popf xlat adc movzbl jmp jne cmp dec dec stos xlat mov mov out loop cmp cmp (bad) mov rcrb sbb mov add fdivs jne inc insb inc rclb in jns mov (bad) in clc cmpl or lret and cmc xchg test xchg cmp popa and out add jb,pt shll xor adc call pusha adc inc mov shll cmc mov out xchg aad mov xchg rolw jno and leave ret jb jl mov xchg jb sub mov shrb ljmp cmpsl fs fndisi(8087 lods stos int pushf and sub je mov cld mov arpl mov jmp mov mov aas cmpsb push jae cmpsb push pop lds xchg out in or mov in pop xor jne mov sub movsl test (bad) sbb cmp int aaa je ljmp lods xchg ret add cmp mov mov test lock out hlt jl call adc and push cmc adc (bad) cmpsb mov gs ss movsb xor test dec cltd ljmp and jmp xchg loop lret xor cmpsb jno ja lods pop insl inc mov lock sbb enter sbb xor cmp sub in dec pop imul or jo roll cmp jmp enter aad lods jnp xchg sbb daa rolb or nop iret jne adc (bad) dec (bad) mov jg cmpsl jb stos mov sub mov and rcll test adc mov fwait lret fist outsl pushf mov push mov adc inc fdivr mov (bad) fcmovb dec into movsl pushf int push ret es (bad) cld inc in mov pop pushf mov cmpsl xor mov repz xchg push push test fsubr adc jge (bad) add or sbb in add mov add lret jbe hlt jmp dec fistpl sub out les dec adc jnp xchg imul and movsb stos mov xchg repz ds push packuswb sti (bad) dec lds and int3 (bad) loope daa mov xchg or lret inc in mov xchg adc rcll mov xchg rcll lret adc in in insl inc movsl add aam cmp std pop xchg movsb add hlt sub ja loopne mov sarb movsb rcll repnz jb inc xchg cs mov (bad) xlat jb (bad) jno xor imul or (bad) rep sbb movsl adc nop out cmc fs or sub pop cmpsl arpl pop cltd loopne shlb xor into rcrb inc hlt adc push (bad) call mov pop out jge movsb fucomip jb fwait into jo call push xor xchg adc push add mov cs jecxz movsl (bad) jg call stc xor stc sahf or and cmc roll outsl into and cs jmp inc inc mov loope (bad) icebp int3 adc aad jmp push and fistpl movsb psadbw andb stos sbb aas out mov xor imul int3 mov jmp jmp ret xchg in push les stos mov int3 add (bad) push out ret insl mov (bad) fstl inc divl pushf add jae bound in xor or loopne jle (bad) enter cmp jmp repz movsl addr16 lods dec mov cmc out and fwait mov movsb test push aam xchg pop jg mov inc lret test mov xchg loope mov and and cli pop js data16 ficoml adc mov pop cmpsl (bad) sub adc sub cmp sbb popf xchg shr jmp push mov ljmp mov lods xor inc arpl and mov xor jmp (bad) mov cli fstpt lcall repnz test jns jae lds push mov mov aas cmp inc ret testl mov jb dec or push (bad) dec mov rcrb popf fnop xchg inc jp cmc stos jb xor mov test pop xchg or mov movsl rolb (bad) cmpsb adc daa bound push pop adc pushf fidivrl push pop push pop popa adc imul cmc js rep mov das nop adc stos fdivs jbe cmp jno push jnp jecxz (bad) (bad) notl cmc mov jecxz jl rep jg int scas hlt fnstsw ljmp loope ret jge test lds mov mov mov sbb hlt (bad) jno mov leave mov icebp testb and in bound add mov std fisub rcl outsb mov inc add jl jo nop cmpsl insb repz adc jb jmp jle mov mov sti jmp xchg pushf ret push or outsl ret ffree aam jb push js pop aam sbb cltd rcll mov dec jbe mov aad clc mov mov icebp push and nop cltd je xor mov adc cmpsb ret call sub adc sarl bound nop jae aad (bad) pop fbstp jmp add popa push mov cs mov movsb cmp xchg mov mov jecxz or sahf fchs mov test lods mov es ljmp xor ljmp and movsl mov adc xchg sub (bad) insb out jmp repz subb or out sbb fistpl jnp jecxz mov cmpsb pop inc jmp mov dec sbb dec in testb dec mov xor mov ret dec mov jae jp jge rol inc mov or cmc fcmovne fmuls mov and adc fildll lahf mov inc adc pop sahf pop daa mov jmp mov pop push lods adc sub out cmp (bad) jl jge sub mov add xchg jmp imul jge outsb lods ret and cmp cmc mov mov inc xor xor repz lahf push cmpsl inc inc or mov add fidivl sbb jno cmp mov gs jp movsb and movsl fstl fbld mov push mov and jmp xchg mov out adcl jne pop adc jne lret adc stos mov mov ss xlat mov jae xor pop jns pop pop cld iret mov and popf push or in or repz (bad) sbb mov jno popf pop mov adc (bad) xchg sub push sub aad shrb shl mov push cmp add xchg ja pop mov repz ret lea xor mov or xchg lcall jbe cmp push (bad) lret aam (bad) sarb pop pop add arpl scas mov or stc movsb jle adc or cmp lods nop or popf stc add notl addr16 std inc imul or test (bad) jb shrb dec repnz pop mov push movsb (bad) ljmp test sbb push fwait mov in xor or mov rcll je xchg jmp xor fcomps inc shlb fstpt idiv cmpsb movd mov std shr arpl shll inc xor sub test xlat jmp in fdivl stos mov test xlat jae pop rcr pusha push jbe,pn pop ffree sub insl insb inc and adc add sbb stos repz jb dec or mov punpckhwd lret push pushf jl lahf xchg push cmc movsb jmp lods add jmp mov int3 push xlat loope jmp jo pop sbb fs popf mov sbb cmpsb std (bad) std movsb jge mov jp add decl mov fidivr mov xchg jmp aad adc sbb aaa loope daa push mov and jb bound xor movsl shll stos clc pushl pushf xor fldt add jnp movsl pushf shrb mov nop mov (bad) repnz imul mov sbb test dec mov push mov cmp repnz clc popa outsb mov icebp jl add mov icebp sbb out shrl lret icebp jmp pop (bad) cmp sub outsb xlat mov jmp movsl dec aas xlat mov fildll or mov inc sub je jo jnp pop mov add stc or mov stos out out push pop out xchg imul cmpsb fdivr les xor dec lods fisttp in ret adc add into jp fldcw mov adc (bad) or mov daa jge repnz imul push sbb ja xchg xchg (bad) cli mov xor mov add icebp jnp add xor cmp movsb js add add lcall jmp mov test xchg xlat test fisubr xor cltd pop cmp jae xchg into jmp jmp notb rcll mov imul cwtl bound or sar shll lods mov ljmp mov divl lret aaa out movsb or aaa pop jns add mov out mov loopne inc jmp add push cmp xchg jmp pop mov push das (bad) adc test adc out sub stos (bad) pop sbb out (bad) dec mov jmp std cmp sarb xchg push rcll mov fs dec popa pop jbe lods dec xorl int or subb shrl iret inc leave cwtl addl mov cmp ljmp nop ja or sub fucomip stos jno and xor sub test inc and mov sbb ret push in and and test mov xor ja jb in sbb mov int3 (bad) and push out pushf inc fistpl push push stos xlat frstor dec and stos lock cmp imul lret mov int ret xchg out out jbe inc js bound inc cs fnstcw rorl xor or fstps jge add ret cmp repnz (bad) aaa sbb jnp ljmp adc lds lret mov repnz cld orl clc cld xchg mov xchg rclb adc mov dec gs pop out mov cli test loopne out pop out fnsave int push ljmp in lock es sub push popf pop (bad) or add mov xor ret ret add leave mul xchg test jmp sub sub lret mov int3 jnp jmp mov jae ljmp or xchg mov mov cmp mov ret fsubr and aaa (bad) or lcall out sar sbb inc sbb stc push adc inc mov xor lock jmp sub aaa insb xchg adc and or xchg add mov pop movsl clc test aaa cli repz stos mov lods cmpsb fisubl mov in sub leave mov shrl sbb push xchg xchg mov mov shll pop dec push pop mov jp fbld xchg adc adc pop cmp addr16 pop mov sub ss pop and or and daa cwtl and (bad) xor fucomi (bad) pop outsb bound aam lods and xor jmp in fadd aam mov sbbb repz xor mov mov aaa and imul xor mov xor lods outsb aad repz mov add inc and test adc outsb ja push dec sbb dec addr16 adc pop das sub and cmp stos loop add dec loope dec sbb xchg mov ficomp xor ja pop mov mov dec popf imul mov inc mov outsb scas mov mov int3 out ljmp pop and iret cmpsb fisubrl add cmc inc adc in loopne jecxz dec imul ret stc xchg fcomps fbstp stos pop push stos clc ret fs out inc and adc (bad) cmp lret sbb ja clc xchg (bad) fildl sbb jecxz out stos aad xor out mov rolb insb add in repnz xchg xchg fisttp insl stos icebp mov bnd cld cmp pushf pop lods ja out push jae shl bound push push fisttpll pop outsb test sbb jmp out (bad) lcall inc adc cld leave jmp es jns imul (bad) cwtl cld daa scas jbe push xor add jmp push cltd bnd into fs (bad) repnz xchg jbe into xchg arpl xor push vmread pop and mov ret pop sbb mov xor rorb mov xor sbb movsb movsb loope add int sbb inc inc sbb xchg jb mov adc stos push jmp xchg bound movl out imull cmc js jmp pop lea aad movsl (bad) jle repnz add out xchg mov jb fwait xchg adc bound ja pop notb dec cltd add jecxz mov xchg out pop movsl push lods inc pop enter mov push sub rorb lret add xor outsb jmp or addb jge stc sbb mov xchg je xor jne insl mov pop mov insb jae cmp dec sub xor aad outsb int3 dec les jbe (bad) cmc icebp ret sahf out aaa fdivl lock push sub cltd call out fcmovu jb jl fisub in into mov push loopne xlat mov mov rclb aaa jg inc cmp les pop (bad) movsb xor clc pop mov dec adc cltd outsb movsl jg lret fidiv sub lock jecxz mov (bad) lahf cmp std mov mov adc jmp sbb or in fildll js mov popf mov dec (bad) mov popf sbb jae mov inc idivb cmp xchg outsb notb lret pop push cli ds adc cld sbb aad jp in outsb dec xlat xchg add and lret fs mov fistpl cmpsb imul sbb stos mov je in in aam sbb cmp lret jmp inc add xchg ljmp or or xor fildll dec lahf mov outsb cmp and jge dec imul jb aad lret sbb icebp clc outsb movsl jmp out and cmp dec leave inc das or add cmpsb jg inc xchg out or mov (bad) xlat push or insl repz xchg inc fadd add pop jmp movsl dec ljmp (bad) andl das jg push (bad) outsl std (bad) lcall loopne scas stc pop fbld xor or mov sub outsl fmul stc mov ret stc jnp (bad) fs jmp das repz repz test insl cmp (bad) lock mov aaa mov stos dec pop xor jae and ja pusha test repz mov data16 (bad) test in scas ds or add out imul pop mov adc sub inc sahf pop jecxz (bad) jo inc lods xchg cmc push adc mov (bad) je jmp nop mov push xchg or sbb lods frstor icebp shrl mov lds push loopne xchg adc adc aam mov jno loopne std mov and mov xor sbb notb outsl jae cmpsb sarb sbb jb and repz mov int3 cmpsb cld jnp ss test xchg mov stc mov ja cltd jg sbb imul repnz cmpsb lods mov movsb fldcw bound pop adc das dec xor movsb mov xchg daa (bad) push lret (bad) negb rcll xor pop pop xor repz aas mov sub movl sahf lock push clc cmp loope adc xchg ja ljmp push adc jmp mov add adc mov bound (bad) cmp leave mov jbe outsb rorl fsubr rorl sbb (bad) repz call mov aas lahf sbb scas nop or stos (bad) mov and lods sbb xlat stos mov or out imul xchg push (bad) stos xor (bad) lret xchg cmpsl mov cltd jnp leave xlat sahf adcl xor xchg movsl (bad) ljmp and push test loope les jmp xchg pop mov mov mov xor xchg mov test xor fcompl ljmp xlat repz mov gs pop push fidivl mov in cmp in fisub mov pop (bad) jl lret aad (bad) mov mov jo movsb (bad) mov fadd mov out fwait movsb fs cltd mov mov xor and cmp mov inc ja in js mov mov xchg js mov jne insb sahf xor push movsb divb xchg insl xchg addr16 jno push xor fisubl mov lds imul xchg mov popf pop lea sub adc inc aam lods (bad) xor jae movsl fdivr push shl push push gs jmp inc jecxz xor jns inc sbb (bad) lret loope sbb xchg cmc js stc xchg lock jbe cmp nop (bad) jle sub push lea fwait int3 sahf cli sbb mov stos pop pop jmp cmp (bad) scas addr16 js ret out inc pushl push lds push mov jmp ljmp out inc and flds arpl lahf xchg movsl stos jecxz test inc (bad) and adc add fsts inc sbb lods sbb jecxz mov out (bad) mov sbb test cld jnp addr16 mov cmp inc mov (bad) frstor loopne rclb rcr clc adc cmpsb outsb lods xchg data16 or mov movsb adc lcall adc fwait call test jp or cmpsb (bad) xor mov lods sbb in jp lret and aad aam addr16 cld jnp jo cs pop add dec loopne hlt xchg nop cmp mull arpl sar int3 icebp jo jmp xlat inc out mov jnp push xchg sarb push stos adc dec clc or insb out adc sub jnp xchg rcrb mov ss push xchg data16 xchg push lea or fcomps lahf inc fidivl (bad) mov xor mov cli bound in jle jns je pop cmp jnp mov fldcw sbb icebp jb lret in fsts mov cld fisubrl dec arpl pop jge dec cld dec jmp js ja adc iret test ret xchg adc fistl mov clc jb mov ljmp negl loope mov xchg mov scas out scas lcall movl jge mov sti xchg inc mov jl mov iret mov lret cld lret cli mov bnd push and sarl fildll adc sbb nop xor lret push ficompl scas mov stos mov push lcall aad scas cmp bound stos cmp jbe (bad) mov add mov push xchg xchg test push adc (bad) shlb jae dec out dec adc mov jb jmp repz in lock add mov inc dec mov (bad) push pop notb int repnz outsl cmc movsb rclb jnp xchg movsl aaa scas imulb push mov repz lds push jmp jmp call (bad) sub push fstpl test pop xor mov mov fsubs sub mov in jmp sub pop stc adc cs push aas mov addr16 mov ds jg lds mov xor xchg and or ret (bad) sar imul fwait jg mov repnz cltd popa ja cmp fldcw (bad) ja stos mov xor mov xchg das sub xor les mov xchg pop cld movsl ret movsl push aad fwait xor sub cld xchg jbe test int3 test xor icebp xchg pop ljmp (bad) lods outsl addr16 (bad) cmp mov ret mov (bad) adc xor fimul das popl (bad) aas stos fsubs xchg or stos xor rcll jbe mov sahf inc mov test subl jmp pushf mov seta fwait cmp jns dec sub mov jns jmp and xor jno jp add adc orb add push in jg pop in call flds xchg add cmpsb pop shl mov mov xchg add add test sub jl idivb stos push push jno adc sub jl or jb jp fnstenv test adc jno inc enter rcrb pop dec mov gs hlt cltd movsb ret movsl addr16 scas test cwtl jecxz cmpsl pop cmp cmp js cld aam rep mov or xchg xchg push imul js stos pop jecxz cs jp add jo cmp mulb cmp and (bad) test in (bad) xor lret cmp jnp cmp jae repnz movl mov and mov (bad) (bad) xchg les or js jg js jge xor lods movsb int3 (bad) int3 shlb lahf add dec clc or fiaddl or mov cmpsl lret dec jns mov repnz movsl xchg iret rcrb cmpsb mov loope mov xchg mov jmp mov int3 and jle cmpsl push stc ret inc mov xchg jo fldlg2 jmp scas jg jecxz mov add (bad) sub je shl mov or push (bad) ja add mov mov (bad) ljmp xchg mov outsb xor lock sar insb adc xor xlat pop cmp popa mov cmp sti mov mov fcompl jg xchg jl mov rorl mov cmpsl cmp std fwait andl lods add fs dec cmp movsb push pop cmpsl rorl fidivl jge js shlb cmp test pop in lods dec jp clc add in leave jle aas or outsb into popf cli sub lods xor add dec xor cmp loope xchg and cltd mov ljmp push add xor imul clc add push mov sbb adc lods add (bad) aaa mov hlt sahf sbb dec mov dec or pop mov hlt mov dec lods push (bad) or mov fs xor into aam pushf dec nop jne mov repz (bad) aaa cmp mov inc loope (bad) cld test jmp (bad) sahf (bad) leave (bad) xor xchg jmp mov test add imul jnp mov xchg jl stos aad mov dec jb cmpsl mov pop icebp fsubs xchg rclb adc mov lcall inc push mov cmp sahf repz cmc jmp out (bad) bnd pop jnp xchg lcall dec gs inc add sub imul lods adc fsin mov pop mov ret cmp or lret lea xchg add push cwtl xchg scas mull cld imul test (bad) push inc push and xchg cmp test rcrl (bad) xchg or aad pop pop icebp pop orl dec pop mov ljmp dec fucom fucom push push fs dec repnz pop (bad) lret pop cld mov push arpl int mov int3 outsb test xchg or or loopne lret cmp ss out jo xor cmp jno jp xchg jb fcos jns outsb mov insb jno inc mov insb and fsts push inc or and popl mov popf jmp mov in ret aad pop xchg fistpl jbe roll test push xor std bound rol stos push xchg jo pop imul fistpll fldl bnd mov adc adc pop jecxz xchg xchg loopne adc aam (bad) mov jge test icebp cmp mov mov pop pop fwait cmp (bad) mov (bad) aam (bad) cmp sub (bad) roll aam jl push mov das jns aas test es mov cld mov aaa out xchg js nop mov movsb inc call fucomp mov in add aaa out inc and xor fidivrl mov mov (bad) cmp add pop cmpsb scas xchg movsb test mov bound ret movsb fsubl dec mov je addl ret xchg mov jne fistl out imul out mov push hlt or mull xlat mov or push dec test add fstpt imul push mov stc clc out jg fidivrl hlt jno jle or xlat pop mov push xlat mov fldt jmp mov ret (bad) dec mov add xchg js iret sbb js fdivr jge jecxz aad jno cmp iret adc mov leave clc movsl shrl in out fstl xchg xchg bound (bad) lret out dec push dec inc popf inc dec jl lock or inc mov or jp jp push or js xor jge push xchg jl cmp and arpl mov sub mov imul in hlt stc adc inc inc push (bad) hlt cmp loope arpl call cmpsl hlt mov fstps jecxz or fistpll jns xor int3 das insl push push sub jae inc pop stos out jno icebp fsubp (bad) push xor stos repnz repz adc fsts mov mov cld aam daa insb movsb ds jge test add mov cltd jno test xchg shrb popl bound pop inc push in insl cmp mov mov scas cmpsb cmp movsb pop into pop ret bnd ret xor xchg out (bad) add add aas xchg mov out xchg daa jl aam fmull push repnz push mov movsb movb pop pop pop lods jmp test sbb das sub fsubl mov jmp mov cmp inc push jg movsb mov stos xchg mov imul cmp mov icebp xchg in aaa mov icebp in outsb pop roll shrl jbe add pop insl pusha or xchg lret cld lret mov out repnz ror cld mov and xor mov lods lock cli inc push push aam call movsl lret insb insl push jae jle adc rclb lret arpl pushf out sahf xor mov insl aad mov pop repnz jmp dec push fnstenv scas fcomip stc imulb idiv inc mov hlt mov mov or mov mov addl loop icebp adc test xor sbb xchg mov out add popf cmp or push je sub adc clc in push loop in out push (bad) repz fdiv and mov mov repnz push aas lods mull xchg sbb or (bad) ljmp add mov add movl xchg ja push sti dec jnp out test mov mov icebp stos (bad) out dec sbb mov aaa ljmp mov icebp iret pop pop sub sub push out fistpl into test or mov xor imulb mov adc out stos cmp jbe stc in out outsb nop daa (bad) mov lcall pop push add push icebp mov xor mov (bad) call fcomip inc jns push jae push shll call jb cmc stos movsb pop and mov sbb movl scas mov cmp dec repnz ja rorl push iret popf je cld bound dec adc int int3 imul es test push mov clc or sub pop inc ja js lret cmp or mov mov mov push fiadd jmp ds movsl cmp adc ja cs aam push xor mov jb das xchg mov jecxz push scas dec jmp mov mov cltd lret jno push jp jmp in loop xchg jns out push in loop xchg (bad) test ss cmp lahf pop aad fstl dec mov in or jno dec lock test mov cmp jg adc lahf inc test push jo cmpsl fdivrl movsl enter lods popa mov push pop mov lcall and mov rorb icebp jno or jno pushf adc ljmp inc mov sti sub jno scas adc es sub loop dec mov (bad) dec call pop fisttp insl les pop pop pop in imul sbb enter sbb xchg jg mov aad out jnp xor scas (bad) jb mov repz mov cmc aaa dec xchg repz mov dec aaa pop xchg push mov stos mov je outsb mov (bad) sbb or xor mov cli inc jo mov icebp les popa pop pop mov push (bad) int mov xlat mov mov and push out aaa movsl push push lds adc and out xor or jmp (bad) mov mov mov inc pop mov mov push mov cld rcl ss jmp out xlat ficoml rcrl rol cmp lahf sub outsl movsl xchg jmp jecxz cmpsb imul decb (bad) mov stos adc outsl mov hlt ret stos or add jnp data16 rcll mov pusha js fstl mov jae jne fldt pop xor repz jns xchg push mov out js idivl (bad) jo (bad) ficoml mov mov push rcrb shlb stos call repz fnop inc inc imul leave pop scas lcall adc pop pop lods and movsl xlat and adc sub enter inc mov cmp pop jmp mov in fyl2x cli test inc dec jg jbe mov mov out ja and mov aad jmp dec aad jl or jl icebp push jge xchg fistp fisubl mov cltd ss rcr inc mov cltd push out jecxz fsubs ljmp data16 pushf aaa fisttp insl in sbb ret and fmul imul aam sbbl dec jmp jmp pop jle and test aam and into fwait pop ljmp add out jl cmp cld (bad) movsl mov add call std mov rolb and jns,pt mov fisttpll sarl test and and out mov cmp jg mov mov into rcrb (bad) jmp push or lret dec insb les jecxz in jbe push (bad) xchg mov sbb ss xor std mov aaa dec xchg ss xor mov jecxz xchg es mov sub out add stos xor pop xchg scas and adc cmp xor pop sub inc pop dec mov in stos test adc movsl test outsb lock dec cli cmpsb dec stos daa lret movsl cmpsb stos std push jnp mov sbb mov fildl pushf mov xchg xchg test daa in pop pop mov ret ds adc xchg xor xchg movsb jle (bad) dec sbb cmp test in cmp jmp lahf in decl int fistpl imul (bad) jge mov or cld jnp cli lock inc mov fs stos leave je popf push (bad) stos mov test (bad) sbb inc sub imul rorb adc ss push pop push cmp lock xchg mov imul mov jmp mov fwait adcb jb popf (bad) fldcw xchg (bad) mov jmp mov jecxz pop jl lret xchg mov xchg cwtl push fisttpll push adc xchg std rcll lods nop mov leave test jbe out insl fcomi (bad) fsubs out mov mov outsb mov daa and pushf mov fistpl imul (bad) pop cwtl cmp xchg lret jl cmp push dec scas jmp sbb push popa sub jnp mov jge cltd out mov inc cld fnsave push lods push jae pushf fisttpl shl in mov in (bad) and ss push inc loope inc xchg xor cmpsl jmp mov fwait cli xor xchg add fisttp mov sbb in es hlt fmull cmp adc jecxz push push rolb (bad) icebp adc xor rcrb jl cwtl test push mov mov push in les jg xchg (bad) (bad) pop adc push subl cmp (bad) aas mov push jmp sub mov scas jae fnop ja adc bound pop sahf dec aam rorb (bad) sbb add cli movsb push inc mov jle xchg aaa (bad) ret cwtl outsl imul orb mov test lock clc ss outsb add into movsl je sub repnz out mov je rorb jecxz mov pop bound aad cmp jg ret aam movsb jl (bad) jae mov jmp ljmp bound (bad) enter jne pop out xchg pop sbbb (bad) dec jg push (bad) loop dec cmpsb (bad) inc (bad) inc mov pop scas mov lret fiadd idivl (bad) and add lcall adc xlat push xor aam jnp bnd xchg aad call adc sbb jbe mov (bad) in test (bad) repnz je clc pushf loop mov in jae xor fistpll jne sbb jbe inc mov test push loopne int3 adc push lret cmp int and cmp repz out xchg mov pop aad fwait int xchg std stc mov in or scas int int3 addr16 cltd xor mov jbe in rol xor jge push outsb xor ficoml es ss rep xchg cltd jb jp sub xchg sub jl repz iret es inc add std clc push or mov outsb jno call adc loop push in push sbb stos loope sti mov lret xchg jb xchg cwtl push push into in mov stos mov jge (bad) jno xchg into xlat xor lods test cmp xchg lret inc mov mov dec jg pop lds hlt in mov jge push xchg int3 sarl push icebp test fnstenv pop sarb lods jmp pop xlat in divl mov pushf mov jb mov pop mov mov adc jl and mov and mov bnd (bad) xor lahf repz cmpsl in (bad) mov orl sbb cltd push dec xchg mov and or rep lcall cmp jmp sub mov (bad) push pop sbb data16 ret lea in imul xchg cmp add push lcall mov and mov scas iret mov dec mov jne (bad) daa aaa bnd je hlt jb dec arpl loop jae sbb cmpsb repnz cmpsb cli (bad) in hlt mulb or hlt repz xlat repnz jmp dec test repz mov sub (bad) mov adc ljmp fnclex mov clc xor enter fcmovu sarb jle jno repz cmp out mov add xchg dec aad cmp adc inc aam xor sub and lock mov jmp pop mov xchg pop jo cmc stos jecxz pop fs mov in data16 push in outsl xor mov cmp jg xchg mov loopne sahf lds loop mov lcall mov call mov jge and mov cltd inc lret cmp mov jmp adc inc mov sub pop sbb sbb inc popf push scas lds sub sub fucomi aas lods imul loope int shr (bad) dec inc mov push pop cmp mov repz ficompl ljmp pop lahf sbb mov das xorb fstp xchg movsb aad test sbb cmp enter cmp pop (bad) and out or js lock sarb roll (bad) clc pop das cltd xor jbe push repz pop mov flds mov mov cld push stos fcmovnu (bad) aaa pushf call adc jmp jmp sti mov lahf fistpl cltd sbb es out iret pop scas insl mov pushf (bad) mov mov dec mov pop fimull mov (bad) iret (bad) mov and test insb pop pop outsb mov cli pop jnp jl sbb out outsb repnz stos ret jp lret xchg pop nop mov mov sti lahf lret add in insb mov icebp cs mov rorb insb (bad) lcall mov mov fld xchg movsl lods ret mov pop enter bound enter sub int push mov jmp xor dec jmp fnstenv jb (bad) ljmp and mul jp xlat es add mov push bound mov mov or push js fidiv push js hlt mov test out out jnp rcrl negl mov ja cmp xorl xchg jnp jp imul mov iret call pop lods jmp push stos stos xchg fnop or (bad) mov inc and jecxz into call cmp scas mov xchg jmp cmp enter andl sub xchg out sub arpl mov lcall inc xlat (bad) mov mov stos and inc test add and dec cmp (bad) sar cmp fnop or jecxz mov cmp cltd push aad sbb (bad) and lcall pushf fs add mov pop sbb mov imul outsb out int pop and inc cmp call jge add shlb and mov data16 loope popa xchg mov outsb fisubrl and test xchg fsubrl jb mov xor xor push loop out test inc out pop xchg push mov inc xor rcrl dec fdivrs cmp rcrb fsubr adc rorl xchg iret imulb lret iret mov cmp adc ljmp xchg das pop add fnstsw out outsb idivl loop mov adc idivl dec iret add adc sub and jge das mov rep cmp clc jns adc fstl sub xor cltd inc (bad) rcrl mov push fnstcw dec jmp adc sub dec mov fwait push ja movsl mov jmp dec mov imul adc fstl mov negl or hlt add movsb xlat xchg fmull daa xchg iret stos jno mov test in push sahf jp adc pushf in js push mov jb repz (bad) nop or sbb cmp adc or cmp ret adc push shr mov ss dec lods mov loope mov fld repz out aaa mov (bad) jbe and cmp fisttpll mov shr mov clc jecxz xor std dec sbb sahf data16 mov inc int mov and dec mov cmpsb cli gs repz pop stos clc stos xor lahf or push and pop pushf out iret mov mov icebp pop xor jl mov or mov lods inc shrb mov xchg sbb stos mov shl cli pop loope sbb loope (bad) pop adc int3 or sbb sbb jae mov cmp jb sbb jnp shrl cs jge jle test xchg fbld xchg cmp out add push int3 or push mulb cmpsl or push cld and popa xchg out lods pop stc add xchg lcall cmp and jecxz movsl (bad) clc xor into sub xor xlat mov mov dec push pop addl adc pop in imul jns xchg pop addr16 inc or dec xchg inc cmp push cmp and fstps movsb stos jo stc loope and jb xor fidivrl loop adc jb movsl sub (bad) int fcmovu jle jo mov jb xor repnz scas loop out add pop js adc rcrb mov mov dec xor push mov dec stos fwait int stc divl shr adc jmp out inc jb cmpsb add aaa dec dec add jbe cli dec sub jmp jmp cld inc movsb mov fdivs out push push jae test mov (bad) leave mov cmp sbb push (bad) shr push xor fsubrs scas inc out and push aas or iret ja out (bad) outsb push inc lret cmp or loopne sbb cli jbe mov stc add subb fdivr stc lahf aad pop fwait or cmp mov addl or xor jns mov jle stos sbb cwtl clc xchg xor push xlat out fs jmp popf stc add push fst ret data16 push inc inc add outsb aas neg cltd jb xchg sarl shr negl push mov stos and cld test push outsb dec orb imul adc cmp push jmp shrb out xchg adc in jnp fnstenv jmp jae jecxz mov (bad) mov push xlat xchg ja lods stos xor or fwait xlat pushf addr16 jno jmp fisttpl mov pop and lret pop pop push cmp stos adc xor push mov jg pop mov fcomps fisttpll pop pop stos and bound mov (bad) adc mov leave mov mov cmpsl mov dec push mov xlat mov push sarl xor push loope pushl push adc dec out inc ds sbb sub js ror ss xor sub cltd pop iret cmp jno in fnstcw mov add js fcmovnbe mov mov mov xchg dec lock shr sarb fsubl sti jno int pop fnsave push pop sub lcall add xchg mov adc daa inc pop mov jae int lock jns mov cmp ds mov daa (bad) test fadds clc pop arpl pop or mov jns jge lea test fwait and or pop stos in fucomip lret mov jp lods xor repnz subb mov push pushf inc adc das out enter fwait push jno jmp mov mov sarb mov dec movsl lock cmc movsb cld jo movb add stc dec scas pop and lds stos rcrb jg outsb sbb fwait dec fnstcw sub jne scas test data16 (bad) xchg imul call or in and movsl mov push xchg jbe in imul (bad) in stc jae jmp (bad) ss loopne subb xchg arpl add rcr arpl jmp sti (bad) jns cld std int add mov and mov cmp sub mov ss or jle dec sbb outsb mov fild sub mov add sbb call xchg outsb and mov xor cmp push and fildll add cmpsl cmc jnp (bad) adc or inc out fmull ljmp hlt sbb int add sub loop out lahf sub xchg jp pop popf mov pusha imul ret or push xor or xor pop mov mov dec and stos or stc add fwait lock dec popf cmc xor dec arpl pushf push pop fdivrl movsb jns hlt stc movsb cmpsl (bad) push popf cmp xchg dec xchg lret (bad) and xchg mov dec in lods ds test rclb adc call arpl ljmp xchg inc leave or push lods scas fcoml mov xor mov outsb add movsl aas sti dec leave loop rolb stos loopne adc (bad) dec cmpsl jb add sub jg xchg jl stc mov pop pushf jle shll loopne aas mov jl pushf stc out test jecxz push inc out addr16 imul mov sub mov (bad) mov xchg lret mov add into rorb dec out rcrb icebp xor ljmp testb or mov cmp push sbb sahf jp das ljmp pop adc jecxz mov mov bound ret mov leave (bad) xchg sbb fisttpl xchg mov mov stos xchg cs insb shlb pop movsl mov hlt gs jb loop cmp lret add cmp cmpsb xchg sbb stc call sti std xor repnz sbb int (bad) adc icebp in arpl push lods stc adc mov jbe pop cli xor in fildll xor out xor arpl mov sbb aam movsl cwtl cwtl sarb test cmc lret jg cmp test mov cli (bad) cmp sub (bad) mov sbb push out mov sub in aad push sarb xchg movsb lods shlb fwait idiv es mov jno cwtl lods mov in sar rolb insl clc out movsb cmpsb test cmp mov nop ret jmp sub jecxz sbb mov sub jg ja loop loopne es sub mov movsb xchg test or sahf xor mov enter adc mov push or mov or or dec fwait cmpsb adc into mov sbb mov dec rcl dec (bad) xchg (bad) cld pushf pop repz jbe shrb mov xor js add stos xchg mov (bad) imul pop repnz cmp pop mov mov not ret mov mov fsubrs int3 jbe lahf dec jbe cli sbbb repz lods mov and sbb (bad) cmp xchg pop jbe decb scas mov out shlb sar add dec lea sbb imul (bad) dec insl cs mov mov pop icebp psubw out mov cmc cs push out call mov aam ret xchg push sbb loopne mov mov scas inc lret mov (bad) iret inc or (bad) roll dec xlat nop xor sahf push sahf aaa ljmp cmp cli in xlat sub in jae outsl data16 ror stos adc imul fnsave test js jl add cmp stos add mov loop xchg cmp fldl mov cmp or jns sbb stc mov mov (bad) mov xchg or lock mov mov mov jno ja rolb mov mov mov enter scas mov outsb daa ficomp cmp cld cld in pop adc cld arpl (bad) cmp clc cmp pop mov (bad) pop mov ficoml ret jb jle sbb mov xor dec leave loop fdivs aas or xor mov xchg call and in aad outsb cmp xchg or addr16 lods push mov lock ret movl sahf in add xchg xchg daa and in out push insb out push xchg pop xchg pop ret jnp xchg popl mov and cmp icebp xchg pop loopne (bad) fistpll mov jo cli jno jnp mov mov xchg hlt lret pop repz ret mov repnz dec (bad) (bad) packssdw jg jae mov add stc cltd popf mov sbb dec into outsb jle and inc cmp and js and outsb iret jmp cmpsb movsl or xchg cmp repz cmp pop fldl mov (bad) aam cmp jl (bad) iret movsb or jnp mov add jge shrb stos xchg push cli dec fwait stc sub icebp sub mov std jae jg push pop aad int3 push mov (bad) lds lcall sti ja add fptan jmp stos mov pop mov mov push (bad) lock (bad) repz (bad) xlat mov jmp mov ljmp imul repz xchg cld jae cmpsb mov pop int3 mov lret cli xchg jnp (bad) iret fcmovnu xchg in adc imul mul (bad) icebp stos out ret lock sbb jbe les xchg xor and xchg mov dec mov push fdivr stos (bad) mov out mov inc fldl2e push mov (bad) idivl dec outsb iret mov dec jb mov xchg xor (bad) clc fidivl (bad) les pop int3 shrb sub movsl fimul add icebp adc mov fimull lods inc ljmp xor lahf cld outsl mov int3 repz in cmc mov shll mov repnz push adc daa inc mov and push mov mov xchg movsb cmp mov testl shrb mov pop aaa outsl jo cli (bad) add leave pop or test es adc mov push movsl xorl ret out pcmpeqb into movsl mull aas bound cmp push pop leave add faddl lds shlb (bad) iret jbe incl insl jnp cmp data16 ret inc ret sub xchg repnz fild push dec xacquire xchg out (bad) dec mov adc sub mov icebp xchg decl test adc stc ss jnp xlat insb mov push in data16 pop fnsave sub test jnp dec jge cwtl xlat sub into ja lock rcrb mov jecxz push lock ss add xor add outsb test icebp popf leave or movsl jbe push shl cmp outsl mov sahf and das pop iret sub pop jmp push test mov mov jp aam icebp in xchg adc push popf mov fsts push in xchg into rol adc sbb test mov inc popa push mov pop imul xor xor xor test icebp adc lret std push enter movsb mov int3 dec outsb iret mov jg xchg movsb fidivr xchg sbb mov fdivrs loop stc es pushf mov gs jne cs dec mov out xchg pop insl push mov push jne fcmovnb sub iret imul fildl mov int3 out xorl mov adc inc imul cmpsl inc inc jg (bad) jo fistp adc cmpsl movsl out mov mov or xchg lret sarb cld loope in scas in cmp push cli hlt cmp enter mov aad aas sahf (bad) mov or fucomi (bad) popf hlt adc pushf mov sbb mov stc aad hlt jmp xor cmp or test push (bad) xchg clc cmp das sbbb stos mov push xchg andl dec aas push jb xchg jnp mov imul sub in xor enter cld jo out (bad) add (bad) cld and mov xchg cmp cmp std pop (bad) xor dec adc divb sbb in outsb (bad) mov bound xchg mov cmc dec push shrl inc push test xchg (bad) ds jbe adcl inc dec inc int3 dec mov (bad) std jb add xacquire sub out jmp xor sub mov xchg xor inc or test stc and movsb mov repz into nop jle and in mov push dec dec lret sarb jle ds and fucomi sar xchg jnp pop mov sar insl clc xor test xchg cmp xchg sti popf or mov lock movsb jl xchg mov cli rcr xor repz rcll fwait aas sub aam fistl mov sahf push (bad) lea push hlt jg,pt pop mov repnz jb,pt test jae cs jge and cmpl imul pop lcall add ret test std pop push sub loop push in sbb ja out divb sbb inc (bad) fidiv push jb mov inc scas lea cmp insb mov sub outsb jne std cmc mov repnz cmp jbe cmp push hlt ljmp jp inc repnz xlat mov cli (bad) out stc push fdivl es push jp push repnz stos out sbb idivl lods jnp pop jno test jg movsl xor add xor mov xor or sbb xchg mov mov pop adc and lret inc shll data16 mov lret adc adcl pop dec jl ljmp loopne addr16 mov mov xchg aaa cs out adc mov adc lock in je inc push and cld stc xor jne clc pushf xor cmpsl pop cli inc sbb pop loope pop out and fadds inc imul pop mov pop jb push imul ret cmp adc lahf xorb mov icebp fsts pushf inc ss out pop fldcw dec fcmovb out mov std test jbe adc dec sbb mov lds ror mov dec test jmp dec lahf test test push icebp jb scas imul cli pop pop cmp xor (bad) cmc (bad) xor mov mov aas loop pop divl int pop sbb mov repz nop pop shrb repnz stc xchg fst sbb push idivb sarb push jbe push stos and add lock xor in fist mov sbb jmp cmc xchg xchg add pop ljmp pop loopne loope notl ds add repnz fidivr lods push xchg jae sbb movsl repz add inc push sahf lret mov inc jno scas xchg pop or pop (bad) outsb gs cmp fistl icebp inc movb adc cmp stc fucomi icebp in outsb (bad) test clc out pop out imul jmp in clc out stos push cmp lret jmp int mov pop (bad) ja repz shlb mov jmp mov dec gs xchg (bad) jns jb fbld outsb xor push mov jmp jl data16 jge and mov mov xchg adc jecxz mov and pop jl es jae test repnz xchg je or pop add inc mov out repz out in in lret inc sbb scas loopne mov sub xor pushf (bad) mov data16 ja stc std bts sarb inc dec or jmp add (bad) xchg nop mov xor sub data16 xchg mov (bad) or das in sbb mov sarb pusha adc fistp push mov aad xor fisubrl ja movsl jbe lock (bad) iret movsb pushf or fcmovnbe jmp cmp clc jae xor std xchg ja xchg hlt mov (bad) icebp mov scas js cmc test mov add xchg or xlat mov in cmp stos in dec mov mov leave add jle das imul xchg inc adc cli mov pop xor add jb mov (bad) stos ret jp jge mov fsubl adc mov jmp aas xchg cmp adc pop test sub shlb fptan mov loopw divl jmp repz hlt jecxz push push xchg jb push stos adc imul std int jns dec sub leave mov dec stos (bad) sub mov mov sub fcmovnbe xchg jp jo js notl movsl inc mov xor clc repz xchg jae cmp pop xchg imul nop repz jns and sbb jle jbe mov outsb div jbe mov xchg xor sub hlt mov mov add mov push lock test mov scas add aad fstpt insb fistl rolb jge clc mul xchg add jne or and dec test je test mov es cmc notb in lock xchg dec mov jne fistpll cmp bound mov icebp test stos jl inc leave out cmpsb mov hlt cmp sarl clc xchg mov fistl divl fadds pop adc lods add enter int (bad) movsb mov add mov sub loopne and cmc lret cmp jo dec data16 addr16 popa mov fldenv data16 shrl jle lea test ljmp push seta sbb add (bad) sbb lahf jle test fcmovne jo xor sbb stc push and xchg out (bad) repnz push imull outsb mov pusha adc jmp std repnz mov jge aaa mov divb jo adc jecxz out cmp mov mov or pushf mov and pop (bad) fiadd lds loope idiv rol ret les sbb sbb (bad) jo (bad) in mov lods (bad) loopne clc mov mov std mov jns jnp jae mov xchg stc add cmp lods stc cli jmp fdivr sub and dec jmp out sub xchg cmp inc subps movsl cmp jno mov cmpsl (bad) mov adc mov xor loop jl out int3 jbe incb jb cmpsl std jecxz imul stc shrb xor xor cmp mov imul ja repz call or in (bad) jl in lds push imul les pop push test push clc xor hlt ja lcall cli mov dec fidiv lea jle or and jno test gs jae aam xchg mov mov lds call pop les out out shrb and (bad) jge jbe mov lods fsubrl lods icebp loop sbb hlt jns add (bad) std jg push int cmp jge fisubrl jp lods stos sahf das imul pop jl lcall xor jae negb sarb out add and mov (bad) jne push (bad) jae add idivb cld add jo pop (bad) (bad) fisttpll mov pop movsb stos sbb aas jle ljmp pop push fsubl enter fdivs mov xor ljmp sbb fwait (bad) jno push xlat ret cli mov xor rorb (bad) dec jge leave fidivl outsl rol push fisttp jo xchg fisttpl notb sbb cltd adc clc jns int lret rcrl arpl cmp mov cmpsl arpl cmp fdivrl (bad) sub xor and mov mov jg aam push loopne cld test out cmpsb repz clc xchg fisttpl jmp test push cli test (bad) fwait data16 das mov xchg xchg xchg push cmpl rcll mov jmp insl xchg loope stc adc movsb loop xchg push mov sub clc adc mov inc dec xor adc mov cmp fistp movsl movsl and popa clc lret pop mov arpl pop xor repz or js sbb sahf ficoml mov jb in mul cli sar stc inc clc icebp mov js aaa leave lcall and idiv stos cli push stc jl clc jo lahf cmp xor jbe cli jb jae or loop ljmp stos test icebp lock pop xchg cli idiv and cld in clc add push pop lock hlt xchg repz repnz push (bad) repz std shrb nop dec insb push jmp lds jle (bad) out lahf ja fwait adc mov mov in sar in idivl push mov lcall dec pop fs xchg loope stc xor pusha add adc push std cmp fsubr or into adc sbb ljmp ret sbb int3 push int3 adc or xlat ljmp mov iret jecxz stos test pop xor or xor mov inc lock scas xchg push dec imul lahf aas ss (bad) or push pop pop mov stc lods adc movsl lea gs out rclb sbb mov pop adc cld add jb jle xchg sbbb andl rorb inc mov push mov and sarl mov mov lret gs mov orb adc add xchg adc fs outsl mov cmpsl stos xlat ss lret lods mov fsubr out test ret aaa mov xchg push mov lahf jge fcmove notb ss mov aam repz sbb jle mov leave fwait iret mov stos push int3 sbb jle fcoml mov (bad) outsl mov (bad) sahf mov xor movsl in int3 ja (bad) push inc fwait pop ret jns jbe movsb js cmp hlt push popf jge scas in xchg push nop stc jmp cmp stos adc pop out jb test aas test or leave dec mov adc mov mov xchg push outsb jb pop jo (bad) mov iret popf xchg bound pop daa into xor xor jle cmc or mov mov lock and push ret xchg adc test test jnp out jb repz jae or call push fcomi sub fimull test xchg lock in out jl test js (bad) mov mov jl lret (bad) int or jl (bad) out xor mov bswap das ljmp xchg push xchg and pop movsb ljmp (bad) int in mov into enter jno mov aaa outsl incb stos cwtl les movsl or mov lcall stos inc sub cltd (bad) stc fadd loopne bound fucomi adc pop or mov cmpsl cs xor aas dec xor in jecxz mov jns aaa jno xor mov std xchg hlt cmp in outsl jg imul hlt in movb in ja leave adc out iret pop and dec cmpsb bound sub mov inc jnp daa enter into fwait test cltd push pusha cmpsb pop insl rclb xlat xchg sbb inc jg jno jp push int3 movsb adc jge outsb lret cwtl xchg imul fisubrl xor inc lret cmpsl jno xor std cwtl outsb mov pop out add (bad) fidivl push iret test imul mov mov stos cmpsl and add jae jno das xchg mov dec or stos jbe imul adc mov iret aaa adc pop loop cltd cli test fist pop mov (bad) or movsl xchg cmp cmp mov push mov ret inc mov push ficompl out jbe fstpt divl (bad) pusha cmp xchg mov test lret mov (bad) dec (bad) dec inc ret jmp fstpt inc arpl (bad) mov push inc popf negl cmpsb push dec inc sub mov stos mov cmpsl xchg sub inc mov repnz mov jno stos dec je mov pop push jb ja outsb mov shr adc rcrl add int3 lret lret jg push out adc call mov push (bad) push call mov bound mov push mov adc fcmovne iret cmc jbe enter (bad) (bad) data16 cmp cmc nop dec insl inc insb add mov repz fs imulb jmp inc mov insl inc into jmp sbb add dec (bad) mov roll stc xlat xchg inc mov jmp jbe fwait mov ljmp pop xchg push cli loop jecxz imul xor out mov pusha addb std cmp inc pop pop mov mov out fistl dec dec cmp ret push int3 push loop outsl add xchg fcmovb fidiv xchg or dec inc jge shrl push xor andb xchg loope pop cmp add testl add test cmp jmp fwait dec jge loop test and inc loopne out fxtract push popa mov cltd (bad) aad push add sbb in aaa cmp mov int3 and mov jmp pop les xlat cwtl lods xlat orl les into and mov inc sub and scas rorb out mov inc (bad) or add adc mov jns repz dec jmp jle frstpm(287 lret mov aam addr16 mov mov xchg ds repnz dec insl leave lods movsb inc in jae jne outsl lods aaa inc mov (bad) mov xchg (bad) icebp stc fisubl fbstp ljmp loopne or jmp in rolb adc sub imul mov ljmp adc rclb call jnp lock xchg (bad) jo jmp inc adc sbb xor and icebp aam out dec add add xchg leave cli push lret ss dec jno pushf add jmp jg mov movsb fnstcw or leave mov adc xchg jno out and (bad) ja add les and ffreep movsl (bad) rcll cmp adc and cmpsl scas or mov jbe (bad) add enter mov add lock mov testl (bad) iret mov add xchg leave movsl stos cs shll divl mov mov pusha (bad) jno fldenv hlt and in int stc add cmpsb adc mov ds fimul dec jae jnp imulb testl in push je mov movsb ss leave ja popa movsl lods push test loopne xchg lods popw (bad) lods xor xchg in addl in jae or cld out sub xchg subl sbb loop rorb cmp adc cmp ss mov mov iret dec stos ds and scas test pop cmp in lret cld enter adc test xchg in inc sti repz in rclb add lock ljmp mov xchg pop stos add mov (bad) sbb push out repz shrl mov lea cmp out es dec mov mov mov cli jno jnp mov into stos lret pop lock cmpsl enter hlt (bad) aad lds lret jg icebp ret call in aas xor (bad) jno mov and dec mov mov mov mov cmpsb and jmp stc mov scas sbb clc repz mov stc in mov andl jo imul adc mov data16 imul and ljmp and adc out out fild sub xor sub cmpl test stos outsb enter stc lcall outsb mov shrb test mov pushf daa mov imull mov fnstsw mov xor mov add jle fucom xchg fcomip lret outsb out icebp repz stos (bad) add cmp jge adc outsb pop outsb xchg jae xor pop movsb jno fstl sar add add out (bad) lret gs sar sub mov adc mov jae cmp es idivb pop in cld ljmp fldcw jne js sbb mov pop lock sub fbld iret movsl daa pop or fmuls pop adc cmp jae cmpsb mov pop test sbb adc ret xor jo jg jg data16 xor test stc dec jg movsl push out jp lcall ja dec fcmovb jae jecxz (bad) sbb push mov out dec pop ja popf sbb pushl dec repnz jl push subl std sub addl roll fildl adc jecxz push bound inc fucomip xor jmp sub jecxz cmc scas mov stc fwait notb jns jg test out hlt xchg adc in jge pushf add loopne push arpl lock adc pop fcmovnbe test aad mov (bad) cli fidivr ljmp test xchg jg or out mov stc daa mov fdivp xchg div ss mov addr16 fildl cs aaa mov fs notb xchg inc stos mov in jecxz ja sbb fcmovnbe cmpsb lret mov jmp fcomip daa or jbe (bad) lods push imul clc xor mov shrl (bad) shll jnp jbe iret jno in imul repnz pop stos insl sarb jge ja stos mov inc arpl mov movsl push xchg les pop adc aaa loope mov aad in fdivrl jle mov mov adc push addr16 push or jge test rolb leave pop aam push (bad) cli dec and (bad) push jb mov hlt (bad) (bad) jmp fisttpl push dec sbb repnz add cvtdq2ps pop repnz test inc repnz mov xchg mov ret jg jbe adc movl stos mov outsl and adc fcoms loop fwait mov xchg jp or shrb pop repz stos xchg cmc imul lret xchg stos outsb leave ret jl dec out pop out jg ss stos add and dec ljmp leave mov cmp xchg dec out in int3 int3 pop cmpsl stos in ret jmp jae ds add gs mov xchg scas pop enter dec xor push inc icebp mov (bad) lods mov mov dec aam push jecxz mov pop inc adc push sahf xlat clc adcl push mov popf shrl mov aas add mov ds xchg cmp xchg insl jmp add cmp or dec fmul test pusha jno and cmp js mov into cmpsl xchg or xor xlat out dec ja adc push cmpsb mov adc icebp and add divb mov mov pusha iret cmp xchg stos and (bad) sar lahf fldcw fstpt pop jl lret int3 and jb push xchg test xchg jb insb mov movsb call movsb sub mov xchg loop repnz mov (bad) xor ljmp arpl loopw dec mov push cmp divl lods push xchg mov outsb inc (bad) mov stc fwait xchg sbb fildl out scas pop into jo sbb (bad) lds cmc push mov sub mov lahf sub cmp add out sahf inc jb or repnz testb xchg notl adc cmp mov cmpsb test dec test rclb xchg mov mov cmpsl out movsl and adc imulb insl push pop scas ljmp imul pop or mov test jle sub int3 idivb scas mulb fidivl mov mov and mov stos jg ja mov idiv sbb xchg jl ret aam rol ds mov mov mov or addb cmpsb out (bad) das outsb push mov xor mov cmpsl xor sub jbe adc repz lods (bad) hlt lahf mov idivl (bad) mov (bad) test mov mov leave and sub (bad) jbe iret hlt ljmp pop mov or mov jge andb cmp xor gs add add aaa mov stos xchg insl movsb into popa int and xchg jbe emms fsqrt sub pushl in push call sar mov jb lret xchg mov cmpsl mov repnz outsb lods test mov jmp adc jp lea outsl jmp scas outsl ds mov xor pushf fildl push jmp (bad) lock add popa loop fcomps js dec ret xchg sub sub aam addb mov mov mov sarl mov xchg mov cli addr16 ds aam into lret xlat push (bad) stc ret movsl notl push loop shll insl out in cmp pmullw mov xchg inc (bad) aad fwait iret movsl sub jo aaa pop arpl xchg cmp pop fxch inc inc ja (bad) or hlt call insl jp addr16 in pop int3 sub xor jo fisub movsb fs test xorl adc or mov mov (bad) mov rcr gs fcoml jne jecxz mov das iret lock fmull push jmp jae mov stos mov lret mov jle iret add aad pushf out xor out addb nop fsub les ja jno imul jae mov lahf push pmullw fcoml movsl subl out jo call mov mov ret mov outsl cmp in push push fldcw ds ret and add mov add in push push notb jg cld (bad) decl push (bad) movsb aad jmp jb fstpt jge fcoml scas out jge test lahf or mov mov call fxtract stc (bad) mov stc rcrl ja mov or mov into mov jecxz xchg ja push ljmp faddl lret lea out sub inc xor pop ljmp push mov out mov test mov iret adc rcrb (bad) adc lock mov pop sbbl int fdivrs push nop je mov cmpsb inc mov lods scas mov jmp adc push push ja jge push test (bad) mov stos sub jae nop lret fdiv mov imul stos test mov adc adc or pop or pusha mov cmp (bad) sub fisub lds lea int3 jge mov fcoms lds insl adc pop movsl divl sub lods mov or dec loop pop fistpl mov ss cmp adc shlb neg adc cld aas inc jb pop fwait mov dec jmp sbb mov int es repnz ret adc and pop add dec add dec pop out and aaa outsl fmuls outsl fwait inc xlat pop daa fsubrl mov fnstenv ret push jb or and jmp jle ss mov or fsts jbe leave dec sbb mul loope add out xchg sub pop in stc and jo pop push ret mov add pop xchg fsubr iret xchg mov pop (bad) cmp insb push pop leave pop vsqrtsd and (bad) pop aas mov jne sub pushf stos das (bad) adc dec or aam sarl cmpl pop sub test cmp (bad) loope inc iret fs cli mov xchg ret in sbbl jge xlat lea stc pop inc sahf aad icebp popa out ljmp insb jmp popf (bad) aad cltd inc test inc add mov dec inc lahf in xchg adc jo inc loop (bad) ja in dec cmp jb xchg std in mov nop sar out stos fsts fld cli fldt dec (bad) xchg outsb addr16 dec ja jns add mov pop dec mov mov cmp lcall push aad loopne xchg jp rcll pop add stos add hlt mov shrl xchg test lret stos push dec pop and int3 sub cmp jl mov push test xor ss outsb add iret adc cld movsb iret dec xor addl (bad) out jp sqrtps jmp andl mov stc sub push pop dec es jnp jge jbe popa adc (bad) mov (bad) lahf inc int3 movsl xlat inc mov jbe or das daa (bad) int lock (bad) imul jl (bad) popa mov imul push cli mov push fstp mov fadds mov aas push sub rcr bound int fisttpll cmp movsb jb pop (bad) (bad) lock or cmc stc mov mov fimul jl add test inc xchg lret loop loope mov lret jge pusha inc bnd lahf xchg scas movsl aam ljmp jl (bad) aam and adc rcll cmp pop test packssdw popf pop and stos call dec lret loopne jp repnz mov cmpsl jmp fistl jmp xor xchg scas in mov mov imul pop iret mov fisttp je mov in jecxz jb jl lret inc jno xchg mov jecxz mov (bad) std popf mov mov test pushf iret jl inc aaa push (bad) jns fbld lret mov sbb orl add ja inc std fwait sub lret and fmull test mov movsb mov (bad) push or mov xchg nop leave (bad) xchg mov add push cmpsl fldl fst or out and or dec test jp or scas mov movb or add dec push loop jmp xchg lock (bad) or (bad) fisttp adc jns div (bad) pop sbb cmpsb imul (bad) sub mov lcall adc pusha (bad) in (bad) sbb sar pusha cmp jo loop xchg adc mov and movzbl cmp mov jle pushf mov xchg cmp and or mov enter or out movsb scas pop (bad) sub lea ret pop pop (bad) xchg or xchg mov jle mov test sahf jnp lret mov lods inc notl fnstenv loopne jmp (bad) shrl out jmp clc daa out call pop pop repz or ficomp mov xchg and loop in cmp add mov pop sarl icebp sub sbb sub push and popf mov outsl or cmpl pop mov jecxz and jge je xchg adc jne add rolb pop pop or fcmovbe push xor stc pop imul pop pop adc (bad) and mov ret lahf adc xlat jnp mov or inc add in pop cmp cld inc fistpll adc xchg outsb pop jge addr16 mov out call int3 push scas jno mov (bad) cmp mov dec lret jmp and fidivl lods loop mov mov bswap movsl cmp imul sbb fst das ret xchg add push ljmp and lret push cld sbb out jge or mov insb or and iret jnp xchg inc cli leave lret and sub xchg xlat mov lods jg movsl pop xchg add xor outsb mov movsb lahf aaa xchg (bad) add das ljmp (bad) pop out xchg inc mov repz adc inc xor repnz push pop push data16 loopne xchg stos stos and mov jecxz lret stos jmp fldpi inc mov cmp inc icebp add push es xlat or idivl (bad) jbe outsb (bad) mov icebp (bad) out jp add mov in adc js or sbb clc and or fsub cmp lret lods dec imul xlat jmp stos jo cmpsb xchg push flds lods jb sbb mov mov popf repz cmp stc jo test pop pop stos push hlt jge xchg out pop adc adc scas mov lcall mov cmp out in or stc imul cs test and pop mov cmp or lds lret lret cmp add jmp cltd jmp aas push jmp adc ret mov mov cld hlt pop mov mov push test cmp push in jge rclb push ljmp repz scas xor movsl stos fistp or repnz pop jle std rolb jmp pop dec std pusha fisubr cmp stc cmp jge mov stos or mov lcall sarl inc addl mov data16 pushf sahf movsl fdivr mov push jmp inc lds test mov mov pop push xchg sarb jge test outsl int3 add cmpsb inc pop xchg jmp jnp or repz cmp das pop movsl (bad) xchg add inc insb and or pop repnz mov repnz push xor mov or idivl jae mov ljmp mov out push fsubrl in fldenv imul das or rcrb mov aam mov lahf scas sbb test cwtl jb xor enter clc push in cmp imul jge inc push loopne inc cmpsb jp (bad) push roll mov (bad) xchg mov orb adc fistpll push std imul or fiaddl iret repz cmp fcom xor mov repnz movsb js pop cli jle xchg push xchg icebp and stos je insl incb xchg sub scas incb in out dec sub lret dec movsl pop or xchg xchg cmp ffreep cmp cmp pusha int3 lcall fistl xor jecxz pop mov jecxz stos jne dec ds jbe (bad) xor cmp jecxz dec sub repz add adc or stc mov push clc rolb mov jge push jbe cli (bad) adc je jb cwtl jns out stos adc cld nop add (bad) jb mov lock sub call fcoms aam dec scas dec mov push mov mov cmp cs jb out xor imull ds das (bad) cli sbb push ljmp mov sahf pushf cli xchg in adc clc bnd jmp cmpsl lods xchg ret es in inc outsb scas jp pop ljmp mov aad or (bad) xchg push mov cld mov mov enter popf adc mov fucompp (bad) fbld adc adc add outsb mov push jnp idiv xor outsb mov inc in (bad) cld std movsl sbb dec mov sub sbb icebp add jp sub mov stos (bad) adc fwait jns clc sub mov and dec scas sub sub jl inc mov add in in and cs out jns add out lret mov pusha xlat mov mov fdiv loopne icebp mov (bad) jmp cmp rolb xchg xor cmp add xchg xlat cld popf inc into jns int3 dec data16 call int3 inc fwait sarl out pop movsl jmp mov jle sahf jecxz outsb stos pop jb jg scas jl out rcrb (bad) lock ret test mov mov in jle xchg add mov push ret movsb jle test aam imul rcrl jns popf imul outsb cmp add jo add bound pop rcll cli repz mul xor sub mov sbb push or dec addl cld testl xor sbb sub add and cmp je testb jl shr inc xor roll mov cmp mov inc cmpl idivl (bad) mov loope (bad) outsb mov adc leave pop fs lock pop add fcoms (bad) jae xchg lret out mov adc dec in pushf xchg movsb xchg sbbl mov cmpsl mov mov out jns scas xchg inc stc mov inc cmp divl hlt xchg lret sbb (bad) adc bound movsb adc jo xchg stos out pop jo outsb in xchg jle dec and and push xchg mov or pop and aad or xchg inc js aad jmp adc jl into into cmpsl sbb stc xor popa dec movsb scas pop repz add mov xor adc mov jle repz aaa (bad) sub imul mov and xchg and (bad) mov jmp sbb rep ja fist aas jne jl mov ret jp lods call mov std jecxz mov mov push rcll sbb movsl test xchg repz adc mov jmp jecxz mov iret ja xchg mov and aad movsb stos stos and pop (bad) iret jb or mov xor out outsb outsb or add stos stc fldcw or or mov enter pop adc iret jb js ret sti ret fnstenv out stos int3 adc pushf imul daa lods das mov sti scas out stos test sbb sub outsb jno xchg fildl mov (bad) out lods mov rcl enter sbb (bad) mov (bad) cmp xchg push dec mov mov jno into add jecxz outsb xchg popf pop cmp je push mov mov fwait lods adc mov out popl jbe (bad) cltd fbstp lret scas cmpsb movsl dec or in (bad) call push sub pop cmp ljmp out or imul cs stc ja cld movsb mov mov push stos push arpl sti xchg nop cmpsb fs cmp xchg pop mov in ret xchg or push lock stc xchg or pop mov add sarl mov sbb fxch mov sbb xor sbb sub and push or mov divb jns add mov clc jmp je mov imul out mov das in jo (bad) (bad) neg mov add mov xchg inc jbe fldenv enter fidivl enter or jmp jge jge xchg in lods in xchg imul into out popf in cmp lods fsubs jle cmpsb jle mov ja mov insl negl addr16 jnp xor fcoms pop lahf mov sub pop mov movsl loope mov int3 daa sti jbe mov cmp ljmp dec mov pushl push push enter call pop out out and ja mov dec outsl mov outsb pop mov aad lcall enter dec in out mov pop and inc fisttpll lods sbb sub jecxz dec popf stos sbb test fwait jns cli sbb leave add imul sbb pushl xor repz flds setg gs adc xchg jge xchg inc add out jo movsl sub dec fnstenv push out repnz jb sbb pushf (bad) jp fnstcw xchg mov aam mov (bad) iret neg test (bad) mov fptan xchg (bad) out jp jmp adc jb push (bad) clc clc (bad) psadbw pushf jae cli cmpsl sbb xlat stc adc lret mov (bad) cwtl jp xor push adc repz outsl negl out mov popf addl add jae (bad) xor fsub xor mov sub repnz pushf dec push mov test test out sahf mov inc dec cmp sti fcmovu inc inc inc icebp enter shlb repnz fwait in or rorb int3 movl jecxz adc or aam jbe std lret mov popf or stc fucomi adc jle jbe add imul lods pop popa sbb cmpsb cmp push mov inc fldcw push pop xor add xor xchg lcall sbb add add repnz stc xchg xor outsl aam rorb movsb pop mov xor out imul jmp mov cli lock pop jb cmc outsb sahf jecxz iret adc xchg mulb pop or push xorb xchg out jb adc add fildll cmp clc pop xchg dec jg popa pop pop shrb flds and in or dec dec jecxz sbb js daa sahf into mov fildl ret or cs mov mov stos insl shrl scas aas cmpsl adc lods jge xchg test rcll jb iret repnz rcl (bad) cld xchg adc or aaa out ret (bad) imul sbb cmp dec jb xlat out movsb jno ljmp push jge fldcw nop mov test push sahf xchg shrb mov xor mov cmp sbb (bad) xchg aas test inc mov sbb mov pop mov adc notb jecxz and pop rorb jne xor mov aad pop stc pop and xchg inc sbb and mov or les mov jmp cmp pop xchg shrb repz repz sti mov in lods cli in insl sbb mov cmp cli push push out cmp ljmp sbb jecxz mov out (bad) mov and jecxz jbe xor xchg iret int imul imul xchg rcrb aad push test imul adc pop cmp xor mov lret sub jmp je pop dec (bad) pushf sub sbb (bad) outsb nop jp (bad) notl imul pop mov movsl pushf sub stos dec pop stos dec jle es jns or int and in fs cmp mov test cmpsb outsb into nop mov rolb mov rcr mov pop mov loopne push pushf pop outsl push mov insl mov mov inc sub jge mov in ljmp imul xor pushf out aam icebp mov ficompl xor inc push call adc stos repz andl test (bad) cmc push dec jae xor xchg mov test je aam les jnp adc xor mov cli pop mov (bad) jb pop cwtl pop test sarb pop sub cmpsb and rolb or and movsb pop add faddl or add push hlt xchg sbb xchg fsubrs xchg xlat pop icebp inc roll xchg aad xlat (bad) stos out cli popf and mov test adc loopne push test cltd jge shr std cli mov pushf xor mov int3 out pop mov push fmulp movsb neg xchg inc stc roll pop (bad) jb icebp mov xlat les add sbb daa pop dec mov mov fldl fdiv sub out pop add and mov push int andb out lret pop mov or mov (bad) shlb fiaddl xor ljmp shrb addr16 xchg mov enter add add ja lods repz add fwait inc outsb mov dec cmpsl dec sub push loop sub test sub lods ret xor mov xor in leave test mov xchg scas adc or andl iret movsb lods scas mov lods jmp sbb push push int and js call movsb test adc (bad) test mov adc mov imul cmc jmp pop sub mov (bad) adc lahf fldcw sbb mov push mov movsl stc (bad) daa (bad) or repnz sahf push das mov push xor xor sub xchg sub imul xor xchg rcrb push mov fstl jae jb adc int3 xchg push fcos in or mov loope xor mov addr16 ret sub popf cs push jmp rcr jbe mov shr fucom shll flds xchg test shrb pushf imul fldenv clc push out jmp xchg xchg push push mov mov xor stc xchg and pop shrb rolb cmp push rolb movb stos pop adc rcl mov mull sub outsl push outsb mov lret sub in imul fstpt fldl lock adcb and lock and ds ljmp scas mov sbb mov add aad jns stos test iret jmp sbb xor mov ret add js jb mov dec and mov cmp push loope or int3 inc fcmovnu loopne pusha push enter pop fstpl cmp cmpsl in imulb push out stos jecxz mov lods outsb pop jae xor pop pop scas pop dec je dec jae sbb pop jmp or shl sbb loop in fmuls and sarl mov fistpl out cmp jbe jl data16 xchg sbb adc xor pop adc jmp (bad) xor imul push mov scas ret jp or xchg lahf push sahf fist arpl out fldcw ds sub icebp mov lea iret mov or cli xchg inc jns insb addb loope ds pop out adc lret scas inc stos loop mov aam arpl roll scas cmpsb mov out test add lcall shlb ret lcall test jge in cmp mov es in mov fcmove push jns aam shll xlat insl loopne loop jmp out arpl imul iret add daa addr16 push icebp negb xchg aaa ja xor mov dec test movsl out cmpsb repz xor fsubrs mov jno shrb (bad) jp mov dec fistp in pop rcrb ljmp mov out jmp mov jl call ss mov push and fbld xor lret or jne adc sbb and popf adc xchg dec and stos repz cmp xchg out adc adc cmp sbb xchg ror pop out add xor or (bad) in lret (bad) jo lret xchg xlat ret pop inc xchg js cmp push jns sahf (bad) fdivrl movsw arpl fisubl ret mov stos mov fstpl adc (bad) mov cmp mov mov lock fnop test es pop (bad) mov stos int outsl xchg xor jno push mov cmp shrl enter mov xor mov jle jge cmp fimul cmp push push ret icebp xor aad mov mov fimul sbb in jnp xor mov mov pop mov adc ja cld xor xchg lahf sti xchg stc mov cmp dec add scas stc ret pushf xchg sub (bad) mov test fcmove push bnd rorl sub into pop imul and jbe nop ret pop jmp xor enter pop in jnp xor mov (bad) mov fdiv or (bad) lock out sub fucomp rorb xchg test bound outsl out and xor mov cmpsl pop (bad) aas sahf mov jl mov pop sbb mov mov cmpsb negl fcmovb imul jge out mov repz sbb notb mov mov jae sbb stc roll mov out jle sti mov xchg lcall fcoml inc outsb movsb xor xchg fwait push mov sub push in jae xor sub mov js xor inc jecxz mov addr16 fnstcw std pop or mov sub out push outsb xchg push mov pop sbb pop xorb shr negb xchg sbb xchg xor xorl mov dec mov lock and xchg mov sub in cmp icebp pop cmp fnsave add fcomp stos jns movsb test and xchg pop popa cmp gs push push and div adc jl jae and mov or adc jmp dec xor js imul dec dec sub xchg jns subl das out out aad cli iret imul sub mov je je movsl repnz stos cmpsb je out add xchg mov jae (bad) mov pop imul repz mov aaa xchg leave in fwait mov pop je stos or xlat cmp jae nop mov jb and imul (bad) sub xor (bad) sub and jae xor sub cltd lret test jle inc addr16 pop adc lds test rolb push cli push cmp test scas cmp jmp inc push xchg stos push jge aad (bad) xlat in cmp call dec lods cld std mov jecxz call or hlt inc dec pop mov divl jge jmp repz or mov jl (bad) into mov mov out std (bad) (bad) not mov mov cmp aas stos daa xor sahf dec sbb movsb push outsl mov xchg jnp pop dec jl stos popf cld (bad) (bad) adc jb adc popa jmp mov outsl xor repnz movsb sbb dec or jno lock jno mov test adc xor shl jle push outsl js xor push aad dec dec and push rol cmpsl popf cmpsb pop stc fnstenv jmp mov cltd stos leave sahf inc in repz sarb jle outsl jae aaa clc test cmpsb push std adc mov jg out jp mov or icebp shrb stos add stos fidiv add jae imul mov push jae sub fbld xchg data16 subl mov inc mov outsb leave jnp ljmp xor mov pop cmp or sub in mov lcall dec ficoml (bad) loop xor ja cmp leave and xchg xchg hlt cmp shld or mov dec mov xor xchg outsb test dec cmc pushf stos int jle pop xchg mov xor int dec xor stos movsl xor aam das adc popa inc or bnd sbb pop pop adc shrl scas int3 mov push dec shll fildll (bad) pop mov mov mov cmpsb fpatan sarb repnz mov cli imul pop jle movsb or scas or int mov pop dec adc inc test in push cmp jmp call test push dec (bad) push inc out mov fisttp jnp adc cltd sbb sbb out xor jae rorb xchg mov fsubr icebp dec mov fnstenv in adc les xchg (bad) aas fcmovne fimull dec push cmp pop sbb cmp popa into mov sahf lret add (bad) das leave fcmovbe fdivs cmpsb shrl dec lcall test pop adc movsl mov dec icebp mov fld1 xlat out jb dec addr16 xchg lods mov lea ret jle (bad) push pop sbb mov out and and mov cmp mov (bad) cli pop mov and adc icebp push push mov pop (bad) fwait mov shll dec jns inc mov out push push dec enter movl fldcw cmp out testl or and push outsb lock jmp jge jo in stos mov cli or sub cmovs push dec movsl jmp inc lds stos dec lods out mov in in push mov mov into jmp ficompl enter iret data16 sbb ret ss add (bad) notb or adc xchg xor xchg mov mov mov push je push cmp or jge test aam push lret sbb dec and sub xor jge ja call dec dec repz xchg cmpsb test std aam xchg sahf xchg sahf lods iret lods es ret insb call add mov int3 cld enter notl imul cmp mov pop fs scas push rclb adc aas aam js mov and add xchg insl mov mov ret out mov lret fdivs xor pop push (bad) mov lahf cmp stos test mov add out fs jge mov sbb sbb jnp mov push rorb test mov inc sub and mov xchg orb aam inc clc inc out cs jmp out cmpl out pop ficomp jae push dec xor lock jo es inc stos xchg jmp jb (bad) insb out push andl (bad) xchg mov ss and ds inc or jbe push lcall push xchg push cmp push mov sub add sahf loope stc inc cmp call cmp (bad) push das bts dec movsl cmp push mov (bad) fwait or fmuls cmpsb xchg dec dec lcall icebp (bad) xchg dec adcl and mov rcll fstpt fdivr jmp (bad) out dec jbe inc inc xor pop outsl cmpsb test test in insl (bad) jp mov fstl fild bnd push inc stc or ss adc arpl push stos out mov movsl push mov jns adc stc repnz sub sbb jmp cmp icebp xchg xor jae imul mov sub and lock ljmp xor sbb and xchg aam repz out insb dec xchg adc repz adc hlt mov movsb or adc lret and or pop into addr16 loope jno movsb repz into add xchg add adc loop out test pop jge mov mov repz icebp adc ret dec adcl xor mov out adc or mov cwtl das out mov repz fmull pop xchg imul inc mov out jmp jbe add sub xchg test ljmp mov test inc pop pop push (bad) (bad) and mov nop add imul int3 int3 dec or decl sar repz cld aaa cmp dec ja dec lock inc out inc sbb dec leave xlat cmc shll cld flds shl inc mov imul test inc pop pop popa mov mov loopne xor adc cmp cmp movsl (bad) jns jne jb xchg into xor test sti pop push test cmp fcomp inc lock sbb or lock cmpsb hlt push fistpll mov xchg pop stc lock (bad) mov mov out inc mov test repnz pop mov cwtl xchg pop mov pop xor (bad) enter or mulb rcrb bound fwait test test xor cmpsl inc xchg mov loop xchg xor xor mov mov xor fldt movsb sub repnz fisttpl inc mov mov mov int3 rolb popa adc sbb (bad) cli pop (bad) call in imul adc (bad) clc sbb xor (bad) ja xor test call rep imul jp xchg bound test sbb dec cld and mov popa int stos negb jmp ret fistp push cmc ja cmp fldt repz mov aam jb addr16 adc mov lods shl inc (bad) ja cs (bad) clc and dec mov adc shl and in in add bound imul pop jp,pn cmp in mov mov mov xlat xchg rcr mov call jns adc cld lea pop sub repz daa ss daa in ds or mov rcrl pop cmovns pop cmpsb sti push shrb repz in in inc dec ljmp push cli out mov jbe jg adc (bad) mov movsb mov inc mov and fcmovne inc jns,pt mov xchg out testl mov mov sarl lods xchg mov sahf andl out repnz mov or jns lods inc loopne repnz out inc lcall out mov mov fild gs pop ss xor xchg adc cld cli jl and mov adc jbe fildl pop fdivl fimul push repz (bad) mov je rol dec testb mov bound rcr ja xor aam inc movsl lods out loopne iret mov icebp push xor test and dec in shrb jmp in or mov cmp jno mov popf stos popf cmp out stc testl push jmp cmpsl push cmpsl lods and xchg cmp xchg aas cmpsb enter lret clc cmpsb test add push or xor xchg cmp pop loope inc fidivr xchg inc dec je notb insl mov clc sbb cltd leave xor es jae jle pushf test push dec call ss lret cltd cmp stos mov push jae mov inc xor jmp xchg or dec std dec mov pop rcll mov (bad) pop cmp cmp or mov repnz (bad) stos out mov inc jno sub clc in cmp call int3 inc (bad) int dec sbbl ja movsb js into xchg adcl jno (bad) dec pop stos fnstenv out frstor mov adc xor push xchg sub (bad) adc loop out loopne dec das and dec jmp or mov cltd sub test pop xorl pop pop cmp adc lods movzwl push or jg insl out aam adc lret dec jecxz mov not fldenv jecxz aad div jo inc mov inc cmp inc pop push arpl sbb sbb (bad) sbb push dec fst adcb mov aam xchg and inc cmp mov sarb imul adc push lock (bad) (bad) call cli out sarl js repz lret cmc sub nop mov shrb and mov std lods arpl cmpsb stos sarb gs jmp mov in aas mov adc mov out inc mov inc cltd and test mov (bad) mov mov pop pop fistl jmp cmp idivl xchg repnz insl nop jmp push push mov jae jb cmc inc jbe adc dec sub ret les jo and push inc mov and loop out push aam rcr xchg or out ja aaa jmp cmp pop jb jge lahf gs pop fadds cmp mov jo xor jle (bad) sahf inc movsb insb push or (bad) outsl and movsl ljmp gs icebp mov pop (bad) js xchg test rorb rolb movsb fld pop bound adc test not jbe adc sahf inc frstor pop jb das push mov push jbe (bad) mov fwait loop jmp cld outsb pcmpgtb xchg mov leave add je lods fldcw add mov mov ja rcr xorl rcrb nop dec test jl lcall xchg aad cwtl stos dec cltd gs outsb fcom xchg movsb test push into mov sub in (bad) js pop inc dec rorb outsl cmp cmp mov sahf popa data16 fwait pop stc xchg loopne and xor clc mov xchg adc test je jo inc cmp mov dec pushf shll xchg test and (bad) xor mov movsl mov mov iret or mov ljmp aam xchg cmp mov fstpt js sbb test (bad) movsb mov push cmp pop stos out fidivrl mov cmp stos test cli fldcw xchg xor repnz cmp jnp lret aaa push iret pop jne stos mov jge stc sbb inc push ds enter loopne xchg sbb mov ret xchg and pop (bad) mov mov push push xchg divb mov push repz jnp jmp data16 xor fistpll ljmp push xor xchg jmp stc loop ljmp icebp cltd adc lds adc mov add sub popf les popa repnz popf in adc adc repnz adc (bad) sbb sbb mov mov jno mov mov jmp xor jbe movsb jmp out mov xchg push aaa jl push and jno xchg mov xor test stos pop adc pop fcoms push inc push movsl xchg rcll ret stc movsl xor jmp nop mov xor jl sahf or dec mov mov and jp adc iret subl xor adc lods arpl xchg jns or addr16 push in add fucomi cli add sub or dec or push popf rolb cmp out test fistpll dec dec dec jnp cmp xchg rcrl pop out gs repnz fcomip jb fldcw out mov ret test popa dec movsb mov repz int3 dec arpl (bad) xor int3 add (bad) into or mov push jl pusha jecxz in or cmp fild pop fmulp daa lret rcr jmp cli clc xchg inc sar cli jge add jmp out cmp stos fcomip or mov mov fdiv cld jne fistpll adc push mov sub mov stc mov push lret cmp and dec xchg cld jl in repz arpl (bad) neg pop mov sbb mov shrb (bad) into sub adc mov add scas aas mov ljmp lods add jo sbb adc pop pusha enter jg imulb or fcom add mov jl test mov int xorb xor cmp (bad) sub add call addr16 leave sbb outsb mov fidivl xchg xor mov mov loop inc xchg cmp mov fist or icebp sahf jmp test jnp (bad) pop test orb pop mov mov out xchg or repz ja test xchg jle xchg cmpl inc add js mov mov lock jnp in jl in xor mov adc cmp stos inc fdivrs jmp cmc out xor push sub cmp incl aad leave fcmovnu add sbb fs loope mov add adc outsl xchg in in pushf pop adc int3 or sub cmc and (bad) ss test push mov leave lods arpl mov and add enter enter stos (bad) cld xor cli nop mov push mov sub ds adc cmp inc pop pop repnz push je or jmp adc push mov push test pop repnz jbe dec repz pop cmp adc mov pusha cli fisubrl cmp imul loopne adc int3 mov jae (bad) stos test jge dec mov xchg jo lds sub clc std xorps mov aas sub cmpsb pop ja mov sbb mov cli (bad) je push in test pop pop outsb pop stos ljmp and adc stos mov xor clc sub int mov movsb cmp inc leave out loope fbstp jge mov mov adc mov insb cmc jb fbstp (bad) lock add rol jmp push xchg lret fcom fstp sbb xor cmpsb and mov into inc psrld fistpl dec out jmp dec repnz mov shl int3 lahf xor mov icebp xlat imul mov push fldcw mov mov popa jmp lcall div jo daa xchg or repnz lds int test jl fs mov cmp add cmpsl push test cmp test xchg (bad) stc jge jnp lret icebp mov jg adc xor push (bad) sahf ret leave divl fs and movsl inc and out jg in imul and fidiv dec mov fcmovnbe rcrb mov fistpl ja outsb (bad) rclb cltd push fbstp out add xor mov and mov jl jnp cmc aas leave nop mov mov iret jnp (bad) in dec hlt aas ja xchg adc inc inc cmpsl mov (bad) jo inc (bad) push push insb pop int3 ljmp ret add fsubl fstpt adc pushf sub into xchg addl dec lock mov sub cmp xchg (bad) stos jl sbb mov jmp jo popf sub jp lcall stc mov aam mov and jbe into add imul jb pop or ret cld cli out outsl push mov jge cmp xor jno xchg sub pop jl cli add xchg jl testl mov pop fbstp loop sbb adc add test cmp sub add jl scas nop sbb mov rorb jb in fistpl shlb xor jg cltd lret fiadd outsb pop mov adc dec loop sbb pop xor xchg lock (bad) icebp xchg adc pop push sub mov push popa and fistp loopne xlat jp xchg fwait sbb lock mov jp fdivrl jnp and sub int adc popf cli mov xor cmp lret mov or call jecxz mov loope cmp jl sbb cmc in xchg out jnp call ficompl out xor mov jnp mov push sub das out xchg xchg add mov jo jnp inc mov je out push (bad) imul add lds pushf (bad) nop ds stos mov test stc data16 sahf sub outsb mov mov push popf sub jl sub out cmp jno cmp pop lock out mov test fdivrp inc cmp in rorb mov js jle jmp mov outsl shr add sub and mov jno jle jmp sbb jno add xor repnz repz xor mov lods test jae lea lret push inc rcrb add outsl push cli leave in jmp mulb into cmp pushf mov call sub adc imull add out test bound lret gs inc daa jns pop ret and mov pushf movsb incb adc lds dec pop dec cmp mov jle pop negl in mov rorl call xor sbb vhsubps or xchg frstor out adc rcll mov push dec out jb mov cld (bad) inc jecxz mov lcall rorb jb sub adc and divl stc (bad) pop mov stc sbb jecxz test out mov lods in sbb in adc cmc aas fimull jb push insl dec ja dec mov jle inc btc (bad) xor loope jmp inc int3 cltd ficompl mov push fdivrl pop and pop adcb icebp cmp into mov test mov mov mov sarb adc in ljmp cmp fstpl icebp sub jns ffreep pop push test mov iret adc int fistpl inc mov out lcall cld lret outsl (bad) insb aas cmp adc cli rcl jmp mov mov out jne pop dec jecxz mov mov adcl mov mov jmp mov sub mov jae or sbb aas fdivl mov gs dec mov std pushf imul xor fsubr xchg or mov jae or sub jae repz lahf fidivl jae leave or fstpt loop in divl jmp and int3 sahf xor cmc jmp xor xlat in mov (bad) call loop iret popf jl stos jns jp pushf test push xor mov loope scas movsl popf sub lods (bad) popf aaa cmc sarl mov cs ret aaa cmpsl push mov jno adc cli jmp add jg jne lahf imul sarl sub inc jo sti cmpl cld hlt cmpb sarb and fnop ss mov sub popf sahf adc mov nop adc jge jno call cld mov lods repz fwait mov xchg pop popa mov mov fcomp outsb xchg sub icebp sub ret xor jecxz mov loope or loope add fstpl (bad) fstpl imul adc dec leave imul sti pop jnp out cmp imul mov push stc (bad) mov cmpsb mov xchg mov mov mov data16 repnz fnstenv test test std (bad) adc test xchg xchg sar cli aam cmp push (bad) scas shr adc mov cmpsb adc push aad out mov adc stos add xchg ljmp mov lret fdivl jno cmpsl fldl (bad) sbb testl loop shll lods mov clc icebp xor loop mov sti sub cmp lods mov xor jge pop jmp mov push fistpll jns in ja addr16 mov xor jg xchg mov xor sar xchg outsl dec daa mov repz ficomp sahf cltd (bad) xchg mov stos jbe push std loope call inc loope hlt jo addb rorl cltd jo cmove adc cmpsb xor cltd (bad) sbb pushf fcmove or out push hlt inc xchg cmp lret ret loopne ja fsubrs mov bnd pop mov mov stos mov ret fild push jae push fcmovnu repz push pop lahf pop mov inc insl sarb iret in mov mov icebp mov jb repz jo sub pushf add mov jge mov lret jb repz cmpsb add (bad) push mov scas scas push jle sti nop jle xchg out cmc xor (bad) and leave push sarl cmpsl outsl popf xchg scas lahf push dec notb mov int enter mov leave push inc repnz lcall aam pop sub das fildl jle add pop lea out lea sbb add mov or mov addr16 test pop lcall mov mov and lret cmpsb call cmp imul lahf (bad) roll movsl cld call lret jg pop dec fcoms out jo (bad) cltd scas ljmp (bad) (bad) sbb lds add cmp dec dec add mov or jg mov mov xchg in imul add mov in rclb adc xor fist adc inc test icebp adc mov scas xchg push bound jb cltd cmp rclb jo xchg rclb add test inc mov xchg dec xchg jb imul or push dec dec ljmp jb call sbb pop adc xchg arpl push out jp push and pop movsb fs int3 std pop sub std push sub mov cmpsb sub pusha fstps adc outsb es jae pusha pause pushl rol add sbb adc xchg fsts mov bound mov cmp jne mov mov pop dec mov movsb jl nop mov mov mull inc jl push into aaa sarl pop stc jl sub jb mov xor jecxz pop test sbb pushfw adc xchg lret jno inc jns test add (bad) inc in (bad) pop (bad) ret xlat int3 (bad) arpl jb movsb mov jno out int3 add xchg into xor sbbb out jp jg lea inc (bad) pop mov outsb scas scas aaa jle xor test repnz in xchg out push aam jge xor mov add cmpsb lret rorl cmp stos (bad) std mov jp stos mov jnp xchg push pop cld test jb cmp subb movsl mov fildll pushl fistpll xor subb cmc adc mov inc mov inc jp dec or jns push xor jmp mov sti jb add in jb dec lock push icebp icebp adc (bad) fsubrp push push idivl or sbb ret jo clc test lock push jb mov sbb inc data16 fst push mov adc adc arpl mov push ret ret adc inc iret pop jecxz in cmp add mov mov cmpsl cmp in subl pop fstps outsb scas js mov push iret in aam push push decb fistl addr16 mov mov mov sbb (bad) mov mov stos cmc movsl int3 dec mov add ficompl (bad) nop adc cmp sub aad es cmpl xchg imul pop xchg mov fdivrp mov mov adc pop (bad) jge das mov adc (bad) pushf inc test add xchg cmp mov xchg cltd sub movsl mov in rolb loop fadds imul xor sub rclb fldcw lods out jge xor dec mov movsb add fldenv jmp xchg das iret xchg dec inc pop adc in jns sub movsb xlat or inc mov xor cmc xlat (bad) clc (bad) sub arpl xchg push mov out jbe es xchg sbb jmp test (bad) mov mov mov sbb pop add aaa fldt stc inc mov popf loopne test out pop test xor mov mov int3 das xchg inc ja aad fldenv mov xor lret movsb jmp jae mov lcall aaa js cmp fidivl outsb (bad) lea mov imul sbb xchg adc stc or add outsb mov jecxz or call push test stos mov jnp mov or popa push mov (bad) mov or mov xchg out movsb loop jecxz idivl int sbb out fucomi jbe ret cwtl shll cld xor imul pop mov fstpt int mov int icebp cld lret push repz xchg (bad) call lret add loop xchg xor jmp and and jmp add cmp loopne fwait mov out xor test xlat mov sbbb ja cli test and xor pop jb xor lods mov pusha adc and aaa into insb mov sbb jle in add in into push pushf (bad) (bad) out out imul mov adc mov fisttp mov movsb dec icebp pop inc test mov cmp inc push iret cmp in js adc sub or fisub inc jns ret push repnz cld insb outsb repnz bound rcrl push jge pop xchg xor xchg jns ret mov aaa insl sbb je arpl int mov test adc mov or jae cli popa in jno push sbb out mov mov iret inc movb pop cmc xlat shlb cmp jno dec sbb jl std cmpsb cmp adc clc xor aaa bound popf push std dec add cmp out xchg jo cmpl scas jle pop fidivrl scas xor mov shr sbb jae jo (bad) inc jno ljmp out xchg nop shll lock mov (bad) decl and mov or repz push and sbb jmp (bad) sti lods mov pop enter add stos stos inc arpl je sti lods jge outsb pushf cli xchg push push rorl lock push push movsl cmp xor add subl pop xchg adc push pusha xchg movsb popa sub mov mov (bad) rorb mov jl int push mov lea inc scas mov jo cmc in pushf sub (bad) mov jnp (bad) adc ret jl cmc push das mov and jb push sbb pop cmc pop aad sub call push push dec loop push outsl or pop fldl stos cmc jl in jle lahf outsl out inc sub in mov push shrb jnp lahf cmc cli xchg cmp mov jns punpckhbw cmp hlt ror adc mov mov add repnz popa sbbb xchg pop mov in mov (bad) subl adc xor outsl pusha cmc jmp repz ret dec icebp lock movsb loope movsb push jmp sub mov inc or (bad) xor imul sub fildll std jmp xchg mov jno fisubrl xchg cmpsb lods dec mov or pushf add test aas jge aad sub xchg add jecxz adc jmp outsl js mov xor push ja mov out iret cli jb inc shll mov scas out ja (bad) or and mov adc leave jmp ljmp in or movsl pusha incl pop jbe push jp sbbb xchg icebp xchg xchg mov clc into iret cld push sbb or ret test sub push xchg repnz fldl fnstcw adcb xlat iret cli nop mov fcmovu popf cmp aas (bad) jmp enter sbb out add add jo sahf jne adc inc test xchg pop cs ja out adcb inc gs (bad) out xchg test pop gs pop orl cmp inc xorps mov or hlt jmp dec imul imul ds or mov xchg fwait jo or push sub into dec movsl test or or aad gs xor out xchg push xchg mov push push push rolb add std mov iret out imul push ret (bad) repz push enter adc out popf out mov push xor inc mov pop aaa stc inc jecxz sti aam xor push inc nop dec jecxz or repz outsb mov call fcomps dec mov repz in jmp pop cld add mov dec inc adc out jmp mov out stos mov sbb in add in outsb outsb lods mov mov out gs (bad) hlt ljmp mov pushl push xchg mov test in ljmp lock dec jg xor mov push add mov push cmp fdivrs popf loop xorl cmpsb push or push and stos pop mov jl sub lods mov jo xchg mov sahf mov and sub call repnz push ficoml and shrl sub aam mov jmp cmp neg cmc rep lea dec ja scas (bad) call sbb xor sbb pop jmp dec cmpsb lret flds mov aaa push pop ret in imul jmp movsl test sbb jl shlb mov stc stos cli icebp mov xor jno add jns sbb repz stos add test movsb lods stc movsl arpl mov outsb imul add mov or pop repz adc stos pop aas dec mov jno mov fidivl xchg jno es xchg lods stc mov clc adc pop cltd cmp fnstsw sub (bad) adc add cld loop mov xchg pop mov jl in jae cld jae ret imul dec lcall (bad) out dec push adc fstps lret push pop (bad) ss mov inc sub sub bound mov loop jae mov hlt gs push push mov jmp xor cmp add mov call jbe int mov mov iret cmpl pushf fsts jns stos movsb push mov mov mov mov cmc push out adc inc lds pop push test jl test cld mov test or cmp fsubr jl call mov shrl and push cmp call jbe sub rcll leave add ja in push mov into inc jmp jo push (bad) leave xchg (bad) mov in repz jne aad mov aas jbe pop adc bound xor test movsl repz fiaddl cmp push lret int jmp mov in (bad) inc push xchg push jg mov mov mov push (bad) lret stc adc jmp in jecxz (bad) lret pop std mov xlat test xchg dec scas into sub popa push shr xchg mov mov push fucomi jnp sbb icebp sub xchg jo,pt dec movsl or mov jno jae ljmp leave mov fsts jmp int (bad) lahf js mov into ret xchg in adc jae (bad) iret out dec not mov xor addr16 push adc mov mov adc dec fadds (bad) call pop adc push mov sbb adc sbb int add or jl xchg cmpsl jl push popf (bad) mov push clc fisubl jg adc test xor test push mov lahf jmp fdivs call push stos xor and dec fcoml xchg ret cmpsl push pop scas xor mov jae repnz adc movsb cmpsl div and aam mov lahf dec (bad) jmp jge jae stc lahf xchg mov pushf fmull popa xor loop sub sahf mov cmp cmp xchg jmp sarb pop imul repnz outsl out cltd jle lret stos popa (bad) ss cmpl out pop fisubrl xchg insl test fdivs repz inc aas test cltd icebp in insl (bad) cli fnstcw lret jg inc cli xchg in stc cmp addr16 stos jmp imul fist add inc adc jg jnp addl dec fbstp mov addr16 div jno cmp stos stos add movb cld and bound aad aad outsl insl lods aam xchg icebp push adc jmp xor xor stos mov cmp arpl and jle popf adc dec cmp mov xchg dec xchg mov xchg gs pop mov mov imul outsb add or sub mov pushl out mov (bad) jne push jnp adc xchg and jb inc pop sbb jecxz mov sub push roll out adc mov xchg shl movsl mov xor scas mov (bad) cltd int mov jne clc mov mov dec inc in (bad) test and (bad) xor adcl jb enter cmp lret xchg ret test push int3 cmp stc icebp ret cmpl test or fldenv xchg jl (bad) stos jge sub vmaskmovdqu stc notl fldt adc cmc repnz adc out jecxz xchg inc pop int3 stc adc or adc cltd popf mov cli sbb cli add push out test popf push imul ja (bad) lret adcl ljmp insl (bad) lahf add fwait cld stc movsb imull (bad) or roll pop fwait mov xlat fstpt out (bad) mov hlt xchg mov xor das add outsl (bad) ja in xlat xchg mov mov test aaa xor and rol or enter movb inc inc imul or scas sub (bad) js lcall jno jp push call pop movups adcl adc and test xor or or sbb jmp and push mov pop mov and ja jp cmp cmp cmp mov inc add cmp enter sub loope rclb icebp xorl outsb jae dec cmpsl mov pop pusha mov xchg (bad) fdivp (bad) ja mov cmpl into pop outsl (bad) icebp aad emms push mov movsl into sub push (bad) outsb loope imul cmp mov repz push (bad) jmp jl pop jns ljmp mov leave movsb fistp in fs push daa cmpsb pusha lret inc jg out pop jae lcall (bad) mov xor (bad) iret stos test push xrelease decl lcall xchg rorb loopne mov add adc imul stc jge adc push dec cld push call incl ljmp push cmp fsubrs mov jmp gs cmpsb cmp cmp sub pop aas cmc xchg adc std dec jbe movsl js leave lcall fwait jae iret xchg mov ss (bad) scas jp pop pushf (bad) movsl sub mov and or lret mov dec lret jae fucomip aad jae clc stos jle (bad) sub shrl pop movsl mov xchg call ljmp add psubsw scas pop insb (bad) fisttpl jg inc fisttpl jecxz jnp push stos cmp scas aad jge insl jbe or scas cmpsb int sahf repz orl (bad) adc push repz jb int3 clc imul push adcb push inc dec (bad) cmc jg pop in mov test aaa icebp movsl loopne inc push xor movsl test pop cmovbe sarb ret fcmovb jae jl mov mov cltd out add je jo jmp (bad) mov lods or call lods ds repnz (bad) lret sub inc leave mov fisttp xlat icebp sub stos imul nop negb jmp mov roll jl sub lods movsl xchg dec (bad) mov adc mov xor ret fistpll loop es roll xchg cmp add insl (bad) stc mov inc out jmp push and xlat leave xorl fmull adc push xchg cmpsb inc test inc adc push (bad) pop sub lahf sbb cld xchg add mov sti cmp (bad) out xchg es in ljmp andb cld dec push add in insb popf stos iret and mov add ja jle adc push mov fisubr fbld js or jecxz dec sub jecxz cmp shr or or jo das ja push adc inc pop push mov jmp popf xor loop jb push cmp jmp or aam xchg or stc inc cmp movsl or scas or jmp mov out idivl repnz xchg cmp out frstor decl std loope jmp fs imul negl mov xchg int push cmc dec sbbl jl mov les adc int cmc jmp out jle cmp dec push mov sub push stc xlat icebp xchg aam inc mov cmp mov ss or (bad) sbb imul fldcw mov rclb adc nop pop and xchg imul inc js lahf popf lock sub shll insl cmc xor ds out cli fcoms lcall push cmp imul ds scas mov das out lods rol jae arpl stc ja push (bad) xor into stc in out daa adc js adc stos push push jp xchg add xchg (bad) jbe shll and fstpt (bad) divl cltd push sbb adc movsb in push sub fsubr push jmp xor jge jmp jnp and std cwtl xchg add lock xor gs ret xchg xchg mov stos add sub adc jmp inc sub pop cwtl jle loopne lods into stos imull jb add push fwait cmp xchg add aad jb call ljmp addr16 (bad) stos and test sbb sub in cmpsb mov pusha pop xor adc mov jno sub mov xor clc xchg cmp cmp lahf movl mov pop gs xchg mov inc jl cmp or paddq xchg mov fistpll (bad) cli inc xchg orl and in xchg out pop mov and mov jle lods push xor pop neg (bad) xor sarl (bad) lret pop pop cmpsl mov and test mov daa stos (bad) int3 outsb out jne ja mov jge xlat out inc inc negb dec out cmp mov pop xlat (bad) je cmp xchg daa stc add incl xchg scas fmull outsl lret (bad) ficoml mov inc movsl movsb dec (bad) fidivl mov sarl (bad) xchg cmp push fs ret mov aam (bad) imul stos sub shll scas iret lret lods push pushf outsl sub add rolb pop cmp int3 lods jecxz lea pxor loope pop daa cmpsl push mov pop jns sub adc adc movsb push in push lods fucomip nop ss into mov mov jmp inc xor insb dec shrb cmp aaa fucom xor clc cs xor jge xchg jmp ja ljmp cld jo mov jg rclb xchg test jnp nop pop cmpsl cmp jbe jg rolb and dec scas push or push lods cli jae ret cmp add or dec add inc cli xor cli jae pusha enter imull push movsl and jns cmc push aas aam and xchg in loopne std xor pushf add mov rcl ss inc aad jg (bad) mov ficoml outsl test jo fs pop push ja xchg push imul sahf aam add cmp dec push xor xor jl dec outsb cmc xchg mov (bad) fs (bad) xchg push bound pop imul repnz jle jmp in (bad) and sti lods nop jno lods push mov lahf xlat pop or mov mov fisubl faddl lcall adc je ret jecxz subl repz into (bad) stos mov test xor je adc int3 dec hlt insb fidivrl scas xchg test jns in sahf nop out pop cmc jmp pop lahf rorb jle iret cli jg (bad) mov jle mov xor or jp ret lods xor mov mul lods jb fbld jne cmpsb fstp jns jl fadds stos push insl jbe out push cmpsb ret inc popf push int3 and les xchg or sub pushf cmp popf icebp sub sbb sahf jae roll iret nop add jmp cmp push mov dec add cld xchg lock and push dec (bad) pop and jmp shr pop mov imul shrl in push cmpsl imul xchg mov rolb sub dec (bad) data16 popa addb clc and cmp out jb movups dec test fildll cmpsb or lods add (bad) jo popf push xor fmul stos mov lcall jo jle pop jo push iret pop mov mov (bad) xchg mov inc push mov icebp jg popa mov (bad) jb cmpsb sbb cmp fistl call outsl repnz push mov dec insb js sbb mov test push cs jno aaa das mov and (bad) cmpsl icebp jmp arpl xchg xchg sarl or jbe mov subl mov insb adc and lods cmpsb (bad) mov loopne aam jbe rcr out out call ret bnd sbb repz lods fstpl xor lahf out xchg inc and outsl fs mov enter roll mov adc push xor jmp mov in test adc sahf lea sub inc in dec dec test or in data16 and lret pop lcall lret ffreep inc cmc add fiadd popfw adc stos notl pop (bad) mov xchg fucomp clc add adc jecxz fdivrs dec movsb push mov cmp lret (bad) cmpsl sbb adc loop loop (bad) mov (bad) es pop cs add sbb sub mov inc cmp lds leave movsb mov enter push mov adc ret adc scas push testl xchg xchg lret shlb mov lret mov and pop xor mov inc neg jp lret or jne jge ret insl xchg fcoms add decl les daa stos (bad) or push ret aaa mov fcmovnu ret sub leave mov scas mov dec stc dec mov xor or pusha xchg gs cs xor imul xor adc loop mov mov pop in jp,pt out adc jg sub call add lods popf lods or imul xchg jne cmpsb inc xchg push repz xchg sbb lock ret jno into cmpsb in pop xchg cmp push sub pop pop cltd scas cmp mov adc cmpsl cltd mov cmp push leave in mov jb call nop xor mov fs stos xlat ret sbb js cmp push fsts (bad) dec push sbb stos test rcl je dec repz mov stc cli cmp clc and rorl cmp out popa call daa lods test push fnstenv add ss xchg into das (bad) out pushf mov in aam xor mov stos test push pop cmpsb ds ja lahf stos dec lret push cmp jmp lahf jle dec pop cwtl fcomip inc lods jmp lods ret pop inc in xchg jno xchg mov pop dec stos nop dec icebp push pop jp shrb stc or xchg pop gs roll sarl inc or push push loop mov scas into repz push es adcb popf gs test push add push mov test mov icebp ljmp inc xor (bad) sbb xchg pop lock jns in inc jl xlat pop fldt (bad) negl add pop inc add push out inc mov and or jo push jecxz add outsb dec jne and ds stos ret mov loop test fbld js jp ss or sti push mov add jle dec fdivrl rclb or icebp es pushf idivb inc sub out fwait loope js xor dec cmp push cltd mov popf lret push flds mov loope test bnd out cmc mov gs cmp out pop xor mov js jno repz mov outsl out adc scas ljmp jo loopne mov inc xchg xchg push jge sub cmp popa icebp (bad) jno outsb mov dec jmp int3 repnz loopne jge jno sub adc sbb fidivl mov mov push in mov add pop lea (bad) xor jne dec fistp popf lret cmp or xor fwait loope cmp (bad) dec sbb into bound adc mov popa jb jmp scas mov push call push mov enter or in pop (bad) cmp adc inc push xchg mov jmp cmpsl mov pop js xchg imul add adc cli aaa lret pop lahf adc xchg popa inc (bad) jae fwait insb sub in cmp jbe mov sbb xor int3 xchg nop aam icebp ljmp loope inc iret and inc mov data16 dec fistp sub add cmc test stc pushf dec fs leave xor addb push hlt (bad) jmp push jb ljmp in xchg sub xchg testl mov lret fiaddl loopne push fbld mov and aaa jnp cmp ja int3 mov sub mov xchg out jo jle sub jmp fnstenv mov mov je add lods cli push xchg adc ja lock cmpl and (bad) insl xor test movsl cmp jmp xchg stos and (bad) push stc push rcll lods (bad) mov sbb and jb jle lret jo shl (bad) and adc and push cli jo sahf movsl subl in pop pop loopne mov (bad) fisttp mov jmp cli and imul mov lods movsb mov iret test cmpsl movsl cmpsb pop arpl push les cli inc test in fs push add (bad) jnp in insl stos mov mulb or or cltd in xchg cmpl cltd adc (bad) mov cmp xchg xor out adc stc and jb adc push rclb shrl adc rcl xchg jb adc lods dec sub xchg lock (bad) xchg mov repz jle aam je adc mov jne push out push divb add xor xchg dec data16 cmp pop daa or fist adc js jbe movsb xchg sub mov push mov dec fidivrl sub aaa cwtl std mov mov rcll mov ljmp clc cmpsb out jmp js jmp popa fnstenv jg push out outsl ret (bad) mov scas out add mov ljmp sti ret add sbb fmuls pop mov adc (bad) int mov lods or ficoml fdivrs mov inc or xlat mov fistl call sbb xlat test sbb xchg and jno dec mov or xor outsb mov dec sub enter push xchg or xorb lcall cmp popf xor notl inc movsl loopne outsb mov sub icebp test je mov fwait aaa sbb data16 mov adc sub xchg or popf pop jae xchg xchg (bad) in lcall dec xchg or mov ja cli jo push or pushf sbb mov and testb out stos mov sti adc pop repnz jae add lock cmp aad jnp int3 or sub jae mov loope sub xchg mov cli jno cmp or shl fcmovnbe out inc xchg jae mov adc lea mov mov cld mov mov mov push xor call test fisubr adc rclb out mov insl mov ss in repz data16 mov cmpsb mov fs jmp sub movsl mov pop shlb (bad) cmp or jmp lret adc or mov mov popl jb mov out push jb int3 adc sbbb jno jmp xchg adc aaa cmp jmp xchg repnz stos cmp rcll hlt gs aas push inc sub push notb imul pop (bad) (bad) insl cld or push and shrb mov mov jmp jge nop sub in mov adc fmul (bad) stos je outsl fsts mov xchg sbb sub xchg clc lds ljmp jo sahf or lock (bad) iret lock in xor stos out and xchg in mov sar call sti adc insb fdivs lods repz xchg and scas repz xchg xchg jnp adc and insl mov and (bad) gs cltd rcrb (bad) in popf jl cmp adc mov nop hlt jl xor arpl jecxz enter mov xchg imul movsb ljmp mov xchg movsl les imul adc mov jmp (bad) and mov dec mov cmpsb mov mov lcall xlat roll std push repnz or mov jae (bad) pop loop ljmp into call mov jle cli test adc push adc stos pop test jmp fistpll push je lock movsl mov cld add test lea in hlt cltd push mov mov call out xlat (bad) mov test lods jp outsb mov push mov imul sarl inc xor xchg cs in addr16 fiadd cli popa (bad) int3 jb sahf outsl js icebp aam stos and xchg xchg subl sub aad daa xlat jb jmp aad mov std jnp movsb out in mov ja int mov loop mov lret push sahf f2xm1 mov mov les movsl pop out not lahf lods jmp mov mov push (bad) or push fldpi pop jge ficom loope adc mov mov xchg dec sbb in sub mul jnp mov and mov mov push xchg or adc jmp xchg or adc inc (bad) cmp std imul xchg dec movsl inc jnp fisubrl call call outsl add jae lock aaa mov mov addr16 jle jb add pop jo or jge pop pop push shll mov loope addr16 pop cmp and outsl adc (bad) roll inc clc out enter in jns out fistp je xor js inc (bad) lret (bad) jbe out jle aad aam push aaa ljmp iret imul jnp sbb int3 in sbb mov add sbb pop rclb mov pop movsb (bad) test ja or in adc jp jae cmp sub add aad mov jnp jae (bad) or lret adc mov push out leave jo push push std jmp mov ljmp lret adc jns insl fwait add fucomip repnz or sub imulb in (bad) jg jns (bad) cmp sub (bad) mov xchg inc (bad) aad jno movsl test mov cmc jmp xor out jecxz stos mov scas xlat sub movsl mov xor sbb adc adc (bad) data16 cmp pand push adc fcoms xlat jl hlt mov pop (bad) in imul pop inc jmp rclb pop dec movsb arpl sub xchg sarl ja dec rcr pop pop inc xchg stos lds jecxz addr16 in or inc mov pop fdivs add cmp pop jle add enter stc xchg jnp aad ja push mov (bad) jl mov inc imul cli xchg lds pop cld call xor xchg repnz inc jmp adc data16 dec outsl test inc (bad) call outsb fild fidivl add clc mov ljmp leave jmp mov jecxz jle aad mov insb adc sbb sti dec leave movsb dec sbb (bad) into jno or into in or out push jbe notl not mov jecxz jge cmp setb cmp subl cmpsb stos in dec fiadd dec (bad) mov xor xor xchg sbb out sbb jle insb inc mov test xchg sub test test orb xlat mov dec jns xchg sahf pop in mov jmp mov mov adc add xchg jno xor cmp jnp inc inc xor int in repnz jae jp retw adc mov xchg jne sar cmp fldcw in adc imull mov jnp stc xchg out add (bad) repz mov mov in xchg push xchg cltd jae iret adc stos dec popf mov mov cltd call icebp gs leave imul outsb stc mul rclb cmp (bad) movsl xchg mov jg outsb mov stos lods lods (bad) xor subl sar cmp popf cmp (bad) or aaa and push xchg movsb in cmp pop aam pop mul test sbb stos mov in pop dec call lock mov sub push in jo inc jns or not int adc xchg xor mov pop cltd fsubrs aas push cmp stos aam int3 cld and jo and pop lret cmp aam addl cli aad jns js hlt mov fistpll pop das xor cld dec mov and push je mov dec jns cmp cmp cmp and add lock std (bad) in out mov aam jno fcompl outsl lock (bad) xor xchg out adc repz repz jmp es mov mov xchg stos push sbb ret xchg sbb jge icebp push leave cld mov lret xor test in (bad) rcll sbb je lcall jnp rolb sbb sub inc stos lret xor loop mov dec ss test push pop mov cli aaa pushf adc jo (bad) fdivrs js rcr bnd dec pop jnp out mov imul sbb mov mov xchg lock (bad) (bad) mov mov push xchg icebp lret cmpsb popa je out popf mov pop fsubr iret or lret mov jecxz jno mov jnp notl cmpsb out (bad) test push fldenv xchg fs xor clc xor cmp cmp or xchg stc xchg lods xchg (bad) jb lahf int xchg inc mov lret and xchg or popa cli inc clc sub mov adc cmp rcll es adc stos es leave sahf and jmp xchg dec or jne xchg sarb cmp pop push ror ljmp xchg stos mov jo aaa cwtl inc test dec addr16 (bad) not out cs jb popa out not std xorl orb inc and mov aad ljmp aam mov lret aaa out iret das lret mov stos enter lcall push iret xchg cmpsb loope fwait into aad xchg orl add dec xchg pop popl arpl cmpsb xor (bad) rcl add adc xchg pop inc (bad) jnp negl mov jmp inc (bad) xor aad idiv inc arpl pushf loop (bad) xchg movsl adc insb mov (bad) and andl xchg adc das lock ja ds out mov mov pop fwait (bad) aaa je pusha repnz testb pushf jb pushf out cmpsb (bad) test mov fsts dec stos cmp sbb mov repnz push loopne xor out xchg and pop mov or pop cmpsb mov mov mov int mov inc mov cmp adc aam addb cld or stos clc jmp mov decl lret and js rorb lock iret mov lcall iret stos mov sub sub xchg sub inc mov dec out sbb ja cltd addr16 sbb les xor adc outsb ret mov xor fisubrl or jp aaa out rcrl jmp push inc (bad) or test test stos flds fstps sbb (bad) xor mov xlat fs ficoml lods push jge mov das jecxz ret push data16 sub fst xchg jmp adc (bad) aam pop cmp sarl xchg mov xchg jnp or repz xchg rcl xchg xchg imul adc xchg mov stos push add hlt mov xor daa gs test rolb and dec fstl xchg testl mov dec lock sub cmpl or in cmc nop in xchg pop in fs enter xchg jecxz test push insb cld popf call mov sarb xchg ret es jg pop insb negl test repz out mov fwait (bad) mov sbb ljmp jg bound jecxz pop (bad) mov xor out push and leave fisubl sbb cmc xchg loopne shr mov in or cmpsl pushf mov movsb sbb js or lea ds sub jbe icebp jb cld or add imul bound jb push jne mov adc jnp enter push cmp or adc mov cld daa dec inc inc xchg sub xor mov cmp xor out outsl sarb ja repnz inc nop int popf jbe jb cmpsl fisttp leave movb add xchg out pushf pop jmp (bad) jnp out xor test stc in test dec outsl scas repz mov shr loop stc xchg lea xchg or sbb call push add and adc pop iret fdivs imul xchg sar xor stos xchg cmp outsb xchg push ss inc ss jb repz ss cmp xchg sub std mov cli mov xor mov sbb jecxz and fistpll ret stc ljmp outsl (bad) pop inc xor sarb pop dec test sar xchg fisubl jecxz iret jb orb jbe into test aam into scas pop (bad) pushf or sarl lahf lea jg push jno ret mov mov icebp jge sub aam and mov mov stc jle xchg mov iret and inc fcoml je out add push in insb stos or jge ss mov imul (bad) imul or call mov (bad) lock jle cmpb (bad) cmp mov xchg div jge inc mov lahf mov sbb pop out jbe imul adc xchg in (bad) jb jg cli mov or jo aad fildl aas nop out lret jmp in outsl or pop push jg mov mov adcl sub fdivrs lret dec dec cmp fimull mov and ljmp stos aam lahf mov pop bound (bad) jns idiv xchg daa cmp mov jmp push xchg adc sub in fistl sarb mov inc outsl stc push cmp enter mov mov mov hlt popf xorl cld in movsl push aad add and adc jmp lfs je adc push dec ret outsb outsb mov ja pop xchg cld jo out push fldcw mov mov add dec pop lret xchg fisttpl mov adc negl push add (bad) mov jb push sbb mov mov into movsl cmpsl jl orl mov pop mov test call repz dec (bad) sbb sub cmc adc pop jle jo test jmp jmp (bad) jecxz dec mull iret mov xchg mov fwait stos iret adc sbb inc js xchg out (bad) insl fbstp icebp movsl cmc ljmp cmpsl jge cmpsl repz push cmc dec out jecxz jmp das mov sarb call out adc fdivl (bad) jns sbbl xchg sub je mov stc mov data16 sbb mov test loop mov mov xor xchg sbb mov out adc loope jmp dec jbe out push xchg (bad) inc mulb cmp loop xor sub mov mov mov jg bound testb out leave cld out adc inc dec or outsb jo jecxz add aad repnz jp negb ljmp bound stos pushf jmp sub lock cmp pop lods addl out mov pop cli lcall ds insb mov jg in insl dec bound cmp add adc pop mov mov xchg icebp outsl cmp repz int3 sub pop cmc sbb push (bad) lret fisubl jmp fdivs aas int mov fs jo outsb adc jle test js (bad) dec jno mov out int3 movsl add out in sub fiaddl lcall and lret int3 or dec add jo clc sbb daa hlt jge jno negl data16 mov mov cli jg enter xor jge in adc loop jbe (bad) test jmp jns mov cmp loope in mov jmp arpl cmpsb jae jae repz or jg push scas imulb je ficomp jge (bad) sub and lahf adc mov scas inc mov pushf loope mov imul (bad) js nop call repnz mov push fisttpl add scas dec mov test cmp stc dec mov xchg lods cmp push ds jg fdivrl test cmp jnp push adc cld xor fildl xchg (bad) dec stos sbbl testl adc jb aaa dec lahf xchg mov fildl mov rcr in cmc push adc test icebp pop into (bad) icebp push out mov xchg out mov insl addr16 sarb testb xlat ds lcall addr16 mov repz and popa pusha sub lcall adc fcmovnb cmp frstor push or jge mulb insl sub jo scas jmp mov xor jb mov adc sahf (bad) and cwtl pushf jbe adc (bad) xor mov mov xor fsts out sbb in push fbstp repz cwtl push negb lahf jg loop (bad) popl fisttpll rorb xor cmp xchg repz inc xchg lcall (bad) stos push xor movsl insb shl outsb in inc fcompl xchg icebp jb data16 pop jecxz out cmpsb fistpl cmp add icebp leave xor jbe rcrb popf and test stos loope (bad) jae mov scas in icebp icebp jg add ja sub jmp ficomp xchg repz fsub ret xchg mov lret xchg std xchg js addr16 out xor or fldenv and cli iret out in push dec sbb stc popa fwait ret lahf es hlt leave test push outsb and in sahf xchg (bad) leave xchg not mov repz (bad) add ljmp sub jno xor ja push xor xchg jne pop shrl les xor add xlat (bad) xchg test les mov dec sti loop inc iret divl jb mov mov mov ja push out xchg sar ret cmc or jl jne into stc fcmovbe insl loopne jp mov mov (bad) jno push dec movsl (bad) stc aad outsb int3 movb stc inc cmc mov add cmpsb push outsb adc stc inc lock mov cmc dec (bad) cmp (bad) fimull cmpxchg push ret jecxz std fist mov push mov mov repz cli popf adc jns (bad) mov jg fcmovnbe call rorl or jmp in and cmp pop mov (bad) andl rorl andl call (bad) ret fisubr loope notb les lcall pop test jecxz (bad) repz push packssdw ljmp iret in (bad) mov jb mov imul leave push dec mov jmp fadds repz (bad) push xor (bad) divl jno jo dec (bad) jmp icebp dec xchg daa cmpsb xchg dec fucomi push mov fs pop mov mov xchg cmp popf pop cmpsb leave jmp sarl cmp inc fildll into (bad) in or cmp cmp mov sbb (bad) jo imul test ror call xlat lds (bad) out out cli pop mov push pop lods pop mov (bad) pop mov mov fsubr dec mov mov sub lods fild sahf inc and sub testb out das mov sub mov imul xchg cmp adc out fwait daa xchg xor adc jbe outsb sub aaa pushf cmp push scas pop sarb jno insl les (bad) jecxz jbe dec jbe popf cmp js (bad) cli jb inc orl and jge std xor call jb outsl (bad) out sbb out jmp jl out (bad) cmp and jae rorl mov nop out nop xor cld outsl lret fistl lods mov je sub dec pop fcmovne lock jp sbb clc (bad) (bad) jmp movsl dec xlat test xchg push stos mov cwtl dec mov adc scas (bad) xlat xor lods rcrl adc imul out jnp pop cmc enter mov mov inc pop test push mov in (bad) test out data16 cs outsb mov movsl mov mov cmp repnz in jmp xchg or jle repnz jnp stc xchg into in mov mov push mov mov jecxz fxch pop ds stos xchg clc fs adc popf pop cltd jecxz xchg popa (bad) mov dec ret add ds repnz xchg mov dec xlat mov movsl pusha cwtl cld popa mov xchg stos cmc mov jmp ds stos dec cld cli movsb jb out adc adc mov popf aad mov xchg pop test lock xor jle stos xlat or sub out adc mov mov stos out movsb mov inc mov (bad) xchg pop stos add mov pushl push lret jecxz cmpsb pop mov jmp fwait add outsl mov out adc inc or push jns or jge in jns lods mov pop xchg jmp dec sub (bad) fcomp cltd mov cmpl mov repnz mov xchg dec xchg mov pop cltd stos rclb push daa mov jne pop cmc mov into mov mov movsl mov mov push rcl lea cmp lret and mov jmp mov jecxz pop daa push dec imul jmp cs icebp jno xchg outsl shll mov jp or rorl push mov mov bound stos pcmpgtd out test fistp andb sub pushf dec in (bad) adc gs stos dec mov sub nop jb scas cmp add mov int movb xchg cmc pop scas out sub js gs mov xchg xor dec dec mov mov pop mov cld jl mov (bad) movsl or lock bound mov (bad) jae mov (bad) jg,pt xor lea fxch lahf and outsl (bad) mov jne xor xlat push lock mov dec xchg (bad) cmc push (bad) mov sti int mov pop jns and xlat ljmp leave jp out mov mov xor mov jno xchg stos fistpll adc sub push (bad) hlt (bad) in mov (bad) xor test xchg xlat xchg mov fnstsw adc lds loope mov mov jle cmp aam fneni(8087 push repz mov lret lahf outsb cli gs out xor add add outsb lods mov mov addr16 movsl sub imul movb call cli jl outsl repz sbb scas ljmp outsb jno sbb and enter cltd ror jmp sub adc mov (bad) mov and mov bound (bad) lret xchg iret enter (bad) mov mov jne into imul xchg sub je inc fstpt inc pop adc bnd bnd popa js icebp adc xchg aaa push gs lock dec fcos (bad) xchg dec cmpsb repz cltd repnz sub les pushl rcrl mov or in pop pop sbb pop je dec jnp hlt adc mov loopne imulb xor daa push push in adc sub mov push mov and push xchg arpl fs enter push adc xchg je fdivrp pop mov sub xor mov fwait stc jp sub loopne xlat jne dec sub ds lea movsl in inc inc mov pop cmp push mov mov lods adc stos and mov jno push cmpsb nop mov dec xor jge xchg xor pop mov cmpsl add outsb int3 mov push mov ret push fldt ja add fs lods xchg and add mov cmc stos inc fdecstp movsb imulb clc test stc xlat (bad) (bad) shr pop fstps repz pop js adc mov les mov dec nop jg loop mov sbb adc jecxz imul mov js aaa (bad) mov cmp jp adc mov adc mov gs fsts fistpl imul mov xlat mov mov mov lock mov xchg adc ret pop enter pop (bad) test push fimull rolb push cmp pop inc repz mov mov or xchg dec mov mov cwtl repnz cmc stos jmp imulb clc mov xlat popf lods xchg cli shr incb xchg or imul mov jge mov stos rclb fnstsw pop jecxz (bad) (bad) xchg push mov sub or aad inc insl repnz mov std adc jmp mov out push xor loopne cmp lods and jl sbb aad xor mov lock (bad) xchg in xchg pushl out adc mov pop xchg fdivrs jmp and add xchg cmp mov push mov cmpsb mov add (bad) fnstcw xchg movsl pop sbb pop scas sbb mov pop test (bad) and jo cwtl ljmp divl sbb fcmovnu xchg inc inc nop sub and test adc mov stc loop movsb inc cmc in repz pop xchg test jbe shlb mov sub push mov pop mov sbb mov nop mov push push mov clc jne das and aaa mov ficomp scas rcl jle jno inc ljmp (bad) push mov test jmp jmp (bad) sti addr16 jae mov xlat dec cmp jg frstpm(287 aam push jae jae sbb adc jne mov mov aas pushf push lcall cld testl sub dec rolb lock clc sbb push sbb xchg addr16 imul mov pop loop lods cmc in xchg movsb aam cmp cmp dec adc addr16 leave pop (bad) ljmp mov fsubrl and bound xchg (bad) jae popa gs sub shl dec mov sub rorb in lahf cmpsb int3 jae stos cltd stos mov mulb out mov outsb mov mov (bad) mov inc cld inc dec ror es adc stos imul stc addr16 mov adc ds aam xchg movsl lock stos mov js repnz mov xor xchg stos jno mov sbb insl test lret test (bad) and imul fwait mov jmp scas mov lock mov pop rol cmp inc ja mov xlat jno fnop cltd adc xlat lahf sbb fwait xchg mov mov movsl ljmp mov daa cmp rolb pusha fldcw sahf pop and xchg js xchg mov rcr jns adc cld mov mov out lret sub icebp mov imul cmc les and shlb jmp bound rep xchg repnz lods mov lods movsb or sub or cmp stc mov xor cmp in or fildll mov ja cmp out xchg jo xor lret and leave lods xor imul stc jbe loop outsb xchg mov addr16 (bad) int3 sbb inc add cmp lret subb jnp cli js mov out stc out mov clc mov sub (bad) leave fstp in in or pop or cmp add xchg mov out daa mov sub hlt push rolb mov adc push rclb cmpsl into cmp jo test fucomp xchg dec add les (bad) aas mov or lret stc ret mov mov stc (bad) insb les shlb clc mul mov and je bound in inc data16 cmpsb mov jecxz ja sub ljmp fst popf add popa pop cmpsb add pop out cmp xchg ret jle flds and mov jo (bad) aam pushf jp sbbl popa cld out cli sub jbe in data16 mov out out (bad) adc dec jmp test add popf or or jo adc and and stos pop or add sbb lahf les adc xchg jecxz sbb (bad) jae jne jb jecxz jmp sbb jo (bad) std cmc lea fidivr popa inc or xor imul jp (bad) mov repnz aad icebp jb adc das push jns repz daa pop sbb cmp sbb movsb mov add ret xchg addr16 adc jmp xchg inc dec test mov jnp jne out adc out in cld adc lods mov stos dec cld jg lahf int3 lods into jl lcall push mov push xchg jge cmp ja and daa xchg adc flds or adc or scas and arpl jge push (bad) push imul aas add iret pop xor in scas mov leave das repz in (bad) jno and das test sti test mov sbb and std bound mov mov das inc or or lock (bad) std aaa arpl shll rol add inc jmp hlt inc mov mov mov loop jmp stos cmc and addr16 icebp test mov mov mov movsb dec nop pop pop lods sub les dec fucomi cs cmp out jge xchg mov xchg loopne imul sbb pushf cmp dec adc kxnorw push cmp xchg sbb and xchg inc das mov rcrb insl pop icebp adc lea xor loop sbb fstpt mov sbb test outsl lea arpl dec or cmpsb fimul aaa fidivrl rep mov and xchg push fist adc push cmp in divb sti jle jnp mov cmc outsb mov ss push adc (bad) mov jge add add bound repz mov (bad) dec ret (bad) jl mov and scas loope mov stos lret cmp lock or lods mov cwtl lods leave divb push mov jno lret stos fs mov mov sahf dec lods leave dec mov pop stos lods mov or lcall inc movsl cmp nop (bad) ss cmp daa jno sub jmp jbe inc fsts push test sbb int3 (bad) xor cs adc mov lcall sub out popf fildl incl jl lea mov jge test fidiv outsb scas xor popf adcb jb fsub test (bad) das mov adc iret stc enter adc out cmp into sbb push icebp popa xchg cmp jne inc lods (bad) mov int leave sub push push out xor push pop push (bad) sub sti ja std push add repnz lods dec pop adc idiv adc add test pop outsb flds mov iret out inc fsubrs call add add xchg sub mov push add aaa add xor mov aad fdiv xor lahf lock test jnp jmp stos cmc repnz push cmp xchg cmp xchg mov jl or jae out pop and inc lods hlt push fcmovne fcmovne rolb pop lcall sbb test fldt or jge,pt cltd (bad) mov lret xor inc int3 mov bound mov daa mov icebp fistl mov adc xchg jl xchg movsb push into ficompl imul int dec xchg push (bad) imul mov dec jmp xor movsl inc xor add cltd (bad) mull cmp mov jb xchg idiv ss dec xchg fidivr scas add mov dec subl xlat in or js repz cli inc rolb xchg stc rorb cld xchg adc lcall clc dec ja in adc push (bad) clc xchg cmp cmp and mov push mov mov xor pop aaa or lock pop ss push push scas ljmp add jge insb (bad) into cmove das jmp (bad) int3 sahf into ja into add (bad) sarb mov loopne ss fimul int3 in or xor push (bad) xor sub sub (bad) mov ja push sub lds scas sar lret lcall mov mov sarl and out arpl lahf push add pop lret inc fidiv adc xor sub mov iret xor aam jecxz sahf iret jae xlat mov stos pop lahf (bad) ja test jl push add lods out dec jae scas pop dec es loope mov or or arpl push push push jle pop pop repz cmp aaa repz mov jg cmp repz ret mov xchg xor rclb xchg jne add push divl gs iret sbb es and imul in fdivl mov stos inc xchg out stos aaa mov xchg cmc adc fcomps lret enter es sbb iret dec mov pop (bad) mov (bad) push xchg aaa (bad) cli lods mov or into mov mov pop push lods pushf jne xor hlt sarl adc mov stc dec aad repz pop sub push rolb lods and mov mov das mov jg xor dec icebp jge mov repz movb or jmp ret test mov pop fs dec pop jno sub adc shrb pop rol mov out lret mov and (bad) hlt push and pop xor cmp divl (bad) push add lea int3 xchg pop adc ljmp push ret icebp outsb mov stos xchg xchg pop leave outsb mov cltd fdivr jns fstps inc in incl stos movb adc or int3 (bad) mov jge or out cltd mov stos lcall std hlt xchg addr16 cmp cmpsl mov pop sarb xchg mov push test jl loopne inc (bad) mov (bad) fldcw jno loopne cmp pop sbb gs lds lds ljmp nop jmp stc mov xor pop sbb xchg out sbb sahf mov mov mov and aam push dec push adc and inc jbe enter aam xlat adc mov mov out scas mov sarl mov adc mov xchg arpl enter and mov movsb (bad) jbe imul leave cltd jae push aad out xchg lods lret in stos jp or aad cmp lahf test fsubrs rcrb push add and mov insl xlat jge movsl cmpsl fiaddl jae aad adc push scas jne cmc aad add xlat jnp mov pop inc aam (bad) out or jns rcrb or sbb mov in mov push mov stc into stos add mov xchg test insb mov movsl pop push jo fidiv in cmp aaa test mov push cmpsl xchg jb jle loopne xchg aaa nop cmp repz push test test fwait fs divl or mov jmp add sbb dec rorl lds inc shr dec fs jnp xchg mov je xor jno ljmp fisttp fistl test test jmp cmp mov (bad) mov cltd jmp or insl cmp xor sub lock popf sbb stc (bad) mov fwait mov jmp push sti insl sbb add sub outsb out pop rcll jmp stc add push into stos decb in dec (bad) cmp inc pop push mov addl push in or fbstp cli jmp adc mov into in mov cmp cmpsl xor shlb jb int jecxz hlt sub mov decb loope stos shl sub cmpsl loop xor push imul mov jmp push or (bad) pusha add lods leave (bad) aaa ret pushf sub adc xchg mov cmc and clc jmp mov std data16 sub pop xchg xchg dec push mov jne scas cmp cmpsl cmp cmp sti jb mov sbb add hlt push pop mov out mov out jp cmp add fs scas mov xor call sub lahf fbld mul inc inc les xchg out mov push xchg inc ret mov mov xor fwait inc xchg fsubl jo sbb or and into adc stc adc in ret fldenv repz aad clc jo jge sub sub addr16 inc mov imul sub xor cmp jg icebp icebp ret cli insl sub (bad) lcall ljmp test mov loop lods mov dec sbb or jb arpl mov cmp jge cli shrb bound xchg mov add test lock mov mov pshufw pushf aam xchg stos mov cmc cld cwtl mov outsl nop clc jnp push insb jmp jmp push adc (bad) int mov jecxz xchg ret stc jmp or in loopne push dec out mov cwtl dec lods mov dec lock push push pop or iret leave icebp insb xchg stos icebp xor sub out cmp cmp lock pop inc lret imul inc or repnz stos sub outsl lds push adc mov sub es stos xlat jns cmpsl mov dec in inc test inc xor out jp xor clc mov lret jecxz jno jmp mov adcl add mov std out push jecxz rolb mov outsb cltd dec mov jo int3 jb jge int3 fs jae adc mov test push sub xrelease add int3 iret jmp ret xchg xlat push jmp xor test int3 ss mov dec push cmp imull mov pop adc lea pop sbb in cmp lods mov xchg add mov cmp imul sub stc sub adc clc pop lret adc adc clc dec xor or cld or (bad) in dec es int jbe arpl jbe (bad) lods and imul insb call mov nop lret sub dec push orb jmp inc cmpsl xchg sub das shr stc dec jnp cmpsb ss jle pushf rcl test adc call xchg mov aad test cmpl mov pop int3 mov das push xchg xchg (bad) ja xor hlt sbb sbb rolb xor test inc fistl outsl (bad) xor mov in sbbl xchg mov pop mov sarl lods jns or sbb cmp push out test xor inc lods inc add stos sub fcoml out mov ljmp cmp std (bad) fild pop iret (bad) enter dec mov rcrb push jecxz mov outsb iret mov fptan out dec mov jae pslld sub pushl pushf rorb lods add dec aam addr16 dec outsb out lcall push add cmc test jge (bad) push dec xor mov hlt sub fucomi jb jp ljmp imul mov mov ljmp popf mov mov lds in sub mov cmpsb inc std xchg mov call jb mov sub mov shlb sbb sahf xchg lret mov mov adc fs or cmpsb movsb movsl mov xchg test repz cmpsb jg (bad) repnz xchg push repnz cmc (bad) xor fisub in negl (bad) lock fsubrl pop rorb dec jo fcomi in adc dec and adc lock pushf jns fsubrl jae popf jno into cwtl jae lahf pop push aas stc dec pop repz push xchg out cmp addr16 (bad) xor cli and add outsb mov jns stos repz inc or inc jo inc imul movsb (bad) imulb mov inc jo imul cld jbe add aam jo sub mov xchg inc add mov leave adc mov loop adc movsl ss in loop mov iret rcrb js sbb ds adc push mov aam sub jmp mov cmpsb das (bad) in xchg inc les (bad) jmp add push and mov cmp in (bad) or adc inc sbb xor sbb mov leave mov cld idivb add cmp js sbb fsts mov xchg loope and sub sub pop shr xchg fnstcw icebp (bad) shrb mov xchg jge cmp in cmp jb lret jmp cld pop inc mov leave mov sub iret dec pop mov mov xchg fiaddl jo fcmove or les mov cmpsb mov int mov and or (bad) (bad) gs call sarb xchg jecxz xor mov sub imul jmp xor mov adc jecxz add xchg mov or mov mov push or loop mov call add jecxz (bad) xor int or pop in lods push mov movsb mov (bad) negb xchg mov xlat mov leave loop cli pop sub std rclb sar jb mov sbb jo in xchg int aad dec icebp xchg xchg insb mov sub js mov stos jns (bad) cmp scas add (bad) arpl sub ja popf (bad) cmc out jecxz fcomip fucomi xlat (bad) iret (bad) stos imul js adc repnz mov fidiv adc pop xlat dec arpl cli inc lahf scas push hlt enter ja cmc (bad) or int3 aas std imul xor aas push cmp outsb or xlat mov insb push pop cmpsl mov leave mov aaa mov outsb movsl rol test mov fsubl add movsb and out inc shl outsl mov rcr outsl push icebp fcom ljmp imul ja sbb inc adc jecxz cld mov popa popa push xchg out fyl2xp1 arpl mov cmp mov pop aas repnz inc jae xor adc sbb popl lea mov inc jmp xchg mov (bad) pusha cs and icebp imull data16 (bad) inc mov addr16 gs dec (bad) and jb pop loopne adc ljmp (bad) pop lahf outsb sub ljmp cld push fldt imul jno mov leave xchg jmp lret push ret sar add fnstsw jle sbb out shrb loop cmpsb ret out adc into hlt daa push mov add xor xchg out jae xor jle std dec lahf mov or fbld jns popf xchg enter mov ret jg sub and decl fwait jno das out lds jge xchg xor test lock sbb and cmp data16 mov mov repz cmpsb (bad) jecxz jg cs mov adc aam imul cmpsl jecxz jmp jmp lretw addr16 test icebp mov test mov inc repz sahf dec sbb inc imul adc daa or insb inc push mov insb mov inc xchg inc cmpl mov mov push jo lahf (bad) jecxz test (bad) mov fs jmp xchg push pop call xchg nop aam popf es jg and out int jecxz into mov scas ja mov sbb add push ret add out pop in ljmp aam out pop ljmp pop cmp adc and jmp (bad) and inc adc mov dec cs lds jae notl jmp dec inc mov mov in rclb in cli push sbb mov test mov in pop pop push popa pop or fldt cld pop sub xor test xchg pop daa sub push ret movsl sti mov int inc push into cmpsb push dec cltd jg cltd sti aaa outsb (bad) fbstp dec clc or cld insl idivl fildl xchg xchg or (bad) (bad) mov xchg aam idiv movsb add movsl in jl xchg arpl test lret out call cmp in xchg fsubrs ficompl (bad) jl cmc fs subl lds out ja imul sbb daa mov adc ja push adc xor xchg cmpsb repz cmpsl push push scas stos aaa ror mov adc lret notl mov mov repnz adc sub int jmp aam adc lret or ljmp jae insl or mov (bad) adc lods xor rcl fwait mov cld idivl xchg sbb movsl dec cld fistpl mov jmp mov xlat xchg repnz icebp mov imul movsb xchg adc into jns push lods pop fwait popf push and orb mov and push pusha add test jle sub jmp scas sub aas popl dec inc adc xlat xchg daa and add in mov cld std (bad) adc xlat (bad) xor cltd sbb mov sbb clc ss mov lock decl mov mov test xchg mov push jmp mov sub sub cmp popa int3 push push jnp (bad) div out mov xor (bad) mov icebp jmp clc mov vunpcklps flds lea and xor (bad) push (bad) cli or inc (bad) adc fistl clc jno mov xor test jl mov jnp mov scas js iret adc pop neg int mov stos in mov mov xlat add sbb nop mov scas or sub pop push add sub mov test cli (bad) (bad) mov js out mov jne jmp stos jnp jbe ss inc xor sbb bound add shr add xchg mov es out addl fsts movsb iret pop mov test jmp xchg xchg xchg push rcrb mov fisttpl xchg pop push aam jmp rcll jp pop in or scas js pop ljmp stc pop adc jno (bad) adc sub sub cmp cmpsl fistp mov or fucomi loop xlat jmp (bad) iret loop pop out sub pushf aaa mov adc jo xor adc (bad) loop fcmove push mov in lret lock push ret (bad) pushf (bad) or in cli add repnz cmc pushf adc hlt fwait (bad) jecxz enter mov into int out xor dec jle mov ficom xorps pop mov cmp addr16 out aaa jb push inc fcmovbe xchg jle xchg inc ljmp fwait stos mov cmpsl je repnz pop and sbb sti (bad) mov imul add repz xor add pop mull sbb js pop pop adc push mov or cmp fnsave lahf dec pushf aad fs cltd cwtl cs fs int pushf stos jmp mov lret pop std adc stos aaa xchg mov add adc (bad) xor mov jb sub or cmp cld cs mov pop mov nop std mov cmc adc cmp (bad) icebp call ret xchg mov js out inc sahf iret pop xchg jo xor cwtl adc jns adc push pop mov out add (bad) add fmull pop scas les fwait mov jae out rorb push lods fucomi jo sub in stos cmpsl cmc roll jns les jmp adc loopne ret int3 dec fucomi imul pop jmp into out and (bad) out (bad) std iret ret jecxz mov ja int pop push out mov or or push sbb mov repz add das or mov ljmp adc into mov pop pop jno roll imul add stc outsb pop js dec jmp jb xor cmpsb stos mov gs stc out mov stos fsts cmpsb out outsl sahf mov shll inc daa cmpsl stos jae lahf out daa push jns (bad) adc adc mov mov sbb addr16 pop inc sub in loop mov jmp cmc iret xchg pop insl lods add outsb rorb addl jmp sub xor jne in jge lods mov ss cli lock xor mov imull adc cmc lock movsl mov mov adc sahf stos xor fsts shlb mov adc adcb mov push scas mov mov (bad) in xor jno iret and lcall adc ljmp push enter pop adc pop mov push jge sbb test in jo pop ja movsb call imul cmp mov mov and or das fiaddl div adc lods in les std xchg xchg jle aad test or inc jmp push cmp lds jne jo fist loope loop ds test or mov pop inc lret repnz fcmovnbe movsl xor out in leave mov movsl inc sti int3 sub aaa imul lea sbb std shr or xchg lock cmovg mov ret jns dec scas fistpl pushw ljmp pushf push (bad) ljmp pop in in fstpt adc je sub pop lahf (bad) inc mov lods mov mov jae stc mov push add ss mulb lods or lods aad (bad) xchg jmp sub sbb popf cld into dec sti push cmpsb test jo push clc in mov jb stc mov lods repz shrb stos mov inc fwait ds (bad) int3 xchg sbb mov add xchg aaa js incb mov shll push test mov jl jp loope inc enter jae or mov ss adc inc nop fnsave es add jge push fisubrl cwtl dec cmovbe jle aad pop cmp xor jno mov loope xchg (bad) push in cmp push pop aam xor (bad) mov (bad) cmc dec add sahf enter push mov clc xchg scas and (bad) jno jmp jmp (bad) push out xchg mov fisubl adc and adc daa mov scas call sub jae imul jbe xor fwait lds jp pushw addl mov sub pop sbb iret into sarl iret int adc movsl lods (bad) fbstp ret stc pop testl jmp cli inc aaa pop bound inc stc mov xchg rcr repz xchg lock lods xchg xchg test aaa dec lcall (bad) movsb pop and push sub loope pushf adc or daa icebp cmpsb out pop (bad) in push pop mov stos jnp adc or mov adc lods adc mov adc test sub shrl lahf aam xchg aaa fwait cltd xchg lret (bad) outsb mov jae add jg fucomp outsl movsb push stos and ja notb (bad) jecxz jb icebp fcmove aaa mov movsb and dec stc loop loop fistp data16 mov mov xchg aaa xchg nop aas stos imul push jmp lods lret fdivs (bad) jae push rcrl xchg pop stos push mov in fiaddl rcrb mov loope jge xchg fisubr mov ret movsl dec adc adc push mov cmp cs loopne outsb stos addr16 outsl mov jo repnz arpl mov inc test leave shr xlat imul and push mov stos xor outsl push jmp (bad) mov inc adc push mov push inc add in fmul mov lret lock cs outsl dec fld fildl sbb mov fstps (bad) stos daa lock popa sub movsb inc add bound test test or rclb sub popf stos test sti pcmpeqb loop mov jmp test xchg cwtl cld sbb xlat ffreep jo mov gs ficompl test mov mov cmpsb lock dec jno mull lahf and pop jnp mov dec popa out cmpsb jge movsl inc lahf lret nop sub dec mov int3 test jmp inc xor pop repz ficompl mov jbe movsb (bad) mov out mov sub jl outsl xchg push loope or jmp mov and lock shl cld or in imul adc iret test push push icebp je nop cld xchg mov clc rcr movsl mov cltd test aam pop test rcll push negl push jmp add pop push sar jno jmp lea clc bnd in outsb mov xor (bad) fdivs fwait mov lods adc repz or sbb sbb xor insl mov mov pop imul fwait test fwait mov jb xchg lret jmp mov fistl push roll inc lds cli push dec jo xchg jae adc int3 adc xor pop or jl clc dec push fs mov mov xor push adc hlt ret mov inc fldt pop and jecxz mov sbb es mov inc pop sub fs xorb test jno sbb jmp std imul mov mov je test hlt addr16 ja notb push rorl sti or jg xlat scas (bad) pop sub jmp mov jne aaa and cmpl out jmp sub inc fldt cmpsl call pushf dec inc lret outsb push fwait insb ret enter repz mov not cli or test or pop pop mov fist xchg jns mov ret fbld mov incb clc iret int jmp in outsb addb test adc adc push movsl dec pop xor movsl add mov repz lcall in test xchg cltd xchg mov mov sarl outsb adc xchg sub cmc stos enter fs jmp lods fstpt inc leave mov inc rcr jmp aad or push inc int3 lods popf repz gs sbb sbb mov insb repz sbb jg jecxz add sti loope iret cmpsb loop (bad) push mov out fdivl aaa add aam test out or mov mov incb stos bnd xor sahf in pop lahf movsb pop das scas andl adc cmc push add aas (bad) nop out mov aam xlat ficomp jae jge test cli xchg mov jecxz sub aaa adc addr16 (bad) cmp decl jns jno adc cwtl aaa (bad) fwait adc movsb sbb and in add xor lods sbb xor mov outsl into mov stos aas dec test cmpsl dec xchg push mov mov loope dec popa ja lea push decl pop xor mov mov inc loope push sbbb sti int3 es sti cmp jb rclb pusha cmpsb pushf scas hlt lods add xlat std imulb repz or push out push jmp mov std mov shr xchg iret push fcmovnb jl jecxz push sub mov dec sub cmpsl js xchg mov xchg sbb xor test jo lret pop adc cmp fwait sub jne stc addr16 movsb stc sub out int lahf popf push lcall lock cmp xor out pop pusha mov test mov sbb mov jb jno sahf jo adc (bad) sub dec lret lahf mov mov jo insl jb cwtl repz lds xchg das sub insb xchg mov clc xchg scas xor shl pop lods sahf sbb mov data16 popf and cld and leave movsl cs and movsl (bad) mov fild jge ja and or sbb inc dec rolb mov cmp xchg mov xor mov stos sub movsb lea mov xorl jg jg cmpsb push aaa stc rcll cmp call aad push and dec out cmpsl movsl inc ret out rcrl shll aaa adc stc xchg inc and and add mov pop repz imul stos sbb ljmp jmp ss add fisubrl gs (bad) cmp mov add movsb adc jno sarl fisubl sbb mov xchg (bad) mov adc fistp into daa jno (bad) jmp nop cmpsb in mov xchg stc jp in fabs out adc xchg clc shll lods adc (bad) mov mov pop push push fcomp sbb xchg push or or mov lret xchg cld scas cmp lahf pushf fistl cltd lock stos cltd add push popa imul enter xchg rorl jb ret daa in cwtl mov lret ret (bad) loope add stc sbb xor int3 mov jle cld icebp int3 aam bound sub inc or dec cmpsb mov adc xchg int test mov xchg test adc mov push mov mov inc mov mov xchg cmp lods loopne (bad) lea mov test mov jmp adc ret callw xchg xchg pop mov fwait dec or repz jle pushf adc inc pop and (bad) scas cwtl ds fistl movsb pushf xchg lea adc sbb xchg adc jecxz ja (bad) lods (bad) mul mov jg mov sti and push jecxz imul add inc xchg dec inc push xor leave (bad) jmp add sub in out or (bad) repz add ror icebp ret sub ret out jo jecxz add cmp cmc sub dec mov jmp and fdivrp in jmp and ljmp roll pop or in mov leave jmp push dec es cli push in xchg dec out fcomps jo test (bad) pop inc in inc or movsb fnstcw out mov into aas iret mov jmp xorl addr16 push jb sbb (bad) push fs stos pop mov or stos fcmovne scas xor and and sub dec mov movsb aaa cmpsb xchg pop or ss data16 lret xchg mov shll xor or fwait test jbe and mov (bad) or xchg (bad) xchg aam stc xor fwait sub jmp imul xchg xor jo in xchg in xchg sbb sub lds pop enter pop sub stos mov jmp adc aam pop rcl dec aad lret xchg push stc cmp sbbl xor (bad) sub std pop out and lret int3 outsl inc add pop iret jecxz inc vpmovq2m movsb aam cld jge hlt outsb mov sbb sarl pop xchg xlat mov popf lret add pop rep cli imull add jle ret jp clc xor cmp faddl adc out leave sub je cmp mov mov imul pushf inc aas adc xor dec rolb push imul sbb and test rorl xor loopne aam adc push and xchg xor in inc repz es jbe iret mov cmpsb loope mov and notb add repz push inc mull stos adc popa cmpsl xor pushl jmp sub outsb (bad) dec mov add clc jecxz popf stos minps mov mov pop or out dec sbb nop or cmc mov add leave leave lcall shrb iret shll (bad) imul dec push popa pusha add mov mov fs sbb xchg inc mov pop adc scas iret clc adc pop fist nop out fdivrs cmp mov xchg dec push cmp mov test cmp test cli cmp rorb ret jns pop (bad) insl and sub jmp cmp clc in fcmovu mov pop xchg pop in jmp test ja xchg fsubs pop and dec inc and (bad) jmp aam aad mov mov inc pop jge into mov adc pop xchg sub fwait aad mov xchg pop ja (bad) sbb ret sub adc (bad) iret pop ds inc fidivl (bad) push popa lcall cmpsb pop pop popl mov shlb aad lds pop mov flds and or js jbe mov fmul add push push leave out adc and imul hlt mov jbe dec out out mov push push or mov xchg (bad) repz aaa mov outsb andb ds imul movsl js rep jle xor mov fisubrl adc push cmc int3 std inc dec xchg jg call dec sarl movsb xchg adc and dec jbe adc jecxz push dec clc test int3 xchg imul fs and fisttpll lret ja jne fcmovnb inc rep mov adc ja add stos jns aam sub push dec push (bad) outsb pop push cmpsl jns pop add push and test leave insl xchg adc cltd adc aad mov stc push mov mov stos inc mov jnp out push test aad and scas mov imul lret xchg mov cmp faddl stos push outsb out mov outsb scas mov mov jae push mov add test shrl add imul vmovd sbb outsb jp adc mov xor mov sbb xor pop fsubs xchg test push add pop sbb scas std push jb mov cmp adc test aam (bad) jl loope (bad) cld (bad) (bad) sarb sbb sub shlb imul int3 sub bound fmul pop repnz dec adc fisubr inc clc or hlt inc shrb add xchg stos aaa inc xor or icebp jge movsl xor xor ret and adc ror popf jo std arpl adc jle xor int3 movsl imul call mov in pop lret push out cli push call adc sub adc out jl ljmp xchg out jle dec das xchg dec sbb test (bad) or imul imul jo dec or xchg loop dec shrl fcmovb or jmp adc fs xchg iret inc cvtps2pd fimul rcll pop (bad) pop cmc stos or (bad) xor loope cmpsl out xlat iret loop enter xchg mov mov add repz mov cmp in mov push repnz in into pop and imull or xchg or dec push pop mov movsb stos xchg repnz notl pushf inc and lret shlb out in ja pop fdivl out jg arpl mov lea cmp inc inc dec sbb pop insb sbb mov adc add stos daa enter std sbb xchg lcall jg sbb movsb repnz or xchg cs pop loopne jb mov call imul dec pop loope icebp imul outsl (bad) repz imul cmp fldcw divl xor adc pop adc jmp test adc fs xor (bad) xor dec inc loop sbb jp dec or jl imul fdivrl jp jae jmp add mov shlb test fsub (bad) in popa fdivrs and cmpsb xlat repz out incb jg incl (bad) xchg mov movsb stos dec jno mov pop das jbe cmp ret pop mov addb in rorb (bad) aaa or jl inc ljmp outsb divl jnp in jb pop jge xchg jle leave sub movsl fs test das lret shrl hlt jno in pushf inc xchg rorl ret int3 and xor in mov jmp fidiv push jecxz (bad) js adc and jmp (bad) adc inc fistpl test daa sbb add xlat std (bad) je lahf sbb js pop cmc cmp cs xchg jno stos (bad) outsb scas sub mov movsb adc jge adc sbb xchg (bad) inc rcr pop jge dec fidiv mov mov pop mov outsb mov mov repz test cmp ss cmp imul rcrl sub push sub dec gs out xchg push enter mov sbb icebp sub jle pop das mov (bad) aaa cmc add inc pushf mov add jno shl jecxz jmp pop fisubrl loop loop fs pushf dec cmp (bad) aas cmp adc mov movsb shlb mov mov aad (bad) sbb inc xchg mov or cmp xor mov ffree popf lds gs scas cmp jnp outsb out pop sbb incb popa sub dec hlt scas mov test test sub ja out cmc push bound fdivrs rolb sbb jecxz jb mov and movsb sahf push mov push das stos out sub xchg mov fs or insb rolb mov inc jae mov xchg mov cmp inc sub flds add sbb sbb (bad) (bad) mov pusha rclb enter fs dec fs ret pop sahf idivl divl jecxz (bad) jb (bad) fildl dec sbb call mul mov and fildl and jb ret push icebp push lods ret ss xchg mov mov outsb xor int3 xor adc jo lods sahf pushf and (bad) into mov ds jae loopne insl enter cmp call pop insl mov push cld in repnz (bad) mov bts or in sub roll inc sbb fs cld out call inc adc (bad) adc call icebp pop enter mov mov push add mov ds imull dec add inc cmp xor pop mov xor sub lds test xchg subl call aam stc xchg fimull clc pop mov (bad) sub lods cmp lcall xchg lods jns pusha jae inc into rolb xchg imul lock mov xor push mov push add mov repz popf pushf mov sub loope out jmp cmp xor (bad) mov xchg movsb cld dec scas sarl mov in std fs out cmp cmp rcrl arpl pop out jmp and cmpl inc xchg push pop jnp sbb adc mov and iret cwtl jnp cli mov ja (bad) fisub mov shrl jo add jb add test aaa lock pop lods mov xchg dec fsubrp (bad) xor jo outsl (bad) mov das bound mov mov sub ds test sbb js es ja call add push out jmp or mov push xchg sbb mov jmp outsb mov cli leave stos daa iret sbb cmp xchg mov pop or in mov stos mov in jbe loope js in and ds jo xchg lods jnp sbb mov mov int3 adc in inc fsts mov sbb (bad) sub aaa add mov sti pop fnstcw pop int3 mov xchg mov lods lret push adc sbb mov movsl lret in dec mov test mov insb fisubrl loop mov lods pop scas (bad) jbe sahf ss es pop fnstcw roll cld (bad) call lods sbb lea sbb jo add mov xchg popa shlb bnd mov jb test xchg cmp fstpt (bad) cmp out and hlt push jmp xor ret popf xchg inc mov leave mov pop (bad) outsl push pop sahf movsb xchg lods or jmp mov push inc cmc adc xor adc add and pop roll imul movsb cwtl and xchg push inc and cmpl xchg add cmpsb dec xchg lock divb sbb insb dec push daa and sub pop xchg add jnp sbb mov cmc adc sbb movsl add or sub int3 test inc jecxz adc (bad) int3 xchg mov clc (bad) rcrl sub popa sbb mov fcompl lods dec ss or stos stos dec stc rcrl shl mov pusha mov fistpll lock call dec xchg push lods push (bad) repnz cli (bad) lock mov mov mov or (bad) lods stos lcall (bad) adc stos xchg push push mov sbb je cli mov (bad) ss dec mov arpl out jae push xchg lret adc dec mov lods or sub daa setp rclb icebp jbe loope pop movsl movsb jb xor sub out xchg jle (bad) xchg sub jp (bad) or aam bound mov mov lock add lock adc icebp ljmp movsb fwait jmp push jl ret push adc pop push (bad) (bad) loop ljmp daa pop cmpsb adc ss mov std inc adc push jnp mov xchg adc mov sbb enter mov add inc mov ret dec jne repz out icebp sarb rolb rclb jnp loopne push aad out movsb jae clc nop xchg popf icebp data16 push inc push (bad) shl adc sbb pop push jmp enter add mov push lods pushf jns or cmpsl aaa sub add idivl mov movsl inc out sahf (bad) mov pop insl cmc into sahf or mov rcll lods lret mov movsl in add dec (bad) mov mov (bad) jae pop out xchg sbb pushf gs jb and jmp lods dec call ret mov jae cmp loope stos or icebp jmp sahf popf push push push mov (bad) mov cmp lea xchg dec inc test cmpsl cltd fcmove stos and dec pop mov adc mov xchg push and adc movsb insl loope stc jae cmp inc jnp mov xor pop add lahf fisubrl and fcoml lcall jbe int in push xor push add xchg sub repz cmpsl (bad) in mov jnp sub jp jge lods jnp mov into (bad) movsb and mov stos aam (bad) cli fs or loope lods xchg mov test pop aaa jmp adc lds cmp add pop push xchg stc stos xchg xchg jecxz rcrb or test add adc inc into les and push fs jnp repnz int and ljmp pop inc adc test xor cld divl xchg cmp mov lahf cmp xor stos (bad) testb pop push sahf (bad) es mov test xorl fisttp out lods mov xor sub out cli nopl and insl out fsubrp lods inc push push outsl and and mov fidivl sbb iret jae add cmpl cmpl rorb clc sarb clc (bad) mov cs fidiv lret (bad) lahf sar sub cmp xchg std mov mov pop out add (bad) jl int3 mov rcrb aas inc push inc mov (bad) xchg cli add lret add xchg adc and outsb (bad) repz mov xor addr16 dec pop std jmp pop or xchg push adc andl jecxz push jno movsl jno aam lahf jl cmpsb ds pop mov rolb test inc test popa push and jns test (bad) in mulps out ret aam js add popf cltd cs mov jae imul shr iret mov adc mov daa aam imul xchg call jno cmp js mov dec cli xlat jo sti mov leave rcll xchg jmp mov repz cmp std pop (bad) test das fstpl pop out inc mov mull repz mov xchg xlat mul movsb inc jecxz jno inc int3 or (bad) mov push insb lea repz pop inc arpl out test or sub xchg mov push loope add add hlt adc jo mov inc negl adc jle ljmp push loope pop arpl fistpll cmp hlt es mov jmp mov jecxz cmp in out jmp mov insb add add mov cmp dec push inc jmp or push lods push idivl stos mov jmp and fsub ljmp mov aaa fcmovne add mov fucomi xchg jae pop sarl sarb jno add (bad) notl adc ja xchg dec xchg jp in sbb add dec xlat (bad) aaa rclb jbe cmp lods lret dec (bad) add fcoms adc out jmp (bad) je aam add test add add or pop pusha and (bad) stc rorb lods es inc test or mov dec (bad) jmp jmp or ret xor mov mov les jecxz pop fcmovnb pop rol pop lret les ret fidivl incl sahf pop inc xor in out rcl popa cltd jnp mov stc fbld bswap out xlat xchg aad adc iret je fildl test sti mov das test cmpsl sub leave jnp out lret push mov xchg pop stos repz or push fnstenv ja rolb addr16 jns (bad) fldt jns dec jae (bad) fnstcw mov jge in aaa pop pop bound pop pop bound pop pop bound pop pop bound pop pop bound pop pop bound pop pop bound ficompl mov sti push cmp (bad) and lret stos pop and jnp sbb fdivl add mov cmp mov mov jo in out mov rcll push jge lret out call stc jne jg fcomi or mov mov ljmp fidivl push xor mov leave cmpl mov lods test leave pop test addr16 pop loop test pop jo jno fadds call imul xchg stos leave mov loop mov jae lret daa aam scas push xchg int lock jns jbe jl fistpl movsl daa leave push lret cmpsb pop xchg adc sub bound sahf out and xor mov jmp subl sbb jno dec cmp (bad) push xor enter adc push mov repz jb sbb pushf je push fstpl xchg sbb add ja cmc pop push or shlb jmp mov cwtl xor mov dec xchg cmp aam ja in div push push add add shll push jmp repz std sti mov clc cmp ret lock mov mov jb out (bad) scas push sub sub cld in adc cld pop das call (bad) jnp adc fisubr jp outsb jg stos jge (bad) xchg into (bad) call out lret xor stos sbb xchg pop int adc sahf repz outsb mov stos mov iret testl stc mov jo mov iret loopne add push xchg jl (bad) jb dec loopne rdmsr mov jae push xchg mov xchg mov jmp add ljmp fsubs (bad) imull jecxz mov idivl jecxz mov jecxz sbb divl mov and adc popa lahf push cwtl cltd stos mov mov aaa jecxz xchg adc jmp (bad) (bad) arpl cli mov jae adc pop aam repz mov mov aas lcall inc (bad) mov jnp je fnsave out xor sub leave jb mov stos xchg in fwait ds into dec iret sti and lcall xchg lret fwait dec and lock cmp sub lods stos mov test scas lock leave dec es fcomip ret es cwtl xchg in scas test push sti rcr imul sub jmp aam mov or loopne cld stos and roll xchg cmp inc jle add nop lock push fwait cmp inc add jge shrl cmpsb adc cmpsb and test xchg mull xor icebp aaa mov push sbb repnz out sub mov rorl fsts in cli outsb ja mov xor fidivl stos or add data16 scas mov jp push jp pop enter mov fnsave out testb mov fbstp mov xor stos lea mov xchg xchg pop shl jmp js test xor push leave outsl push mov imul mulb outsb dec in cmp push push mov pusha mov movsl fistp ficoml hlt shlb push dec mov in cmp mov jnp iret fnstcw xchg mov pop dec rcr out scas pop sbb stc scas iret dec mov cmp mov adc adc mov aas jle outsb pop icebp loope fnstenv add jb gs fcmovne mov adc insl aad xlat stos fldln2 pop xchg sub js ret xlat or jmp sbb dec test testl outsl fwait dec or sbb imul xlat mov (bad) xor sub addr16 movsl (bad) and pop ja xchg ficoml aaa sbb xlat fisttp adc sbb (bad) jb imul lret jae fist sbb jae insl mov mov (bad) fstl (bad) xchg fcomps stc or cli ljmp fild rorl sbb movb decb mov leave or jmp bound fimull fcmovu and xchg mov mov and rorl inc lahf sbb imul lret pop and mov or jne fnstsw pop inc (bad) (bad) in push pop fcoml mov mov mov add mov push fidivl iret iret mov scas icebp addr16 xor ss repz iret mov imul in fmul mov jns ss mov test jmp xchg aad jae rorb pusha test (bad) mov sahf fwait mov rcll dec nop xchg dec stos mov xchg push fldl loop das xor mov add and addr16 mov std xor lock cmp sti add icebp mov push stos mov (bad) mov rcrb jge or mov jmp adc add movsb in pusha pop mov jmp fbstp mov cmp sub mov push dec ljmp stc lret fdivrs mov jmp xchg rolb pushf inc mov mov andl test push and mov aam rcll cmp jmp and mov outsb inc or xor inc xor sbb pop jb add dec mov cltd jnp sbb lea lods popf repnz lock les iret jge int3 in jmp test and mov add gs ret jle add add inc mov sbb ljmp dec rcrb jecxz add xor xchg fmull sbb dec mov pop sbb push in xchg cltd mov mov sbb stos mov outsl mov xor adc js cli pop popf stc cmp icebp je (bad) and push leave test stos testb shll call cld push push fimull bsf (bad) xchg push inc xor mov or adc mov sar jnp jne aad fimull xchg push xchg sub xor mov clc ret add push (bad) xchg (bad) out pop addl into fucomi add or adc jbe sub sub sbb dec jecxz out dec xchg or adc rolb fsubl add cmpsb dec ss push repnz xlat in (bad) ss sub jp loopne fadd stos lret loope xchg cmc pop xor gs addr16 xlat loop adc mov mov push scas or cld lods xchg push out ss stos inc sbb push fcoms fistl mov adc mov aas xchg mov imul pop sub mov mov adc (bad) or (bad) movsl and fistpl xor mov into (bad) int scas scas flds mov ss sbb or dec cld push mov or sbb mov std push jmp pop pop mov xchg jnp and jecxz lods frstor adc lods jle pushf xor jbe repz notb mov nop (bad) xchg cmc cmpsl stc leave (bad) repz mov lods or enter out or ja jmp repz shr movsl in cld into adc fistpl jmp push push mov mov (bad) outsl or cmp adc lahf daa mov or stos ljmp mov pop mov mov add js lea (bad) ljmp inc dec ffreep ljmp nop (bad) out outsb mov (bad) inc fs imul add adc pop fwait pop mov cltd mov xchg fcomps aam pop or jle mov clc outsl mov push mov je and outsb pop jae and rcr bound lahf outsb mov cmp pop mov add jnp in aaa inc pop ret sti xor inc pop sti xor pop rorb ficomp add inc call hlt or sbb call jmp (bad) icebp lcall lea ror and or in outsl enter outsb mov sub or push push jnp add outsb (bad) mov call repz mov aaa in jne mov jecxz jo aam inc xchg mov ror outsb scas xchg fstpl stos stos leave or std xlat jge add insb sub push dec mov sub sbb mov fcmovb sub ficoml cltd in jbe test mov imul in or hlt jb push jg inc lret cli lock je mov fnstenv insb cli push scas jno out xor daa aas pop inc xchg faddl stos shr pushf (bad) lret aam push popa rol loope jno (bad) xor add mov mov mov fcmovu insb adc lods scas jge adc jno adc in out ljmp fistpl lea adc (bad) dec leave pusha jecxz call (bad) mov mov mov push icebp sub call or lock repz sub push pop and call je jno in fwait xchg cli mov and mov cs daa fisttp cmp sbb and or cs xor push mov jmp pusha lret js hlt jecxz lret outsb mov add iret and jns sub fnstcw (bad) ficomp cmc jne cli mov adc or in lods push pushf mov add fldenv sub in adc cld test daa mov popf (bad) repnz and inc movsb (bad) xor push enter jae imul mov outsb in neg aam sub imul hlt fldt loopne lods sbb call cmc mov push xor xchg pop xor repz rorl cmp pop jl lahf stc es dec call sub cmp mov stc stos cmp push xor mov ja xor inc jmp daa leave sub jecxz cmp adc fisubrl pushf inc cltd rcr es cmp cmp insl xor sbb les jecxz adc or mov sar daa mov adc mov aad imul gs repnz inc xlat pop mov push (bad) fistpl mov push jb jne jge test lahf imul mov (bad) mov cmpl and sbb daa out scas out cmp jge push cltd ljmp sbb sub xor pusha out cmp pushl cmp enter add js in lock scas fsubs mov fildl or push mov pop in sbb lock sbb fnstenv dec mov mov sbb mov sbb xor add lock testb out mov in jbe jecxz pop in push xchg icebp js stc push out in addr16 (bad) nop/reserved out arpl sbb (bad) jmp (bad) mull fdivrs mov push hlt repnz lret out or mov imul fcom sahf (bad) jnp das movsl rcrl mov jbe sub push stos imul lahf mov mov loope push (bad) out (bad) insl push jns sbb or add fmuls (bad) fcom in addr16 out adc bnd loop or and movsl loop test pusha (bad) shr loop out mov stos sub cmpsb push popa mov adc sti add fadds shrb out jle pop icebp (bad) pop add adc hlt out add fsubrs inc ljmp push xlat scas mov stos xchg mov and xchg xchg sub and push ret xor (bad) popa pop fcmovbe jp mov xchg (bad) out mov adc in out cmc xchg dec fcmovbe adc sqrtps add mov jnp fldcw inc sbb call sbb cltd inc cli shlb out jbe and addr16 mov ss mov lret out mov xlat lds rcl sub xor fist xchg (bad) incl outsl (bad) addr16 dec stos psubusw mov leave mov fndisi(8087 add cmp dec mov inc clc repnz mov mov testl hlt push xorl dec push add push mull ret sbb fcomps xchg lock test mov sarb (bad) dec pushf fidivrl testl jecxz add adc bound repnz addr16 push mov inc call mov or cmp test imul movsl into ja xchg sbb ret mov mov std bound jle out push into imul jno jae and test iret scas jae out loop sub rcrb call fcompp jmp (bad) ljmp fldt mov rcr fs pop mov adc ret dec and sub xchg stos mov add rcr loop cmp xchg jmp jb ljmp (bad) cmp scas mov pop jno mov mov sarl js add testb xor out sub jecxz mov adc cmp out (bad) jne nop fucomi ret inc add das ffreep jbe cmpsl fcmovb mov scas cmp stos shrl adc lret xor pop icebp add push repz mov xor inc hlt aad mov sub add or loope jmp pop mov (bad) jle xlat jo shlb (bad) xchg and mov addr16 cmp stos mov sub sbb hlt inc jnp add cmp fdivr js cmpsl cmp in shlb out stc fadds addr16 insb int jo jae sbb mov mov out movsl sub push lods cmp jbe lahf test dec pop mov mov mov cli inc mov or daa std in jb testl testb pop mov in push jmp adc xor sub out in mov into add lret idivl ret aam into jle shrl daa fdivrl cmp jmp sbb (bad) xchg test daa stos xor jns adc test jnp mov rorb stos outsb shrb repz movsl popf mov adc out lret mul fs push (bad) lea int in rolb loope out sub and insl out sub xlat jmp movsb or or push add andl loop hlt roll repnz jmp fchs outsl jmp lcall in out adc dec and xchg jbe jb test pop aaa inc add popa jnp push sub outsl data16 jp and movsl cmpl ret xchg mov xor js imul out add cltd scas ja scas arpl pop or and popf mov inc shrl fs (bad) call rorl or addr16 sarb ret lahf pop jne ficoml stos loop fs vpor xor sub outsl popa (bad) mov jecxz mov fisttpl push ret sbb or jne lret shrb clc xor ja fisubrl mov data16 inc int or cmpsl push xchg pop rcl sub rolb lock in in pop fisttp adc sbb fbld push and ja pop mov sar mov ljmp fdiv cmpsl shrb insl dec push stos lahf shlb call push add jmp (bad) stos mov aas mov push cmp (bad) and mov popa inc pop (bad) out adc inc gs enter scas adc cmp dec lods rcrl xchg ja inc (bad) inc mov repnz pop jecxz pop sbb push mov lock mov xor sub scas mov movsb and shufps inc adc iret leave jg outsb mov add xchg aas es cmp lods pop test push and jae mov cmp push pushf fld jle test enter lcall std mov test xor divb negl xchg mov (bad) ja in dec (bad) xor mov aaa mov xchg or sbb mov jbe add iret js add stos hlt push inc mov hlt enter jge jmp test fs mov pop loop jb rcrl ret std sub jno das pop jmp in jo lds int call jb roll add call movsb leave mov arpl lods clc jbe movb mov scas aas imul cmpsl or xchg in jmp dec in fdivrl (bad) into popf (bad) ss and aaa xlat xchg in (bad) shlb jle xchg cmp loope scas xchg lods sbb scas into lea dec sub sbb cmpsl pop sarl push movl stc xchg adc jae xchg out mov iret sub insb sub pop ja cmp mov adc lods and mull popf fsts add fiaddl and xchg mov pop mov out and adc mov xchg sub mov xor out aam ret mov push mov pop leave ja faddl adc out adc mov xchg inc sti mov popf lods xor fldl sbb sub lahf fildl inc xor inc (bad) lahf jo repz fcmovbe sub mov sbb xor ss iret cmp pop int bound xchg push xor rcr xor xor test sbb pop fs (bad) repz sub sbbl popf insb xchg cmpl popf popa adc mov cs scas mov push aad pushf mov sub int3 rolb movlps jmp repz mov mov push icebp imul ret jmp out jae push inc xchg jmp repz jae gs outsl mov mov movsb or mov in xor jns jmp cld in dec mov ss sbb arpl (bad) xor inc jb hlt inc xor or and ljmp pop lret clc and (bad) in adc or jp dec mov loope hlt adc cmpsb ds and or repz lods and lea xor enter mov hlt imul jo int3 cltd (bad) (bad) mov aad mov sub inc imul cmp xchg jmp clc sub popf add fistpll adc sub dec roll and adcl cli leave jp lock test pop clc (bad) leave cwtl sbb outsb jmp inc loopne adc subl jp out jle stos xor adc push mov jbe out js ret jbe imul inc jb mov cmp js or or cmp adc cmc and jmp adc fisttp fs out lods mov lods pop std mov or jae xchg lahf or (bad) scas or or xor out shr rorb xor push cmp adc xor xchg jb xchg xor gs inc cmpsb jmp (bad) ret add xchg std xchg jmp das mov fs scas ret and aas mov in dec jle ss xchg ror adc in xor jle mov and add hlt pushf in inc sub sub mov mov jge pop fcmovb xchg loope mov repz xor mov test jbe add jmp mov or add repz stos adc cmpsl rcrl inc jmp inc js mov repnz (bad) out cmpl jmp xor into out das sub stc xchg add push test fcmovb mov mov inc aas into xor fiadd in mov cli adc in leave adc adc inc out in jae mov or call push sti int3 mov mov in pop push out sbb and mov imul loope or and mov or enter jnp inc aam repz icebp mulb or inc incl pop out pop mov out lock (bad) loope outsb adc leave in jo int3 icebp lock mov jo sub popa jecxz out fistp or xor ret sbb mov inc jecxz cmp adc in jmp adc lock cmp mov mov repz jl sbb repnz and jb addr16 mov es stos sbbl out mov jmp out loope ret lret xchg js notb add rorb pusha imul sahf xorb stos repnz test cmc in outsl ljmp jmp idivb push sarb fistpll ja lret or out xor mov and jne cmp add icebp mov (bad) xor call sahf dec add mov movsl adc jbe jle jp cmp sbb (bad) add mov jcxz ljmp sbb cmpsb clc mov mov cli lea add xchg pop adc cs and jecxz sbb mov mov fidiv mov fnsave xor jp fdiv adc add inc enter inc mov movsl add push pop inc fcomi or dec adc lret je,pt stc lock push dec mov bound xlat xchg adc shl sub test xchg clc sbb lods loop and dec pop fdivp jae xchg pushf clc push or cwtl sub inc dec (bad) lds dec cli movsl outsb mov stos xchg add notl inc call fldt jl xchg xor test movsb jo daa loop pop sub enterw movl ss jmp js cs loope arpl fidiv fistpl mov in ja pop imul ret xlat mov fisttpll dec cmp in and pop (bad) bound push (bad) pop or pop test enter fldcw (bad) sbbl sub leave xchg in daa enter mov xchg jb pop mov pop sarb jb gs data16 cmpsl mov sub jno aam jecxz in lcall movsb bnd pushf ss xor jnp (bad) jo or or sub pop pop or lret pusha dec sub fildll mov sub dec aas cld stos repz (bad) xor leave mov push ljmp pop shrl mov in imul idivl and inc loop fcmovnb fs (bad) jbe sbb lcall pop adc jmp xlat repnz popf lret nop pop or movsb outsb or jb repz clc push jbe in insb xor cmp scas test adc jno outsb call jb cmpsl adc cmp loop cltd (bad) mov and call leave or popa mov aam sar mov clc rorb lret (bad) xor mov and inc rcrb shr xor mov addr16 icebp fwait mov nop mov or sbb scas ds repnz in js fucom xor imul mov sbb push fdivrs mov bound std sub cmp mov stos add mov jbe lods jae in repz repz aas dec shrb loopne mov jbe cmc jae dec pop push mov xchg fnop adc mov sbb adc push and (bad) add mov adc cmpsb lahf aam pop ror lret push mov aaa rclb into cmp int xchg int3 cwtl shrl lret int (bad) push stos cmp hlt bound test ror add add pop jae cmpsl stc call outsb xor cmp insl adc testl and enter sub dec fnsave movl jae repz outsl (bad) inc ret or push (bad) cmp sub mov push idiv repz addr16 ljmp mov daa push aam movsl adc pop mov xor xchg and repz outsb shll test xchg movsb xchg roll xchg xor stc je jbe xor les push mov scas cmp shrb leave mov outsl outsl jge sahf inc stos pop (bad) ja test in and in xor test test jns (bad) scas mov jb push or and test scas xor test out stos in rol enter imul adc lock push fsub jmp imul mov sub into sub movsl and loope lods sub call test into stos bound popf mov icebp xlat cmp dec imul repnz or adc sbb pop xchg fptan lahf mov stos jb jmp dec dec repz push fldcw ja jb jmp mull push fnstenv jg jb out dec lret push push sub adc imul pop decl out mov sub xchg pusha movsb out mov or hlt jp adc subl pop mov add sbb clc shr mov ret test fwait push xor test or or mov sub xchg jb xor call xor lahf mov lds cmc enter outsl or cmpsb lock jle (bad) aaa or or or mov in jge cmp lcall push jge mov jmp lods out pop adc adc lret daa add jne adc stos cmp add sub stos adc jmp sbb cmc jbe jmp sbb push add or cltd sahf cmp fistpll rcll cmp ljmp fs test xchg cmpsl mov dec or add mov ds sub and mov push ffree sub and out stos hlt xchg mov imul adc stos sub mov movsb add in adc out pop lods push sub cvtpi2ps jb add xor jns (bad) cmpsb and mov mov mov cld push add sub sti jb add out xchg jmp adc cmpsb mov lretw rorl out jecxz aam shll sti and or xchg cli xor xor shl lods push stc dec repnz jbe push sbb lret fwait pmullw fldt xor mov addr16 lods add jmp pop out fistl fist fbstp out movsl cltd xchg ret sub test out ret pop dec call iret ret pop lock push push punpckhwd outsb mov adc cmpsl (bad) div mov xor mov in insl or jnp add pop adc mov xchg sub mov and adc jmp mov and fisub dec add mov stos sar imul rolb jns fcomps (bad) ss js lea push test movl cmp and test ret mov lods jb in jnp jmp in xchg out pop aad xor jmp cmc cmp icebp out hlt jo and fnstcw out jo mov mov mov and push push cltd fildl xchg or jl int xchg xchg fsub mov popf fbld and xchg pop js xchg rep mov fidivl inc inc xor jg iret inc mov lahf sbb sub adc pop adc sub jmp xor and jmp es jnp fs (bad) ss pop adc ljmp push and xor sbb mov ror mov lods aad movsl gs fcom leave aas pop mov hlt ds rolb push mov fbstp andb fnsave ja int stos xchg pop adc mov add xlat ljmp cmp test hlt scas adc call adc lret cmpsb jmp mov mov movsl (bad) mov or fcmove movsl (bad) mov into mov out pushf pop dec fwait push lahf add xchg mov mov cltd push sahf (bad) aad lret mov pusha scas push and movsl imul mov mov sub imul adc (bad) loopne frstor xchg pop cmp fwait mov ljmp xchg pushf push dec loope inc cmp int3 mov inc pop jg mov imul jp orl push fsts mov daa jb ljmp mov push (bad) mov stc jae jp,pt jmp mov mov ret pop out mov add (bad) repnz mov fcomi push push leave jecxz fdivrp pop out in push (bad) ja jmp idivb jns addr16 movsb add push mov mov mov mov aas movb xchg stos or pop in cmpsb movsl adc mov test fcoms leave mov jo mov imul fldt std adc ret jge int3 inc lahf mov mov xchg insl add in jge repnz jecxz in adc xchg push (bad) mov lret xchg jg icebp aad (bad) lahf cmp lds ficoml mov movsb lea outsl (bad) addr16 xor out call stos cld lret sahf adc fsts jo (bad) jnp iret fcmovb jg sbb jo mov cmp cmp (bad) lods jmp (bad) scas push mov push fcomps inc sub cli leave cli test xchg out ss fcmovne inc (bad) mov sub jp xor mov lret mov mov add fs outsb fmul rol xchg lods add mov inc push lock testl loopne lods mov dec add das lcall (bad) jecxz mov mov mov mov xchg inc cmp dec mov cmpsl mov (bad) repz mov test stc nop xor repz rorb sbb ds movsl out nop loope jmp jo fidivr cmpsb popa pop lock lea test lahf sti js imull rcrl lret jmp adc call rol xor xlat cmp insl jbe,pn loope (bad) pop add xor pop lds and mov adc lods iret mov and mov mov sbb mov mov jmp icebp les and rcrb mov scas push cmpsl or cwtl mov rclb out mov mov mov xlat jno dec cmp movsb repz imul jb pop cli data16 popa movsb xor mov aad insl imul (bad) mov xor fdivrs xor jl icebp mov ljmp mov icebp icebp cmpsb mov (bad) in shrb enter mov xchg lock clc jg cmpsl fdivs lods lgs aas mov mov scas fs mov cmpsl pop fsub aas push imul and jne stc xchg rclb lods cli out fwait inc mov cmp mov icebp mov mov (bad) or mov test mov lea in pusha jecxz loope add xlat pop ljmp mov inc popf sbb jmp mov mov add rcrl lahf mov rorb dec jecxz adc jmp das inc scas jmp flds (bad) xor jno stc sbb imul (bad) mov fcomip (bad) xorb js gs add mov sbbl ja aam pop ret jo lock call lds add aaa repz cli mov push adc icebp (bad) repz adc jp xor out add inc (bad) push rorl mov cltd push cmp mov push imul shr sar xchg lret push add ret in mov adc idivb ret dec sbb jg cmc dec (bad) mov adc pop or cmp out inc mov jmp or jg xchg jmp xchg ds (bad) jge stos sub outsb mov jo leavew xchg cmpsb inc int3 mov out jp shlb xor out adc js int3 icebp (bad) mov jle gs stos outsb jb mov or cli pushf loop fistp xor test push or jbe addr16 (bad) mov es mov jge std rolb iret movsl fcmovnbe loop in shrl and mov (bad) cmpsb lahf or and (bad) std cmp fildll dec sbb in addr16 (bad) leave ret jns inc xchg out adc jno cli mov aam out xchg cmp clc jge imul pop imul xor lret add xchg cltd scas les inc (bad) and push jp mov adc popa popa jmp int or (bad) pop pop dec mov roll dec (bad) mov ljmp test loope lret mov scas enter out cld jp push push imul cmp mov repz lock repnz je lods clc pop mov mov loope sub (bad) dec mov jl fisttpl sti or xchg outsb xchg dec mov xor div adc das (bad) mov adc orl inc sbb push or or add jnp in stos stos adc daa es pop rep xor imul cmc inc pop push dec sub in add scas adcl mov das ljmp int3 xchg inc xchg mov push cltd sub gs pop insb add stos iret mov jl sbb push add xchg lock psrlw cli rcrl adc movsl mov popf movsl dec dec mov xchg and cli and push out xor push cmc adc js adc (bad) jb sub cltd test mov insb rcl ljmp push push jecxz insb mov cmp shlb sbb popf mov gs ds popa xor cld gs sub xchg icebp ret dec jae test movsl cmpsb xchg arpl adc add test pushf ret jge jo adc insl lods jp cmpsb outsb push xchg (bad) or fildl insb xchg jmp sbb test stos rcrb movsb mov push xchg mov xlat jg jmp sub popf sarb xchg and push cmp hlt adc push daa das insl test insl push in or or add imul jb sahf scas ret call xchg or repnz or out repz lret mov dec jno mov icebp data16 jecxz ficoml stos and arpl jmp scas stos fstps stc xchg xchg es mov mov aam rolb stos sub jecxz fdivs mov call mov mov dec movsl hlt js jmp xchg jle lret arpl sahf jge fist lock test in (bad) jne je aas gs jmp stos jmp pop arpl xchg fldenv bound jmp xor imul mov xchg stos fstps pop xchg int3 or int xchg aam mov addr16 and loop fcmovbe cmp lret mov jne mov push push aam lcall aad xchg add pop pushf repz std and pusha xlat cld or mov aaa xor add pop sbb out mov rorb sub mov fs inc xlat mov mov call push ret pop das jecxz out popw adc aam out idiv (bad) rclb and out and jl std inc leave popa or mov shrl cmp ficom ljmp jl mov mov js out lret xchg loope mov mov addr16 jle xor mov pop (bad) out jnp iret ficompl push jnp adc pushf into add sbb cmpsb addr16 inc mov jecxz lret cmpsb sarb pusha divl shlb and cmpsb or test popa in stc push sahf pop xor shrb jge jg jmp or movsb imul std stos dec sbb sub cli adc shlb test mov ret jmp std imul push mov xor (bad) xor jne out ficom xorb sub inc xlat add mov (bad) xor and adc lahf outsb lods rsm xchg leave jns jmp in repz jg pop xor jb jno loopne mov xchg pop insb mov mov rclb adc fbld push daa fcompp mov aam xchg shll scas cltd jmp xchg imulb jae cltd int shrl xor push das xor cmp test adc outsl mov mov sahf dec in mov cmpsb xchg lea pop pop mov into lods dec pop shrl fs sbb jo out inc dec fsubrs int int3 scas pop cmc jae adc xor jg push mov push mov mov pop sub lods enter popf enter aam int mov push xor push push mov fldcw jl pop jmp push push push jb popf jno pop enter std inc push dec lods cmp gs mov fstl jae cmp (bad) (bad) ja pop push bound cmp sbb pop sub pushf or adc sahf hlt sbb jmp cmp pop outsl mov inc je fimull rolb cld mov push cltd xor out mov adc adc dec iret cmc ss call and or sarl das leave jge fmul loopne loop add fildll scas cli rcrl inc in lahf inc out sub xchg mov js loopne jmp cmp and add jmp xchg int imul cmpb imul aas (bad) cmc (bad) xor in xchg (bad) adc xchg insl jae int3 xchg lcall test std sahf mov pop cmp repz les icebp into gs pushf leave adc (bad) ja sub out jg xchg not xchg jnp addr16 lods xchg push xchg rol (bad) adcl xor (bad) negl aaa popa cltd sarb mov push push dec cmp pop pop or les loop jp jmp fsubrp fsubl pop into (bad) stos cmpsb xchg pop loop lock iret movsb xchg lods mov cld lcall adc pusha xlat jno cld (bad) mov add lock repnz pop mov imul jl push jno xchg ljmp insl mov jle (bad) cli andl adc aaa stc mov sub push jbe ficoml fcomps cwtl repz sub pop lds stos repnz jecxz (bad) (bad) mov cmpsb stos adc adc (bad) cmp fs and ljmp pop xchg fwait test or icebp adc add mov or (bad) xchg loop loop (bad) fwait jne push call push cmp xchg xchg push mov adc jb mov jns lock mov adc fldenvs push mov les push lods xor jne test mov push xor jp pop or mov movsl xlat xchg xchg push pcmpgtb les hlt add pop (bad) jecxz lret xor out xchg cld jae lret lcall cmp outsl pop cld stos jl xchg cmpb cmp jmp fwait lcall mov adc outsl lret mov test mov into (bad) insl add pop in stos pushf lcall cltd data16 pop adc popa pop ret push mov mov mov stos (bad) lea imul inc lcall adc dec ret cmpsl xor sub adc sbb mov popf inc repnz lret in mov cmp sarb xor popa dec sbb push mov loopne (bad) aaa test dec aam push inc out in pop bound add inc call stc fisubr data16 out pop popa jmp daa push pop fucomp clc fidivr xor adc jns and pop call cmp lods xchg test xor add lods jecxz xor aaa jmp rorl inc aam dec (bad) mov jno in xchg (bad) cli fldcw js adc scas jb xor push clc stos adc and mov fsts fcmovnb mov mov out stos in or jmp fwait xchg dec shlb lock sar sahf xor (bad) fwait xor icebp fnstsw jns imul jp rcr lcall lret push enter bnd adc loopne ret jae es loopne (bad) lret jl or in fwait rorb push mov jecxz cmp rcrl popf or popa jb sub jl xchg mov mov das sahf shrl imul fdivs sbb notl pop je sub mov xor aaa insl fs pop test cld xor aaa jl sti test xchg jmp popa mov inc jp iret jnp push inc ss gs ret popa divl add cmp lods ss jge push scas js mov mov insl and stos out cli jnp (bad) pushf fdivs or mov pushl icebp and cmp mov and pop enter cld push stos lods inc (bad) test mov pop push xchg fidiv out data16 fucomi movsb push lds mov leave push insl mov test testb mov pop or pop daa and aam xchg or dec in aam fwait mov popa jmp and lods mov pop (bad) jbe inc cmp loope daa int call push pop test test xor fcomi mov cmp test jp icebp mov jb rorl rcl fwait mov mov jne imul fldcw jecxz das lret (bad) enter add jle fcmovnb sahf inc mov jle outsl shll xor lock adc mov dec xor sub into adc lcall loop in fnsave jbe stc or loopne pop fldt (bad) outsl mov push imul (bad) test fcoml adc js xor lret out std pop subl nop aad lea pop xchg mov or sbb test out xchg pop cmpsb idivb mov xchg mov stos jl pushl xchg jmp scas pop xchg popf add movsb stos or popf jo out lret jmp repz cmpsb jmp mov mov mov mov bound cmpsb mov cmp xchg in std jg adc lret adc add sti cmp stc fistpll daa (bad) ja js cltd ret mov dec rclb repnz and push into std push sbb imul shrb mov push mov ja sbb icebp icebp ljmp xor fiadd push dec inc push scas arpl (bad) push push or sub jge adc jecxz inc and jge ds stc lock xor mov outsl push roll push sub lods xchg pop popf mov xchg push pop push pop aaa cmpsl jecxz xchg jno pop mov addr16 pop push scas outsl cmp cmp jp inc rolb sub std ja imul loop push ljmp arpl pushf lcall add cmp out in cwtl jp dec imul fcomps test mov out mov out lods jge gs push test lcall sub pop (bad) mov aam sti add pop pop stos cmp and adc xchg inc xlat or xchg mov ja (bad) jmp sbb push mov xchg cltd fadds push addr16 (bad) mov dec jns jl cmpsb lahf fbstp mov fsubr rep icebp (bad) mov push stos xchg clc int pop call lret xor cmp add sub aad (bad) lods test pop xor mov ret fiaddl sub jmp jecxz push cltd xchg mov mov insl fisubl adc mov jae fistl test jmp mov xchg (bad) test in out lahf jbe enter rep ljmp fnsave jns sahf jne mov dec jg insl fucomi scas add mov jmp cld call fisttpll mov dec popf fadd fcmovnu jecxz jns lods sub sub fadds mov nop push fdiv test jae pop popf ficoml hlt sbb fstp popa mov stos stos cmp cld push ror dec xchg not nop mov fldl xor repz pop stos add (bad) imul jnp out xor sbb mov out js mov fiadd push dec dec xor repz jecxz mov jmp in repz cli add in jae cmp out inc jge (bad) out fistpll fwait mov jg xor add or fildll loope xchg adc push in fbstp lock mov ljmp (bad) or data16 mov arpl incb push repnz daa add popf hlt dec movsb rcrb mov mov out int3 inc cltd lret cwtl rorb leave jb icebp mov int3 js sbb mov fidivr (bad) mov dec or xchg push and sbb negl dec out sar sbb push lret push mov aas negl push int imul or push xor fsubs ds sbb cli xchg xlat out (bad) jecxz in xchg xchg aas aam pop lcall out mov mov jle cmp outsl dec dec push aaa repz mov lret jmp cli ja push (bad) cli in insl adc aas sahf sbb xor movsb test xchg cmpsl (bad) xchg dec mov xor xchg push add stos xchg or push mov push shll xchg adc mov fidivl mov mov mov aad test test sub xor or nop jne mov cmp lods mov jnp cli (bad) cbtw mov lret or (bad) mov fisttpl or pop sarl mov rcll adc lods mov rcrl sub push add gs popf stc into fs (bad) mov pop or outsb inc adc xor adc stc jne (bad) mov fidivl mov dec shr iret cwtl into negl loop sub test repz cmc jmp outsl xchg add movsl lahf jmp push arpl ror mov les lret pop push lret ja aad add rclb lret jno jb lods lret sbb repnz or dec repz je into push push repz push push arpl xchg inc (bad) std push sub inc xlat sbb mov jnp repnz xor jge sarb add in test fnstcw sbb in imul add jnp in pop pop cmp mov fwait lahf sub into daa pop sbb add jbe xor mov mov mov adc (bad) in je ret adc add jecxz add fnop and fninit inc outsb aaa xlat cltd push mov mov fsubrs xor iret cwtl (bad) (bad) xor std xchg xchg sub xchg pop imul stos xchg imul pxor repz (bad) mov cmpsb imul scas adc push push cli movsl or test jae mov sbb xchg and shrl ljmp aaa jb adc mov popf leave (bad) mov fcomps addr16 jo jmp movsb add push mov inc sbb ret push jo push fucomip inc imul jb push jecxz cmp shll jp xorl (bad) jo dec repz mov arpl ja xchg mov ds mov lret imul mov jb movsb sub adc loop bound dec inc jmp incb (bad) mov cmpsb sarb cli mov inc push ret cmp mov lods aad insw dec shll sarl pop sub outsb dec inc ljmp fist xchg pushf lret jne call out mov rol mov fucomi mov inc xor out jnp ss lods mov aas (bad) and popf adc or repnz repnz test jg cmpsl jmp movsb mov cmp fs imul lret sarl fs mov aam test mov daa add test repnz mov sub add (bad) xor js jae movsb and pop pushf mov jge pop (bad) or lods dec gs pop lret push adcl das push dec push ja daa stos add out jecxz stc pop xchg rcrb fst repnz rcl shlb xchg push icebp js cmp xlat addr16 repz movsb imul or jbe sbb pop js xchg cmp repz pop mov cli adc icebp pop fildl in (bad) into fbld push pop add and lods fmull sub mov pop scas cmp (bad) fldt movsl dec lret rcl mov sub loop cmc add repz add scas lods add loope push push stos add xchg imul std loope fadds jb je cmpsb idiv sub cmp xchg rclb sub xchg imull cld int3 aam push adc call movsb cmp mov leave mov mov dec mov test call mov xlat ljmp mov in sbb sub mov mov clc add jg jp gs jle cmp mov scas lahf add lods not aam sarb lcall loopne out dec sbb xchg shrl fucom ja stc xchg jmp mov js lcall loope and add jg andl jno ret jnp mov rclb hlt into push scas mov sti ret in in cmp mov jno xor add inc icebp fcmovne dec repz jb mov mov aas pop jg inc mov call mov aas hlt cmp mov leave lods in insb adcl (bad) sub lcall lahf ret xlat cwtl int3 jle or in ja stos (bad) mov xchg pushf in cmp mov fsts shr pop xorl leave xor shrl fadds out call out cmp cmp ljmp adc cmp cmpsl xchg mov cmp jno insl arpl fidiv negl jae je mov mov stos fisubrl lret movsb add jecxz cmpsl lcall daa xor jmp ss xchg or sub stos stos lret test jge mov idivb mov or add fcoml sbb loope mov stos adc mov push (bad) ja jb daa mov fsubrs jmp jecxz mov (bad) lock movsb (bad) adc in sbb pop dec jecxz test sub jnp jbe lock mul (bad) daa icebp fiaddl mov jmp aad mov lods mov int3 ljmp (bad) ljmp neg mov loop iret fcmovbe xlat ljmp pushf cld pop fwait adc jae jb repz add testl and lahf mov jp add mov enter orb repz xchg cltd push or movsb sbb mov sti lock insl fadds jmp (bad) in xchg sub mov or mov je add xchg dec mov pushf jb xor (bad) in lods jo aas mov xor mov xchg pop jecxz dec cmp jmp fildl mov mov inc or mov or ds xchg and negl arpl jecxz std mov js mov mov and jg in popf jbe push sahf movsl mov mov repnz pop out ljmp insl fs add insb loop shlb ficompl (bad) nop mov lret test and push push popa in je fsubrs xor movsb mov cmp (bad) mov outsb xchg or or je mov mov stos inc xor pop iret notl out mov sbb adc inc mov mov rcr push sbb es test push out in or push mov jb cmp ja cmpsb cli aaa roll sub call ljmp fs dec ljmp faddl scas add mov cmc rcrb mov pop mov push out in test xchg rcll dec sbb xor call adc js push mov mov mov jp shl lret xchg pop mov adc lret outsl lcall mov jb lret cmc repz jmp repnz rcrb adc adc mov xchg adc dec mov jnp adc lds pop jmp jl add aas inc popa test sbb jle and push mov pop mov loop movsb test jns in test jnp stc push jp mov lock or pusha xlat cmc mov push mov sub sub lock jno jle mov xchg arpl dec fcmovnb adc int jg mov sarl cmp sub roll lock (bad) neg loope dec imul mov push out jge mov jecxz push loopne adc cwtl divb adc rol jnp add test mov fldt out scas (bad) lret data16 repnz (bad) daa inc push lret add (bad) pop xor andb mov mov lret xchg cmp shrl loop cmc jns push lock adc cli push xchg mov fistpll rsm in rcl mov imul pop jge cmp lcall xchg dec cmp push adc mov call fistpll loopne mov mov jo lahf scas (bad) mov out test dec cmp pop jp fwait cmpsl in cmp xchg push test ljmp addr16 pusha jo dec mov ss cli leave lret lock (bad) daa mov ljmp mov mov add leave mov lcall push jg notb (bad) aad sbb add movsb adc les cld stc sbb xlat repnz sahf mov out jb jl js mov dec cmp and roll cltd jge xchg aaa pop repz ja jne repz inc ljmp not jb out sti jae xor inc (bad) pop jle pop jl inc sub stc fildll or mov adc (bad) and bound test jge sarb cmpsb movsl sub fldenv mov inc push mov adc movsl test jbe mov pushf adc xchg test jns jg (bad) (bad) mov or mov stos test jp inc mov pop out mov xchg aas inc aaa ss subl inc repnz or sti out ljmp ljmp pop les nop (bad) js pop notl (bad) adc fistl ja xchg outsl adc push xor sbb int3 cmpsb stos mov mov fmul pop into mov hlt xchg lret mov lea mov ljmp popf cmp sub rcr repz mov jb clc loope js imull mov (bad) cmp lock ljmp adc mov mov cmp xchg jbe fldl mov int3 mov lret mov jle aad inc push dec leave repz cmp add push push aad into jns sbb arpl popl xchg add xor nop ret or jmp scas xor lods adc xorb jmp clc xchg mov adc aad in inc lcall scas adc xlat jno mov mov push jae mov and aaa clc (bad) call les sahf pop xor mov (bad) cmp jecxz insb gs pushf pcmpeqw test mov sahf add pop and imul lock icebp data16 repz jo push xchg and or adc daa stos dec into notl inc ret cmc hlt lock adc mov int mov xor in inc fsts dec mov adc outsb nop jge pop es jae clc inc stos insl lock jmp insl pop ss adcl cmpsb push cmpsb int fwait stos enter mov pop mov stos jmp add iret (bad) mov adc scas lcall jno xchg cltd fs in out (bad) (bad) push pop (bad) xor jb push mov imul and mov cmp shr xchg inc rcrb mov pop lcall jecxz fnsave dec adc imul cltd je xor add in imul shlb jns mov movsl dec cs lods adc movsl in lods ljmp mov mov add aad jmp mov dec leave (bad) imul lret cmp stos push jge (bad) lock aad mov repnz stos pop jg int3 fnstenv jo adc sub lods out fisubr add xchg and push mov repnz (bad) push dec fild popa out dec out push inc iret call pop mov add cmp or nop ljmp cmp pop and cmp jecxz fistpl dec mov addb push mov shrl push jne mov sbb jle js test fisubr cli inc jmp mov inc cmpsb jge out imul test fcoms or adc lock cld (bad) lahf les out dec in xor adc ficoml pop and repnz pop test (bad) push mov jnp cmp cltd push jge outsb xor xchg into xchg jno sub jnp mov mov movsb scas les jae adc repnz adc addr16 adc mov xor mov pushl sahf mov (bad) xor test add xorl sbb add decl sub pushf cmp sbb jo fidivr sti fiaddl mov aam int sub clc sub dec jo lcall out dec push incb out mov push sahf xchg mov pop (bad) cld test (bad) movsb ss xchg aam ss xor dec jmp add xchg mov lret xchg rol (bad) add ljmp cltd test test inc xchg into push xchg or jb outsb lods lret mov pop add outsb jl xchg test ja popf cli and popa es out (bad) stos repz cmp in mov inc pop inc bndldx (bad) jmp pop dec bound adc mov cmpsl pop inc jbe jb imul out cli pop stos mov and xor (bad) or les xchg cwtl cmp or push xchg fstps in or fcompl add mov mov push je loop sbb inc jnp push sub pop xchg xchg xor inc (bad) push pop mov stos jmp or inc fwait cmp adc data16 (bad) jp movsb jle (bad) (bad) loopne push adc jbe fisttpl std dec pop pop mulb add add cmp mov aad xchg notl cld jb lret enter mov outsb jg rorl (bad) cmp sub sbb out mov movd test in mov hlt xchg lcall xor add icebp cmp in stc call mov xchg push out out pop mov (bad) enter cmp mov (bad) repnz jo popf mov xor pop out rclb xchg xchg push test das imul push xchg popf add dec out mov enter jb nop pop jl dec addl or jmp dec adc fld cmpsb sub in cmp mov inc shrb lret shrb jbe cli imul adc or add pop cmp or cmp mov add push sub loop (bad) xlat pop nop movsl sbb cmp jmp iret mov add or std cltd inc test mov push sbb hlt lret ja xor rcll push mov pop inc (bad) xchg ss rolb stc ss loope push sub xor inc sti jae dec sub jmp lret fist popf pop not cmp dec ret roll rolb movsl repnz mov pop cmpsb xchg shr xchg mov cmp clc stos xor mov lods inc call pop jb enter and loope jge cmp sbbl dec pop out cmp sub jo cld jno sbb xchg mov call mov lret arpl stos cmpsb into (bad) mov xchg leave push push rclb sarb push mov pop mov inc pop fidivrl xlat sub inc pop push movsb mov mov stc popf (bad) call dec mov fdivr jmp adc repz or adc mov xchg push outsl enter divl loop jecxz int pop outsb pop loope jg fistpll bnd cmc fidivr (bad) sbb jg xchg pop xchg int lcall jge inc into pop sub dec shrb xchg or adc inc lock aam stos ret or movsl fnsave pop inc mov add cmpl push jmp repz lods repz push dec ret mov fwait lock or mov nop out fsub lcall aas out push xchg or mov jno sarl mov divl add das js fcoml adc test add cmp inc and sub xor out xchg scas push xchg xchg stos mov into jecxz add cld xchg adc jnp add adc ljmp mov fiadd and rol jmp sub cmp lock adc insl inc jb test outsb inc aam fildl repz (bad) jl ljmp stc aam xchg hlt (bad) jo add add out mov in fisub ret out rcll imul lret mov or (bad) paddsb imul push and fnstenv roll outsb lds jno add out icebp xor (bad) jb in data16 mov es or jo sar sbb lret jno xor inc jb int in add and mov dec dec ret inc lds pushf mov mov inc dec mov mov and dec dec ss and or out lcall imul fsubs imul cmp push (bad) jnp xchg scas adc (bad) int mov adc adc int jecxz out repnz iret aas jns das (bad) repz mov pop jl and xor pusha int fisubrl mov sar mov push pusha mov and lret fistpl xor ret movsb xchg test fldt (bad) jo mov int3 (bad) jle push cmpsl outsb scas mov (bad) sahf paddw mov pop pop xorb lcall movsb int and iret stc xor lret out adc faddl lods xchg test mov adc pop adc push xchg mov or jnp hlt enter sbb repz xor addl ficomp jge mov (bad) sarb (bad) loop ror mov jg mov bound mov push cld out and cli movl sub js repz test lock rol std mov test push xchg or in pop sub stos xor mov pushf mov mov sub loop pop dec jo test cmc cltd addr16 adc js idivb (bad) xor hlt ret nop mov cwtl test mov cmp jle and sub stos pushl xchg pop dec int3 mov cmpsl and push mov pushf dec aad scas mov cmp cmpsb aad mov inc dec or add sbb pop xor test shrb movsb sbb cmp mov movl lods hlt aad mov movsb mov movsl mov cmp (bad) cmp cld xchg mov add jb mov push pop cmp jbe sub xchg fisubl loopne adc mov fldenv mov fstpt mov sti xchg inc fisubl xor and push jp xchg xchg popa scas and add cmp or popf iret mov push es push pop (bad) cmc push and dec bound dec or iret adc scas dec lods xchg aaa sbbl (bad) xchg imul mov lret inc pop cmp xchg leave lods xor icebp adc repnz sbb sub out ret cmp int3 push adc sbb xor fwait or out adc popf bound out mov ficomp aad push scas pop jl inc hlt out cli xchg push mov inc imul int paddb adc jmp aad dec lcall incl jl jb pop lahf movsl pop xchg nop jge sbb add dec inc xchg lret js inc fidivl mov jo aam jno sbb jg aam (bad) popa shrb jmp push inc jg push xor jg push clc loop mov push xchg pusha pop xchg ret data16 mov or sti mov xor sub mov int3 xchg ljmp scas xchg jb xor mov lahf fidivr rcrb lods je push popf loop mov int data16 outsb repz rcl cmp lcall pop mov and rolb (bad) mov stc imulb xchg ljmp les aas shlb in lock adc jl jae sahf cmp cmpsb test lock in insl xchg mov mov lcall pop mov mov movsb mov adc (bad) or lea lds addr16 pop fistp jo movsl mov pop xor jge lret jmp lds mov add enter in pop cmp call mov movsl mov out orl pushf mov aad stc push rclb mov fldt push dec push jnp jecxz cmpsb mov sbb pop scas pop fwait shlb stc div rcrb ss sbb outsb mov mov xchg rcrb adc fstps pop jbe xor (bad) lret sbb divl stos cmpsb out adc adcl es cmp lods cmp adc or or jp xor call jg rcrl push add sbb xor jns mov jge out cmp pop aaa mov add lock add and push outsb popa mov out xchg pop das jmp add sahf clc jnp lahf out adc jmp pop aam xor cmp push mov cld loope or push out xlat out stos adc bound ret arpl push (bad) sub dec imul mov fsts pop jnp jno lods jmp cld jbe push mov aaa mov xlat jl jno pop push repz test push ja ljmp cmp jo fcoms out pop pop clc jb jl xchg sbb repnz add clc xchg pop pop jp sti xlat sbb mov pushl jns stos push jmp jbe,pn and push push test (bad) dec loop cmp push mov pop push jbe mov leave in int3 ljmp mov aaa dec xor fbld push call push mov dec pop aam add (bad) stos movsl inc pop ret dec xchg lods test fwait adc jle scas adc push scas or inc fiaddl mov lds (bad) jb (bad) rcll test in (bad) imull adc adc addr16 jecxz add daa imul (bad) xlat leave es pop add es sahf ja stc dec call jge psubq mov sub mov mov mov sub add in fnstsw mov lods aam test lods xor and mov outsb mov ljmp test nop fsts push adc mov sahf mov pop pop out dec mov test stos cli out adc jmp cmp add and jecxz fadds lods adc xor sbb cli pop mov jns outsb mov inc dec jge push dec pop (bad) cmp dec mov inc data16 or lock adc es mov jmp stos cwtl imul imul mov adc jg mov push fildl or inc repz xchg xchg adc sbb fimull call sub es adc (bad) pushf mov jno pop lea sub fsubrs sbb in cmp imul mov cmp jno xchg clc lret add jmp ror lret data16 jnp add out stc pushf pop jg mov int sbb jb std int iret cmp popw loope mov dec std sub imul scas daa (bad) shl xchg mov addr16 movsl imul shr adc fmull mov or in int3 jp push and repz pop xlat sub pop imul fstpt cld mov ljmp cmp push mov add in dec xor scas cmp jns and (bad) call jb lcall pop clc sub sbb sub fs mov sbb dec jle bnd mov pop js mov in (bad) mov jl rcrl jns xchg test scas cmp mov movsb jg fst xlat mov fstpt das imul cli sarb in test cltd jnp add leave fnstenv scas xlat out sbb lahf fwait xor add scas dec and lods adc push mov pushf jp nop sbb sarb mov test xchg test inc push es aas sarb mov rcrb push mov mov icebp test out mov cmp dec cli jmp add xlat and and mov mov in adc jecxz stc adc movsb adc scas fwait xlat add cmpl add in and movsl icebp mov add adc lahf test js clc sub jle jno jae out aad mov mov popa and sahf pop fistl out stos iret pushf adc xchg pop ja outsb jmp or scas mov and dec stos or or cmp inc aas xor out adc stc mov xchg lret jno and mov scas ficompl std aam insb xchg mov xor fs arpl inc jmp jge popf sbb mov movsl sbb jle or jge or ljmp mov jg sbb mov lock jo loope add pop arpl jno stc (bad) jae and lods mov lods sahf sbb and inc in jae enter and repz xor xchg or push dec push jmp sbb push adc (bad) mov and in insl push sub repnz test loopne fildll sub xchg and (bad) xor int or stc test test fisttp (bad) mov add pop in push mov mov out (bad) mov dec out lcall shl imul (bad) (bad) sbbl jae push test jb mov repz jp lret cmpsb push int (bad) mov in stc xchg xchg lods mov inc pop test mov int mov adc jge mov call pop cmp adc xor sbb lds cwtl and arpl repnz jae adc ret pop jno and adc pop fsubr lret aas xor movsb xchg push lds xor mov (bad) pop add push cmpsl into aaa out adc xchg push inc adc (bad) sbb mov jae push lret (bad) movsb pop mov mov pop lcall sub sarb lcall pop iret pop sbb aad mov mov lret xchg pop fstps bswap mov fwait aad stc and popf dec addr16 xchg adc jae cld inc push push aam movsl xchg daa adc jo inc out xchg movsl int adc sub ffreep insb repnz pcmpeqb lods call jmp inc les loop cmp pushf and inc adc lods add mov jbe sbb js inc cmpsl push adc lahf enter cs pop jbe cmp cmp stos push xor cmpsl push fld add stos xlat mov (bad) mov scas jb jmp lahf adc xchg adc jb imul sahf xchg and adc gs repnz std adc clc cmpsl cmp xor lret test stos subl adc xchg mov or jnp cmp xchg adc cmp repz jecxz push repz repnz sbb jbe xchg add pop jmp xchg imul adc ljmp in into mov scas pushf jmp in mov xchg dec leave inc stos fwait mov stos out add mov cmp pop sahf push mov and xchg xchg mov inc push xor test dec rclb push cmp mov out adc imul mov cmp aad stos jge xchg push dec mov hlt scas add mov mov rclb mov (bad) ds xlat mov sbb mov adcb (bad) xchg mov aas jmp out ds push rclb repz push mov sbb iret out cmp aam adc (bad) ret out fadd add std cmc or lret mov mov call push jg std pop or sbb xchg jecxz fwait dec mov icebp (bad) mov stos inc imulb stos adc sub loop sub sub lea fnop mov divb div nop cmp mov loop jmp jl loopne or xchg loope push mull jp (bad) div clc mov adc push xor mov iret lret xor lock lock les ret cmc jb jl sbb adc aaa mov lods lcall jb add jns int (bad) rol and and loope imul jmp xor fidivrl xchg xchg push fidiv jb int inc jg pop fs clc cmpsl xchg hlt (bad) int3 xor xor rcr xchg push cmp test cmpsl outsb hlt jb pop adc divl aad lock arpl mov pop mov sarb mov outsb adc adc repz out mov ljmp out mov or xchg jae (bad) lock js jle push repnz sarb loopne lcall loopne adc push sub aam mov xor add xchg daa jle out mov stc xchg enter xchg lret fldpi (bad) ja call jg aaa neg jae dec sbb lock dec test add push gs sub xchg cs idivb xor jmp iret test imul clc mov and cmp pop xchg push xorl (bad) mov mov (bad) or popa jp fidivrl fild adc xlat lods aad (bad) and ljmp mov jo pop jno sub jne jecxz inc into fidivrl ja stos in add arpl pushf dec pop cs loop mov pop mov and (bad) mov or icebp int3 sub enter sarl sub xor or aaa ret adc jp and xor mov fimull xchg sysret adc dec test test enter pop push test cmp jb mov sbb mov dec jle rol lret fildl mov js loope rorl pop cltd add test iret stos xchg stc sub (bad) xor ja mov out lods enter or sub cld xchg fnstsw mov je mov pop mov mov movsb add pop push push in mov add sbb adc mov jnp in pushf mov clc rorb (bad) jo das push inc xor aam mov xlat into jecxz sub outsl mov mov movsb xchg pusha loope jnp mov outsl fidivl jmp add or (bad) and repz xchg adc shlb clc leave and out jecxz mov mov fnstsw insl cmp push pushf ficompl inc xchg add outsl sub mov fsts xor (bad) aam push enter adc clc js mov cmp inc ret cmp in (bad) mov push mov inc dec sub push mov jo test fisubl mov and fnstcw or nopl outsb addr16 (bad) ret mov lcall in fsubs lret std mov fild ficoml mov inc jge inc ret int3 aam rolb ret stos (bad) lahf lret loopne xchg cmp sub cmpsl add mov push mov or aas (bad) insl mov subl (bad) add std xlat ljmp pushf jmp pop or inc cltd iret scas mov or fimul dec ljmp fisttpl xchg jl sbb cmpsb lock mov add dec sbb add mov cltd aam idiv repz sub insl test mov popa ja or jbe adc aad rcrb stos pop dec mov mov lret stos inc lock add sahf sbb and aaa inc (bad) pop out or mov shr dec aad adc xchg aam push xor mov pop push out in rorl sub xchg mov push fcmovnbe inc inc lock ljmp adc xor int lcall into and adc popa pushf insb adc inc cmp sub into (bad) jmp out clc js sbb xor adc sub mov stos pop jmp push inc decb lret in ret sub loope sbb rcrb xchg xchg test add in add jmp jo dec push push ja sub mov jl out add ds es sarb pushf sbb insl sahf jno shr shlb dec sub pop mov fnop sub mov shrl mov sti in dec repnz clc and cmp fistl cmpsb test adc (bad) xchg enter sbb in hlt loope out call or ja imulb fsubrs sub push insb xchg adc outsl jo push mov sar xchg cmp sahf sub sti push sub fidivl push popa aad sub fbstp xor scas adc pminsw and fs fist repz movsb lret sub push lock xchg (bad) addr16 aaa jmp sub push (bad) fistpl stc sbb mull popf sahf lea out pop enter out jecxz repnz repnz sbb in clc rorl enter mov inc jno push mov ret mov push loopne (bad) jmp mov mov cs (bad) stc jns inc notl mov adc test ficompl lret dec xor push dec inc mov inc or xor or cmp subl out mov pop fldcw in mov out je xor or cmp push adc push fwait test xchg rcll push adc dec mov pop mov into jo cli or (bad) nop or js xchg mov jle push jo xor mov add test lods xor jmp jo bound ds mov lock push cltd nop test lea movsb fcmovbe scas xchg jmp loop lds mov test dec (bad) jno movsl mov or jne sbb aam or adc cmpsb pop xchg imul xlat iret fist add repnz add arpl ss repnz cs mov dec lret mov pop (bad) mov fisttp imul cmp push push fcmovnu mov inc je dec fwait dec add mov fistl push jns jns xchg sub mov inc push sbb mov pop fist repz outsb jo fcmovne jae enter jno subl adc lahf push xchg (bad) repnz lds aas ja xor scas outsl fidivrl cli mov cwtl fwait jbe ljmp addr16 test add adc gs jo into push pop or icebp jne jmp scas shll divb push mov test test pop or mov dec and ljmp sub mov pop in mov xchg aaa mov andl addr16 mov adc dec rcll mov cld cld sub fcomip adc cmpsl cld popf fsubrs mov (bad) adc lds fdiv repz (bad) or rcr loope in outsb sub adc and adc sbb stc add sub or mov stos push loope add pusha mov nop jmp adc lds lods adc jne dec mov cmp push pushf pop leave ss sbb cmc repz (bad) (bad) out sbb mov jmp xchg inc mov jb fmuls mov fbstp out xchg enter cld stc inc pushf jp popa std enter mov out mov mov call cli shlb fstpt mov ljmp cmp push fldcw (bad) ljmp cmp loopne stos fs sbb adc jg xchg adc dec cmc popa movsb lahf jle sub mov mov sbb sbb xchg fs aaa xchg inc jae in xchg adc mov in mov and cmpsl lcall jmp lock xchg sahf adc push test jmp mov xchg push mov int3 test pushf bound test cltd out loope and jge test pop movsb xchg lods xchg mov adc mull adc or das imul out call idivl mov repz adc or jb subl out mov cmpsb dec lcall fildll mull popf cmp fdivrs mov mov clc out test jno fsubr lods in adc outsb movsb add (bad) mov out (bad) mov aas mov xchg inc cld call and (bad) sti outsb mov mov (bad) push popf stc ja cmp rorb mov outsl and aam dec add mov pop jnp xchg gs push adc jne add stos in stos adc std dec aam iret test out xchg sar mov lods cli lcall popf mov test xor outsl roll out js das into mov add dec cmp or scas into pop (bad) mov hlt js xchg xchg or in cmc add mov lahf jmp out daa mov mov mov mov lock inc add int3 mov mov and pop push push cwtl sub rep inc jae push mov xchg dec adc mov cmp or stos xchg xchg andl hlt (bad) jb ljmp movsb mov test mov pop cmp (bad) xor sub in cmpsl cmp popf adc jmp mov jae insb out mov dec push xor cmp repnz es outsb xchg lea mov ror imul pop add rcrl cs inc dec lahf adc inc out outsl mov pop jmp aad lock mov sbb dec mov adc push mov mov leave mull mov xchg cmp leave sbb lret inc cmp jmp add sahf sub push xchg pop aam and push iret mov jo add adc jnp jecxz inc cld jmp sub stc cli cmp (bad) cmpsb sbb movsb leave adc jbe jl xchg adc mov dec xchg cmp in jb add jmp pop jecxz out ret int3 mov or pop xchg in add sub mov jno jno int xchg inc lock mov mov inc and mov out hlt mov mov pusha push dec inc mov push int3 push xor mov stos cmp imul (bad) (bad) test jae lea fs push enter into dec ret (bad) adc outsl mov aaa cmp int hlt jo daa popa push cltd dec stos pop sarl cli or out stos cmp push mov repz rcll stos daa stc test add sarb mov leave xlat xchg dec ret outsl xchg mov or add shrl daa sbb push pop fisttpll lods clc add sub fnstenv cmp sbb add stos fisttp mov xchg ja lret mov jp pop imul xchg push iret dec jno adc out cmp faddl stos repz scas andl movsb icebp fcoms pushf es cmp push inc sub jb les xchg mov jo es and fcmovb fcoms cli pop clc cli loopne xor outsb cmp cmp sub stc push pop jle push mov ja jecxz test fisubrl out xor jbe jo and xchg shlb loope sub imul fpatan sbb dec adc out cli ja mov dec addr16 xor fstps jno add xchg movsl push lret repz sbb dec jl xor stos cmp ret shrb mull outsb jns rcr jno mov cld jb or (bad) pop fdivrs xor sarb inc cmc jb repz mov xchg loope xchg pop xchg out dec out out fildl mov pop dec push lock mov pop outsb stos out dec stos ret scas int3 ljmp jns stos testl fucomi and xchg push popa add or insb push cld fist iret jnp das lcall outsb add jnp sbb mov popf jge cmp aas or push fcoms sbb inc pop mov call push pop lret xchg mov mov (bad) fsubs in or mov mov cli sahf fsubr aam daa push mov das stc addl aas bound pop xchg sub xchg jmp mov lods orl adc xchg push in and or xor fucom jo inc cmp xchg inc arpl out (bad) (bad) xchg adc hlt jmp jg cli xchg inc jb mov inc stos lret fstp jle hlt test or push es mov repz test or call and in testl inc pop sbb jbe imul mov fistl mov jnp scas (bad) aam scas sbb mov repnz xchg clc jmp into add ljmp jle mov rcrb jmp das push fisttpl fistp inc adc icebp fwait jg aad xchg xor mov dec sub test loop dec push mov sbb stc rcr mov xlat test jb jb mov leave fnstenv dec movsb rcrl or jbe nop push jmp inc adc (bad) jb loope cmp in fcomp mov and imul test xlat xchg rorb into pop inc lret flds dec xor push dec sub (bad) stos xlat jmp adc xchg out mov test pop mov jo scas out popf pusha fnstsw mov test mov pop dec inc and pop mov cmpsl ds xor (bad) imul jb inc push leave jmp cmpsl xchg sbb cwtl jmp mov mov push out mov xor xrelease pop push adc xchg jecxz add std inc cmpsl or fldt (bad) bnd test dec mov insl add (bad) ficomp test into mov pop push cmp xchg mov div in inc sub repz std or cli into fdivp jmp loope dec add mov mov mov (bad) aaa add push jno je movsb mov jb insl aam aad jg stc divl sub pop (bad) pop mov inc insl outsb sub xchg mov fistl cmp mov lods fistpll xlat in jecxz mov iret repz xchg lret stos lret icebp cltd fstps leave cmpsl clc outsb lods (bad) jne inc or in call in fbstp push imul cld loop addl sbb mov mov frstor movsb test mov mov add pop call dec lods cmp (bad) jmp test sbb (bad) out push xchg cmc mov mov xchg mov rolb aad mov fistpl xchg ds adc or adc imul jbe mov int js xchg ja rorl (bad) jecxz idivl in pusha loope,pt xlat aad or rcr sub sbb adc cmp movsl dec xor and lret loop call aad (bad) stos mov dec outsl insl adc call jg (bad) cmpsb stos mov ljmp sub lahf jbe mov dec cmpsb add jbe xchg in scas popa shl jecxz cltd push test pop divb cli cld insl push mov mov xchg clc mov mov (bad) adc js jb dec mov mov jb dec adc and xchg jns insl mov cmp pop ja mov into pop mov xor xchg sub jg leave rcl sarl cmp sbb lock shl add add jg lret jns loop pop ljmp sar repz loop sub sbb adc mov xchg xchg adc mov es pop jns xchg push mov dec (bad) std push cmp imul add call lods lea mov jns fisttpll or icebp into popf icebp xchg xor fistp cltd sbb mov or fldl jmp clc add jle xchg sbb mov (bad) movsb lods insl push xchg imul mov addr16 mov jmp ja jmp ret xchg jl add stos movsb mov push xchg imul push aad and testb mov pop sbb jecxz pop jno xor mov push jb fwait push or fs cltd rorl (bad) lcall rorb pushl leave scas stos cmp mov inc xor pop xchg cmp scas jae xchg jmp in daa mov push test loop arpl fs sbb rcl (bad) mov adc xchg xchg mov push xor clc push push scas call ss mov ds xor xchg lock (bad) mov icebp mov pop dec xor clc (bad) out or mov test fcmove xor aaa movsb mov jp outsb inc sbb add clc inc mov fsubrl adc sub sti icebp les (bad) repnz add rcll inc inc rclb mov dec push mov mov cmc fs sahf rorb loopne dec lahf lds mov insb (bad) mov mov pop cld rcr jnp mov push pop ficoml popf mov ss xchg add shrb iret adc (bad) jno sub inc (bad) scas mov inc pop sti stos jmp xor mov adc ss push and rorb into push xor aad ret push mov dec ds aad push mov dec cltd jb pop rcrb ror fildl jl cltd cmc or in fdivrs mov dec mov fs cmpsb rcrl out stos insb enter nop idiv mov sub imul aam popl pop scas xchg mov pop cmp dec mov mov scas adc xchg mov mov mov inc ja (bad) push xchg arpl mov cmp popf ljmp fildll lcall sbb gs jb push addr16 xchg test stos rcll mov lret push cmp add adc ja jp fistl mov pop outsb lahf or adc mov lock add aas outsl push (bad) xlat mulb cld sahf daa sahf (bad) scas notl stos ss xchg (bad) lret (bad) test leave pusha jecxz jl arpl mov int3 pop or out gs aam jnp pushf push inc mov mov dec push ds mov movsb loop hlt rclb movsb push sub pop test xchg dec adc (bad) icebp (bad) lret lods jp in inc pop fwait lods (bad) push imul (bad) jge fstpt repz fcmove mov jno gs imul lret push std mov lods xchg adc jle outsb inc push mov lret in jp ret imul and loopne std sbb or or push ljmp push bound jmp mov mov mov test and pop mov call rcl imul out cmpsl pop cmp add rolb data16 or mov and cmpsl mov push mov ja mov into movsl fwait xchg adc dec cmp mov test cmp lds and mov cli inc add lahf sti cmp mov sbb push pop push addr16 sub movsl (bad) aaa xchg outsb ret fidiv and adc lret (bad) mov in mov push fbld insb jns adc out ja xchg pop (bad) pop insb sbb in sbb inc xor icebp sub xchg out icebp xchg mov outsl (bad) loop mov imul xchg ja adc push xor jae stos fcmovnbe jo sbbl sub dec dec jns pop loop mov adc jmp insl (bad) adcb fisubl icebp sub fucomi pop add out add jecxz mov inc sub push mov mov scas mov cmp loope mov jmp jmp leave or sub push aaa aas add in leave loope test xchg aas sbb mov imul scas jle out mov call (bad) (bad) jmp add lock xor out or cmp lcall faddl cld jo rcll inc and cltd clc cmp adc jle or jecxz push fwait xor add std dec pop pop cs or movsl out jmp cmpsb fistp push shrl rcll ja nop lret fnsave lods cld push sub aam mov dec mov mov (bad) xor jb inc imul lock pop push and mov xchg cli pop push aam ss fist out arpl das shrb jae or mov adc jns test leave sahf repnz xchg in xchg bound xor repz aaa aam jmp (bad) xor add mov call das sarl inc lret mov sub add jae (bad) push xor rcl js jo popf jg jecxz mov dec (bad) repz push add std int3 xor stos je sbb sub out repz adc cltd adc jl (bad) and jg add xchg test andl pop xor stos repz cmc std fstpl mov ror xchg xor pop cmp fbld addr16 lods icebp xor adc mov xchg mov or mov and mov dec cltd mov pop jne adc mulb jle cs dec xor rol stc adc fucomi popf jae mov inc cltd (bad) stos jl push adc mov inc jl xchg mov xchg jecxz adc pop popf cmp js decb cmp mov jge jp adc push (bad) sar sbb stc add cmp or xchg (bad) (bad) inc fwait xchg mov or jo cmp fwait jp stos roll shrb aaa jg adc jo pop pop (bad) lock jb sbb in adcl cld mov jb rorb jns movl (bad) mov push cmpsl push adc aaa mov mov (bad) jmp fisttp fsubl dec insl pop cld mov repnz xor pushf imul add dec movsb add outsb into idivl or inc loope repz dec in clc sub sub jb in sbb fcmovu add mov sar clc aas roll iret stos pop pop push cmp fmull std jo cmpsl (bad) ja dec adc cmp push jnp fstl scas push jno loop pusha in jbe imul sbb shlb jecxz push cli fsubrp xchg icebp mov jmp xlat xchg fisttpll loope jae hlt jns mov (bad) push jb fidivr icebp rolb mov xchg mov xchg push out push jle and movsb sub idivb rolb jecxz mov in subb into movsb popf adc fucomip xchg dec ret pushf adc nop inc fiadd dec in or xchg jbe ss loope jns imul adc pusha jb push jmp cmp inc sbb movsl js fiaddl (bad) div test insb jnp xchg jns outsb movsl repz test xchg ret (bad) cmc (bad) lahf sbb push repz data16 aam xor ljmp and jp xchg bound repz ljmp jmp js xlat idiv pop int scas imull stc std int andl inc pop mov cltd mov inc stos jmp repz or sub mov xchg sbb sbb mov outsb jmp (bad) adc pop cli xor pop push out enter incl lahf outsb mov sbb (bad) pop and push or stc pop push stc jg lea out ficoml lods inc jle xchg mov dec mov fstp dec pop add mov jae add call sbb clc jae jle jg pop repz fistpl jle and ret mov gs ja sub into imul cmp mov push dec dec addl repnz movsb xchg or jno cmp test mov stc icebp xchg xchg out pop mov or inc cmp sti xchg mov lods mov mov dec divb cmc cli ret jmp jne imul mov jo scas repz out ja stos shll fstpt out ret fldl2t out mov movsb sahf in data16 imul jmp stc stos clc or pop mov notl xchg add adc sarl cltd idivb ficom dec adc (bad) jo das pop in (bad) jbe push lahf mov cmc cmc mov aaa jge imul scas loope,pt loop jmp mov imul (bad) rcrb mov lcall stc scas jg or outsb sbb mov mov sbb push push clc and pop int3 dec lds rolb mov data16 cmp xorl cmc movsb pop cs jmp popf imul adc sub push cmpsl add test arpl bswap daa cwtl pop arpl imul xchg cmp pop fdiv sub int3 out mov (bad) gs pop stc or xlat call jae mov mov mov movsb or fwait shl mov and mov jae mov jno fsub test ljmp mov mov gs mov cmpsb cmp cmpsb xchg jge ficoml stos push mov jno jae lock pop mov fistpll fdivrs inc test pop mov cltd bound lock mov out mov in inc stc mov lds (bad) and andl ds aam fs push fidivl jmp mov ja repz enter mov sbb xchg cmp push stos arpl data16 and data16 mov or xchg das cmpb mov dec out cmp cmp inc adc push cli icebp jl lock imul out lods mov rorl sub enter jno cmp cld xorl adcl xlat push inc (bad) sti xchg cmp mov lahf sub jb and movsb jmp xor add add dec test adc jmp dec and and sbb ljmp or inc stos sahf scas cmpsl rolb jo adc push incl or inc push dec pop sbb das and mov push fist ficoml enter lock adc popa (bad) jae xor jl jp repnz data16 xchg lret je or inc push das stos (bad) jmp or pop sti ret xchg sbb test inc iret test pop ljmp lods or mov ret pop imul sbb ret add xor push out aam insl mov roll dec pop nop (bad) jne movsb xlat pop testl (bad) mov sahf dec push imul xchg movsb inc cmpsb mov scas ja cmp packuswb lock push jns sbb jl in mov out xchg aaa in xchg push fnstcw outsl (bad) jg push mov push cmpsl adc xchg fabs xor int3 jecxz push daa push xchg stos or out lock adc mov nop xchg in mov xchg push sbb nop (bad) pop sbb jp lods std inc xchg mov inc mov ret push loope adc jecxz adc or sub fnstenv sub cmp jns idiv (bad) stc imul ja movsl repz jmp or dec mov xchg in mov ret xor (bad) mull (bad) mov (bad) xchg movsb out out mov push jg mov mov jmp push mov aaa scas pop sahf push (bad) adc stos test aaa lods imul mov (bad) mov scas xchg insl decl addr16 cmp push stos xchg jp lods adc icebp das je std loopne cld out xchg pop adc add push mov ret jmp mov leave fnstenv dec int3 out int3 xchg arpl mov and insb out lcall es lea sub stc jae push add mov aad test ja ja cs jb popa mov hlt enter xchg jmp push rolb add cwtl out arpl into push clc daa ficompl arpl hlt popl std push xor jmp xchg xchg test push push push inc or jl mov mov mov cli push adc repz mov sbb mov jp sbb jg mov mov jmp cli pop leave mov pop inc popa cmpsb stc fnstcw push test ficompl mov pop shrl gs adc test (bad) push xor adc fsubs imul aad mov lcall pop (bad) std shlb and cmc xchg arpl fistp pop mov fidivl push stc outsl mov mov ffree inc push pop mov xchg xchg fs fwait enter dec jl roll or jp sub add dec fwait dec push push dec mov (bad) je adc mov mov mov xchg sbb sarb rcr dec sarl mov ja xorb int3 inc ficoml sub ret cmpsl add mov test mov mov (bad) ss jb fwait or aad cmp jo add push add movsb rcll loope lret mov or pop cmp fsubrp jb mov mov push dec repz cli pop mov imul mov mov sar pop sub (bad) xor test dec sub pop bound mov push jbe sahf dec or fwait das xchg xchg sub cmc mov pop pop cmp (bad) jmp cmp ds jecxz xlat ret jmp xor jns (bad) js and adc sbb inc or popf repz movsb xchg pop pop lcall iret add stos rclb mov stos loopne jge ret push sub push ja jno push mov jns add aas push sub pusha or add xchg add ss ja jmp dec dec pop enter xchg int3 cmp out jns mov jns into imul push jno ljmp mov dec sub not movsl mov (bad) jbe sub and shll clc adc push jns xchg movsb stc aas call cmpsl fnstenv lock cmc popa and mov repz add stos adc in sbb or mov push sbb mov sbb dec cmpsl fucomi stc into adc push repz xchg cmpb mov adc inc push (bad) dec add arpl loopne inc (bad) test mov adc rcrb cmp jo jb out aad jecxz xor and movsl mov or (bad) call stc mov xchg js and sub std fdivs ja mov stos cli jecxz mov push jg aas inc inc mov mov daa imul lcall movsl sysenter adc cld and push hlt fcoml imul cmp mov add cmp int lahf in jmp sbb ret pop cld rcr xchg je push cmc or popa aas lock (bad) add aad out outsl inc mov adc dec cmp push mov ljmp mov test adc std push xchg enter jmp pop push int3 adc mov in mov stos push in lods out jb shrb js out data16 xor mov mov fs lcall mov xor ret pop push jbe adc test xlat push add jbe jno stos dec jg,pt mov adc inc push lds mov in inc mov pop nop jne scas and push fldl inc pop xlat in jb test or push std push pop mov fcomi jg (bad) ljmp add mov cmp mov int jge push bnd jb stos movsb adc loope fsts sbb xor ljmp cmc jb clc xchg scas loope mov lret sub sub jns out (bad) (bad) push mov lock lahf andb dec mov mov dec jmp mov sbb ret mov jge data16 or add fwait pop sahf push scas fiaddl lods fs cmp mov push pop xorb lcall dec outsb mov push or movsb stc mov clc adc and in mov dec mov sbb mov push mov (bad) fild enter mov jae (bad) mov add stos stos jmp jg dec out imul mov stos pop gs mov sub jecxz cld and out (bad) adc rcr fmul pushf or out cld cmp fbld mov mov cltd jb xchg aaa gs mov imul push rcrl not pop cmp sub mov std push or nop rolb popf orl jecxz mov push ficom movsb jo lret lea dec call icebp rclb shr jno into mov and call pop dec jl jmp fwait mov das mov ja popf bound icebp dec (bad) movsl jnp and fnstcw stos les sahf and sbb cmpsb in or out test inc ljmp xlat inc inc sbb push lahf jns fidivrl cmp mov mov lea mov rcrb loop enter (bad) ljmp ror xchg imul out aam sub imul jp cwtl adc mov jle dec add mov fisubl sbb pop shrb adc pop iret movsl mov mov inc ss xchg mov adc sub mov xchg jns jle pop push or xor inc mov fbstp push cmp orb mov push inc sbb movsb cwtl xor jle out aam sub rcll imul pop adc mov mov mov jp in xchg (bad) out (bad) fsts adc fs imul xchg out repz (bad) idiv lods jo out jmp xchg outsb pop cltd mov fidivl stos sbb xchg pop scas jecxz adc mov xlat out aam fnsave mov repz sbb movsl pop sbb xor aaa scas jmp outsb gs mov ljmp roll jle adc stc fiaddl mov pop xor sub push cmp pop pop cmp cmp std and loopne sbb movsb (bad) daa and jg stos das js aam std xchg xor sahf daa mov out outsb mov mov cld iret daa jp in mov dec add rcrl sbb jmp and call mov ret mov dec mov lea mov lret mov jmp imul cmpsb cltd daa pushf rol sbb rclb call (bad) fdivr fsub fs push outsb icebp andl in aas pop cld pop cmc jmp push notb adc fadds (bad) cmp sbb mov jmp notb insb sbb pop daa (bad) fiadd xchg ret aam sahf jecxz cmc adc xor lahf xchg mov jns sbb jb cwtl sbb test imul pop mov stos xchg sub scas icebp stc adc ja jecxz jae pop ja negl xlat popa les sub into xchg cmpsb pushf sahf cwtl push popf pop cmpsl xor xchg in imul push sub lret pushf enter pop mov movsl int lods dec notb shlb shl inc les or xlat movsl mov xchg rep push jbe pushf aaa mov popf fisttpll add xor hlt popf jmp (bad) scas cmp add mov sub cmpsb pop (bad) lock sub test xlat loope test adc inc mov fstl sahf xchg cmpsb inc cwtl (bad) fcoml clc xchg add lret repnz or out call divl mov adc jno enter lret push xchg jae and ljmp lods (bad) mov aas aam sahf xchg mov adc dec lea cmpsl insl cmp mov inc mov int jecxz out test jns hlt mov adc inc dec pop scas dec mov test (bad) ljmp cmpsl mov emms xor cmpsl xchg jl mov fwait fwait out jno mov fdiv xchg mov les (bad) popf lret leave out clc xor test cli dec jno mov mov xchg or sbb aad push mov int3 mov int push sub mov test fsubp out cmp fcoml scas in repz xchg sub mov mov or or inc pop push adc cltd decb stos repz pop arpl stos loope jecxz in jne repnz jmp cld push imul dec pop movb cmpsb adc fwait mov xchg sahf pushf or shrb jno es stc jb negl sahf inc (bad) aad xlat xchg insl xchg cmpsb leave lods mov jmp mov inc xor test add and rcrl dec loopne sub mov testb add and imul push jmp cmc add pop aaa mov mov jmp ljmp sub in addr16 dec call fldt mov and pop loop add test mov dec mov mov jecxz sub xchg xchg inc sub call lahf sbb lea push (bad) cmc outsb stos mov push sbb add sub hlt adc loop jnp inc push jecxz mov mov jno push inc in scas lods stc inc lret mov idivl cmp ret arpl mov clc fadds sub add popa imul xlat jnp add int xchg stc dec mov outsb test cli dec mov out push (bad) aam ljmp jnp test mov clc sub sahf push dec in jnp xor in xor pop sub fnstcw jae mov stos cmp mov inc xchg decl jo repnz movsb jle mov inc xchg and adc fsubl sbb adc cld xchg jbe add pop mov push mov or es notb and out into lock add out repz add pushf mull in insl dec mov bound jo sahf sub sbb mov mov inc jae test insb not ret sahf mov cmp ret add decl shl xor sub jno sar fnstenv mov (bad) aaa clc cs jb add lods out adc pop std pop aad and cmp pushf add sub pop ds clc out xchg xor (bad) cmp mov xor popa inc push push mov jo xchg icebp (bad) sub imul xchg clc popa test sub lods and push xor or xchg shl cmp outsb scas cli lock icebp (bad) in jbe dec pop (bad) mov xor lods dec sbb stos dec jmp fcmovbe xor jns fcomps sbb mov xor xor in xchg pop mov aad mov js in add sub jbe,pt mov sub movsl pause cmc popa adc icebp clc adc fstps icebp xchg jge call xor ja and push mov jl pop cmpsb inc test mov cmpsl je jb jl adc ret stos push add cmpsl pop jns jno hlt mov mov sti test fnstenv add call das jnp pushf scas add cld roll mov inc (bad) ds lods in cmp dec int insl jl js jle cmp mov sti jae out jmp divb mov stos jg lods outsb aas andb pop mov (bad) mov mov fisubr mov mov loope decb aaa mov push imul adc jecxz outsl push jnp bnd mov jmp sub into (bad) and mov cld out mov xchg les cmc lods out jbe clc insb outsl mov fisubr jmp idivl mov aam fsubs adc das mov mov mov push sarb stos sub stos f2xm1 sbb icebp addr16 (bad) fstpt jno cmpsb out push sbb pop mov loope icebp (bad) pusha cmc or neg jg in xchg shll jge mov cmp or out jno mov mov cld ljmp jg xor jl and mov (bad) int3 or cwtl ljmp (bad) fucom ds xchg into mov ret cmpsb cs scas mov lret push iret push xchg scas lock pop cmp adc sbb mov ja push (bad) dec mov ret stos sti xchg mov out or add sub cmp rcrl xor mov mov outsb cmp in sbb rolb mov jl pop in xor mov cmc mov clc fcomip or pop (bad) jo rolb pushf movsl cmp lea (bad) xor stc aas mov ja xchg pop stos ret fs int (bad) fimul test jmp jnp inc ss mov arpl jmp xchg adc adc push adc hlt pop xchg lock leave mov fwait lret ds mov xlat inc icebp sbb or popa ja jl or repz dec into lret mov mov sbb adc sub or add jle xchg movsl flds push pop sbb pop sub ss push mov xor pushf rcll lret xor jle stos int3 mov or dec sarl jmp in stos xor aam fwait repz cmp xchg out cltd pop int3 xor push dec fbstp jno das pop outsl mov sbbb pop adc xchg xlat aas mov repnz imul xchg xchg inc xchg cltd mov outsb lods call aam repz adc mov or insl in mov mov adc add (bad) stos and jp mov cmpsl jmp adc add movsb subps std mov push adc cli jmp test dec cmpsl adc add out fstpt test fisttpl arpl dec ja dec (bad) mov sub popf ret adc sub shr data16 div xchg lock (bad) and ret out jmp xchg (bad) arpl jmp jns ljmp xchg aad lods lcall das push add push repnz pushf or add inc stc dec movsb test je int (bad) fiadd or loope xchg leave mov aad je mov aam and in add movsl insl jb xchg xchg adc adc imul mov sub dec fs les sbb sbb and inc xchg xor or ds add jle and pop add jnp xchg imul adc adc stos outsb mov jbe dec bnd mov xor lea adc jns loopne xchg outsb xchg cmp out test enter call pop movsl in fs mov push jb pop jbe (bad) incb lahf pop clc mov pop mov lahf mov loop xor xor nop xchg ror int and (bad) and pushf cmc popa mov add push add mov xchg pop xchg jmp mov lahf (bad) icebp aaa clc jecxz pop cld inc jg inc je fnstsw push cmpsl pop outsl cmp inc imul imul lea ja add pop jno repnz jnp jmp mov lods aaa popf jb lahf cmp jno sub sbb (bad) xor jle jmp jno mov xchg sub cmp mov (bad) in fmull cmc lock mov (bad) loope test stc pop stos mov cmpsb mov pop stos add add shrl push outsb xchg loope push inc in cmp cmc push sbb out lock repz clc popl jnp xchg movsl cli insl cld xchg cmp in aaa mov int xchg or jno xchg jp add push imulb mov pop add sub mov test pop daa and jo test cmp xchg dec add pop test addr16 clc jp loopne jmp cmp pop inc pop xor aaa cmc (bad) into cmp fnop notb dec push push mov mov insl std lret push in not sbb ljmp jecxz jmp es xchg sbb insb jmp inc dec and dec sti jp fild jg xor dec jbe jns xchg jae jl leave (bad) fwait xchg pop pop and daa mov cmp out adc aas ret xor out adc ljmp shufps clc xchg (bad) mov sbb mov dec mov mov lret jae jmp fmuls jmp popa xchg mov mull lock stos addr16 mov clc add jmp ja pop cmc mov cli stc dec jecxz mov xchg (bad) adc dec movsb (bad) mov repnz dec aam jg inc sub mov sub movsb gs mul xchg jo dec push jne ret cmpl repnz rcrl mov cmp imul test insl jmp pop mov cmpsl loope fstpt pop push adc sub or cmc cltd jl jb jecxz ja fcomi cmp stc fisubl push push xchg cmp pop iret xchg stc test adc clc std (bad) mov adc jmp stc push mov mov (bad) xor push xchg andl sarb or in les js mov xchg push lods into (bad) enter lret push out push cmc push mov xchg lock xchg in mov stos adc scas stc stos xchg pop lret and addr16 pop adc movsb sbb stc jbe ljmp adc ja cli jmp pop imul call and ljmp jp add or int fwait mov fcmovu sar mov (bad) fsubr daa out in pop fsts daa dec xchg pop cmpsl or sahf test xor mov in adc lods dec cltd jge jmp lea adc aam mov cli adc mov sbb gs cli cmpsb les fistpl rolb or lock sub pop inc std gs sub lret lds xlat negb xchg test push flds imul aaa inc fldl2t cmp outsb imul (bad) mov adc outsb out enter enter sub mov cmp loopne mov (bad) pop sub dec mov lret imul sbb jae jno loop pop (bad) cmpl inc jno (bad) mov xchg aad mov xor fild jle sahf stos xor int3 mov cmp jmp xchg insl xchg mov xchg adc inc scas shrl push xchg cmp mov imul pop dec xor cmp shlb push ljmp ja pop pop and (bad) (bad) fisubl cmpsb call cmc jecxz adc loop and aad cmp out or adc (bad) sub lea ds inc mov dec (bad) int (bad) mov clc iret loopne popf call sahf scas ror jg sub ljmp in ja sub dec stos shr inc or lahf adc cmp in add lods or aam add je sub (bad) jb mov xchg lock fdivl jnp mov test icebp lcall int pop icebp mov ljmp out pop mov adc sbb mov xchg adc arpl bound loopne idivl popa lock stos cmp jmp add jns adc jb jl std (bad) jb jmp sbb mov adc jle mov mov sub cli out xlat add dec iret dec sub ljmp loop cmc data16 pop inc int in aaa jb inc or mov and xchg xlat clc xor mov loopne mov ret (bad) xor dec push mov movsb inc out adc test mov mov push call ds fldt (bad) and or xor fild inc sub dec shll pop jmp jnp js adc stc sub jae js (bad) mov cli dec (bad) jns cmpsb or lock lret or cli jns inc mov cmp push shrb lret je addr16 test je mov dec xchg das pop shlb repz jbe aaa repz outsb xchg scas inc arpl stos xchg test outsb (bad) (bad) push pop jb xchg aas mov lret xchg jecxz lea and jns enter ret jo stc test xor call dec (bad) and push cltd jl sti lret fcmovnu adc and add lock xor push test js test mov jne dec enter je scas jecxz jl roll or inc les frstor push xchg inc enter push xchg out cmp repnz pop mov lret mov xchg sbb pop lahf arpl xlat xchg push cmc mov xchg arpl mov xor push int3 shrl xor and mov xor jae ljmp lret mov out pop mov sbb flds fist mov popf insb mov mov push into pop pusha xchg ja mov push pop sub scas xchg (bad) pop (bad) push cmpsl push stos js dec loope mov (bad) sbb loopne sahf ficompl out adc (bad) loop fmul jg rcr movsb adc out lcall xchg flds sbb push mov lods clc push ret push mov push outsb in inc inc (bad) ss jmp xchg (bad) fdivrl stos mov test ds aas (bad) pop fcomi inc addr16 push jo test jno popf loopne jecxz stc mov pop out xchg sub mov jno push fldcw int3 (bad) fnstcw jae out jle loopne xor gs fdivs in fpatan les (bad) ljmp test in (bad) or (bad) mov mov ljmp fsts lods mov mov lret enter mov lcall subl into fwait add xor ror data16 insl sub mov in jae,pn pop sub push sti xchg xor in fbstp jne loopne movsl pop mov mov mov bnd pop in cli dec mov mov cmp mov loopne push lret xor jb dec mov jle mov xchg rol aad movsl movq (bad) mov xchg (bad) sub loopne sub clc xchg push in sub leave jg mov imul fiaddl dec test stos icebp in (bad) hlt arpl cltd sahf jle xchg jmp mov inc arpl adc pop xchg jg cmp mov in jl adc inc mov inc mov push pop (bad) add pop mov jmp xchg dec sar fsubs pushf mov xchg cli ret cld mov mov mov fs adc adc out cmp int3 sub dec in mov xchg ss cmpl in or xchg cli add sbb mov test rclb mov xchg xor xchg lds jnp movsb enter add fsin sarl pusha lods icebp adc in jae in or and jno sub adc adc hlt cld or xchg das and (bad) push lret jnp adc lea jg dec mov movsl stos add test adc lods push jmp add loopne scas in sbb aas into fsubl mov xchg scas pushf jecxz add lock sub repnz pushf inc add movsl xchg add jl jle pop sub xchg jg and ficompl mov movsb les pop push std je jl jmp lret jae cltd xor or shlb push pop imul and xchg bound dec push xchg repz stos cmp fsubs mov out rolb jmp add push jmp xchg xchg fadds pop or stos test cmp stos pop fucomip cmpsb idivb iret sub sub lcall inc cmp (bad) hlt cld xchg xor leave (bad) fs sbb stc jne dec jns stos ja mov cvtdq2ps test pop aam mov sahf fcmovnu adc xor push lock push fwait lods roll hlt in insb (bad) std pop test or adc pop daa rclb pop add popa dec stos cmp jl mov stos int3 inc shlb mov gs jne ficoml jae js in movsl xor xor xlat xchg adc jno adc in (bad) mov sbb dec shll idivb add (bad) in lcall mov mov or mov adc dec cltd insb jle xchg idiv push push (bad) or aad daa push jbe sbb mov mov notl es popf stc mov push xchg mov pop data16 pushf mov mov pop mov dec in xor inc dec into cmp enter mov ret stos pop xchg mov or adc push jnp cltd cli jecxz jb xchg pop (bad) sbb push pop les cld cmp dec pop dec in decb jbe mov in cmpsl push add fistpl fwait inc dec negl or dec divl pusha mov dec clc push scas repnz xlat aas cmp mov jecxz fdivrp push scas testl push outsl push jmp lret mov ss fldenv push fistpll into int3 (bad) enter push loop in (bad) stc sahf xchg vmread jno test mov adc mov sbb mov xchg daa out mov rolb gs add add adc test mov int3 jmp lret jne cli jae mov pop clc stos sub js repz (bad) negb fwait in xchg push jge pushf xchg cmc (bad) pop xor xchg dec addr16 icebp mov mov jo sbb jb das push loopne aam loope outsb pop stos sub (bad) mov inc xlat mov out xor jae xchg daa leave and rclb xchg movsb jns (bad) pop ja and out in cli aad cmc mov and xchg jmp in mov fnstcw outsb or push pop mov in add int xor sti jnp mov shll imul pusha addr16 jmp jmp and mov in repz mov aaa mov hlt inc repnz iret fcmove das push ret (bad) xchg jg jmp das daa icebp jbe (bad) shll xor mov (bad) jns sub dec fbstp cld jecxz jne aaa (bad) insb jnp xchg cli push push call int ret cmp mov pop xchg or mov stos fnop pop rcrl mov push std jb js jo aas test scas in ja,pt mov js cmpsl mov rcr cmpsl data16 stos mov adc movsb addr16 xlat icebp js ret inc jnp xchg adc dec add add jp sbb pop or aam aas arpl outsl in mov inc pushf xchg sbb fsubp sub dec mov outsb out pop pop xlat pop imul addr16 ljmp push ret sti leave pop out xchg fwait push repnz js std mov push rcr cmp test cltd sbb scas or mov push (bad) std (bad) rcll (bad) rcl jae (bad) mov rep in aaa out mov mov rcr stos out mov jae stos mov mov jmp xlat repnz mov xor cmp outsl push fdivs pop (bad) leave mov insl mov mov pop imul xlat pop ror fcmovnb loope (bad) insl mov movsb lcall into js cld pop push mov jb iret fsubrs lret xor xchg ret cmpsl mov out clc xchg jns notl outsl iret jg rep aam stos movsl jmp sub ljmp cltd imul aam push cmpsb mov imul pusha fucomp ret mov mov jae outsb lret mov push pop jg mov outsl stos jg outsl and jle and cmp mov into jo jecxz gs jae mov add adc xor mov rcr and in jp xor mov lock stos (bad) ss into (bad) push jae adc xchg adc sbb and cltd xchg push call xchg jmp mov insb and dec lods jp xchg sar out mov mov push xchg jno packssdw jno loop xchg fld arpl int3 mov cltd in stos xor shrb inc sbb shll xchg test jecxz jno dec lahf std sbb xchg insl adc xlat orb stc inc out fld fstpt movsb incb mov xor mov inc mov xor sahf pop repz mov xchg lds out cwtl xchg iret aas rcrb pop loope adc aam aas pop inc jne jnp (bad) ficoml mov cmp push loop cmp dec sbb cmp enter jp cli (bad) jecxz loop push jnp scas or pop cmp cmp dec adc lahf fdivs stos mov inc (bad) notl cltd hlt cmp jle movsl stos pop jp lret aam cmpsb sbb fwait rcrl scas int xchg mov push cmpsl or subl mov test and aad jno mov sub inc or jmp add in mov int stos insl adc retw in xchg cmp or adc lret xor pop adc mov jp out test ror in push stc shrl test rclb sub leave test (bad) inc mov lret cmp mov adc jno xchg daa arpl inc mov lock cmp in repnz xchg or add jge popf mov mov aaa test stos pop mov arpl iret test stos push lahf lret inc xchg sbb lock jge xor pop std fbstp cmc cld insl leave sub mov enter mov jmp ss loopne sub fsubr and stos xchg dec enter je pushf sahf popf push mov and (bad) fiaddl xor ja jecxz pop stc ja js call jb int ret sub add dec pop xchg icebp cmp inc rcll xchg rorl call std add fistpl cmpsl jne and rcll and aam outsb test dec popf sub pause adc cli inc adc stos andl (bad) lahf in mov and stc inc and loop test lock adcl lret jb jno test xchg mov (bad) notb inc xchg mov jo (bad) mov aam rcrl repz push cltd gs jg inc popf inc mov dec fistpl push push test stos loop xchg repz cld dec jno fstpl (bad) int3 pop std pushf sub cmp add repnz inc out inc xchg loopne (bad) jge fstps outsb nop pop icebp lods add in repz cli cmp jl hlt jle xor std inc mov push push rcll iret xorl divl in jecxz jge jbe lock xor jl add inc sub (bad) xor dec fnstenv cmpsb movsb xor sub cli sahf xchg imul xchg aaa das inc icebp pushf add lret xlat leave std aas sahf mov fnsave (bad) iret cmp mov js push mov icebp mov fcomp lret ljmp jle mov sbb push fwait jb out mov int3 mov std lods sub mov xchg movsb bound movsb aaa dec xorw aaa lods notl pop dec add xchg lahf mov xchg mov inc ret dec sub jno popf dec aaa mov fwait imul xor dec lock lcall mov loopne jg enter fwait mov lahf js stc mov mov xchg stc addb pop fisub (bad) jecxz lret and cmp aad dec pop xchg outsb xchg and aam imul into adc das fildll ret xchg jmp mov jo mov xchg stos push xchg out sub mov js adc ficomp xchg lret sarb ret stc adc arpl jecxz jne xchg push mov pushf adc and sahf imul jbe cmp jmp inc inc pop gs mov jno call loope mov cmpb sbb push cltd jb aam push aaa push outsb loop test pop push push xor movsb xchg call (bad) ret xlat jo cltd stos sarb push jmp pop mov leave addr16 xor jecxz jo xlat ss aam rclb test sti loopne shrl jmp xchg jl ja xchg out mov jns jnp stos xchg lahf xchg mov fidivrl xor fstpt aad pop pop jge pop jp pop dec add dec mov addr16 lods cmovg adc es sbb mov jae xor fimul mov push fcmovnbe test (bad) adc lret push jmp jp mov cltd out bswap sub jne ljmp jne,pn cmp mov jmp mov push sub jns inc shll jae mov mov jb leave mov fsubrl cli pop jp xor popl mov push mov mov push fildl jp enter lahf xchg cmpsl dec leave mov stos cmp jp icebp push add cmpsb xor dec mov mov push out inc xchg inc data16 xor lods out cmp repz jg cld push jmp sahf mov je in sbb aad jbe mov fimull (bad) jne xchg (bad) cmp out adc and mull adc dec mov jno and mov push add in dec xor inc into movsl jge in mov fcomps shll (bad) out add xor xchg inc arpl ds sub xor int cli xchg xchg xchg out stos ds test addr16 notl pop mov adc (bad) fbstp sbb sbb sahf xchg dec jne sub mov jmp inc lcall adc jo mov pop pop sbb cli add mov adc dec out cmp xchg int popa sti (bad) mov jl je mov std lahf xchg mov data16 lret jnp mov jmp inc movsl push repz jmp dec fcoml pop sti jecxz popa sbb xchg and sbb and xchg pop jae push sbb fsts inc mov jmp scas or cld add pop fbld cmp jle into and sbb cmp push fs mov cmp ficompl or dec jnp dec mov xchg xor ljmp jo (bad) test cmp adc lret test lret or rolb jo lods repz inc (bad) scas sub push jae out or lret xchg push jge xchg in and pop sub dec outsl in push lods push ss mov and into push lods mov jnp repz out cmp insb lret aas mov adc ds cmp lods ficompl cmp xchg pusha repnz movsb icebp mov repz movsb scas adc imul dec into hlt jns enter inc mov push jae cwtl cmp mov cmp add cmpsb (bad) ss leave xchg xchg push clc nop dec (bad) call bound inc fdivl sub adc scas clc fbstp jl and lret jbe (bad) loop mov and imul into movsb sub inc fwait add adc push or sub adc jae inc iret and lahf fisubl jae sub mov xchg sarl insb jno jno and out lcall shll add xor add and (bad) sub jmp pushf sbb fnstenv cmp adc imul mov ret jo clc loop fist inc xchg adc (bad) xchg add mov out add ds pop neg sub jle mov cli dec lret mov outsb pop ljmp jecxz jmp adc sub scas imul movsl add mov mov imul popf test (bad) dec pop in movsb insl mov mov cmpl push dec insl cmpsl add or dec jp jae fild cmpsb mov cmp loope add fnstsw sub aad cli adc jbe add and repnz mov hlt subb leave xor ja test cld incb jno add (bad) iret adc leave sbb jmp stos in sti xor mov and jmp dec (bad) ret arpl js in (bad) pop sub adc add scas mov inc fidivrl mov nop adc test mov or ja cld pop outsl (bad) (bad) xlat jbe adc imul fs xlat ret (bad) (bad) jecxz push stc sbb daa std jle data16 inc out frstor gs pop xchg lea mov xchg dec sbb int pminsw je fidivr hlt cli ss mov addr16 or inc and in addr16 xchg add movsb adc mov decb nop aaa xchg das lcall movsl xlat ljmp inc pop (bad) fildll mov int subl dec or jo dec or jg mov clc pop xor jecxz lds addr16 cmp (bad) outsl ja jne fstps mov cmpsl std mov and and inc jnp sub add cwtl lds fist dec xchg pusha iret pop jne lret mov pop pop mov addl in dec sbb jae xor xchg sbb xchg dec ljmp hlt push mov xchg shrl inc stos mov cs adcl cmpl imul inc mov (bad) sbb pop mov xchg loope aaa xchg jae sub mov ljmp xchg or lock (bad) xchg pop sbb loop mov movsb out xor jo in adc stc push dec jge adc add loope in mov loop or lahf pop arpl and psllq int3 jge push in or test mov push lahf xchg loope lock xlat jecxz lret xlat cs sbb popf pop inc push sti jecxz jge (bad) out movl mull notb lcall lods mov stc jno mov xor sarb (bad) pop jo xchg mov test inc stos stos sbb outsl rcll pop mov outsl das jbe xchg mov or jmp mov add scas jbe xchg (bad) lahf scas outsb ja in add mov cli enter scas hlt cmpsb imulb mov leave adc psraw testb mov cmpsl insl in call jnp xor cmp cs jge popa mov stos ss lock jge cld xchg jmp add test push lock data16 jmp xchg cmpw push addb int3 hlt add leave pusha lods pop sbb xchg negl push outsb mov cmp out mov imul dec into and aas fucomi into push sbb jge mov test shrb std cmp stc mov inc popa lock xor add adc movsb cmpsl mov jmp outsb nop stc inc imul imul mov xchg scas push jecxz cli mov (bad) jl (bad) mov xor lahf mull push mov and pop cmpsb ljmp push aaa (bad) (bad) lret jae test push or inc lods sbb pushl pop loop dec jbe xlat mov inc jg mov xchg outsb inc xor (bad) jecxz inc push fildll jne adc jmp sub cmpsb mov xchg sbb mov aad in outsb subl in fxtract data16 jmp test mov cld data16 jnp adc rcl aam or add jae inc popf aam and cld and imul pop pop fmull cmp or int gs in xor xchg rolb or repnz xchg sahf mov push (bad) div clc or mov testb mov repnz int3 push pop pop (bad) mov (bad) out xor roll inc mov inc inc pop xchg cmp jo lcall pop ret add cmpsb repz (bad) xchg push inc and scas jmp push in mov mov imul out push btc ja imul mov divb inc lret cld (bad) imul aas xchg stc pushf std cmp mov push push (bad) mov test mov leave (bad) jae int push lods icebp aad inc fwait xor pushf cmp mov sub jo std jae and flds xchg std mov cs lods rcll lds shrb out xchg push lods sub dec fimull mov push jb jno fidivr cmp sarl mov data16 mov mov outsb mov ret loop jmp roll or add lea jnp lret imul mov jno inc xor (bad) outsl xchg add ficoml mov fstpt cli jb out sbb pop pop jbe movsb inc rcr jae iret mov xchg in adc aad adc scas mov jno rclb xchg sub in xor test out imul and and sub out add (bad) or nop xor clc cmp popf (bad) ja mov ja movl add ja iret add mov shrl inc repz xchg repz (bad) repz push cmp mov mov pop dec ljmp cmp mov mov fwait rclb ja or or cs pop cs push out pushl stos lahf adc mov mov arpl out sub mov sub call cli jl mov movsb jl sti mul adc jecxz jo loope jno into lods cmp jmp es jb out pushl cmpsb or xor add je fbstp jbe out loope jmp jae clc sbb cmc lea inc adc cmp movsl mov or iret mov fist mov cld jge out outsb aam lret mov sbb cmp xchg adc and add mov xor sub pop add adc cli adc pop mov dec bswap imul loop lock aas add sbb ja aas add mov dec out insl jae arpl jnp insl out xchg inc jbe stos adc sarb ret push adc mov cltd jno xchg jo jbe repnz fcomp mov cmp mov fbstp cli dec call adc pop mov rolb inc out aam add stos loopne adc ret andl inc fidivr fsubrs mov rclb subl orl out pop xchg mov (bad) add xor stos pop shlb push lods imul enter (bad) repz jmp cmp lcall xchg out popl out mov rep loop,pt movsb orl (bad) xchg mov xor test lock sarb dec xchg mov pop sub jge xchg scas stc cmp adc mov jae ljmp fstl fmull jecxz xlat cld xor and inc and (bad) sti std mov push sub nop (bad) mov test inc add jle in mov pusha test cmp scas (bad) test das sub sarb pop jnp mov add jae lahf imul jne mov sbb jne cmp mov xchg inc jno lret push inc out jno and inc xor xor xor mov notb cmp enter lcall mov push mov (bad) imull jg sub popf (bad) int push push sar fnstsw sbb xchg mov mov call pop fwait cmp rclb jb shrl std cmp push xor jmp sbb cmp cmp xchg inc dec lds iret jb cmpsl or test or add sub out idivl int (bad) jecxz jb add adc add cmp xchg add outsb int3 inc cli sub test or rcrl cmp adc push call dec xor ljmp xchg sub add out push adcl loope mov adc jne into lods mov outsb cld je sub loopne icebp loop out ljmp in or sub jmp adc mov repz dec fstpt xchg xor cmp jecxz xor inc adc int jecxz xor or enter push adc lret xor xor mov pop ret or ljmp scas (bad) xor fcmovne inc shr adc jnp xor jle,pn pop pop stos lods outsl mov dec jb jns xchg pop idivl jp xor xchg mov mov push jmp push outsl fnstsw mov test mov mov mov xchg loop lods loope hlt loopne push clc jns test pushf sub (bad) cmc test jmp repnz leave je popa int stos mov ficompl add jle cmp jg mov out rclb push bound push call fwait xor sbb xor movsb jb and in scas mov lahf xchg call pushf stos mov mov mov jns add fld fst lret mov pop aas call xor xchg jmp jae pop or pop xlat mov cmc fisub xor icebp jb hlt je add add xlat xchg xchg (bad) iret imul mov (bad) fcmovnu scas insb aad imul adc sarl sbb enter (bad) mov push fbld test stos or test ret ret pop int3 xchg outsl or loop mov jecxz out jecxz outsl inc outsl aad xchg lret das aad imul cltd inc jmp outsl push loop push in pop xlat mov mov testl mov mov daa sahf fsub fs leave mov jb mov dec lahf and inc add sbb (bad) daa out adc inc mov mov mov ret int3 adc inc fist (bad) aaa fstpt pop sbb or pop sub adc (bad) or cmp outsl lods push inc enter jae cli mov xlat cmp jecxz jb pushl jmp inc sbb stos pop lock ficomp int3 test (bad) mov push jbe mov out and xchg add inc scas pop cmpsb jmp test pusha movsb leave icebp push insb push loop mov and adc sub popl xchg fistp call test cli mov clc enter and decb int fcmovb adc sahf mov pop push add jmp clc mov in out loopne into xchg mov leave xchg gs cmp lds mov and (bad) scas fisttp mov mov sub xchg adc ret out xchg add int add jb or jecxz stc xchg icebp popf adc pop gs pop adc adc mov push jge mov int jnp loopne shr mov das subl rep adc dec stos xchg pop push loopne test mov xlat (bad) push ret arpl push inc imul jb jb cmpsl (bad) hlt xchg scas mov xchg mov clc jmp pushf sub in xchg cmp dec cmp mov lret xor mov in inc inc (bad) sti mov leave leave mov sti les fistpll dec mov xchg or or fstp movsb lock mov stos mulb mov cli test ret out jbe stc rcrl xor or lcall cmpsl movsb xor pushf push or jno int in jnp rorl in mov lods cmp adc jnp stc jo jnp call jl jg shlb xchg add stos cmpsb mov jns aas push dec add test decb xor pop or sbb or jg mov dec inc and sub adc repz push mov jmp jp adc loop dec push push xchg inc push jecxz jmp xchg icebp sbb inc jnp pop cmp cmpl pop aaa pop ljmp dec jp lock int int lret fcmovb imull sbb lahf dec xor cmpl fist jnp nop xor ret cs test into ds cmp lea mov fucomi jmp lods mov adc outsl mov stos push cmc pop jge push (bad) xchg rcll rcl fsts push int repz (bad) lods cmpsl mov (bad) xor push cmp xchg repnz in adc sub cld inc stc push lcall cmp pusha mov leave rcl jge in dec mov es iret push fcmovne stos test popf out rcll pop stos mov (bad) nop mov fmull jmp (bad) stos pop and nop fxch cmp pop cltd cmp xor stos movsb xlat cli mov fcomps mov bound fildl mov mov adc pop into or repz adc int xchg push cmp outsl lock int3 mov stos cmpsb push and pop dec sub add mov (bad) cmp pop cmp adc in js cmc negb dec sub ret fldt iret repnz inc adc mov jmp mov data16 (bad) (bad) aaa test test mov enter mov je xor mov add xchg into fmulp imul xchg fs dec xchg lea outsb (bad) ja fidivr sbb jb clc mov in (bad) cmp mov push into mov loop push jmp mov cmc out cld adc xor stc xchg or scas cli imul stc outsb lods iret xchg push stc add and es jnp lods push or std loop je pop stc jecxz shrl into mov sub xchg adc xchg out std (bad) nop and push dec jmp fmul stos jl pop pop or adc (bad) cmc adc dec sub fs loopne unpcklps adc jmp (bad) jl inc mov cmpsb (bad) jne hlt add call lsl push int cld push push and mov ret in out mov dec scas and mov ljmp xchg outsl push jnp out mov iret mov jmp jbe push or jne and out sub mov aaa xchg xor dec iret or cmp xchg (bad) sbb loop mov ljmp adc mov mov jge mov ja adc fldt scas dec xchg adc iret xchg out mov test stos shr cmpsb (bad) stc push cs and dec pop cmpl inc out in data16 lds stos outsb jnp pusha inc out mov mov xchg lock test jmp aad dec jbe mov xor dec sbb mov dec push xorl mov add stos push es lret daa lcall stos cmpsl lods add imul test into cli shrb repz pop (bad) mov imul jle,pn outsl mov mov adc lea stos out cmpsl or xchg pop or xor xor aaa or xlat mov scas mov pop loopne enter jmp xchg inc lock cmp les cld mov xchg xchg or (bad) mov ret cli in leave jmp clc daa or add cli dec in xor popa out fld dec dec roll xor jb out adc arpl iret (bad) jmp mov pop fwait xchg stos xchg pop movsb stos mov mov stos test cwtl inc mov adc or and lcall jg xchg stos cmp mov fwait ja test out mov jnp iret pop (bad) push or aam (bad) mov fidivr dec jne pop ficomp and fcoml into hlt cld mov mov xor cmpsl jp stos push fdivrp sub mov adc xchg daa jns add outsl repnz ljmp out sbb imul mov sbb arpl xor xchg (bad) xor jns pop out sahf cmp hlt jo lret mov hlt jle enter inc cmp mov xor push iret into push xchg es into push mov and jle sbb fldl push xor dec fwait hlt jnp test icebp mov jns insb xchg pushf addr16 mov outsb or or push fidivr mov jmp loope stc js mov gs push or sbb ja cld fisttpll xor outsl pop insl xor out mov fidivr xchg fsubs mov mov jp aad xlat ret push aaa mov (bad) jae in mov lock imul aad scas sahf repz jecxz mov xorl mov cli lods notl leave in fistpll xchg jle scas cltd and aaa sub lea cmp xchg cmpb inc outsl lods (bad) jnp sub xchg test pop mov sub pop test dec jae (bad) xor movsb sbb sub push sub and loopne rolb and add popa xchg add adc push movsl rclb stc jge xchg mov imul mov out cmp sti (bad) ss lock (bad) (bad) cli xor hlt stc mov inc repnz ret roll lock mov leave cli mov sbb sbb mov sar jg jo inc clc pop clc inc xor loopne lods mov lahf sub int3 push xchg sbb movsl lret in icebp jle xchg mov jmp inc ds xchg jns in jbe or cli jnp add xlat dec fidivl out jno data16 idivb pop repz pop js repz jnp lret cmc push cmp adc fiadd and mov mov pop push fisubr sub jge mov jecxz mov (bad) std ljmp dec (bad) mov adc test loope loop in mov push mov lret outsb popf xchg sbb or jp into aaa push arpl (bad) jae lock call jle mov jmp sbb test jp test jge das mov out or xchg dec jle mov shrl ja cs shrb adc rclb imul outsb mov adc add lods repz adc setno rorl add jae stos xchg outsl mov or adc xlat stos insl (bad) pop ret push lock mov not call jle,pt cli cmc lret jmp mov add push iret adc ret cmpsb jle (bad) fistpll adc xlat ss sub jb pop jge cmp leave and push and or adc xor int3 jecxz lahf sbb push popf call jbe sar sub in outsl sub lea sbb stos (bad) jmp inc jg movb in jmp sub rorl add lds xorl arpl add inc stos jp outsb mov outsb aam out adc pop imul movsl push sub xchg cli sub lea cmp outsl sbb leave sub jmp adc sti push subl js in cmp mov shrl mov jb lret push ficoml fstps dec mov or fcoml (bad) pushf ror jecxz (bad) fdivrs adc cmp cmpb xchg cwtl dec mov mov jle shrl mov pushf repz and ja ss mov aad enter jecxz lret popf add (bad) ss dec mov rorb je or insl push push lcall pop mov sbb ds out movsb stos insb int3 xor mov (bad) mov repnz xor fwait add xchg andl push in insl push mov data16 fistpll add sub inc pop xchg sub mov adc lock add loop jp (bad) hlt int3 fcoml jno lods stos mov das mov sbb mov xor xchg jns lahf aaa outsb adc fdivrs or add push addr16 mov cmpl push push (bad) fbld enter je,pn into nop add jo lock and mov lcall cmp mov popa add (bad) aas (bad) mov iret notb or mov out sub and gs push mov sub cmp clc movsl xor mov cli jp (bad) mov and test xchg (bad) sub cmpsb and and dec mov das inc outsb mov jp cmp into sar in push push xlat mov (bad) xor pop push insb mov mov divb out clc mov and repz xlat inc lock add cmp pop outsb fnsave xor sub push mov mov mov push mov test mov cmp xchg fs xchg lea mov repz mov mov or mov es cmpsl inc sub outsl call (bad) jle mov cmp pop fmuls out jno mov jmp dec pop (bad) mov das dec mov iret pop imul add in mov rol jno (bad) pop nop leave push frstor test sti or stc (bad) loopne stos xlat xchg and jl jle test int3 jle add sahf (bad) adc cwtl jne in into jge cld je and clc cltd ficomp fsubl loope mov fnstsw fidivl mul das cld cmpsb nop cmpsb adc cmp pop aad add xchg outsl nop xlat dec jo jmp dec xchg ljmp icebp lock inc xchg mov or fidivl cs movsb jnp cli sub lock cmp je sub das xchg rclb or mov fadds cmp stc lock xchg inc xchg loope loop jae cmp enter repnz push adc jbe fld dec sbb jmp and pop jg ds (bad) mov out jmp fsts ljmp inc call (bad) aam movsb xor or (bad) cmpsl add and dec jae in xchg fisubl jmp movsb shld cld add mov iret movl scas mov lret (bad) cmc out fnstcw (bad) ds jecxz mov aad out dec cmpsl sar pop pop into push fmul xchg fstps sub sbb xor imul loope add in add mov pop cmpsb arpl fcmovne push cmp (bad) lock pop mov mov mov js mov jns jno mov fild pop addr16 stos inc rcr sbb mov aad mov fisttpll inc sbb cmp scas ret or sub imul mov mov icebp fisttpll ffree jecxz push cmpsb das push lcall mov pop in outsb mov (bad) push stos xchg iret cmpl outsb mov enter repz test mov stc dec add out loop lret scas (bad) jle outsb iret mov cmp inc (bad) mov pop arpl ror repz cmp in fs bound mov in negb sub test loope jg pop jo add in stos stos mov stc lcall xor adc ljmp fdivp xor out sub dec mov imull or cmp dec adc mov shrb decl or mov adc stos cli lret mov pop in dec xor mov inc xlat test fistl and jmp das jb cmpl sub fadd lock dec sti xor sub ret test push sbb scas clc or mov (bad) mov jg jns rolb jb icebp sub (bad) faddl aas and out imul movsl pop aas icebp or or in jb dec fdivrl js lods xor in and mov sti xchg faddl push scas adc stc andl (bad) cli adc repz sbb mov rcrl imul sbb sub lock mov mov sub ficoml add or stos das xlat dec cmp clc clc jb and sbb inc cli lock enter mov jo aam jns mov mov rcr jl out or test rorl addr16 popa xor mov dec mov insl (bad) jmp sub cmp add mov popa jbe (bad) ror int3 in inc fnsave or mov jb push rorb xor imul add sbb add ss or jae imull jecxz mov ljmp mov or lods dec cmp add bound repz in jb iret jp jno mov add inc fidivl std js imulb inc imul repz jecxz roll pushf jb lahf repnz push mov jno out add iret push pop cmp imul sub push push cltd xor in pop insb popf adc call in dec push mov inc decb xchg repz bound cmpsb mov push ljmp scas sub mov arpl bound cmp xor inc and sub imul xchg jecxz xor (bad) sti jg or loopne stos add iret cs add arpl push pop cs imul outsb popa cs iret fmuls test mov sarl jns,pn clc movsb xor aad jb xchg mov rol iret inc push shll popf movsl dec sub dec xor movsb scas jge lret out jae,pn or aaa outsb mov add lods dec ljmp inc push frstpm(287 mov push push nop pop iret dec mov mov push or clc xchg jb adc jl ficoml jg daa xor int3 std andb sub jns scas int3 pushf (bad) cmc mov dec jo xor fisubr adc dec mov dec add lock std int3 mov (bad) in movsb popf movsl jb mov pop test stos ja adc stc jg xchg xchg inc test add movsb mov cmpsl lcall add in outsb jmp cld cld imul outsb ficompl xchg adc aam pop and stos sbb iret rcrb test jecxz fistpll mov (bad) in leave inc fwait loop cmpsl adc in stos fdivrs xchg int3 outsb inc mov cmp insl ficom mov lcall jns into std popf mov data16 daa loope push andl and pushf (bad) sti push rorb pushl (bad) icebp add xchg stos mov (bad) fwait out add sti incb mov lahf jle and jmp popf or leave call xor andl aad call adc push roll sbb sub mov cmpsb imul jge xor xchg sbb dec cli jae mov xlat test test mov pop mov scas inc fldt jmp stos mov mov mov into pop add mov sarb ja mov cmc cmp out cmc mov mov rep dec and cmp sub cwtl xchg test mov mov jbe mov test sub test fimull sub sbb jmp xlat push jmp push flds lcall inc mov mov add pop sub jmp sarb cmpsb xchg aas pop lods push xor repnz insb jmp jmp fstl sbb xchg pop sbb adc pop hlt stc fistl jle mov cld scas push ss jp int3 or ss xlat sub dec ret xor mov sbb mov (bad) idivl sub adc xor push imul lahf dec ret stos arpl jmp test cmp mov xchg je mov fdivr icebp adc scas fiadd push dec (bad) imull cli lods and push in jmp lret addr16 out insl repz daa imulb cmp in jbe addr16 (bad) scas aaa inc fldcw or imul jb adc xchg ret jecxz fcoml pop mov mov cmp cmpsb sti stos adc outsb xchg adc fidivl xlat cmc cmc fistl in sub and mov inc pop cmp (bad) cmc lock in (bad) insl jp gs rclb test jae sub mov mov mov arpl mov fidivl push sbb cs jo out imul pop (bad) mov inc xchg fisttpl idivl adc mov enter mov xchg xor movsl push (bad) mov fisubrl jo arpl lret stc ret add loope (bad) jo cmpsb out jno sbbl xchg cmpsb fildl aad mov (bad) and add movsb lods ljmp jmp iret xchg (bad) repnz xor jge pop pop push cwtl or adc or mov mov xchg sub mov in sub notl icebp (bad) imul xlat mov adc std add push lcall loope ret xchg decb lret out and push sub add (bad) mov push adc inc imul loopne les test mov popf push loopne rorb xlat push adc cmpsl (bad) loopne int add hlt lds push in push leave shll mov lods cmp or add cmp dec roll sbb outsl cmp sub addr16 leave jle (bad) enter out jae cli incb pop jle (bad) dec sbb lcall jmp xor cmc xor pop adc inc adc mov subb add jmp (bad) aas outsl enter mov in out arpl leave sub inc jecxz jae push mov adc jo mov lahf les xchg cli xor (bad) jae mov stos shrl fidivl mov push adc xchg aas mov jb scas ret lds cmp sahf xchg pop mov sti xor test int3 lock addr16 cmp dec cmp call aad (bad) icebp (bad) stos movsb sbb and or (bad) lret push xchg mov fldcw ret xchg ja scas call insb adc mov stos add pop jecxz adc aam lret cli mov push imull rcl movl sbb (bad) mov mov mov je xor lcall ljmp in ror in add enter fdivrl mov push addb jbe test mov adc fdiv loope loop and push xor pop xchg outsb iret (bad) mov add sti lret mov scas outsb mov clc xor lahf jne mov jae dec pop jecxz (bad) leave loop gs fisttp adc ljmp test adc dec cs mov imul rorb lret out pusha fst loop in aad popa jnp jecxz scas or or idivl ret jl (bad) sarl cmp leave sub out scas (bad) mov call and int mov pop mov xor (bad) fsubrs fnstenv jne rcl out inc call sub mov (bad) daa lret xchg push clc (bad) sar dec or stos imul jp xchg mov mov mov pop mov (bad) jno stos xchg mov leave sub inc cmp clc or jno xor xor sbb dec jae ret mov rcrl mov jecxz pop out xchg aaa scas movsl push sbb jno rorl hlt leave sub mov scas or push out insl (bad) jns ja pop mull fbstp adc mov sub rclb mov sub jmp or and std test add or mov fbld mov int3 xor mov aas pop xlat ss xchg (bad) outsb clc incb mov hlt add shr mov lahf shrb imul push aas jl mov in and (bad) adc jmp or mov cmp (bad) cmpsb sbb mov lock test hlt push js hlt cmp aam repnz lret add jecxz xor sbb (bad) fisubrl fldcw jnp iret add mov sub jae and pop popa mov scas push aad adc cmpsb imul movsb add add call icebp pop mov mov jl shrb addl jl imul adc cmpsb add inc in insl mov pop jp mov cmp cs dec xor mov (bad) dec xlat jbe bound mov xchg rcl imul mov dec pop lea cmp push xchg cld cmpsb je xchg mov mov sbb inc mov inc sti icebp leave cli mov xchg push lock imul mov ret inc fisttp xchg test out aam call cltd scas (bad) fstpt lock add mov push or icebp jg sub jp movsb daa cmp mov push arpl xchg imul in and lods cmpsb and not cmp aas loope cs adc lret (bad) cli pop je adc mov cwtl mov aaa sarb (bad) int3 add mov mov test xor roll sar jle pop xchg xor fcmovne (bad) xchg mov in xchg adc cld (bad) fcmovnu mov xchg jnp mov (bad) push inc mov gs lock insl (bad) lock mov xchg xchg js mov mov fcom mov lret inc xchg aad call vphadduwq ret ret jbe xchg nop rorb leave jecxz pushf aad lahf mov cwtl bound enter sti sub sbb clc xchg jb cld inc (bad) mov add add xor add xchg mov xchg repnz or pop jmp dec lea arpl adc inc movb xchg cmpsl repnz out dec xchg lcall cmp mov push idivl outsb mov add mulb outsb aas xor adc mov sub cmp sub outsb push loop addr16 pushf push fxtract out adc into std add xchg fmull mov stos js fimul test lret js mov cli inc lret mov and xchg pop test repnz call icebp repnz dec int3 add mov or xor jmp js mov pop jb cmpsl xchg xchg adc pop (bad) cld outsb xchg adc ficoml popa lahf fstp jmp mov cld (bad) nop movsl pop sbb push fs into popf negl loopne daa je pop cmc cli jle fdivr xchg adc jb lcall and xlat or in lret fmuls add jl or pop in inc imull cs in inc push or into testb mov sbb pop and push add jmp cmp xlat sahf and (bad) pop sbb and cmp fdiv xor addl pop cltd (bad) out (bad) sbb or rorl js lods mov or rorl jmp mov jmp jmp xor out repnz jecxz aas out xlat dec lods jmp ret sbb push pop into cmc movsl mov mov add movsl xchg stos fdivrs adc push cmc test stos enter or lret int3 jo pop ficoml pop xor (bad) stos pop movsb repz leave int3 test iret imul nop push dec mov cld popf outsl dec fsubrl inc sti pop lahf imul test test jp fucomp out gs (bad) out or rolb notb in mov pop xchg ss jno mov jae fist je cmp jno aas mov pop sbb ljmp pop popf adc push xor sub jno sub and inc jmp mov test ds xchg mov fildl xlat repnz in dec pop mov cmp pop sarl imul inc add (bad) xor jl fidiv in bnd pop (bad) lret sarb mov xchg stc jmp push outsl cli mov xchg js cwtl mov sbb pop loop dec mov lods sbb ret push jb hlt push aas and push in jecxz add mov inc (bad) jbe adc lods movsl sti mov stc dec out jecxz jmp sub inc mov sti mov fstpl dec cmpsl mov push stos scas out cld jb (bad) jmp jp jle adc mov mov iret out pop sbb lea daa (bad) cmp mov out inc jnp notb cli adc or call imul fsubrs xor xchg test inc push clc out mov mov and inc es fsts lret xor mov (bad) mov (bad) xchg mov rolb add mov add mov inc inc call mov fildl fmul xchg adc jae push cmp std inc pusha iret outsl js mov fsubs mov jl into inc push sub pop cmp (bad) movsl mov mov leave fdivl and out int fnstcw lahf fidivrl ljmp pop call loope cli into test push rcll fisubr mov js push out jl push dec xor movsb sub stos ret rclb out and int3 fsubrs addr16 stos xchg aad fnstenv or mov aad flds jp xchg mov out mov scas and stos popf movsl sbb popf fstpt adc xchg rcll stos jnp push pop dec je dec jp cltd add pop mov in ret fistl lods mov push cmpsb mov pusha out aad in pop (bad) xor stos pop std imul cmc inc stos add jbe sahf push mov mov cmp cmpsb pop movsb in (bad) adc sub add ja (bad) cmp rclb test adc loopne cmpsl in mov fsubl mov adc mov pushf or dec xor cmp ja xchg repnz aaa shrl xchg cmp jbe adc bound xchg gs addr16 popa call outsb sub jns push enter addr16 add jb sarl rclb jmp mov pop pop jbe jmp sbb lods bswap push fistpll movsl test pop sbb push dec or fnstenv fiadd scas mov cmp mov sub mov rorl dec mov out cli mov xor xor adc adcl mov xor pop mov leave mov test fucom or and out mov mov icebp rol (bad) mov mov mov stos cli leave fucomip scas out (bad) mov mov repz loop jp mov icebp jge cmp inc (bad) push mull lea roll xchg mov xor mov loopne adc and jne fs nop sbb push push enter in faddl sarb rol lods test arpl mov imull negb xor ja nop dec push popf fwait int outsb imul cmp iret clc xor xor adc cmp sarl pusha pusha in jno (bad) arpl jns (bad) jnp cli inc or icebp inc mov or adc or in pusha xchg cmp xchg stos inc or repz and int3 and out aas pop dec sub jge negb inc ljmp jae mov push ja sub xor jle jecxz sarb add xor jp aas addb add and adc movsb cmp pop out (bad) fnstcw pop adc in and cmp jmp jecxz movntps pop mov clc mov pop cmp pop in shlb (bad) jo shl inc movsl divl jne xchg test sbb insb or aad xchg dec outsb loope mov jle stc inc mov add mov stos (bad) xor sub cli stos jb cltd es jne test ret repz jnp and lods stc jns add (bad) jge ss jne xchg jg bound mov iret pusha stc in inc out push bound cltd es cmp test mov mov aaa mov sub setge push pusha sti jge mov add scas imul jle push mov mov mov xchg movsb and in dec addr16 aas cwtl cltd cmp (bad) push or int3 mov fisubrl aas jmp pop sub pop out testl std dec and cmp mov ret mov sbb movsb pop jge push mov fcmovnu fcmove (bad) cmpsl stos fwait divl loope mov lea sub shll jmp mov mov les lea xchg adc (bad) pop or lods lds mov xor addb out fsub sub loopne fcompl popf movsb mov imul mov mov test jb and lcall mov jl cmp sbb fcomp aas out push addr16 dec ja adc xor sahf xor inc daa lret mov mov lock (bad) xchg or xor loopne fcmovne jb adc lods call xchg sbb movsb bnd mov sahf (bad) mov sbb push adc pop rcrb outsl fwait or bnd xchg mov adc or push lahf out out aam sbb xchg mov xlat into push sbb xchg xchg repnz out insb (bad) ja push outsl fs adc add adc cwtl data16 fcomip (bad) sub fisubl nopl inc mov xor mov jg sub push test dec pop into fstpt loope jmp jg cmp push int roll jmp mov icebp test jb out rclb or pushw imul dec and push xor mov lret enter xor mov xor push mov out insl dec jo fabs cli fwait and fdiv lods fistl in in adc in frstor xchg arpl fs jmp sub adc jecxz pop mov jne loop (bad) jo fnop xchg pop ret into mov pop shrb daa out inc mov popa in mov psllq loope (bad) and into imul movsl inc add jo push stos sbb shrb into jl inc rclb or sub sub loope mul mov or sub lahf aam pop push xchg fcmovne out push or cmpsb dec addb jge fisubrl jae mov dec pushf lock rclb or dec nop idivl dec out xchg test inc and test or test fbstp loopne sbb stos aam ss jge add loop cmp or pushf xchg xchg adc clc jns stc pop outsb dec fs jns cmpsb movsb scas cmp leave int3 std (bad) cmp sahf lret inc mov xor inc ja std stos pushf jp icebp xchg and xlat add jae or inc cmp mov (bad) xor aas jb stos lret lret mov lret mov je and sbbb jle mov lcall call jb dec cmp fs lret or stos lds int3 mov not xchg cli inc lret in mov repnz jg mov jmp sub xor repnz inc (bad) fiaddl mov pop pusha (bad) lock into cwtl (bad) es xor fstps and mov and les dec jns sub push in mov data16 push pop (bad) lods loope pushf and enter call cmpsl sarb add dec sub sti mov xchg aaa inc adc pop pop sti jmp dec fldpi or lcall mov pop or jne mov dec das jmp dec push icebp fcmovne mov dec mov repz add ja xchg cmc das ja jo iret sub test inc sub xlat movsb scas dec fwait mov scas leave movsb sbb lcall leave ja repz mov div mov jle jne idivl ss nopl inc mov lods inc push push int out mov fpatan sub mov pop (bad) xor mov xchg inc (bad) sub imul sahf push jg insl arpl dec mov lods movsl js call out rcr out out call fstpt add lock aas push add lods pop nopl jne and loope and inc aam adc shrl loop test jmp aam mov push jmp push adc mov rorl mov (bad) jo enter push cmc (bad) ss jp insb std aad xchg pop pop pushl sub subl in mov lods xor mull mov jae push das cltd adc push mov xchg dec int xchg xchg mov fidivl faddl pop mov push pop stos xchg cmp dec loopne sbb sar daa test aaa cmp ds in jl xchg push xchg sahf push xchg inc adc or fisubl fstl lock jmp mov ret fistl (bad) pop lcall cmc jae sar xchg mov out jle ljmp andb ret cmpsb icebp inc (bad) mov mov sahf xlat (bad) jae cmp jecxz push fdivl sub adc jne shr sub dec mov stos or xor push dec cmpsb ja inc outsl movsb xor mov scas aad stos mov mov fdivrp sub mov bound pushf mov ja dec add inc incb mov imul rcll outsl and (bad) or sub cmpsb popa outsl cmc and xchg mov mov shrl stos popa xor mov clc cmp lret add jg cmp rclb xor stc ficompl xlat (bad) mov jecxz mov add call sti stos sub dec daa repz scas ret or stos out jecxz inc in push cld xor mov test cli lock mov and jmp movsl pop imul mov or (bad) xor hlt mov cmp clc sub test add (bad) pop cmpsb push push mov and mul test add jnp clc out fwait cmp dec ret lcall mov call clc xor jb divps push adc lock je jle lods cmp sub dec jnp mov sti shrl or sub pop jnp jl inc cld das sbb sub lahf in jp push sub idivl insb xlat call jbe adc cmp jae and aad sub out repnz test pop jno js (bad) cmp (bad) mov int pop in dec or push jmp xlat xchg xor cmpsb or outsl mov (bad) jae fwait lock inc ds nop mov inc bound xor in xchg shlb lods inc insl fs cmp mov lea sub sbb dec repz inc push sbb fcomip testb outsl or movsl push imul sbb inc sti push loop xor loope xor jp ret inc xchg xchg xchg stc add repnz popa neg inc mov (bad) repnz in stc outsb mov nop cmp push fdivrl arpl aam jl out add cmpsl xchg jb mov nop fild dec pop test out mov lock cmp jae stc shrl stos jmp or cmp divl insb cld incl sub xor add sbb pushf mov add test jmpw or stc inc test fs sub das mov loop stc mov xorl dec insb mov stc out adc daa add js jge fwait dec movsb in and cltd (bad) mov movsb imul es mov mov mov mov push in fist in cmc push push imul (bad) dec test movsl lods test xchg (bad) adc xchg test xchg mov cmp mov jp faddl cmpsb mov push out mov scas and dec xchg mov sarb iret or cltd fidivl (bad) jo xchg movsb push sub lahf dec iret das sub into (bad) push mov loopne mov in decb xor outsb aam pop fdivr adc in xor jl mov call lret imul loop insl xchg push hlt clc xchg add jmp push add mov movsl jnp pop (bad) jbe in (bad) jl lea lods out mov mov jg mov mov cs std pop add sti popf mov cmp fs (bad) repz (bad) sbb rcr sti pop jmp nop sub or jge imul and aaa leave int3 cmp cmp mov repz or inc add push lock je add (bad) pop dec aam (bad) loopne and pop push addr16 mov nop pop and mov mov or mov or scas int3 in sub push je jmp jle xchg pusha adc inc movsb arpl ficom jne leave or test xor push ss test pop mov mov jb in enter xchg adc xor incb jp data16 cmp icebp jle xorb xlat dec mov loope movsb jns xchg nop lock (bad) cli and rorb mov outsl loope mov (bad) insb mov xchg sti lods pop or mov mov mov mov jb mov mov daa rcrl jge inc mov jnp adc jo dec sub (bad) cld mov aam pop jecxz scas lods stos pop aam and xlat rorl lods mov fiaddl pop icebp pop sbb xor inc in push cmp outsl pop ror mov cmp test pushl sti aaa pusha or stc mov push repnz ljmp cld jmp or in inc stos mov adc cli jmp fninit stos test daa cld mov (bad) sub or xor inc fisubr inc test or push in imul jmp lret fistl cmp fstpt inc push sub aas icebp jno out repz jns movsb (bad) mov outsl enter pop icebp test (bad) xchg icebp imul mov sub std sub mov sub push outsl inc shrl sbb test stos cld and das loopne (bad) movsb ret cmpsl and pop nop pop out (bad) pop mov popa call pop mov dec pushf roll pop push dec cmc clc add out das sub dec add rolb (bad) xrelease or (bad) dec mov repz jecxz cmc push popf int3 cld xchg mov mov imul repnz movsb stos pushf mov fstps repnz fnclex cmpl xor pop dec repz ljmp jmp pop lcall divl outsl fcmovbe jmp jae jp cmpb ja xchg mov mov lcall ja les fcmovnbe mov jnp enter sbb mov cmp xchg loopne xchg repz or flds out hlt push push repz stos pop iret fsubrp popa push dec push inc pop insl shll lcall push in cs or (bad) lret fmull iret sub or xor sbb in cwtl outsb test add jne cmp dec std jge ss (bad) leave cmp cld sbb push and out movsl pop scas rcrb inc cmc loope mov decb cmp mov rcl icebp push mov clc xor js out test das out stc adc push xor mov cmp fyl2x popf adc cmp (bad) int add mov xchg clc int3 jae punpckldq sub push test sbb xlat movsl mov dec out imul dec sbb jae addl jnp sbb jmp and int3 loop outsl imul mov jmp test mov into in aas movsb inc jmp rcl or dec adc pop cwtl xchg xchg popa mov adc test (bad) mov dec arpl popa jb loopne scas or rorb jp inc aad dec fild mov jmp fwait ja cmpsl (bad) imul lcall mov insl adc inc pop popa jno movsb mov arpl dec jae xchg test (bad) jb ja adc (bad) mov add xchg push mull stc notb adc aas and (bad) out pop mov cmp pusha inc push movsb xlat jo mov lea mov insb addr16 stc or pop inc inc xlat jle test movsl sub jno (bad) fcoms inc gs subl mov insb (bad) cmc scas in out push lret ret xlat test xchg sbb fist xchg sbb mov push xchg jae jmp push mov mov aaa rolb push movsb pop js (bad) mov inc aaa or rep and sar addl inc xor jmp ss push jl gs mov cld mov lods inc push sub mov dec test adc insl push pop arpl jg daa in outsb pop lods cmp xchg xchg xchg cli hlt add aaa xchg js add ror (bad) cltd stos leave int3 push sarb repnz ljmp daa clc mov cli xchg mov xchg stc fldcw shll adc lock imul cmp push mov aam jp mov push mov sub outsl push loopne push push aas popf push mov dec jb fcmovnbe cmc insb movl pushf iret jl roll push (bad) push adc fs das (bad) mov lcall fimul pop lcall jno rorb ljmp xor mov leave out cmp jbe cmc jae cltd add imul hlt jmp xor adc pop cmp iret xor mov repz adc rep out repz jp fbstp jbe in jae ljmp jle mov mov stc in xchg in xchg cli cmp or iret mov xchg jns lahf push sub pop scas stos jl pop jp sbb pop fcmovnb xchg dec mov adc ret (bad) ror ja repnz lods xchg adc push sbb fwait inc mov out push enter fstpt inc jle fldl jmp (bad) sbb mov subb jo dec (bad) icebp push stos xchg push scas xchg pop or xor pop or repz lahf adc scas test cli movsb dec es sub sahf pop jo adc push push jbe fwait aam mov xchg nop popa fisubr sub lret inc scas mov aad push lcall and (bad) jne loopew mov cmp arpl cmpsl mov (bad) outsl rcrl std inc and shrb cmpsl repz aas cld pop mov imul pop out cmp (bad) rorb cld in sub pop push hlt data16 cmp inc push cmp int3 dec movsb mov pop push ss insl mov xchg jb lock scas sub into (bad) jg mov daa in out movsb movsb cmp sahf stos jae lcall movsb xor add stos movd gs adc incb movsl rcrb test cmpsl pop test mov adc stc inc stc addl aad cmp ljmp fwait mov loop popf xchg fdivrp sub in or jo std inc pop cmp mov mov imulb lods dec iret enter jb (bad) ss lret popf int3 lret lahf lcall inc cs std pop inc into add add mov jae dec adc movb push (bad) repz mov push mov iret xor xchg scas push mov adc pusha sub arpl adc imul fs aad ja or adc out fcom rcrb or mov out stos mov jmp sarl pop imul inc and movsb out lods lret add adc loope xchg sahf das push jg xchg jge and popf lods out push cmp sbb rclb ret pop cwtl test dec (bad) loope xor jo (bad) jmp (bad) cld push ljmp lcall mov (bad) sub inc cmpsl xorb or (bad) out out cmp or jmp (bad) pop popa out xchg push xchg je dec sub cmc mov fisttp daa iret xchg gs push push loope or adc stos cmp (bad) jno jno lret outsb movsb repnz dec cwtl xchg jo cld imul lret and outsb loop popf iret fcomp inc and sub jnp lods mov jmp sbb nop test in cmpsl and jmp pushf mov push into popa jbe sarb cmp add jns sub xor in movsb jns fisubl sahf push mov test leave jno lahf lds mov jb sub movsb dec push call mov pop clc lahf dec int xchg sar dec or das jl push fimull out fisubl mov dec adc pop sub out imul sub lods movsl cld pop or jns movsl xor inc adc or call jne mov cltd sbb mov gs xchg push out adc sbb jne out stos ja xor aam leave rcll sub cmova sub mov mov lock stos mov fnsave push jle sbb jbe je lods aad jg ds outsl scas mov sbb cmp je cltd (bad) cli push push out jb xchg xchg pop mov or jecxz (bad) jb jno push mov xchg cmp jmp in fsubrs mov mov dec push repnz ja sbb jmp add adc and jo ficoml pop aas cld lea ja test stc aam ds ficom repz test in jmp orl pop mov xchg xor adc jne cld test in xchg lret imul push dec out enter adc pop stos lods (bad) push arpl (bad) jo fcompl leave and adc mov push scas in dec jmp popf fnstsw lock jmp sarl cld xor mov jnp imul jae cmp movsb (bad) data16 inc fwait std stos cmp push inc mov loopne (bad) pop ja xor (bad) mov stos test popf sub rcr mov jne add xor pop adc dec test stos xchg sarb push or inc dec add mov mov lret push repz or sti addb jb stc cmc adc or sbb cld mov lods or sbb add fldcw dec aam fcomps popl pop adc lock push fnstenv push and scas sbb (bad) xor cwtl add mov fiaddl xor cltd dec jmp add clc adc paddq repz rcr fidivrl pop aam fldt lret fs inc push movsb out leave lods cmp or in pop rolb clc sbb xor cli incb cltd out mov sbb pop pop sub mov add push add fwait inc (bad) popa xchg mov push or rcll adc dec sbb push mov movsl mov in and shl movsl outsb mov cmpsb xor push cmp outsl sbb rclb mov shl int aam (bad) jb or jo sbb xchg jmp shrb push dec or ja arpl jmp sub test mov mov ljmp xchg xor sbb (bad) repnz fnstcw data16 cmp dec xor and ficom cmpsb sbb sub imul mov or mov dec mov xor dec jecxz lea popf cmp pop test mov imul repnz cmovle pop mov xor clc fcomi xchg mov mov jb cmpsb in sub addr16 test lds decb loop je xchg xor (bad) not mov lods adc movsl adc mov add xlat xchg fistp mov (bad) stos bound jg test and or in fmuls push mov pop sarl cmp inc mov mov mov jmp sub leave mov (bad) push call mov in adc pop push xchg scas (bad) stos dec xchg in jge pop cmp repz ret jnp lahf xchg cmc inc jo xchg (bad) xchg (bad) icebp clc push (bad) movsb call mov cld cmp repz push xchg bound mov push jbe push out js dec leave cmp jo push dec or das pop jg aas mov fmuls push out outsb cmp fcomps pop fstps sar movl outsb push movsl or out xchg sbb loop lret adc outsb xchg sub push lret (bad) cld xchg ret sbb (bad) lods add mov enter sbb inc mov rcll dec and test mov jmp push aaa adc and popa pop pop cmc and sbb lahf into divb mov dec cs push mov rorb and or jle mov imul stos idiv imul xor pusha cmp cmp inc call dec or xor cmp push call jno cld sbb cmp call mov mov xchg pop xchg out or inc lahf pop push mov bsf lea jge popa or xchg lret iret or mov fsubrp jmp and call cwtl fnstcw mov push addb test fwait push jl pop pop xor imul xchg jl mov cmp iret sub fistl add xchg mov movsb loopne dec jnp movsb imull pop shr push cmp jnp mov xlat mov jmp dec jmp lahf jecxz push push cmp xchg xchg jle cmp ret xor out rcll push jbe dec rol cmp jecxz (bad) ds lret or xor loope in shrb lret adc xchg and in imul flds and mov shl scas pop sbb outsl int cmp outsb mov subl jno aam sahf ret push rolb mov sub or adc ret subl into or ljmp rcr push mov in xchg mov out ret xchg and fcmovbe sbb lods test dec lds jge jg mov (bad) jbe jp xor dec add out clc xchg es adc js pop jmp adc fisubl adc and fstpt adc in dec clc or fidivl push lahf jl scas mov push add and jmp call inc addr16 pusha test stos jbe adc adc cmpb daa xor xor mov shll sbb inc stos fstpt cld stc movsb inc push (bad) dec mov cmc jmp out push insb insb xor movsb mov cmpsl pop push test xchg xor mov lahf pusha popa out (bad) iret cli mov mov mov imul pop int3 flds cmp repnz xchg dec jp repnz scas cli int adc inc cmpsl into push out ja fs popf xchg xchg jmp mov xor fistp pushl aas jle pop adc daa (bad) cmp cmp jle fiaddl fidivrl jae push and repz lods mov popf dec mov xchg push lds movsb pop jg and dec shrl scas outsl sbb rorl mov outsl adc pop dec cmpsb iret movsb arpl jmp inc xlat add in add adc jns dec icebp xchg or ja adc mov adc shrb jns icebp xchg mov jbe push fsubrs pop xor outsb andl sbb lret sarb out sub push pop mov ret push fstl xchg xchg mov push addb jecxz div cmc xchg adc jge xor mov mull outsb mov or stos iret jge lret repz jp (bad) inc repnz mov (bad) adc into mov in sub add xchg mov rcr movsl into xchg jmp scas and fcmovnbe cmp rolb and or mov adc aad mov jno inc je sbb fcoml loopne (bad) stc dec ljmp fisubrl xchg fadds fisubrl mov js cld cli mov ss mov addr16 or adc inc (bad) call xchg mov loopne rclb push push iret xchg add fsubs and jnp xchg adc lods sub icebp out ss sahf pop mov sub movaps or pop jb out or fs int3 dec xchg aas daa subl bound adc mov cmpsb adc (bad) pop lods in imul flds inc jb mov inc push (bad) cmp int3 add scas inc inc sti (bad) jbe test pop lock addr16 xchg pop daa ja mov iret mov mov mov xchg call xchg pusha xchg xchg jo push cmp add lahf imul ficom jg pop lods sbb push mov aaa cmp aaa ret jo and cmc test nop jbe enter rcll jg aad inc add ljmp imull fxch andl jb dec daa fistl (bad) inc cmp (bad) fmull addr16 incb lds loop (bad) iret pushf (bad) jb push int3 iret test int lcall scas push sub push rcr mov mov sub push sub fstp addr16 icebp sbb mov mov mov xchg orl jl jb sub (bad) adc adc aad mov daa jns add or inc push sbb ficom ret int mov xchg xchg and scas fwait rclb mov ret jmp js xchg jecxz adc fwait mov mov leave iret incl jl icebp (bad) (bad) iret dec aaa iret inc mov and dec nop call xchg out sub xor jecxz lahf test and (bad) hlt outsl xchg imul cwtl xchg lods xor mov scas bound rcrl fnop mov add jb sbb addr16 adc jge (bad) shll in mov lods and lcall fbstp fiaddl imul or into arpl or mov mov cmpsb imul push into xchg out imul jnp loope dec (bad) jns mov mov jle data16 call inc cmp adc inc cltd sbb push (bad) iret sbb jge adc ret inc icebp andl adcl sbb add mov xor sbb lret scas sbb leave stos movb jnp xor lock mov mov pop popa xor ds mov cltd imul (bad) jle jecxz,pn cwtl dec jg xchg sub clc pop jns jae movsl mov mov jb jg push or or xor or test das lret cs xchg sub lods xchg stos imul mov dec xchg xlat adc or movsl pop in cmpsb add mov insl inc xor ds int xchg push adc (bad) mov cmc movsb and jne fiadd in repnz es iret mov dec stos mov int3 jns xor sbb cmp lods mov shlb sub pop sub lea js pop sub sub addr16 popf mov call fildll lock cs test sub jb jb hlt out cmp add sbb out popf mov and int3 sbb xor imul pop xor jns jb das xor add inc icebp stos inc dec push shrb out xchg shrl jge push adc inc ss mov dec loop jg fistpl bound jmp aam push das repnz sahf jl pop stos ss int3 adc ljmp ja out lea movsb xlat mov sarb in jbe cltd xor pop mov mov sbb inc cmpsl aad mov push mov arpl repz mov cwtl (bad) pop aaa inc add int3 xchg dec out pop pop mov les scas rclb aam jbe aad ljmp mov jge jp sahf mov xor push imul adc lret mov jbe int3 test and cmp push push gs and ljmp mov movsb jp push mov mov imul inc (bad) lahf adc into pop jmp cs lret push jmp out ficomp movsb xlat es hlt out cmp or mov iret (bad) sbb sub cmp clc js std out or (bad) stc ljmp dec movsb fistl test ret and adc loop jnp ja leave jo das aam out mov cld jno cli js mov sbb movsl rcl movsb int push add mov hlt sbb fstp test add jb pop int3 dec or pop cmp aas push (bad) adc xor ja idiv adc pop push xchg insb leave iret fldcw or cwtl mov xor addl mov int add pop xchg imul cmc inc leave cmp xor insl aaa cld or inc push inc stos jp popf jae mov leave idivl fldcw xchg or (bad) cmp mov dec aad adc int pop (bad) fnstenv outsb inc adc cmpsb pop call adc bnd jb cmpsb (bad) mul outsb inc test (bad) sahf mov int dec ret jmp mov in jno (bad) (bad) cld lret cmp xchg mov (bad) or mov shr dec and jno mov jecxz xor stos movsl add and les jge in addr16 pop dec fxch xor in lods stc adc movsl xchg pop push out loop movsb jae stos (bad) cmpsl iret les jne jae lock adc outsl push pop repz imul cmc pop xchg leave mov mov icebp ss dec push sbb stc xchg iret test mov pop fs rorl sbb cli enter cs push pop add or hlt movsl mov popf push mov sbb jb mov adc sub pop (bad) mov outsb scas jle (bad) xor int fsubrs stos outsb cmpsl fldcw xor pushf aaa imul xchg loop stc fs mov stc fs js mov cmp std rolb arpl push mov test or daa stos nop jb mov jl insb or mov movsb gs arpl imul mov aaa cli jbe jp mov lret jg data16 dec and outsl or mov jns (bad) idivl mov cmp in cli push xorl fldl2t add in jg xor add daa icebp fcmovnu test mov call cld rcl outsl mov adc movsb and cs bound pushf adc test rolw push (bad) push jp jle (bad) sahf loope outsb gs cmp in ret sub scas ss iret iret scas pop (bad) loop sub cltd mov and mov mov pop ret sbb pushf fsts stos mov cld jle mov nop add mov cmp mov dec nop cmp loopne inc sub aas pop mov arpl out xchg aaa icebp cmpsb mov scas mov adc xchg popa rcl add cmp aam xchg cli pushf sub jecxz inc nop movsb cltd jmp lret push add loope loope sub popa loopne fild jmp mov xor out lock popa and std (bad) xor movsb aam adc jmp jb xor sysenter stc daa ret pop insl jmp cmp cmp push popf push cld mov jmp xor jl jecxz (bad) sbb xchg call mov adc in lock jae pushf gs cmpsb inc mov mov fwait rclb imul pop cmp push loopne scas sub leave insb cld rol inc sbb inc xchg inc ret cmp cld xor pushf ds push push push mov sti into add mov cmp loope in dec call mov xchg fucomip mov ljmp mov xor and cmc mov mov (bad) xor out fisubrl fs cmp add scas or pop xchg fisubrl dec mov xlat icebp inc jle mov pop cmpsl cmp popf inc (bad) imul cltd adc rclb xor test jmp cmpsb xor mov pusha das push inc xlat out or popf cmp sbb mov push sbb out adc fildll call fstpl lcall bound pop xchg or div imul out xor jecxz out int3 outsl (bad) enter pop stos in pusha (bad) push jo out push pop pop daa (bad) xor fsts jne cmc pop dec sub aas mov out jo adc dec cmpsb icebp sbb jecxz and lods and mov movsl lahf shl xchg scas cmp in jno jns cmpsl dec aaa lods (bad) push xor add push lahf lret push aad xor xchg aas adc lock mov push lahf shrl sbb mov ja push pop dec aaa jg loop pop dec add adc jns mov xchg fidivl or add xchg call (bad) fimull lods js hlt in sub pop int3 sbb (bad) out outsl sti sub jno ja xchg movsl xchg xchg xchg pop pop pushf scas scas add or (bad) jae jne add cmp sub mov ja stc adc popa xchg lcall pushw add leave data16 adc mov outsb shlb ficoml mov idivb lret (bad) aas testb fldenv rcrb ss sarl aam in rcrl jb sub cmp into push jl sub xor mov leave (bad) jg lret adcl into lret stos test jmp mov push fs lods xadd jmp shrb sub fnop jno repnz add dec jmp jae dec mov fldl std or out (bad) cld faddl outsl jne addr16 pop mov lods mov or lret sub xchg push jae in insl mov mov push mov inc xor mov rorb mov jl flds add loop stos ret ljmp or or fisubrl daa into mov fbld shlb xchg ds xchg lahf jno sub ret xchg mov andl xlat xchg pop xchg mov rcll dec dec or cli hlt mov mov add mov mov cmp loopne adc (bad) cmpsb mov mov mov sbb pushf mov or push lods (bad) push jle in movsb scas js mov mov cld arpl mov xchg dec ret decb call sub (bad) jo cmpsb fstps in dec bnd xchg cmp mov int3 pop cltd jb jnp add xchg mov sti dec lea xchg call iret jbe add xchg sarl dec nop add imul jmp push sbb imul in mov or shlb inc imul aaa and jg cmpsl cltd fldenv xchg cltd (bad) in or fildll xor pop in jo mov not movsb (bad) loopne mov jae xchg xchg stos nop hlt mov clc ss mov stos mov inc lret xchg xchg int3 pusha mov repz cli jae mov add call fwait mov data16 sbb pop push push movl xor test stos adc mov fs adc mov push sub add xor mov mov mov xlat push adc xchg ret and movsb pop add or lahf and dec xchg orl adc imul dec mov jp sub inc mov cmp mov add in cltd mov pop xlat bound dec sub jb dec mov aad iret inc loopne lods mov subb (bad) out sub cmp test repz fcmovne push rolb or jae xchg outsb xchg icebp jb in (bad) xor imul pushf or cld jecxz,pn pop xchg es mov call xor ljmp jge xchg dec iret push lcall cwtl bound pop sbb popa pop lods mov in jo jp stc hlt jecxz mov movsl nop jae movsb je adc mov jge jns cmp adc mov or jp lcall nop jae inc mov jmp clc int cmp dec enter movsl fcmovnb mov stos aad mov out ljmp or jecxz mov lock (bad) incl out int3 dec dec fdivs fnstcw jge adc shrl repz cmp xchg cmc jae stos ss imul subl adc mov xlat out stos adc (bad) cld mov jb out mov (bad) xor mov jmp cmp jb popa scas outsl dec and loope and gs adc adc mov stc sub dec adc daa addr16 jno loopne lods out addr16 (bad) or push test mov cmp in xlat pop xlat add xor (bad) test (bad) imul mov aad mov sbb xor sar insl aam popf out cmp mov xchg sbb daa fnop popf mov outsb push movsl stos shlb mov mov jg out cld lock inc mov and clc jo jecxz sub aas gs outsb mov xchg imulb sarl ret test inc xor and cld in mov or mov popa pop xchg cmp mov jecxz out rclb pop cltd pop (bad) jle push into jecxz hlt std ja inc aam mov data16 (bad) movsb xchg cmp (bad) repz jl adc jnp fist enter rclb (bad) mov jo cmpl bound iret mov xchg pushf mov and imul pop popf or pop dec mov int3 lahf loope sahf xchg popf jb xchg out jmp int3 in xlat bound pushf pusha inc ret xchg aam icebp lahf das mov out (bad) xchg lods push lds test (bad) hlt lcall adc insl movsl mov mov cmpsl mov lcallw rorl add leave loop cmpsl stos loopne negl notl iret xchg jne jle mov cmpsb cmp mov and xor rcrb mov fist push icebp jecxz fisubr dec xchg cwtl add dec in mov ds jo mov shrb enter jmp int push out dec dec and cmp dec xorl xchg inc inc lods clc out outsw int3 adc dec jg push mov das xchg xor rcrb sub xor jb out xor add into iret add jecxz dec sub das push xchg popa (bad) xlat mov je dec add (bad) std arpl dec xchg mov in pushf or cmpsb xlat aam cmp cld je out fisttpl pop jmp xcrypt-ofb cmpsl out mov fiadd jecxz jbe add xor rolb aaa sbb negb in in inc jmp adc call out insb hlt inc and inc cli in aaa fstp add and push fs or xchg (bad) aaa xor push push push jge sbb xchg jecxz jge jmp test enter aas lods ffreep mov mov jge leave mov inc mov xchg mov or pop ret mov (bad) sbb int in xchg stos push add test sub cwtl adc rcl sarb rol (bad) jmp sub pop jnp outsl ds adc xor sub dec add adc cmp push rcrb xchg jp push fistpll pop clc popa xchg or ljmp orb xchg inc iret fnstcw mov xchg inc jmp mov sub sarl in mov imul mov (bad) test fs dec rcll fwait add int3 aas lcall shrb sub inc dec dec lahf (bad) or or icebp lea out lock mov jmp xchg xchg cltd js jecxz andl mov pop jmp (bad) cmp pop icebp xor adc outsb cmc (bad) cmp push fistl stos in jae stc into jge addr16 repz mov adc test cld incl in movzbl pushf mull jb dec or push jl jmp sub mov push out or dec mov jp lea ss (bad) arpl idivb iret (bad) jo outsb out std pop mov in xor xchg ret mov xchg clc fsts mov mov fwait add inc cmp dec pop push rorb xor mov movsl or mov cld push fwait mov adc pop rcrb (bad) imul cmpsl adc fcmovne fstpt insb stc lcall pop xchg sub mov mov sbb or popa test adc mov mov pushf xchg mov adc sar mov aad pop mov in xchg rcll lret mov cmp jge scas push notl dec out jae lods test mov stos ja or sub das sbb scas push (bad) leave lea (bad) movl addr16 (bad) rcrb adc in xchg inc popa iret lods ds aaa out lods adc inc int insl mov xchg mov xchg sub mov dec bound cmp pop mov push lea imul (bad) int and push daa sahf xchg xlat rorl and icebp out add out jne shrb jge jl jae jae icebp mov xchg xor jecxz pop jecxz xchg test pop (bad) call pop ss data16 xor cmp add jecxz pushf aaa mov imul (bad) aam adc call outsb mov dec cs (bad) hlt je (bad) cli lea andb insl mov mov outsl ja (bad) enter nop cmpsb jmp in out leave lahf and pop mov lods test lret add adc sub imul aam pop mov xchg (bad) (bad) xor stc imul xchg std ret in xchg mov adc mov jecxz jecxz dec and push ljmp mov rolb push push adc lock (bad) mov mov or in mov jecxz add xchg jne inc cli scas rcll sub movsl aad jle fildll (bad) cmp xchg ja,pt jecxz xchg xchg (bad) jge lret jp push jecxz mov addr16 push addl or pop mov dec adc ljmp rcll cmp jbe (bad) mov into test xor out fs fmuls fistpll xchg inc scas xchg out int3 outsl aas mov fsts ret les mov jecxz cmpsl pop sti mov decl or inc mov dec sbb push rolb leave pop iret xlat fistpll xor nop sbb push in je nop cmc outsl sahf jns adc pusha mov cmc xchg negl lods (bad) aas movsl dec pop or jno daa aam add adc jg jns loope insl and test and xchg cs jb xchg mov mov inc fwait out lods mov mov sbb mov cmp add scas repz xchg mov mov xchg push mov leave xor iret lret xor jmp repz int3 add and sbb push xor cmpl cmp mov adc cmpsb stc notb ret jl push pop call lahf or leave into mov (bad) push add mov dec outsl in mov (bad) cmc fsubl inc aam fwait mov je xlat mov mov scas fisttpl cmc and adc fwait pop add test push out out mov cli ja jge inc and (bad) adc in js adc and fistl xor xor (bad) adc call arpl dec jns pop push pop dec mov je rorb sbb test push and leave hlt sarl movnti cmc sbb or xchg dec ss mov push push jmp dec rcr cmp add jno aam or lea addl add xor fstps pop mov xchg dec dec xchg bnd mov xchg add cmp add xlat fwait cmpsb mov mov adc dec adc inc mov cmc mov imul jge or mov dec mov sub mov cli or xor add inc les ficom rcll jmp setp xor das add mov mov jae dec or lea imul adc fild (bad) and inc stos bound mov cmp into dec outsl mov mov pop test and enter pop fidivl ret cld push mov cmp or popf push sti mov dec adc dec movsl (bad) test movsl xchg clc xchg dec mov push (bad) pop fcoms clc jge adc push aad mov pop push dec lahf test xchg dec mov in (bad) pop mov mov mov push rcrl cmp (bad) jne adc mov sbb fidivrl dec mov pushf and xchg cmp int3 nop enter rcrl call cmp mov (bad) cmpsb add lret pop mov insb mov fbstp sbb jp jmp jae cli mov jecxz scas js icebp pop pop pusha scas or adc add mov into mov pop (bad) lahf mov js jb mov or xchg (bad) xchg dec notb sbb call xchg das iret dec pop or loopne and loop stos movsb in or lods stos mov add call pop mov daa and out es xchg jns adc imul jne jo out movsl xor iret cwtl mov mov insl pop addr16 jns repz lock xor mov movsb jge popa lahf jmp repz pop dec mov mov fnstenv pop or lret adc fild (bad) iret pop popa jo cmpsb mov jmp pop loop (bad) div in adc loope cmp xchg or cmp les or stos test andl pop pop xor int3 sarb repnz xlat div jb push fsubrs fdivr mov mov stos xor lods stos xchg xchg jb shr popl rclb fsubrs mov stos cmc mov int lods mov iret inc cli push outsl ds in mov mov sub add push push lret dec cmp enter inc rcll pop orl ljmp xlat push xor ffreep ja or repz repz mov in sub mov xchg inc (bad) or call cli fisubrl push lock je cmp cld clc adc mov das lcall int3 sti ljmp xor add jns fstps aam jmp fsubs stos jmp or mov lahf es xchg arpl xchg repz jno ret lock sub ja aas mov add jb jbe xchg jecxz jl repz xchg mov int3 cmp xchg insl add mov movsl ror stos pop int3 pop insl fcomp std pop loope adc mov insl arpl (bad) jb insl (bad) (bad) gs push mov sbb lcall out cltd mov sbb xchg (bad) adc adc xchg dec push mov mov mov xchg xor cmpsb lea enter incb fstl cmp push jmp jns (bad) repz idivb jmp test and loop fisttp sbb movsl dec cs xor xor cld aad xchg mov push xchg flds cmp sti mov outsl jae movsb or xor xchg aad into mov loop add in mov ds adc movsl jnp dec push pop in sbb jp mov andl js xchg rolb outsb test adc xchg ss mov mov in repz clc jb stos test shrb mov mov test mov movsb mov outsl jmp xor mov repz adc jge xor ret pushf test adc push insb push xlat lea mov pop outsl addr16 mov jmp xlat repz in xchg test adc xchg iret test fistpl sahf sbb js sub sarb pop mov test lock jg mov adc pushl jnp inc ljmp (bad) mov mov jmp in mov mov int repz pusha xchg push loop movsb cld cltd sti mov rcll aas leave mov inc jo stos aas cmc add pop pop xor into add jecxz movsb pop push inc add dec cmp lods jbe or mov xor pop decb clc std jnp mov movsl out jecxz stos je push sub cmp cld (bad) lcall imul lock jno dec cmp jge repnz xchg (bad) out sub ficompl gs sahf jecxz mov ret jmp xchg lods pop inc pop mov push clc xchg popa pop jo outsl cwtl aas add pop and shrb pop mov rolb rolb mov or enter jl nop repnz jmp in ds sbb sub adc fistl mov and cmp lods clc or xor push mov stos push push in mov pop (bad) xor in pop sbb inc push out cmp xchg (bad) call mov nop pop cltd and dec mov out mov movsb in adc sub repnz lret jmp or cltd call mov aam mov call adc fildl or jne inc lret mov sub inc stos pop lcall mov dec lock lcall fwait inc lods sub push lcall jecxz outsl jnp pushf sub jo xchg mov dec fmul inc int3 adc or fildl lret nop xchg ss mov loope daa dec jo test xchg jp cmpl rorb mov cmpsb mov arpl xchg xor dec lds sub xchg mov mov es jmp mov add cmpsb jl inc dec loop xchg and stos fwait mov fwait lcall rcrb pop loop fisttp and aad mov inc test or adc xchg aam cmp out adc int3 nop push js outsl jmp dec (bad) pushl stos insl iret cld dec xor xchg pop jle insl lahf mov adc addb into les nop add fimul sbb dec jge mov cld mov aad in jo imul pop enter cmpsb mov jle mov mov xchg mov lock xor mov aam ret std out pop fdivl (bad) pop lods fldcw test push test jb fwait mov movsl lock lret gs in (bad) test xchg pushf inc rcr cltd mov push fiaddl xchg inc das (bad) pop movsb lret mov cmp cs dec xor lea mov cli (bad) sahf (bad) (bad) movsl dec sbb icebp ja scas lahf outsl jmp push iret inc cmpsb cld outsb inc mov dec push or adc jmp (bad) (bad) es jmp nop inc sti sub mov clc dec in push (bad) mov cli sbb mov sbb lahf dec xchg lcall mov in cmpl mov fs lret in in ret (bad) sub rcl leave adc or iret pop fcomp jl fnstsw loop cld out sar clc mov pop testb push jnp jmp xchg sub dec (bad) aam mov es fwait xchg arpl xchg xor cltd adc xchg pop fcmovnbe xchg jmp xchg mov xlat call rcrb loopne adc add xor xchg jmp repnz mov movsl (bad) fcomps nop je (bad) jno jmp xor cmc fsubr xchg int3 imul lods push pop iret pushw ret and imul dec pop cld jns adc jo sar arpl cmp rcr aam xor xchg jo jl (bad) mov push hlt sbb sbb jb movb jb repz cmp jmp xor or mov sbb fisubl leave lret repnz xchg cli in jb adc adc out xchg int3 out xchg in repnz and push lcall mov and inc cli ljmp shll jg mov fwait enter mov push xlat addr16 add fwait mov je cmp sub xchg pop dec mov xchg aaa in and cwtl ror jnp jne mov xchg movsl insb sahf mov ljmp push mov je xchg stc imul xor jmp add je or mov mov mov (bad) jge xchg insl pop movsl pop lahf mov push push ljmp adc push sbb adc push xor mov jae mov mov aaa add dec inc add fiaddl inc fnstcw cmp adcl lods dec or divl xor cli imul (bad) jo shrb ficoml mov int3 (bad) mov pand sub inc mov hlt (bad) ds jecxz mov xor pop xor stos cmpsb and pop push into in or xchg adc movsb mov mov jbe lret pop xchg scas cld add mov clc xchg aad (bad) stos push xchg jge clc mov (bad) adc movq mov xorb js jnp imul sbb sub fstl mov ja in outsl xchg jg push loope sub lock rcll inc (bad) jne add cs dec jg test mov mov out shll sbb je add mov adc shrb xor shlb cmp aaa push xchg mov inc movsb jae call cmpsl cltd mov cmp mov movsb and pop mov mov inc mov xchg adc icebp mov test pushf mov cmp add or negl or push pop in mov adc cmp ljmp rcrl adc add lret dec xchg pop sbb adc adc push ror mov mov push dec gs pop cmpsb enter adc push lods (bad) mov sbb ret in xchg call cld xor ljmp mov enter in sbb mov push (bad) xor in sbb jo xor test aaa imul jo ljmp mov subl mov xchg xchg sub fwait bound pop (bad) jae push mov push popa jg imul sub rcrl jo inc stc rolb js inc (bad) pop dec inc mov xor fnstenv fcoml dec adc and mov jnp xchg jge aam and cmpsb test adc push iret pop mov or aad push cmpsb stos cmpsb adc sub lea iret mov push push (bad) fcomps (bad) mov push push and imul lret stos jmp jecxz adc push cli (bad) mov leave leave jmp push divl and xor mov inc add cmpsb leave add sbb jne loope mov aam fistl sbb (bad) fist xlat xchg jmp mov in push mov pop lcall rclb (bad) iret dec adc cmp (bad) xchg iret push ljmp lahf and pop push in out out repz subl and in dec (bad) or fucomi clc div stc sbb inc aam enter fpatan imul (bad) jae out cmp inc sub shrb jge jnp ret ror sbbl xor cli jp shrb clc add cmp adc lea mov std mov dec pop das inc nop lock xor sub jno pop loopne adc mov fildll cld lret mov adcl loope or rcll cmp cmp test repz adc repz hlt ja lds push xchg jge mov xchg jbe mov xchg push lahf mov push outsl int3 dec sbb idiv or and hlt in je sbb mov dec mov nop fsubs or inc mov or mov add imul jae fstps and pushf push out (bad) mov mov mov mov pop lcall aaa es mov dec stos adc cmp stos adc movsb iret and add clc lahf in jl clc add ret fistpl mov mov stc xchg notb push rorb xor mov shll xchg (bad) stos push iret jl inc or (bad) xor movsb sbb rcll xor clc rcr jg aam pop jmp je (bad) iret sbb mov or mov lcall bnd sub dec flds data16 xchg out call addr16 xchg scas repz ds lods loopne jns mov in loop and in shrb cmp mov fiaddl inc ja stos dec sbb in jno jb pop jnp rorb clc and sarb lret or mov push scas inc out ret or popf (bad) fistpll sbb mov lret btc mov xchg leave ret rclb ret jae mov in in int ficoml jne sub sub dec stos inc pop sub repnz (bad) fsts sbb mov push cli pop stc sbb xorl cmp and push loopne cmp clc je push sti sbb add xchg xchg out dec fbld lcall mov std cmp in cmc imul mov xlat aad xorb repnz jl pop out jb ret inc fs and sbb mov dec out pop loop lock in jnp fisubr or in xchg pop and scas arpl push dec and xchg stos clc dec cwtl xor pop lods gs xor jae push cmp cmp loopne jecxz mov add mov jae adc mov xor ljmp inc loop repnz inc mov lcall and inc std cli jl (bad) mov (bad) out xor adc aam daa (bad) sbb mov sarl and adc adc (bad) or or pop add les sub pop lret mov shl push sbb decb xchg or call lahf imul mov ja dec xor jno jmp stos pushf addr16 jo or sub enter test mov jmp std jo add fs ja xchg rcrl lret xlat ss adc pop (bad) cmc sbb pop clc mov imul cmp xchg in sub ja mov push lea cmc jo imul pushf push outsl pop jecxz push loope (bad) jmp lea test ds jge and ficomp add or or push cmc sbb xchg out pop cld push stos out sbb xor bnd cmp gs pop cmp int dec cltd mov jecxz out ret jae (bad) mov jg and mov push xor lret stos mov rcrb ja jge dec xchg mov ret imul (bad) cmpsb dec cltd (bad) cmpxchg test push es cmp cmp and mov lahf movsl (bad) rcl ja popa hlt cmp cli out jge mov les into mov scas mov lcall mov ds jnp sbb fstps xchg lods (bad) mov (bad) (bad) std pop dec xchg ret outsb fstpl ret (bad) xor xchg cltd loop xor jmp adc rol cs jecxz cmpsl cli (bad) jg adc iret add mov pop mov rorl into ret imul jbe or int3 cmpsl test add and out lret movsl in (bad) mov out inc mov xlat je cmp mov fnstcw xchg into cmp cmpsl adc mov mov scas xlat lahf mov lret add cs stos jno mov add nop idiv inc mov movl clc ss mov fs dec arpl fiaddl xchg dec repnz loop fild and std (bad) push loop fildll rcrl loop,pt mov push out push ja jnp add xchg sub mov rcl mov dec mov inc sub aam (bad) sti add sub cmp jnp fimull dec lret pop sbb (bad) data16 mov repz sbb icebp mov test aaa push mov xchg and add or lds fimull and stos scas xchg cs inc inc mov push stos lret xor dec push imul sbb pop sbb fdivs rcrb add sti inc cmp xchg xlat cli xchg xchg jg out push iret pop jae mov add or stc push movsl addr16 scas addb push xchg dec or or add dec in rorb mov inc pop mov xlat jno add shll add push jns imul imul mov and (bad) mov cmpsl int out stos sarb inc and nop xchg movsl std add fist dec mov jmp pop aad inc mov push outsl lahf leave lea negl cwtl lods test ret xchg scas xchg push repnz ja dec int3 mov and adc fstp xchg fcoml (bad) mov mov stc in adc aas ds rcr ds aaa gs sub and lahf and mov movb stos ds mov scas mov call popf jmp (bad) dec out mov mov mov xor jmp cld aad mov in adc and cmp dec cld std xchg ljmp movsb xchg jmp paddusw aas lcall mov fucomi popa lret stos (bad) out shr jg sub out imul mov (bad) sub stc mov (bad) mov adc mov gs or mov jmp jne mov lret lea push (bad) dec ljmp mov mov fisubrl aaa (bad) iret cmpsl js test scas ss cs jno pop mov aam push inc setge test test pushf cltd fisubl xchg lods test mov xchg imul movsb (bad) jae icebp notl push mov jmp push int3 imul fidivr insl jnp ja push jb test nop in out fsubrl push jmp loopne push dec pop mov mov pop data16 sub fwait pushf call lods dec test cmp cmp mov ss cmp jmp mov xor lret xor popf mov cli mov fisttp in daa adc lcall adc arpl xchg xor test pop mov fsubs into ffreep dec xchg bound or dec add adc fdivrl (bad) mov xchg adc out lods mov aaa rorb pop loopne mull or ret test out jns pop inc add jg stos test and stos aas mov push jle sahf loop cmp stc retw in ja mulb in add fistl lea and addr16 iret xor out jo inc jmp adc adc movsb mov out lds outsl mov lcall mov jge inc cwtl cmc dec adc ret fisttpll (bad) in loop shrd ja out enter in ficomp mov sbb mov cmpsb mov insl mov lret outsl ljmp out mov ljmp dec gs daa outsb xor aaa push adc fistl pop aaa imull mov int3 dec pushf inc push add ja rcll xchg fcomps repnz mov and fs in outsl dec add xchg lods (bad) adc jnp cmpsb movsb stos cmp sub cld mov add jge xchg jp shlb (bad) jle mov mov mov icebp add outsb jb aas stos sbb test jle pop int3 lods repnz incb jecxz popf lods mov lods mov adc mov mov clc movsb loop mov stos div add shrl xor popf xchg out add in mov and and or dec add xchg pusha orl imull iret out and das mov mov stos push pop testb sbb cmp mov fnstenv mov cmc popa xchg jmp stc aas mov test dec cmpsl and jmp mov cmp mov scas pop bound jecxz jecxz pushf mov dec popf call xchg andl cmp mov aas outsb imul test or push pop mov mov scas and in xor (bad) movsb adc shlb lret mov (bad) jg pushf xchg lahf repnz sub fcmovnbe sbb mov adc mov jle incb jae sbbb rorb jno fdivl jnp in movsb mov xor mov repz jmp das (bad) dec adc dec (bad) inc popf cmp or mov mov xchg inc jns lret (bad) jmp cmpsl roll (bad) mov cltd mov add jecxz mov dec sub adc adc (bad) scas jge jb adc mov sub lcall (bad) sbb add mov (bad) stos sahf mov stos adc (bad) jg dec mov std scas push mov adc daa cld jge pop jmp push je ror push inc jns lock aas fcmovu dec sub das xor xchg mov mov ljmp mov mov sarl sarb xchg into mov cmpsb (bad) outsb xchg cld mov stos mov cld push xlat imul lret out cs xor repnz in decl push mov (bad) xchg andl in mov in cld scas cs and adc in xchg ret mov xchg mov lahf (bad) (bad) cmp push testl in inc outsl jns rolb sub sub xchg mov test lret xlat lods lock push jae test sbb imul lret adc outsb add push jecxz (bad) jb adc or popf pop (bad) mov imul mov bound fldcw jbe rolb sahf mov dec pusha arpl push roll mov je jno push mov mov ds adc enter xchg push in push xchg add out mov out xchg in iret leave push mov pop or mov cmp adc clc push dec imul ret ret cmp lods mov faddl and repnz hlt inc (bad) ret jno xchg lret pop mov dec in jp pusha into (bad) std jge xchg fistpl out ret dec lret rclb sub in jmp insb ljmp adc sbb repz test add push xchg add pop inc faddl or sti jmp xchg paddusb mov cmp dec sub push sbb dec shlb movsb pop push rclb call repz inc xor lret mov mov push rorb mov xchg cmp mov push addr16 gs stc jge xchg dec gs ljmp in sbb jno insl lods lret sub dec mov mov push jecxz out pop lret sbb jle mull fsubrs repnz xchg and insl push flds jp enter mov jmp repz jmp mov cmp jmp shll pop inc push cli in repz mov js push test inc call xor aas or mov scas aam push xchg sbb add inc stos aaa inc sahf fisubr fs mov lods sar add mov std addl clc add imul lret outsb or fidivl (bad) bound iret xor movsb fdivrl xchg sub js les mov push mov mov repz inc aam rcll inc add mov inc dec test out pop dec sti stos adc pop (bad) jecxz jmp pop cmp negl lods pop push gs fistl pop or fs adc jb pop mov inc sbb mov xchg jne repz pop jge xchg dec fsubrs cmpsl in mov fildll aam add pop sbb outsl cmpsb sub test and adc jo mov mov lcall loopne inc mov in outsb shrb out cmp pop jno call sbb fcom fsubl repnz out in mov jae repz repnz add and fimul dec sbb dec push and push loop adc stos fadd xor xor rcrb mov xchg arpl inc sub lock fstpl cltd ds and andb test test dec fldl dec outsl test and pop cld fcmovb rclb out dec stos pop aad jb jnp dec int3 mov xor inc (bad) jmp or sub js sbb mov aas ja dec fisubl mov into hlt inc cmp push cmp repz arpl decl lea mov push mov scas out jge jo negl push mov jge mov inc stos jge pop lahf cmp loop lock (bad) jo dec test xchg mov mov pop out (bad) es pop cltd pop mov (bad) jns push pop ret jl cmp test push stos xchg gs aam popf push cmp jmp (bad) ja enter pop cmp or aam mov or and and in mov pop and inc xchg xrelease xchg mov cld push (bad) xchg dec (bad) adc fnstenv jns sahf or cmpsb inc imul out xchg mov pop pop mov jnp fist add jl and adcl test mov xchg jb (bad) mov rorb mov jge mov mov dec xchg (bad) out rep bound cmpb pop out fldt dec call dec ja jno sbb cli (bad) (bad) jmp sub (bad) insb fsubrs repz mov outsb out cld fsub mov or (bad) add icebp jp cwtl into lcall pushf lods aad (bad) ja (bad) (bad) cwtl jge xchg jg push je dec xchg add xor dec decl pusha scas sub jge adc add xchg addr16 sbb inc popa dec and sti nop (bad) sti jmp mov or cmpl cs popf adc arpl icebp push cmp movsb mov mov (bad) xlat push xor movsl xchg pushf inc push addr16 les (bad) xchg jl jmp jp lods int3 aad xor stos sarb int3 or aas dec or pop push out jb addr16 mov es aam cmpsb push ss dec cmpsl xchg mov call jge lret (bad) icebp add mov (bad) repnz mov jae pushl sub (bad) into or push jge mov lcall mov inc ds icebp inc data16 cwtl test xlat cmp add in lcall xchg repnz test adc dec outsb stos pushf stos outsb fnstenv mov movsb (bad) idivl dec lcall rcl in pushf mov mov fbld (bad) test test mov mov mov dec out enter ss cmpsb test imul mov stc jle adc pop roll dec push dec ja jle sti into jne mov out add sbb in push test push cmp mov (bad) mov push inc add outsl imul ss adc fstpt dec cmpl leave rcr jmp inc cmp inc xlat mov xchg jae mov cltd daa jb mov repz stos (bad) hlt xorl inc mov mov push call loopnew ja leave mov stc call xor ja and and xlat sbb in idiv mov jmp ljmp sbb outsb (bad) xchg test xchg getsec adc ljmp mov hlt ret clc inc bound xchg inc scas cmc xor cli inc rorl mov out xchg (bad) stc sub fld xor pop shrb and jb mov nop loop lods int3 mov push jmp cld out cld loope pop jg pop mov fs push outsl in in sar in sarl adc insl (bad) mov mov flds lods sub add aam repz (bad) and adc repnz aaa rcr xor pop call (bad) out mov xor add aam cvtps2pi test xchg stos imul ficomp outsl inc xchg sti pop clc push outsb repz ret loope repnz and push std dec rorl ret gs minps jl das pushl cmp xchg push int cltd jecxz or cli xor mov cmp out (bad) jnp clc mov andl inc xor pop jne movl rclb mov imul xchg stos sub jb into lds orb call adc jg inc aas push or cmp out call ret in repz inc and mov sub push or mov cmp orb shrb subl sbb in mov ret imul (bad) push gs idivb push cltd mov pop lahf test adc jno jmp add jl add mov imul ljmp mov mov dec (bad) adc das fstpl std mov jge fadd addr16 fidivr xchg ret (bad) mov xor push adc (bad) mov fcoms (bad) repz lea int xor cmp ss aam test mov pop lahf stos es addb fnsave and out adc push push stos pop (bad) iret (bad) jne popf mov mov sbb inc sub xchg fs sti mov mov xchg ja loop setg jnp call cmp and int lahf shrl enter xchg lock adcl (bad) ljmp and jb lea push sub jo test mov xchg popf aaa in adc xchg cmp mull cmpsl push fwait mov mov arpl out xor cld pop sbb incl int cmp scas xor adc pop (bad) xchg xchg mov loop fxch mov xor andl jo (bad) rcrl push (bad) jb mov dec xchg movl or xchg or sub cmc xchg mov jb mov mov xor adc in aad mov stos xchg jle rorb push into jg mov mov mov bound cmpsb xor mov sub iret cltd fs (bad) imul std cltd xchg (bad) fcmovnbe movsl inc das inc and and test imul test add cmpsl jb (bad) je es jnp jo jne mov jmp sbb lahf repnz aam xchg div xchg andb movsl rclb call inc mov adc lahf (bad) icebp xchg jge ss loopne jmp jg test mov in adc lods test mov (bad) push jo bnd loope mov stos push mov or lods lret fdivrs xchg mov ljmp out xchg shr mov cltd inc push mov stos jo adc lods pop xchg ja testb inc sub shrl call cltd sub repnz mov push loop jno sub fwait pop mov sub xchg cmpsb repnz scas fsubrs movsl mov xchg xchg xor (bad) adc sub fwait cld mov sub das add ss lock int3 sub mov nop xchg xchg push xchg push lea xchg and ds mov mov mov add divl push adc sub inc cmpsw icebp xor shr (bad) adc repz enter add fimul notl fucomi adc mov sbb jb cld sub jmp mov ror cmpb fildll lods fsubrl das jge cmc jmp out jecxz fisttp cli pushf add out xor lret inc jmp test mov mov xchg imull cmp sbb inc jg sbb adc pcmpeqb cld into inc fistl in mov insb sbb and testl lret outsl out lods xchg mov arpl icebp idivb pop out stos sbb cld push inc ss in (bad) jmp pop loop stos jae ss loopne mov xchg pop movsb jmp pop icebp in mov fcmove fistpll (bad) jns (bad) imul sbb loope movsl jbe xor sub scas gs faddl notl stos mov fisubrl push mov gs inc add lret dec mov int xchg fs fmull pushf in fdivs pushf mov lea inc jae push xchg add mov movsl rorl out mov int xchg or mov imul dec out lock stc jae add mov and in adc cltd aam pop inc mov adc jecxz repz stos ret ljmp jae mov movsb mov and pop out enter (bad) sub lods or adc pop (bad) xor mov aam jae cld fild or std mov lcall inc icebp fadd cmc mov pusha fwait out add jnp jmp fisttp in jmp dec jns jecxz pop xchg inc pop jne outsb push sbb pop nop fwait sub cmp fsub xchg (bad) out sti add mov enter mov jns cld push mov stos out iret stc mov jo mov aam out mov mov jge jmp add stos repz popf pop and out xor aaa (bad) jne add icebp repz adc jg out movsb jo push pop enter ljmp inc loopne fldcw mov test shr loop pop std dec ja fbstp in jge push push neg out inc xor fisubrl adc jp sub cmp loope in imull dec pushl xchg mov add (bad) (bad) clc dec add loopne push pop jecxz cltd pop rorb adc movsb pop mov es (bad) repnz jg mov push aam mov cli jae mov add pop test xchg mov mov adc push (bad) mov imul jg adc xor mov and add das repz notb icebp fsts test repz jg or dec mov cmp inc pop inc pop movsl adc aaa mov mov fwait aam sbb jnp out out test mov test add test fs test fmuls (bad) mov dec stos mov pop mov ret inc andl repz or add mov jae add fsubr mov sbb mov dec jg insb rcrb les mov dec mov push fcmovnb fadds lods scas add call xchg into mov lahf lods push fwait jmp stc imul fstpt or (bad) jmp insb jae cmp sarl insb fdiv xchg sbb lahf sbb ret sbb add add sbb psubd repz cmp inc aam arpl mov cmpsl out xor xchg and rcr stc lret mov cmp cmp addr16 and lods sti push inc add pop lea sbb divl leave loope cld jp jl xchg jl fiaddl not test jnp adc insb mov dec cmpsb mov pop push xor lcall fucom sbb xchg push mov push mov add jp int shl inc lds jl mov out jl mov sub es xchg fildl fwait adcl out fildl mov in push aad jnp dec mov fs xchg inc fadds mov jb mov gs out negb out mull mov adc jmp lea cmp cmc cli cld mov nop and in inc in in stos add sub icebp push aaa out jp sarl cmp xchg push xchg pop stos je pop aam loop (bad) (bad) into pop xor push push (bad) inc insl mov jmp push push xchg jb mov cmp or mov xchg or mov fnstenv mov test scas dec loopne call cmp jecxz cld mov stc rcr jb in scas js mov jne aaa ds add mov cmpsb mov movsb inc pop jl in xchg sahf (bad) out push dec jmp es cmp lods inc xchg pushl in xor pop dec add pop (bad) mov cmp sbb out daa dec jb (bad) lret shr clc jb mov movntq in jns adc ret addr16 das aaa stos shrl inc (bad) lods (bad) in sbb lea out jo mov repnz mov mov call test addr16 mov xor imul mov aaa lret cmp mov in jno pop bound rcr imul cwtl adc or mov pshufw mov imul mov xorb popf (bad) mov inc sub outsb mov adc xor lcall mov lock repz cmp or icebp lahf (bad) jle adc mov add ja movsb ljmp pop pushf scas and std xchg orl aam call mov repz pop jmp loop,pt getsec add cmp lret jae aaa jecxz push (bad) (bad) bound ljmp call enter mov lret adc (bad) jbe jecxz addr16 test in mov add popa lods jle ret (bad) out gs js mov or and mov add ret cmp push scas or mov popa repz stos mov cmpsb sub aam push sbb ficom test push lods xor jl adc xchg pop adc xchg inc mov dec rorb (bad) not pop cmp jmp das jnp sub cmp mov add mov addw ljmp (bad) sbb scas push arpl mov push adc xor xor popf cmpsl dec xor fistpll cmp xchg jne data16 adc xchg jge push inc xchg xor xchg cmc rep movsb pop nop dec rcll and inc cli testl adc test iret cs cmc jne jns repnz and stos adc pushf dec repnz pop xchg pop loope push sbb mov inc xchg ljmp repz aad dec ljmp (bad) into shlb in mov pop cltd (bad) cmp ret jl xchg mov mov jns emms call mov test popf out sub into enter push repz sbb push push jb xchg test in jmp jo ds jge pusha cmp mov lods std adc add (bad) loope ljmp adc lods xchg sbb dec xchg cmpsl inc iret mov in inc (bad) xor popa imul fnop inc cmp adc arpl mov lods int3 add dec mov bnd jge mov (bad) fs aad dec cmc stos out mov mov cmc xor cltd into mov (bad) sbb xchg in movsl movsb les push add jp fadd adc insb jns and xor jp xor pop loope,pn xor mov add push mov and mov lret cmc stos xor outsb mov test repnz jo mov inc adc jl mov mov int3 push sbb leave mov repnz jae add jb cmc call mov fcmovb jo cld sarb lret in pushf push icebp mov fucom jmp dec gs movsb lds cmc icebp (bad) je mov (bad) dec jo out cmp mov jmp add sub inc lods mov fnsave movsl xchg std notb pop stos sahf add int out fimul jo pop jb pop cmc std (bad) pop sarb sti xor jb jo xchg dec mull lret ret fldl2t mov rcrb mov mov adc mov (bad) jo loopne cmpsb pop lret dec shr aam adcb cmp jae movsl mov fistpl arpl xor (bad) adc mulb out (bad) (bad) cmp es (bad) lock mov jp outsl aad xchg movsb mov sbb in and cmc and sub sbb movsb push xchg sarb pop das shll aaa or xchg adc (bad) mov pop jnp scas fucomip movsb test mov int3 xchg clc or jo mov fcmovnbe xor fcmovbe lock pop fstl xchg pop popa lcall divb test test jae cs or imul inc lds dec pop aam pop popa sti pushf inc int xor imul xchg cmp addr16 cmc push inc or jb pushf aaa mov mov jns insb jmp ret imul mov in xchg mov dec repnz test pop dec movsb stos mov bnd nop stos cmpsl sub xlat (bad) in outsb jne xlat movsb jmp loopne adc pop dec ljmp fnstcw add daa mov loop mov pop test shrl mov fucomi stc (bad) mov sti sbb pop xchg cld ljmp mov jmp sbb int3 ja mov or push or scas fs fdiv jo xchg pushf mov cmpsb jmp jae mov (bad) mov icebp ret pop mov (bad) dec mov fsubrs shrb push in sbb xchg push push hlt xlat outsb insb fcoml lea fistl lret aas repnz mul int cmp xor and fbstp push sub out dec ret mov add fs push aam jecxz push test sbb cltd jmp mov cmpl ljmp xchg mov incb out das mov fstpt stos push mov jmp sbb push scas mov in scas pop cmpsl jo mov ret cmpps mov sub out into loope pushf add mov adc movsl fwait xchg aad fidivrl loop pop cmp pop neg sbb loop aaa jecxz sbb iret je ret adc outsb pop pop ret add cmp sbb movsl jmp sar pop dec repnz xor add xchg xor cmp mov jp ret jb lret clc fwait pop sahf aad stos (bad) in shrl mov jbe jns push ljmp ljmp ja out iret arpl add jl arpl repz jbe xchg jle sbb jl iret in jp (bad) or sub jae jbe xchg daa scas jp jnp mov in jns mov jno adc fcmovnu jb mov lret add pop xchg cld cmp sub adc cmc lea (bad) movsl imul lret bnd popf dec lea cmc sahf in (bad) lahf inc cmpsb mov cmp outsb test outsb (bad) push or outsb outsl (bad) in bound test js iret daa fcomp mov xchg arpl xchg mov cmp cltd cwtl loop ljmp int movsl scas ljmp dec movsl nop and and ret fs jno xor shll mov lcall repz mov add mov mov cltd pop negl (bad) scas test sbb inc xor jb xchg add jnp call push jecxz je and loopne (bad) mov dec lods ret rorb xchg ret mov mov daa pop dec rcrl lcall arpl or sbb fistp pop rcrb aad insl (bad) add cmp push imul mov outsb mov cli in jbe test in jmp pop lock add mov notl cld mov mov jecxz jns mov mov adc loop xlat lret je cld add add mov mov pop stc rolb sub lcall std leave mov mov aaa push cwtl in cltd xor movsl cltd cmp inc daa imul adc sbb lock cwtl (bad) jo mov int3 in add shll adc decl xchg sbb imul mov in pop xchg or icebp into mov mov mov cmp stos xchg inc jo ret lods dec jae lds repz mov (bad) (bad) xor cltd push stc pushf aaa call in jecxz or (bad) (bad) (bad) jmp ljmp (bad) xor pop xchg xchg (bad) repz jle les add push test push cmp add orb cmp sub repz clc movsl xor lret lret mov stc pushf sub pop (bad) call test jb mov (bad) xlat lret (bad) jbe xor test cmpsb cmp xchg sbb xchg pop call std mov leave jg loop repz (bad) jmp lret mov jecxz (bad) lock or and mov dec add outsb test push dec out fnstenv push enter push test (bad) enter enter and fstpl sarb hlt in push jecxz dec dec cwtl lret pop push or push pop pop mov stos nop ljmp xor sbb call leave mov test popa mov mov add sbb xor arpl sbb jl mov xchg and pushf fildll jo arpl call mov add movsb dec shr mov cmpsb (bad) pop cld test test divb pop mov cmc adc adc or add jo xchg lret mov test mov dec mov (bad) ficompl lods fwait pop and fdivrl aam (bad) cmpsb in mov leave into jl mov add mov stc fsts add imulb fldcw adc iret loop insl in xchg jecxz std insb push sahf aas xchg adc mov mov add add call std loopne pop sarl jbe or mov lret xchg and pop gs enter sbb or repnz cmpsl rclb dec cmp out push cmp xchg push aam mov jmp add cmp mov repnz pop add rcll push jp jo mov or add inc roll out mov add adc dec mov add jbe mov mov adc rolb dec aam mov xor xchg loop jp mov sbb sub lret lret scas dec test inc sub mov lods inc ror mov or das daa mov loop cmpsb enter rcrb dec pop lret frstpm(287 jae push ljmp add rcrb call imul pop fs sahf inc push pop aad jne fidivrl in fisubrl fs inc xor mov (bad) ficoml outsb mov add outsb ficoml xchg lret add imul lret adc xchg adc adc fsubs mov out int3 cltd (bad) out push lret (bad) mov xchg pop out scas or lahf sti nop sahf lret insl test pop add jecxz sbb pop adc add jmp (bad) ss arpl test stos push inc in (bad) in xor inc mov outsb hlt test (bad) push fs sti outsb mov xchg shrl xchg mov in in in add repnz sub rclb test outsl loope jge (bad) jo sbb dec dec addr16 in nop fcomp dec subl pop jb into cmp int stos pop iret sub jnp cmp pop push cmp add cld rcrl sahf loop mov inc (bad) pop or push out (bad) movsl or cmpsb xchg das xchg mov xchg push push (bad) lods fdiv xchg stos lds outsb fcom jae jnp mov add push adc fstpt mov xchg (bad) sub scas sbb mov ljmp add mov mov icebp lret adc or (bad) and call mov mov jecxz (bad) stos stc inc popf or dec lcall xchg sub fisub jae xchg sub pop test lcall ss or into mov jmp mov clc enter movsl out push iret lea lds push dec mov jbe aas mov outsl mov mov or aaa mov stc jne mov vorps xchg jo pushf xchg dec aam stos pushf lret sub cld sbb push push aad mov pop enter sub movsb std xlat into andl int3 pop inc les fstpl sbb jp pop add adc loope mov ret adc xor ja mov pop jbe loop xorb jle into (bad) int test push cmp jmp fildll fcmovnu sbb imul js inc and cwtl mov mov cmp mov (bad) or ljmp mov mov test mov mov mov mov push mov jne out lahf test sbbb fsubp loope and push push push int xor stos dec push dec sti and out or stos mov movsl push pop mov ret mov imull loop aaa xchg sti (bad) push xchg sub rol jge stos rcl negl ror inc xchg push data16 ret xchg push mov pop cmpsl xlat insl mov das ffreep jecxz stos test lahf cltd in test outsl dec add leave hlt in push test rclb and sbb shl mov rclb sar jle das int3 xchg es mov add cmp dec rcl loop aam test or aam mov ja jge or stos int (bad) outsb mov stos lret xchg jne mov call (bad) jecxz (bad) rcl lret sarb sbb repz ror xor repz mov inc in push out lods jecxz push mov mov (bad) mov stc cmpsb adc mov fstps add xchg iret dec cmc and sbb adc lahf out xchg xchg inc xchg xor push cmpsb push ja stc xor stos aaa (bad) fisubl jnp scas call mov xchg test (bad) loop dec bound fcoms adc push sub and stc icebp jg fdivr ss sarl or add jmp cli xor ljmp (bad) movsl cmpsb lods call (bad) dec cmpsb (bad) dec mov (bad) adc iret mov pop add fdivrs iret xchg mov (bad) jecxz lcall lahf stos pop lahf aas stos lret stos pop lock stc xor and in mov lret pop aam cltd jmp pop fcmovnb out jecxz dec pop push imul lock test sub jp ret pop iret adc add mov xchg shlb mov movsb adc push inc add dec aad (bad) shlb xchg test clc sbb incb iret jb sub cmp ja mov test insb xchg int3 xor dec movsl lods (bad) jmp adc mov jle ljmp xchg lods pop adc mov aam test lcall sbb jmp jbe loopne out xchg dec dec (bad) stos cli jg (bad) rorl repz mov arpl iret lahf xor lock movsb xor push test and rolb enter xlat fimull pop and repz jo flds inc mov add or dec xlat insb and ljmp adc add xor jmp stos test movsb xor xchg loopne inc mov (bad) call ja ret in cmp lds das push and jno mov ss cs mov call mov xchg jb jmp push dec dec fdivrs lret int3 sbb push mov or scas pop ss lods xchg cmpsb pop fidiv mov dec pop dec into (bad) sub stos inc cmp mov mov out xor lret mov xor outsb mov mov lcall aad jbe call adc cmp sbb xor fldz adc cltd (bad) cli push orb arpl jg pop inc lret sarl push and dec cmpsl fs mov sbb push jmp loopne sub cmp repnz test cmp outsb mov and push sbb fild movsl xor sub and iret mov arpl (bad) jb ret insl pop sub pop fsubr pop fldt xchg dec mov pop fidivl std shlb add rol lcall push mov dec lret mov or jnp mov push imull ror cli ror lret xorl lret pop cmc outsb rclb into shrl xchg jecxz ret mov jmp ret jnp stos pushf stos sub and pusha xchg sub adc jb out daa mov inc aad cltd xchg push xchg xchg es sub rcrb adc push xor xchg adc jecxz sbb jp jecxz lods out roll popa lret fild cld icebp mov ds popa jp adc xor xchg add push sarb pop jae lret (bad) sahf mov push movsl mov or jae cmp jl out dec mov or xchg mov inc loope test push sahf ja test mov insb and jmp test inc cmpsb stc jecxz out mov cmp icebp dec out cmpsl push not mov xchg jb xor inc dec jns fnsave ja fidivr mov aaa pop cmp adc mov repnz call leave cmp fld lahf and ja add aad repnz int and sbb mov in jge cmp out roll mov jecxz pop cmp dec clc lret movsb dec mov lret out test cmc mov out (bad) or cmp stc popa or mov push xchg xchg cmp stos and and stc outsb test mov dec jo xor out js cmp push test mov or into sub icebp xchg out lods roll (bad) int3 nop dec aam fisttpl js xor or cld aam (bad) in jne jmp iret add test fstpl ljmp mov mov scas or mov sub mov xchg lret aas pop dec stc call mov movsl mov sub jmp mov leave stos icebp lods js inc loop aad mov data16 es xchg sarb sbb cltd popf cmc fbstp add fs xor inc (bad) data16 aas xor stos in push rcl int3 add mov clc jb cli pop add push ja ss xor jb ja clc inc ds adc jp scas lods xlat sub xchg out stos nop inc xchg hlt sub insb jmp fimul lods decb xorl jns popf pop aaa fistpll (bad) mov xor loop lock lret add push sub or xchg imul fldcw out stc cmp rep sbb ret int lcall push ss and mov pop repz lret mov mov outsb mov mov add nop sti in outsb mov test pop ret insb mov or and mov cmpsl stos les jb lahf ljmp adcl int3 dec push adc pop xchg lahf adc ret mov rol (bad) push ljmp add decb das movsl and jo mov (bad) adc js add add les xor das add sub adc (bad) jle fwait (bad) mov notl inc popa sub mov mov mov mov sti jmp pop lahf sbb push testb in stc jnp jae xchg or outsb data16 movsl xchg push jb adc sbb push push push stos fwait push sbb inc xor shr clc mov jge lock xor int lahf lock push add notl cmp jno (bad) adc les (bad) cmp and xchg mov cmp xor cmp jb push add push outsb aas adc jg enter mov ss and icebp out or ja inc pop lret (bad) xor xchg ljmp (bad) jmp repnz push mov adc leave jecxz repnz adc pop std xor mov xchg adc (bad) jge fistl mov adc jne mov cwtl jae,pn loop mov (bad) repnz push pushf mov jge outsb out test adc adc cld mov movups cwtl rcll push out sub mov ficompl or cmp outsl sub sub fiaddl in jb mov mov fcmovu cltd lahf inc pop out xor negl jb notl pushf jge int mov jl,pn pushf mov mov xchg pop les int adc inc in sub fadds jns enter ss or (bad) mov push stc push sbb jmp stc jae mov aad mov mov stos cmpsl jecxz insb imul cmpsl lcall xor hlt movsl hlt cmp lock jb test and icebp int lock or hlt movsl mov sti repnz outsb test mov leave movsl sbb ljmp add repz mov xlat imull add insb (bad) jb dec mov fsub scas mov xchg out (bad) sbb cmpsl ret bound mov pop sar bound xchg lret fs jae lahf and pusha jg mov fldenv (bad) mov push test stos rorb mov aam repnz jmp roll repnz fsqrt jne fisubrl adc aad (bad) jno out jbe daa pop mov xchg ds mov push and mov push fnop shlb cmp shrb inc pop mov inc fadds fdivs dec and adc imul mov pop hlt xchg push ja push test aad and adc push add mov sti xor loop call ja inc hlt rclb cmpsl rol scas xchg stos popa pusha pop leave repnz pop pop mov or pop fwait loop cltd sti pop push cld xchg int orl repnz dec or repz (bad) xchg repnz data16 ljmp bound jg mov cmc je repz cld xor mov sub test push stos (bad) mov subl lret push add insb testl pop cld lret jo ja inc repz sbb mov cli lahf in iret repnz inc push sub arpl into scas stos dec repnz add (bad) imul xchg aad (bad) mov add mov mov data16 int3 cmpl dec clc outsb mov mov fcomp adc jb decb outsl jae bound das add movsl push mov ret mov (bad) outsl jae cmp bound jl inc or iret js cmp repnz lret pop mov enter cmpsb mov jb adc mov xor test mov dec loop les jo mov push mov into movsl sub pusha push mov enter fldt xchg cmp jno pop add xchg jnp rcr ja popa sbb push fist jnp jg repz sub pop stos outsb cmpsb fistl mov xor mov pop bound iret cmpsl dec pop xchg repz icebp xchg fcoms xchg jmp scas pop adc add jmp xor out fwait pusha test and cltd sbb xchg mov aam loope das mov loope adc add push xchg xchg sti lds mov jecxz js mov xor ja push mov int xchg nop ret cld push popf stc repz jecxz loop loopne fwait aaa repz xrelease test leave fistpll push arpl fwait add addr16 inc popf xlat mov enter (bad) divb out sub lock divl mov aad mov outsl mov test pushf es xchg xor xor push mov xchg (bad) jmp pop fimul jae daa add loopne aas push lds mov out insl or add mov mov imul jg ret push fnstenv pop adc call cmp xlat iret cmp js leave divl (bad) xor push mov enter arpl sbb iret (bad) jmp sub inc (bad) xchg iret cli adc incb sub jbe mov in pop xchg gs stos add cmp fistl and je and pop scas inc iret add push push xchg mov mov popa (bad) (bad) mov lret mov xchg outsb jo cmp stos add or sub enter or out pop pusha mov mov adc ds inc rcrl enter mov stos xchg test mov sub inc movsb push xchg (bad) in push mov adc mov inc lods dec xor ffreep jle fiadd cltd mov and mov sahf (bad) repnz f2xm1 rorl jmp jbe dec and iret mov pop popa enter test enter jge mov push nop repz enter sahf sub xchg test xchg popf xchg fidivr xchg mov jns imul push push movsb (bad) mov mov ja stos cmpsl aam mov fsts loopne addr16 add test mov lea jae out cmpsl stos mov das enter jb jmp adcl cmp lahf xchg push aas inc lea pop xchg mov repnz fnop sbb orl ja add pop test jl sarb xor xor cmpsl push nop push sti cli adc jle cmp jl inc and in lcall mov jp mov adc cmp out xchg mov adc lea test or les mov lret in xor lret popf (bad) jne iret xor or test xchg das iret pop adc andl test sub ss dec push cmp mov jae cli imul or into push cli repz and mov mov sub fdivs jmp sub (bad) mov bnd ljmp adc inc cmp subb jae movsl mov lahf jb clc or aas mov sub mov leave fcomip fmull push in lods sub mov ret repnz lods jb mov cmp repnz test lcall xlat add ljmp sbb xchg (bad) lock ret sub add jo inc fiaddl mov fbstp out divl cmp mov mov es jb add dec test pop jo adc and mov aas push xchg imull add scas repnz jp jle andl repz add xchg test ficoml rcrb js in lds jmp sbb (bad) cmp outsb add add mov (bad) repnz add add fs ljmp mov cmc call repnz add pop inc ljmp in ret in test pop scas push jg call lods cmpsl push pushf adcb nop jo lahf mov iret mov adc sbb inc clc cld test fs push repnz sub out mov lret in fist not mov jbe push cmp pushf movsb adc repnz lcall sahf pop lea scas push test stc loop or aad pop in adc sbb cmp pop fist cmp inc adc decb sub mov out jmp cltd xchg movsb into stc divb popf pop xchg or (bad) cmc xlat lret test push in jo or jno mov nop jp adc movsl cmp flds nop push mov test aad loop rcl movsl lahf cmp inc test (bad) jno adc jge pushf pop ss xor repnz (bad) movsb test jle adc pop lcall dec sub cli (bad) shll xchg dec xchg mov xchg inc les or jmp jns sub outsl les xchg imul mov clc mov outsl mov mov lret fidivrl mov fwait mov inc push dec and lahf jbe test inc out cltd out mull fbstp cmpsl or clc xor mov out mov addr16 ret sahf sub mov jb daa cmp adc nop leave sbb gs xchg stos shl jne mov fbld aam popa xchg lock inc push test cmp lock dec stc dec cmp xchg cmovns xor (bad) pop aaa cltd add pop andl divl dec rcl jge jnp dec cmp push stc sbb push or or xor rorl stc jl add punpckldq mov fs add jo gs mov or (bad) mov adc int in sbb or ret stos leave adc scas mull mov imul aam adc cs dec lods mov mov push lods xor cmpsb in add adc sbb out pop or push cmp in test iret mov stos push cmp (bad) xor lods fidivl jae aaa imul pushf (bad) mov fnstenv pop stos (bad) xchg notl xor xor ror mov lods nop cmpsb xchg faddp (bad) mov pop (bad) mov (bad) jg push dec mov cli inc mov xor sbb iret test adc decl cltd lock sub scas mov pop push add test sub sbb jg cmp dec repnz ret arpl jne lea dec sub aaa mov int3 ror sbb mov xor lret setp xor mov cld rep mov cmp jnp dec pop or incl pop jno test pop fcmovnu jge push rclb cmpsb inc fwait mov xchg dec dec test mov jecxz xor jg xlat jl jb pop scas lahf sub out mov addr16 test test hlt test mov push ljmp mov adc add sbb adc std movsb adc mov mov adc inc inc push jmp movsl clc xchg movsb (bad) mov jle popl push jae mov test jl or or adcb loopne mov sbb jns iret cmpl sahf or mov adc mov jmp jecxz jne or jge sub add ret inc sub and mov (bad) fwait sub loopne ss fdecstp lods aaa or jge push fistpll nop bound popf sub hlt int3 out sub mov out jp xchg jns movsl sbb test xchg int3 enter cmpsb inc repnz fwait lcall fldt stos clc jmp insl (bad) out add iret jbe fcmovne fbstp icebp mov push neg icebp adc loopne lods fdivl int fistpll out xchg ljmp cld pop lcall je jo xor not sub sub imul enter jg xchg roll cltd sti cmp sub sbb mov lods (bad) xlat xor cld dec pmaddwd dec cmp cmp hlt cmp stc shrb inc add out sub leave xlat enter in xchg cwtl std imulb outsb mov mov and jae out mov hlt or enter lahf jmp or (bad) insb out (bad) in fs sub dec out insl enter adc jno (bad) cmpsl inc mov sbb adc fdivs adc into pop aad repnz hlt imul and jmp cmp loope sub jp fistl sbb adc sub mov (bad) aad mov in lret hlt cmp stos or xchg cmp push cs or dec call and jne lret shl adc pop das or into or mov movsl mov into mov push sbb mov xchg sti sub (bad) lret cmp xchg lods dec jg pushf jne je sub or xlat lods test cmp in cmp or cwtl cmp or test cmp in dec and enter jmp jmp ds xor adc cli cmp rol and jo icebp movsb mov fildl roll inc stos enter mov cmc cmp enter cmp shlb outsl mov sub xchg ret stos movsl inc das push jecxz sahf xchg lret shrb leave inc clc push stos sub iret (bad) jb mov mov sbb or enter insb (bad) out xor lahf and xchg es test gs cmp sub popf mov jmp sub loope xchg and jae stc imul cmpl or jecxz,pn and lods stc jb mov cld xor int3 inc lret mov inc adc push push push cmpsl ret je add loop push imul sub insl add xchg mov test pop pop add and push arpl out data16 addr16 pop outsb out jmp push out call ljmp ret xor sbb pop jo test sub dec addr16 fmul adc scas shlb fiaddl (bad) mov cmpsl rolb cmp repz ljmp and std out bnd out in xchg out ret ljmp (bad) movups out jge out call out adc mov loopne mov fst mov adc mov enter sbb and call xchg scas adc into or or cs rcrl add in pusha cltd sub incl (bad) adc sbb add pushf test xlat hlt (bad) jg xchg lods xor sbb dec xorl inc jo ret or jl dec mov jae rorb orb icebp popa adc inc addr16 fistp stos ror out dec out mov es push repz push add in outsb inc loope push frstor jmp xchg lahf jbe cmc mov out xor loopne (bad) pop mov xchg jne mov mov call pop test arpl jnp sub jae jge pop in stc sahf inc incb int imul ja stos movsl notl lcall dec mov popa jnp punpckldq faddp movsb push or adc xchg std and push mov nop cmp inc jmp xor test mull lea sbb mov jo stc adc inc sahf aam xchg or test out cmp inc jnp test fstps imul xchg fdivp mov adc jmp cli imul test popa mov push js mov xchg jnp fdiv shr jp pop data16 mov rcrb jle sbb mov mov adc mov lahf lods movsb mov jle push (bad) xor jns clc sbb aas xchg mov and adc add mov adc in pop add sbb inc fwait clc adc cmp add xorl addr16 push popa and mov push rep jge inc scas ja sbb inc jbe in xor (bad) inc add inc call movsl and (bad) inc push test stos push dec lahf enter push ss cmp hlt jecxz ret xchg lods inc add out setns cld aad leave ret imul lea pop stos dec xchg pushf test lcall adc imull inc cmp imul add lock or inc add pop pop popf in add sub sbb repz inc lret test popf rclb test loope movsb xchg xlat ljmp jbe cmp out push add pop add cwtl sub mov imul xor pop (bad) enter rcrb cmp pop iret clc or jb jle jg xorb jmp xchg push (bad) jge xchg shr sarl push (bad) dec jnp popfw aad icebp add jns stc out lret xchg mov dec aas loope inc jb inc jge cmp xchg mov jnp das data16 aam leave cld mov leave xchg xchg out xchg jae inc cltd sahf mov fcoms mov mov ror stos push mov int aaa pop loopne jae xchg mov (bad) xor jb add aad or pop dec sbb push adc shll sbb or adc fnstenv lods push pushf (bad) push sbb scas (bad) xor adc push ds (bad) icebp jae or and cmc pop jge out pop pop (bad) jmp cltd addr16 or pop adc mov daa jno dec andl (bad) shrb pop sbb lea or or lea or (bad) in ficompl xor out xchg stos setns and inc xor xor out add (bad) icebp out and lock stc test in or or xchg fs xchg dec sbb in (bad) push lcall add decb es inc xchg xlat sahf repnz cmc add sarb aad add jne outsl pop ficompl and stc out add fistp add lret or loop inc mov push dec out jge adc icebp adc or pop decb cmp pop jb (bad) dec stos sarl sub jle arpl daa inc movsl std xchg push lret (bad) notb out or xorl jecxz shll mov in or mov fsubs cmp cmp mov int3 int3 add xchg rol scas test or dec sub jbe add out leave dec push loopne sbb imul fstpl mov mov mov cmp jne xor leave jle scas call mov imul fs cmp pop clc mov mov leave mov mov push into cmp ljmp test sbb mov dec pop or inc xchg mov sub jns push push or mov outsb fcmovnb lods cmp cmp jo cmpsb movsl cmp neg (bad) (bad) icebp jmp jecxz mov dec mov shll jae jnp jle outsb iret enter sbb jbe cmp jle xchg dec jb jmp in xchg outsl out push repz mov gs cmp mov adc cmp xor out push cmp cmc fisttpl or lret lods out push sbb lock outsl jno jae lods mov call outsb xchg pop in mov test imul pop roll in sbb or pusha add cmp cmp or ret cmp cmp sub pop xchg in pop add ret inc mov pop push enter push pop jb inc dec int3 popf dec inc enter or mov or or dec fwait pop inc push mov mov jecxz and jb or push in pop test jae and add jmp scas mov pop add mov dec pop pop sub (bad) insl shrb sub push mov je mov push lret cmpsb lret xchg movsl into jge xchg iret cltd (bad) aam rorb xchg outsb inc enter shrb jl insl pop push es and es in aad mov jb add xor and jle xor and jbe cmp es enter ftst outsb push sbb push or neg fsts inc xor in not xchg repz or js addr16 dec imul jb repz lods pop add push mov test mov out push push add clc adc cli movsl dec xchg clc pop popa stos int pusha int scas or (bad) incb pop and xchg sbb rorb and and pop fistl insb rcr notb out jle outsl pop sub enter in cltd sti iret inc out int or cmpxchg mov (bad) int3 pushf jb into outsb out iret jnp cld jb mov test mov (bad) rolb adc jge std lahf out xlat sbb outsl lret sbb imul movsl fidivl jecxz lahf add xchg sub sub xchg sbb aad and mov push out not jl mov stos outsb jne pop movsl aad xchg dec fwait iret rcrb clc sub push mov out mov jge lahf pop es jmp lret cmpsl std cmpsl dec jge mov stc push int3 lret fisubl lret cmc cmp pop mov hlt (bad) or cmpsb xchg or or (bad) jmp rolb pop ds pop add fidivrl cmpsw mov mov xchg mov outsb mov jmp mov (bad) je in jae jnp cmpsl (bad) lahf in in cli push jge test imul xor jmp pusha cs adc aam insl (bad) adc jmp stos mov mov add (bad) sub jmp movsl das scas gs int dec push insb ljmp xchg jmp and or outsl pop ljmp sbb outsb outsb inc cmpsb inc ljmp adc mov pop push lret adc push fs test inc jle test outsl inc add pop nop lret repz loopne lahf xor push loope insl jmp ret fbstp lret out cmpsb dec lret mov addr16 mov mov push dec xchg push stos fs pop ficompl mov lock pop icebp push arpl cltd lcall aaa repnz repz out cmpsl loop ljmp (bad) cli repz clc mov add add (bad) in mov imul adc test cs fwait lds out cmc out xchg pop jl push in sbb jmp sahf fs lea inc push and and push push pop fldenv stos lods leave cmp adc adc in repz fnstenv imul pop ja stos adc dec pop pusha jp mov mov mov mov out test sub js xchg shr push mov shl ljmp adc dec loope sahf pushf sbb cmp pop out add ja sub das movsb ja dec aaa lods xor xor cs jle jle sahf jno mov xchg jecxz push (bad) stos cmp push sbb or jmp cmpsb fbstp out scas loop jns ja call cmpsl cmp movsl (bad) shlb (bad) aaa or psubb pop adc mov push jmp jb jge lods cltd nop inc pushf repnz in outsb ljmp imul jbe adc pop movsl imul mov fcmovu repnz xchg push fiaddl repnz out loop repnz dec cli cmp jge stc icebp ljmp mov cmpsl or mov and and (bad) cmp mov add std jmp in xchg cmp dec jb mov call sbb push ficoml test int (bad) xchg mov lcall push or cs cli (bad) jmp pop pop out xor xor cld mov inc dec sbb movsl int in (bad) fcmovne mov leave hlt xchg push xchg cmpsl xchg (bad) std scas jnp rclb mov add xchg add pushf and mov xchg inc push lock adc imul fsubs outsb test in xor or inc jnp and repz sub sbb shrb adc aaa add cmpsl ret cld lret (bad) xor lcall ret dec fucom cli pushf dec jns cmp out pop cli xlat daa fdivrs adc rorb into xchg push xchg mov call jmp bnd test (bad) mov jbe jp ljmp nop mov mov xchg inc sahf xchg jno,pt fwait jnp push add mov xor cmp inc xor pop inc fstps mov xor int3 jae lds cmp popa jae sub icebp pop imul mov fsubs mov push pop (bad) jl dec fbstp mov stos or inc mov cld sub fnop insb mov inc dec in cld sub sbb add lock test xchg pop lcall xchg lahf jne ss dec mov lret push testl jp fist mov mov adc stc out (bad) je movsb pmullw stos and cmpl fsincos jns jmp scas enter (bad) dec add sbb adc pop das pop test hlt push jmp push cmp dec cmc jge dec fiadd lods cmp ficoml xor sbb idivl mov repz (bad) fs fwait xchg lret or xlat les jecxz ret vzeroall lods repz jo xchg xchg add in in call sub xor pop inc ja xchg sahf mov adc leave or xor push imul lods push (bad) aad pop xor in mov test mov xor sahf fistpll ljmp xchg sub mov sub mov and lret (bad) jmp xchg ret push mov scas xlat xchg sub leave cli jno sar outsb mov repz fucom mov stos push jmp in mov add pop push jo scas inc sub popf adc lret clc in jno xchg add stos add lock fstpt jmp call in out push adc bound jne jp jmp cmp fild adc add dec mov fdivrl and jp (bad) mov sub shlb ljmp ja sbb adc xchg mov xchg lock sub xchg int ret iret xchg adc int push mov (bad) mov lods fdivrl lret mov iret xor xor mov cmp out outsl mov mov in aam cmp push mov sub xlat clc out jnp mov outsb jge jg dec mov mov add sub stc cmp call dec clc mov (bad) jne add hlt dec jp xlat add dec into js dec ret call add sub adc int3 adc cld int3 xor cmpsl stos dec add xchg (bad) cmp in xchg adc lahf fdivp insb sarb cmp cmp lock loope ja outsb adc lock sbb or xor out jo push in roll repnz xor imul sub adc lods lea sub and xchg movsl fcomp jno gs movsl outsl fdivrl ret fisttpl cli push sbb nop adc out mov stos cmc mov stos sub in mov cmpsb sbb xlat lds stc xchg mov cmp neg xchg mov inc lahf mov out jecxz adc jno std fildll rclb inc adc mov mov stos add pop xchg push mov add leave jne popf in mov js,pn aas or sub mov mov fsubl ja add xchg rolb mov mov inc mov (bad) ja jp (bad) imul call sbb mov in xor stos mov pop pop (bad) dec sub data16 sarb mov iret mov cmc adc fs les push inc mov scas (bad) in xchg adc xchg adc pop (bad) iret xchg (bad) sar jl cmp inc jae hlt call out (bad) push jbe mov pop adc fs (bad) cld sub cmp jno ret fsubrs shll xor outsl mov and stos xchg scas pop (bad) mov pusha mov inc stos imul mov cmp sahf (bad) jmp cmp cmp into jmp jne jmp ret adc pop pop addl (bad) std loope movsb cmc dec gs and push xchg or add cld leave stos imul sahf mov jno push push or dec in xchg push and mov cmp inc mov push loopne enter mov sub jmp xor rorl adc rorb mov imul cmp fadds mov sti adc add xor jg cltd xor jo rolb movsl jp sbb jnp mov out xchg rcll jb sub mov and add xor test dec push test sub fwait mov sub dec out jae (bad) mov out adc mov icebp xchg push fstps addr16 xchg lret (bad) adc xor mov jno sub jno (bad) jnp add shrl jle imul jecxz mov mov mov fcomps or test mov movsb mov sbb jecxz mov call stc enter ffreep enter rorb in mov fnstenv popa mov mov push sarb imul mov imul cmpsl into and cmc jno and (bad) jno cmpsl (bad) and jmp and xchg pop test roll out es addr16 mov mov mov movsl stc fdivl bound inc movsb inc in (bad) icebp in jno cli mov fiadd rcl jp push clc xor dec enter std std into adc rcll inc mov sub add scas adcl sub shr nop shr adc imul sarb inc fildl ficompl fwait xchg push outsl push push pop imull notb outsb push push lret mov dec mov aaa std jbe idivl mov add pop add lahf lahf mov sahf push cmp aad test xchg cmpsl into gs iret add adc scas cmp dec in into pop mov rcrb sti xchg test mov xor and cmc outsb repnz stos stos cmpsl aaa adc aam std pop sti data16 mov insb (bad) jns mov scas cmp in ds or cmc adc push add push fdivs lahf lock fnstenv adc fiaddl (bad) and call sub movsl push xor rclb cmp int3 cmp mov movsb jbe cmp xchg sahf xchg gs xchg (bad) imul jno pop out dec push aam cltd jno lahf xchg aad int3 jle xchg (bad) mov fyl2x sub xchg rorb mov (bad) popf lret xor aam bound sahf xchg mov mov adc mov jmp mov jbe pushf xchg sbb jnp insl jo stos lock ds (bad) stc mov fdivs jnp cmp pop movsb je or or popf test scas xchg xor adc xchg sub adc movsb dec sbb sarb lahf mov pop cmp and jo out mov xchg pop sbb mov lcall xor mov lret xor inc dec (bad) xchg fistpll jnp mov lea bound mov jg ljmp es xchg inc sub stos das loop xchg adc cmp mov lahf ficompl xchg mov (bad) lahf cmp lods andl dec jmp mov paddsw (bad) idiv divb jp lods (bad) and cmp cmp xchg sbb sbb push fsubrs push lods sahf add sbb (bad) mov xchg dec push mov sub out adc in nop or mov jecxz cmpsb rorl iret lods mov sbb clc imul cmp cmp xchg in adc mov jb sub mov push (bad) xor sahf sub scas pop pop mov repnz mov call adc scas outsl test cmp arpl loopne fstl cmp cs pop shrb aad push out inc hlt imul fisubrl sar jp ljmp add push out or cmpsb xchg mov ljmp jo jecxz enter out (bad) outsb idiv cmp push cmp lock icebp jae fmull push call repz jmp adc hlt mov or (bad) stos mov add stos xchg or push arpl mov cs test xor pop jecxz or neg adc shll dec xchg jp cmpsb test cmp mov sti jb pop fs jecxz arpl jmp cmp push fldcw fcmovnbe mov fstpl sbb sub addb dec adc sub (bad) int fsubl cmc push add lret sub pop int3 jp dec movsl (bad) inc lahf push mov outsb popa pusha insb xchg xor sub mov add adc mov sbb div and (bad) jecxz mov cld push adc xor fs jnp jge push jno cmpsw xchg mov out sbb jno or ret push pushf mov dec push and iret mov fdivl dec xrelease jmp repz mov cld xlat in int adc cmpsl push lahf pop lcall idivl int lret rcll into sbb (bad) xor add (bad) fucomi jl loope xor xor jmp (bad) scas or (bad) jns insb jge cmp mov push xorb and and lahf fadds xchg xor cmp in xchg addb inc fdivrs idivl es (bad) les arpl repnz outsl loop sub mov mov in cmp (bad) jb scas sti insl jnp mov sbb or jmp aaa (bad) aas imul out xchg ds les jno in (bad) push xchg imul pop popa xchg sub aam test jecxz pusha sub test pusha pop dec fstpl popf pusha ret cmp (bad) fsubs push push clc iret (bad) mov jbe dec stos insb push xchg (bad) adc movsl loopne stc ljmp test ficomp fadd fs sti repnz add dec add xlat (bad) ja (bad) cld leave jmp xchg add std imul adc es hlt lock test (bad) push inc stc (bad) je add push xlat mov jo push and inc data16 pop nop inc mov inc add or sub cmp jmp rcll xchg inc loopne add pushf rcrb negl in jo cmp dec lock loop ja mov xor xchg xchg push insl pop or outsb pushf (bad) rcll inc xlat or push and mov sub mov aas xchg fist xchg mov call and pop scas aaa lds aam arpl subl movsl add jns hlt imul adc or in rcll in sbb mov stc (bad) pop jmp add and mov xlat mov jp jno call pop jmp mov aaa repz pop std mov cmc sub test jecxz lcall je clc fisubrl fdivl mov lods jecxz data16 test std test test inc mov iret lret (bad) lock mov and (bad) fstl xor xor mov mov leave out lret jb (bad) lret (bad) adc and rorb or imulb lods (bad) scas xor mov inc test sbbl mov fcomp movsb outsl lret fnstcw adc sub add (bad) push or mov push lahf (bad) into cmp pop insl push rcl (bad) mov (bad) mov mov xchg dec mov sub iret shrb repnz fcmovnbe sub pop lods dec sar fsubrs inc (bad) repz pushl outsl adc dec cwtl mov in lret mov mov iret jle adc (bad) pop sub mov shrl dec mov dec fnstcw shrb mov xchg ja add cmp daa add std mov (bad) loop sub xchg xchg lcall xor insl outsl mov xchg adc push ss mov push push sbb push push xchg jbe bound fmuls cmp (bad) fnsave mov ror cmp adc cmp ret imull stc dec and mov jl stos mov sub push in mov lods push add ficompl lods ret div (bad) cmc or mov pop jge addr16 mov int3 xchg jl adcl fidivl shlb pushf (bad) mov push mov mov xor inc pushf inc jne (bad) outsb mov sub mov pop cs mov fbstp out cmp pop and adc jae into fnstenv fs jns shlb mov jbe loop jno sbb imul (bad) imulb mov cli push pop xor mov test ss rcr xor test cmp push gs or lock jg jne lcall mov into cmp cltd cwtl scas outsl es xchg scas subl jecxz outsl outsl stos (bad) fisub sub ja ss nop push adc out push adc xchg (bad) dec sbb loopne mov adc jg adcl sbb push xchg ja mov sahf test (bad) mov and bound jge jle add mov and dec or mov mov jmp mov xchg pop call rcll mov jmp cmp inc arpl add mov jecxz jmp fwait jg mov jae or movsb sub mov jo fsubl pop xchg orl jno and movsb hlt out mov xchg xchg inc inc iret xchg out cmpsb jae lret sub in and cmp jbe test inc mov notl pop mov or xchg inc inc loope adc fdivl jbe sbb xchg xchg xchg out jb daa cmpsb in mov ss out xchg and hlt test push daa mov jae add sbb xchg and sahf mov xchg xlat or mov (bad) popa (bad) int3 jg repnz jbe pushf jmp imul inc xchg stos xchg in test ficoml rcl push jl mov push cltd loop jns sub loope add or jl sub (bad) adc pop fs pop out push std int test cmp push imul add mov lods clc repnz stc ret jae pop sub out mov xchg repnz fstps jmp insb sub cwtl stc int3 int (bad) mov ds ljmp mov xor sbb rcll shr jle sbb insl mov int3 out je push jg cmp add sbb out lcall js sar inc mov sub std aam jbe xor pop jp stc int3 arpl (bad) mov add ret and rclb push int rcl rolb mov push sbb mov (bad) cmp ljmp lods push mov xor out jno and lret jb sub or out xchg mov dec mov pop int3 int andl adc cwtl shr out xchg stos les mov test hlt add nop repz in jbe jb mov dec xor mov in and out hlt mov mov aad fcomip les dec jno jnp loop xchg icebp int3 es test outsb imul fsubs adc lock sub xchg jns,pt lods or loope stos jecxz in cmp inc add lds jnp clc cmp sahf lock fucomip sub cmc jmp dec jns and rcr sbb cmp push jnp test nop insl push xchg sbb push imul out lahf inc mov ss repz popf icebp in stos stc aaa mov mov cs test xchg popf push mov jmp loope xor hlt jmp jmp (bad) lahf cmp mov out stos daa (bad) icebp sub mov repnz out shlb aas aam rcl fwait lret insl jno ja pmaxub jnp int3 push xchg xchg mov ljmp pusha mov out push in add xchg inc pop out nop lcall mov ja jne roll mov xlat jl mov xchg lahf je mov push fistl loope outsb out popf lcall mov leave (bad) or (bad) dec lds ret mov or cli rorl in jns adc fsts aam jns pop lds into jecxz pop aad push adc adc lret or jmp jge (bad) out icebp mov pop pop jb jp in je sub lahf dec je mov jge inc aaa push xchg arpl or jnp jb repz cmp stos dec lret test adc sub rcrb pop loopne nop popl fisub scas in jle or sti in clc add jecxz mov test jle xchg (bad) in incb jmp rcr mov icebp jb mov repz test rol repnz fldt imul adc data16 xchg mov inc jle pop mov jo out mov test sub fcomi mov xlat aam es add cmc xchg inc repnz js out cli or cli cmp stc into cmpsb into sahf mov sbb arpl mov xchg mov mov ror jmp bnd xchg jp stc push and jmp iret ja xchg call or xorb outsl add int fs pusha push fwait mov (bad) sbb loope,pn mov outsl sarb lock mov test out jne sub mov jmp les pop ja jmp mov rclb xchg add fsubrs mov push aam push sub incl ret and outsb mov aam lods and sbb movsb aad (bad) in (bad) out push cltd lret pop in mov jl push and xchg jp cmpxchg (bad) loop nop mov dec scas (bad) pop xor xchg xchg inc cmpsl add jae adc fwait lock aas movsb xor xor push mov cmp (bad) clc sbb add nop mov and mov roll xchg xor bound aam ret rorb pop movsb pop and rolb into xlat adc adc push in (bad) xorb in fxch (bad) rcr (bad) jb ds mov or adc lret sahf jb insl aad in jge pop ficom pop repz jmp xchg pushf pop mov xor xchg xchg cmpsb mov data16 push cmpsb (bad) lock inc lock mov addr16 cmpsl out dec jno dec mov cmp jno push ficompl out dec out fimul xchg jl cltd aas popa repz xchg js aad mov ret (bad) cmp fiadd int3 mov inc jmp cmp add dec jmp xchg sub jo repnz add dec in fcmovne out rcrl mov leave sti cmpsb in arpl outsl vmovntdq outsl shrl sbb and cmc or scas jge push or (bad) pop jno repnz mov mov fsubrp lret test mov (bad) enter clc pop cmp imul mov inc cmc arpl (bad) mov test cmp fnop xor pop mov xor jns fwait outsl fdivrs shrb sarb sbb ret stos lahf clc pushf sub jmp cmc mov (bad) leave mov shrl gs fstpt data16 gs cmc cmpsl dec jno ret and rep divl out repnz push pop cwtl push arpl mov xchg outsl adc push pop stos adc mov testl clc fucomi pusha rorb jb sub adc pushf negl shrl dec push inc outsl jge ret jmp (bad) xor xchg cli arpl into adc idivl test adc lock test aad push iret mov movsl out fdivr xor iret stos jb cmp pop sbb push roll jo std jmp xchg push add test adc push lcall mov imul sub lods in mov stos cmp cwtl jo loop into in (bad) and cmp jb push jmp cmc jno mov dec (bad) mov test add jb in sbb hlt cmp mov lock test and ds stos aaa pop dec cltd test gs arpl cmp push es mov mov int3 inc adcb adc icebp je movsl mov je and leave lods ret jb and iret cltd stos negl and roll outsb movsl movsl iret leave xor xchg iret rclb add movsl icebp call dec js stc add xchg mov jno and mov imul add data16 pushf iret xchg pop pusha (bad) fistpll jmp fmul mov jge push sbb mov jl sub sub out iret pop jl mov int3 outsl mov clc insl push push lret xor lock pop ljmp xchg adc pop cmpsb xlat movsb testl negl add mov mov mov test outsl mov repz push fstps mov out xor mov cli cmpsb or jge jno cmc leave sbb lock inc imul sahf cmp xorb mov test xor out mov and (bad) fld mov cmpsl or int3 cmc fisttp or dec lods aam or xchg ja clc inc cwtl sti xchg (bad) rorb mov jmp sub push sti jo jmp aad sub fsub jb pop outsb pop ds out pop cmc idivl adc (bad) test xchg test xor sbb jle xchg add loope fsubl adc sahf xor (bad) iret shlb shlb xor scas cmp clc xor jp sbb (bad) sub sub cmpsl fstpt xchg jg add sub xchg addr16 scas (bad) icebp cmp or jb push popf lret in xchg dec mov in push push cltd xchg iret roll jl pop lock repz test xor rcrl and push cmp int mov repz push mov push pop dec jno mov sbb and insb aam jmp out clc and int gs sbb xchg jns dec shll push shll mov jae adc insb fldt pop lods outsb test xor stos cld dec pop cmp jno mov add icebp xchg adc mov sub fnop shrb add jmp je and jl iret cld les xchg outsb xchg scas jb cmp lret jo out sbb inc inc jg adc ret jle popf or arpl shlb mov out lret jae lret push test jne xchg ret out sar pop stc mov add cli jb fdivr mov rolb aam sar daa ja rcrl loope adc (bad) call inc mov pop addr16 cld push push in jmp (bad) js (bad) pop pusha jg inc cli das fcmovb std call (bad) jge jnp aas int3 mov in outsl arpl add xchg dec sti hlt rolb in rcrb out mov scas add inc jmp lods cmpsl mov adc inc nop (bad) test add fs aaa addr16 inc pop enter xlat adc jg movsb pop (bad) mov push pusha imul dec test xchg inc in jo fs not aad clc adc and out loopne adc hlt popa (bad) jecxz mov imul cmp movsb and nop call mov add int3 movsb stos loop popf adc jle mov leave ficom movsb sbb ss in mov (bad) nop div jp and out jp orb ja jae cli stos xchg imul jge ja jb mov jo sbb stos jno fcmovnbe insl stos (bad) je pop (bad) or jns sarb add movsb mov jg sub push mov (bad) mov lcall addr16 pop push in clc mov fs ja xor xchg call mov mov call push push imul inc ror aas fs and jp bound repz fs out cs icebp xchg xchg mov mov js add fs fimul dec jno adc pop lods lahf test mov outsb int loope xchg cmpsl ss xabort es (bad) jb push mov add shl in in in outsl sub outsb std jmp jg sahf dec push imul fsts dec mov clc mov inc dec jns (bad) leave neg xor arpl add add push std test inc push shrb cmpsb adc cmp adc lods outsl xor mov ljmp mov jg imul repnz push mov mov jmp dec dec push cli mov fisub mov jbe sbb fildll data16 insb jl,pn pop cmpsb repnz cmpsl lock shrl insl in inc mov bnd ficompl lods insb out rorb sub insb jmp dec (bad) insb in jae mov pusha bound cs int cs leave (bad) xchg mov aad outsb inc (bad) into push loopne into test and out not mov jmp add movsb jbe xor mov pop cmp repz imul scas fisttpl xor sbbl or or mov roll stos repnz xchg xor push data16 cmp mov mov into in push jecxz loopne stc cmp outsb adc ljmp add jmp mov push mov fcoms fmull add adc dec pop mov das pandn cmp sub cs repz ss xor pop mov pop test shrl jb cmc adc out adc lock fidivr fildll das shrb or lret stos rclb rclb adc sbb out sub push lods pop mov fucomi mov inc push movsb aaa ds test push into push rcrb jae (bad) xchg mov dec push xchg mov sub mov scas mov inc xor adc mov jne push test cmc imul cmp repz test call inc mov mov push xor mov stos loop out mov fwait imul mov cmc imul add test out scas jne out mov movsb mov mov ja cmp add (bad) (bad) cmp cmp cmp add in inc sbb jbe adc sub jecxz out jp in mov lea adc xchg pushf loop in clc add xchg (bad) loopne popf fdivl jae les in cwtl jmp scas mov xchg inc lret pop mov into sub imul pop mov fisttp jl pop rcr test or fwait js idivl out mov pop cmp pusha cmp (bad) mov xchg jnp adc (bad) adc cmc jp pop aad shll insl testb sub add test imul es sahf cmp xlat jae hlt xchg imul mov stos mov in (bad) mov xor fsts pusha stos cmc fistp in imul xchg jne (bad) repnz mov mov icebp (bad) not loopne test lret mov leave rcr xchg inc inc scas loopne insl and or adc push fwait mov add imul mov shr (bad) xchg scas or repnz jmp push push icebp jmp or loope imul or jle outsl test out outsb fistpll or dec loope jg ret movsl imul in scas fbld mov inc jmp int3 mov out sahf cmp jecxz out stc (bad) jmp fldt xorb xchg cmpsb mov jbe fwait pslld add mov icebp pop imul scas stc (bad) in cli outsb test add or call adc add rclb test xchg test out xchg mov popa pop pop inc jnp cmp jp das roll sbb cmp mov aaa pop jb adc dec mov popf inc mov push fmulp sahf xor pop xor xchg mov out rep popf les fistl (bad) mov fiaddl sub jg rcll xchg dec dec lret ja mov in pop jg je iret in pop pop pop ljmp jo je hlt int3 lods notl (bad) mov lds mov jmp mov pop pop addr16 add or out enter sahf leave out mov pop pop in add xchg lret hlt jns ss iret push mov jmp xor push jno outsl push call out popa sub iret lods adc xchg dec xor sub push jo pop mov or lahf push (bad) or xchg inc fldln2 hlt add aam pop pop cs add cmp icebp ja mov and loop fisttpl and adc and faddl jle lret rcr movl sbb xor or jno lret fmuls lods jmp xor sbb fldcw sub lock fsubrs ja sub outsb in sbb adc inc or in sub mov cmp adc imul push mov outsb mov int in lret movsb and pop jo out fs mov jle or fiaddl add adc je mov (bad) and jae jle stos push daa je mov xor fs xchg int3 add lret lret xchg inc aas and and leave imul (bad) cmpsb xlat iret jg rcrb mov outsb jns and jp jae xchg xchg out cmp repnz je adc insl add mov rcrl fcmovnu test mov push imul pop repnz jb xlat movsl and cmp daa pop out in mov sbb mov mov imul fsts and (bad) jg mov je cmc xlat popf rep call cli jae jle jecxz fcmovu add fildl or bound xor cmp mov fldt arpl nop or sbb or lock fmull sbb or sbb or mov shrl aas je cmp jbe xor das or fnop pop pop int or rolb cltd imul (bad) jo mov frstor sbb out fcmovnu inc mov movsl jo push pusha cmpsl xlat dec ret enter rcrl (bad) mov loop dec mov dec pop pop mov mov fbstp jnp lods ja fnsave shrl mov loop cmc pop fidivrl dec aam jmp fsubr jmp rorl mov loop cmc sub js dec aam jmp fcomp jmp rcrb xchg mov xchg insl cltd mov xchg fdivrl divl repz out bnd jmp out jecxz fistp ljmp mov mov rol lret xorb dec lods in mov mov aad mov iret and (bad) (bad) icebp jae jle lret shrl stc sbb (bad) jmp or pushf jp imull in and lods (bad) jae add lock (bad) in imul out mov pop insl (bad) aam mov ja call fs inc loope outsl out lcall repz push fcmovb stos cmp fidivl xchg xor das fsubrl push popa adc sbb mov aam daa or in movsb cmpsl cmpsl stos ret push cltd mov dec jp stc inc jbe aas repz sbb (bad) and movsb sbb mov fstp push mov ficompl (bad) adc adc pop dec sbb lret dec fstpt test mov xchg in outsb stos bound or inc fadds imul jnp jns push pop jmp call fnstcw call out and adc (bad) je hlt addr16 div fcomi stos out enter in sbb int mov xchg sbb stc sbb (bad) imul mov or pop jmp outsb fs cmpsl add mov outsl mov jno pop lods inc or loopne pop sub cmpsb mov (bad) jp mov jmp mov xchg imul push cmp and and xor xchg pop sti push imul mov dec mov int3 (bad) sti or cmp test jmp add sti push jmp into xchg sbb dec std cmp mov lock jns iret in cmpsl clc test mov cmc btc xor cld pop sbb enter movsb je adc adc push sub or dec cmc jbe stc nop mov mov mov das cmc (bad) stc push sbb pop movsb pop push sbb enter lods je adcb sub or dec cmc or stc dec mov je jg das cmc push pop fs mov loop pop je adcb iret cmc fisubrl or dec cmc in ret stc ret inc xor mov cmc lods stc sahf sbb pop and and xor cmc xchg stc mov push ds or dec cmc inc ret stc popa mov js in push mov dec ret jo xchg adc es cmc nop sub adc sbb xor cmc lret stc xor pop mov pushf stc test rcll mov push sbb pop lahf dec pop sub xchg cmc loope imul out dec cmc sbb stc rorl in mov ljmp je cmc mov stc pop fild sub test gs xchg mov adc pop cld sbb enter sub int sbb cmc and rcll scas iret mov cmc movsl stc adc xor or ret scas stc mov lods push fisttp out ret stc pop mov cmc popa stc pop sbb enter cltd je cmc add cmc add fisttpll sbb xor cmc into stc xchg je cmc xchg cmc jmp rcrb xor cmc (bad) xchg or cmc dec ret stc adc stc repnz enter push je cmc sbb stc je dec cmc scas ret stc js das cmc xor sbb (bad) cmc cmp xor iret cmc (bad) sub cmc jge stc add stc pop sbb enter cmp iret cmc mov cmc inc ret stc and xor xor cmc lret je cmc sub cmc in stc mov call and cwtl je cmc out stc adc dec cmc mov das cmc sar sbb enter aas je cmc sbb dec cmc loopne stc add int3 sbb enter inc je cmc leave sub cmc in ret stc cmc mov cmc pop stc adc xor cmc in mov test stc daa fisttp jecxz stc push mov cmc or jae xor cmc fyl2xp1 outsb je cmc cld sub cmc mov stc inc mov cmc sub add xor cmc dec stc dec je cmc cmp cmc inc ret stc rorl mov push or xlat sub cmc repz stc sub inc sbb enter mov sub cmc inc stc dec mov cmc xchg stc test xor cmc stos stc je iret cmc push xor jns std out sub cmovns imul sbb stc push rclb int mov int out jb (bad) dec es sbb mov mov int out mov imul sbb stc fcmovbe push int mov int in std lods shlb enter outsb out sub ds jbe rclb dec jle aaa xor insb int loop adc stc sub gs lahf sahf loop stc pushf xchg cmpsb (bad) test ss scas cmp gs loope mov mov ds iret xor push cwtl inc iret mov inc leave and mov imul iret stc and iret movsl out inc leave addr16 scas xor mov imul aad xchg push push js aad push inc leave stc stc into xchg push mov imul aad (bad) push push inc leave enter ss imul push pop inc aad dec inc leave or notb inc nop pop js aad lret dec inc aad outsb inc leave sbb and jbe inc imul push cmp loopne inc leave aad fist in nop sahf js aad in push sub jecxz inc leave sar xchg mov and nop mov dec (bad) push sbb inc into inc leave mov push (bad) mov imul aad push out or (bad) out inc leave int stos xchg divb std js xlat stc jle push clc inc xlat jb inc leave outsl stc fs nop lock push call inc leave insl stc sub aaa mov js xlat stc mov push fadds add inc leave inc stc and clc mov js xlat stc and enter outsb inc leave mov nop shrb jle arpl stc stc xchg inc xlat mov dec cmpl sahf mov cmpsb and xlat jl scas cmc inc stc mov mov mov mov (bad) and xlat les mov scas nop mov pop stc mov out mov cmp stc mov imulb std shrb outsl push push dec js lea inc leave cmpsb stc insl push push dec jo push push inc leave or dec push leave icebp stc mov mov ds leave mov xchg push inc dec pop mov dec inc leave xchg stc inc push push dec push mov pop inc leave ret stc mov mov outsb inc leave push stc add dec inc scas hlt add shll cmpsb adc and popa xor mov inc loop stc xchg push push sub ret pusha cmc cmp xchg push jo and popa stc adcb mov mov adc sbb shl stc pop push rorb inc sbbb loopne clc scas lock mov bound aam ret test into mov sbb fs jge cmpsb fs sub ret sbb adc lods pop dec cmp cmc mov inc fstl cmp lahf mov jb mov pop addr16 push sub ret inc aam ret call aam ret push jb sub adc hlt shl mov (bad) mov sub je xor aam ret xchg fstl aam lods sub adc add aad popa movsb push ret inc aam ret push push jge and (bad) cmc inc (bad) and and lods mov fcoml push sub ret mov pop jl test cmp sahf lods mov iret test sub movsl inc cs mov adc aad test and rcl nop movsl pop daa add test cmp dec call sahf sub inc ret lods lahf insl adc mov push pushf mov pop sbb lds inc inc loope mov int inc sub ret mov adc dec sahf fisttpll lods mov xchg xor inc inc xor je and aad (bad) and in pop and dec fldl repnz inc pusha enter mov push mov cmp lahf test jbe pop and mov adc aam (bad) push push lahf and inc mov xor adc lea mov push push ret inc or adc aam sarb test xchg mov into jmp pop inc sub jl cld rcrb adc dec mov (bad) dec cmp and or lahf xor adc call dec add lds push cmpsb push fs ret sbbl xor dec cmc mov int test dec jb je,pn push mov mov and fs pop adc mov lahf lods adc or dec pop pop add inc mov dec (bad) dec mov gs inc sub les sbb popf mov fs int mov and rclb fstpl mov adc xor or mov aam popf test cltd hlt mov (bad) popf mov push rol pop xor xor jge aaa aam pop sub inc sbb fs xchg xchg inc mov into dec int faddl sub adc or lahf movsl or mov les adc int and int3 and rclb push std dec mov popf ret test dec nop sbbb shr mov int inc and aam (bad) sub mov cmp test inc cld cs sbb in and (bad) push movsl data16 mov int sbb mov into int mov hlt push int add inc fldl in fs ret sub lahf gs in mov pop pop adc xchg mov (bad) int mov cmp inc sub inc sub add push sarb test lods lahf lea in adc or aam mov cmp jne xor mov cltd sub fs stos mov inc and les sbb movsl adc aam lahf jge mov mov push mov mov or fs pusha popf scas mov int3 int test jl jne and sbb fs mov shr aam int cmp lea pop or xchg push lock jle mov or dec test mov jl cld pop or aam fstl call in orl xor cmp lds jge pop sub lahf xchg pop push xchg mov or dec mov insl rcrb inc mov les sbb lahf dec and dec xor or sbb lds pop mov inc sbb inc inc sub sarb jne adc jl lahf insl push jo nop frstor lea add sbb rcrb add js dec mov pushf lahf popf adc sbb in pop sbb mov pop or mov sub cmc pop dec aam lahf int mov data16 pop xchg dec cmc in ja ret sbb incb cmp lahf jae dec xchg pop and dec cmp sub cmpl test xchg adc je sub xchg mov movsb test pusha mov test cmp xchg (bad) (bad) push in sahf sahf sahf insb scas mov fiaddl lods xchg inc push pop jp jmp imul push es int3 push enter sub cmp cmc outsb out push inc fldl or adc sti pushf (bad) int3 push lods repz ret (bad) in xor shll xor inc xchg push fwait movsl int sub jb int rorb cli cwtl outsb test jl cwtl stos lock ja enter in andl fnstenv out push ret imul aas das xor xchg stos inc push das jnp and cld xchg mov push adc outsb mov cmp loop push pushf fildll cli int ret imul jbe adc test test pop add fldl2t iret inc loope iret adc fildl enter clc js jmp stos jb ret dec or iret fyl2xp1 jae lret bound jbe cltd adc cld lahf mov mov mov jbe jmp add lahf pop lcall mov fistpl cltd cmp mov out (bad) jb lock cwtl push fistpll mov push sub mull jmp in jbe jbe (bad) std xchg sub in mov (bad) mov idivb and xchg in cltd (bad) mov inc mov xlat out (bad) int xchg lods mov out xchg inc or je (bad) movl xchg sbb mov fwait sbb lret adc xchg (bad) jnp aas cmc jg mov in mov sbb jp xlat ficomp push in or ss cli or mov std (bad) add jae cmpsl pop mov mov (bad) pop add sbb mov push cmpsl out aaa stc mov negl call jp imul ficomp sbb out clc sbb mov cmp hlt (bad) enter cld xchg clc iret loopne les aas fsubrs lock icebp repz or jmp cmp hlt mov jo lds (bad) adc xor mov or sbb ljmp pop subl lret jns and mov mov std ror rcrl movsb fild sub in or hlt cmc xchg repz rclb push mov pop sahf fwait xchg scas jp negl das mov mov out je outsl cmc adc ud2 or adc sub jbe sbb add daa cli sbb adc pop push pop add ljmp pop enter mov sbb dec mov jge pop mov xchg mov into scas out fwait or test pop (bad) mov mov mov mov sbb fistl jge popa jl xchg jmp or cmc pop inc jl inc cmp cmc (bad) (bad) and jp xlat in dec push pop loop (bad) cmp pop bound (bad) sar hlt adc cmp inc lea or sub mull xor mov xchg test imul cltd aaa or notb adc mov mov shl or fwait cmpsl pusha mov jg mov sub inc std clc cwtl mov rclb leave (bad) push sbb fbld mov mov (bad) xor imul jnp cli lcall aaa add ss stc and push stc data16 or xor sar mov push stc shrl and (bad) sub in lret fdivr repnz xlat fxch pop mov fdivr xchg add jmp daa fistl movsl mov in cmpsl mov stc addr16 and mov cmpsb (bad) lods cwtl mov mov nop loopne pop scas cs sbb ds xor testl or fild decl out fisubl sbb fildll stos cmpsl je lret out (bad) cli ss repz fbld jns loop testl push sbb pop popa in insb xor mov fdivrl pop jmp xor mov pop je or (bad) in dec mov mov xor add sbb ja mov dec daa rcll jmp dec sbb ja fcomps cmp test roll pop mov jmp cmp mov pop cmp sbb rcr mov jmp aad xchg ja pop pop mov mov stc jmp das sbb lahf in stos push roll mov mov jmp mov push pop mov cltd lret mov jmp negl out ja data16 test xchg mov jmp jecxz (bad) ja les pop in icebp not in mov jmp hlt sbb ja xlat jmp jnp pusha mov jmp adc aad ret lods aam xchg in jl mov rcrl bnd jmp js pop ja mov (bad) loope int pop ss mov dec repz mov pop stos add out fiaddl inc mov dec stos sub sbb sbb mov mov stos fs test push fiaddl ss repnz mov cmp ss mov fwait repz (bad) dec stos xor out fisubl xchg ss mov mov stos mov addr16 sbb daa repz mov sub mov inc sub nop fidivl or (bad) rep mov push fisttp add out fisubl ss xchg mov mov stos addr16 mov sub adc ss (bad) mov mov stos jp pop stos out fiaddl (bad) mov fbstp pop stos out ficompl jnp mov insb stos jno mov ficompl aas repz or stos divl out fiaddl mov mov stos cwtl je jmp lret ficoml pushl loope std mov mov stos mov lret mul out sbb ja aad pop (bad) in cmp ror mov jmp sbb ret jae pop das in int rol mov jmp push sbb ja (bad) jge jns cmpl inc sahf sbb ret leave loop shr adc cmp jp arpl pop lods pop sub pop pop sarl fnstenv jmp rcrl jge ret shrb in lock js outsl mov xor xor sbb ja nop inc pop sub shl sarl (bad) jmp popf sbb ja in pop fsubrp dec and test mov jmp rcrl ja out pop fucomp imul mov jno jmp lahf sbb ja pop cmp in ds lea jmp cltd sbb ret ret push in lret push mov jmp (bad) sbb xlat es fcomi add sbb pop mov inc mov jmp sbb pop sub mov rcrl mov jmp movsl sbb ja or pop hlt in sub rcl mov jmp sbbl dec pop adc jmp shl mov jmp js mov insb add jmp fistp xlat ja movsb push pop or mov xor fs adc fdivs pop push pop jg inc xchg in mov gs push jmp sbb ja out jo jne in jno jbe sbb mov mov aaa in das xchg rcll imul sbb ja add pop cli in fucomip shr mov jmp (bad) sbb add xchg inc shrl mov jmp cmp mov pop aam inc pop pop inc in and rol mov jmp arpl dec ja fldl2e pop enter roll push and jmp insl sbb ret enter in into pusha roll mov out sbb ret xor pop fstpt push cmpsb sar mov jmp sbb xorl in mov bnd jnp loope sbb ja xchg cmp and and ror mov jmp xchg sbb ret jns pop cmp shlb dec mov jmp in sbb ja orb in push cmpsl sar mov jmp in (bad) ja cwtl jg orb mov sti lret cli xchg sar and test xor jle mov daa pop dec pop push mov sti inc std push das sti (bad) push push or divl cmp mulb hlt jmp dec xchg bnd loope lea and ja test sti push (bad) dec mov ret mov push add add stc jl mov sti mov push aas inc sti and jmp or cs sti call in push sti jge xchg sahf loop fwait jp lods pop (bad) imul testb popf lock leave (bad) icebp sti mov xlat lahf cmp dec cltd sti push pop (bad) adc les push (bad) movsl pop adc xchg orl sti fist xor sti mov jo mov clc add inc sti jne ficomp add sti xchg and pusha fnsave sub pop jb sti cmp mov in repnz cmpsl inc in sti cmpsb mov test repnz repz jmp fldt fnstcw loopne sbb pop aaa in stos sti outsb pushf jp pop add adc inc call mov and idivb decb push ds incb rcrb mov jnp js inc mov hlt rcl mov cmc xchg (bad) adc cltd or and sub mov push repz adc adc push cmp cmp stos add sub add loope dec mov sub cs jae repz ficompl push adc lods jecxz xchg sub push outsl cld pop hlt stc outsb div rolb jge mov xor (bad) pop iret fstpt pop or jo fnstcw iret loopne push mov jae push xor ss lods lods cmp adc aad pushf xor push cmp in or mov jae (bad) and or insb ja cmp fldcw imul xchg stos mov or jle aaa scas test xchg pop fcoms xchg and repz out jo jae jmp mov jp cmp jae aad fbld adc jnp jmp push stos cld cmp mov fsubs jmp pusha aad dec gs loope xchg adc xor mov push push mov (bad) mov rorb adc lods xor inc out inc int push pslld dec adc pop mov (bad) sub pop addr16 pop mov pop clc scas push or sub iret adc inc imul test pop or xchg cltd push xchg adc cmp sbb test xor sbb jl data16 adc rcll xor xchg xchg sbb cmp jle mov inc cmc jne repnz and jge xchg add ret jmp push jo (bad) mov das sub add push add mov xor push shr sbb or jecxz lods xor test repz sub and pop js xchg and mov stos xor mov inc (bad) ja jne outsb leave adc mov cmp jae mov push js ret xchg data16 mov push add lods xchg sahf cmp mov jbe mov imul jge xor xchg (bad) and push push cld or (bad) push xchg leave mov clc mov and cli dec mov sub sar repnz dec adc int mov or ja cmp inc mov je ljmp faddp mov fiaddl sbb pop ficoml popa mov cmp idivl xchg mov push cmp rcl mov nop xor fcompl mov mov clc push mov mov push push jmp scas (bad) jp push and repz aad mov fildl pop mov mov loopne xchg divl sahf cld cmp xchg fstpt or fs fistl idiv insb pushf adc out pop mov adcl and daa jmp js jp xchg sub mov sbb xor jb insb pop push (bad) sbb mov aam mov fstpt (bad) or in xor dec mov roll sbb mov lret fs enter cltd test mov dec xchg test dec ja cld jp mov shlb mov insb mov loop addr16 test push mov mov stc sbb sbb insb mov push rcr dec adc mov cmp (bad) cmpb push fcmovne (bad) je or fdivrs dec jp clc xchg inc repz jmp jns jp sub (bad) repz jmp inc imul lods jmp sbb xchg and cs jmp cmp cltd fdiv aaa jmp cld jno aaa int pop fistpl cmpsb mov sbb fistl adc cmpps fwait or push negl ds jmp stos idivl gs cmc mov mov ds push outsb mov sahf neg div daa mov out fnclex arpl mov adc mov xchg and fisttpl mov jb jae adc mov xor icebp mov in adc ja xor jle cmp jnp js (bad) leave rorb mov mov (bad) mov std in incl fucomi jbe mov es vcmpss xchg fistl mull cmpsl sub xlat (bad) (bad) imul icebp xchg dec fldt adc in testl pusha push pop idivl lods fistpl mull fucomip loope in sbb icebp fstpt pop sarl sbb mov out lock jo mov push inc (bad) fstl xor movsb or jbe dec xchg mov push inc fistpl fwait mov aad fistpl divl mov divl rolb mov (bad) xchg fildl or pop xor mov call jp xor jmp xlat jle sub add dec jmp leave ljmp fsubrp pop int3 mov pop dec lret or out jmp test or cli not dec in repz jmp inc bound addr16 repz adc outsl aaa repz jmp mov iret and fldpi enter je lods xor and ret sub jp xor repz daa lock push jp repz jmp sbb insl aad mov jp rcrl stos jmp imul pusha repz jmp mov jp outsb call and jp ret repz cmp pop sahf jnp repz jmp push into push repz (bad) jmp (bad) (bad) repz jecxz push jp pop cwtl (bad) repz rolb cs repnz jmp jecxz jp popa inc cli repz lods mov lea jge (bad) aas sub js out pand pusha mov lds mov jg fcmovne push dec mov fmuls lret repz jmp xchg cmp lods aas (bad) repz jmp xor sbb dec repz out or arpl and jl stos in repz push int3 jp scas and or mov cmpsl jp negl pop jmp inc sbb xchg jae repz iret faddl mov stos jl pop jmp adc jp outsl (bad) sahf repz je mov lock xchg fisub test movsl enter mov repz jmp lcall repz jp call jmp aam jp lcall push push jp mov mov sbb jp or out (bad) pop ja les test cs push mov mov and xor jp inc xchg aaa mov mov mov cmp (bad) out fcmovnbe mov (bad) out mov push cli mov dec sbb mov cmp xorb mov inc mov mov lahf mov movsb mov sti es lds cmp pop sti pop jp and jg ret pusha int3 pushl mov adc cmpsl andb push cmp mov lock int sti xchg shll xlat dec test jo (bad) mov add arpl daa push lahf clc das sahf xchg inc imul out mov push outsb pop ja pop push cmp sti sub add mov mov sub (bad) sti in stc cmp cli call push mov adc sub mov xchg adc sti (bad) jbe add adc xchg sbb mov loope (bad) sti ss inc cltd in push jecxz cmp mov sub (bad) (bad) cmp subl mov enter xor dec jmp call call out sti into push sbbl sbb scas dec roll dec sti xor inc mov sti in idivl test out cmpsb (bad) jle sti cmpsb cmpsl inc les pop jl pop adc inc scas lret ljmp out pop jmp pop jecxz cmc jmp in xchg lods jp cmpsl push loope jns out jl scas sbb or fildll aas mov js cld mov mov dec mov xor repz imul shrb hlt rclb xor adc ljmp cmp xchg aad cmp loope shrb sbb aam xor sbb cltd pop mov jg xchg jle sbb cli jo inc mov test mov sub push mov jmp out in jno ret or jmp movl dec das js cmp adc push mov push lret into lret js imul lods push sbb push jns iret adc and (bad) mov repz scas (bad) xchg outsb pop or xor xchg sahf lret stos arpl jnp xchg jg ds sub ja push daa gs push push sbb push push imul push adc fisttp loope stos rcrl xor fist inc mov mov dec xor lret push mov fidivrl or mov outsb or andl mov dec xchg pop jne incb mov cmpsb setge jg mov data16 pop lock outsb pop mov dec inc push push add inc mov dec jo cld scas or leave lods sub mov jnp (bad) loop js ja loop hlt cmc rclb cmc push cmc pop sarb xchg push stc dec out pop fwait sbb lods cltd (bad) cmp cltd dec insl push call mov fistl popf xchg mov insb adc mov call mov mov add inc mov adc mov (bad) jne scas (bad) jnp stos fisubl mov mov outsb cltd lods mov outsl mov in aaa cmc (bad) repz in fnstsw cmc jmp jmp popf (bad) xchg out mov imul cmp dec imul ficom in shll mov and inc xchg inc xor rcl scas test mov add jae or ljmp clc imul stc js xor out mov cmp mov ficompl mov cmp dec add ljmp adc mov xor add dec xchg in outsl mov lahf fstpt ror cmp fs (bad) loope loope loope repz ja adc fild add xchg out mov cli fistpll adc jg cmp stos nop arpl jae fnstcw pop push lods subb out fbstp fldt xchg mov shr out iret push mul adc pop mov cwtl or (bad) push mov imul mov clc push shrb fmull fnclex xlat out (bad) jne iret cmc hlt xchg lock lds (bad) ja sbb out pop repz flds mov lods jmp in jne testb rolb imulb adc fwait aad cmp adc insl or ret fdivrs jns movsb xor insl in shld mov repz push sub sub jmp out in xor lea stos push xchg mov imul push (bad) prefetch or push dec and jae out (bad) enter fildl std jg and jns sub movsl repnz xor cmp mov push fildll cmpl imul enter (bad) jne cmp xor pop jae je sub pushf sub pop and fildll cmpl mov icebp sbb sbb imull in add jns pop fistpl xor fbld or xor inc fistpl dec stos rolb or shlb icebp in jns fcmovu pop sub xor jb push into ja and arpl cmp inc mov xor mov cmpsl lods lock scas test es inc xor lahf mov pop dec mov mov hlt (bad) pushf cmpxchg repz in or cmp cmp jge pop pop mov out je sbb outsb cmpsl in add cwtl stc clc and pop jb test loope clc sub das iret fs loopne jge leave mov loopne mov (bad) mov sbb outsb test mov enter xchg std ret pop imul fs in mov jnp jae stc (bad) decl fwait cmc inc out hlt xchg cmp out jae cmc push push sub in cli lret pop fisubr frstor cld xor pushf (bad) xchg mov sbb xor mov dec jmp jl test add cmp imul (bad) lret lret je inc mov enter jg sbb insb stc out bound js cli sbb fs and fwait mov std outsl insb jnp lods sbb adc jae hlt lret addr16 jno in lret mov mov ret lret jb je xor cmc decb bound adc addr16 dec fistpl js cmp cmp hlt mov iret xchg (bad) roll and test imul inc stos (bad) jo adc and xchg cli or aaa cwtl sub jno imul xor jg in lea aaa aas out dec ss data16 mov jecxz clc gs pop data16 imul cmc hlt xor hlt push xlat pop out out ljmp pop mov mov imul aas xchg inc sbb or aas inc outsl or subl out or jecxz fild (bad) ljmp (bad) or ret ljmp lea mov scas loopne stos ja cmpsl or mov fwait mov lea xchg ljmp xchg sub inc sub lea jno jns les mov inc mov pusha rcrl test icebp adc push xor pinsrw cvtps2pi pop addr16 xor push xor pop xchg sbb xor movsl outsb sbb inc ret xor push xor inc (bad) xor push xor sbb cmp mov jge imul cmpsb repnz jl (bad) jge ret (bad) stos or adc sbb add and jo pop cld jp mov (bad) call add mov (bad) push jecxz jmp jge cmp jp (bad) clc push test scas mov sub dec or out mov mov js mov or add imul xchg xor icebp fidivl jmp or popa out jne out jo movsl sub cmp test movsb adc movsl dec mov jmp repnz jne cmpsl orl xor pop ja cmc xchg pop mov out cmp test or ret test (bad) lcall xchg dec rolb loopne out addr16 inc and push jns push push ljmp in add mov mov mov mov mov mov xor or jp adc cmpsb scas imul jg (bad) adc sbb jl sub jb out out xchg cld lock sbb std pop andl cmpsb dec add pusha mov xchg mov repz push pop jg pop std fdivs std lods lret pop pop imul inc fnop insb xor (bad) xlat and and dec movsb mov (bad) test sub pop xchg xor add push mov lea (bad) loope and repz outsl xchg es das jge imul xchg jmp (bad) mov mov jno nop add out negb insb aas adc mov cmc jmp or add adc mov jecxz xchg mov jl inc test fcom in imul xchg pop imul jmp movsb xchg in mov dec in mov loope dec xor hlt xor iret stc mov adc add mov push aas mov repnz jb jmp jecxz jmp xchg push into mov test fsub aaa jmp out lcall fidivrl ficoml adc jecxz fist fxch add cmp leave jmp jecxz fbstp and scas dec frstor cmp push int scas pop imul in lock insb (bad) out mov pop (bad) mov loop,pn fsub jno rcl mov fcmove xchg out fild mov mov out cmp imul out sbb repnz sub xchg enter fbld icebp ret sarl mov out repz jmp out push mov in sub out fucom lods iretw mov pop and ffreep test or leave sarl adc xchg out iret mov imul iret repnz fsubp in adc je mov mov (bad) popa mov repnz (bad) jmp jecxz mov icebp out pop ret mov icebp out inc shlb (bad) jo jbe stos call push mov xchg rol mov leave mov outsb jmp and out in mov push push sub repz data16 out adc outsb mov jmp inc mov cwtl push ret movsb inc addl test sub in aam in ljmp rcrb scas jb scas add enter addr16 dec fidivl ret (bad) fsubs in mov jecxz popf fstps cmp (bad) ret (bad) mov loop ret xlat inc ret xchg fbstp mov (bad) ficompl (bad) iret xlat mov cmpsl int xchg repnz lods ljmp aad cmp mov cmpsl mov mov iret es les push mov hlt xor jno cmp sub lret mov inc jmp (bad) xlat faddp rolb lods scas push mov pop fistpll mov mov scas pop rcr inc test lock pop inc iret imul insl outsl jbe fldenv iret int outsb mov outsl cli xor stc testl jecxz out jo jbe movl jo xchg mov mov xor pop rcr cmp imul bound sub mov ja push mov insl outsl adc shl dec out mov jns repnz xchg lcall gs cmp rep push mov jg mov cli xor jae sbb lahf xor mov (bad) fbstp mov andl ret fisttp push popa xchg loope loopne push jno xchg jecxz cmpl mov push pop dec mov xor (bad) in (bad) loope stc sub adc fistp daa xor jmp cltd divl in sbb mov jmp jmp out leave add or pop or (bad) mov jmp mov sub test jmp jp jge divl js in pop and ret jbe,pn jp imul sbb stc push xlat out cltd xor imul jb stc push xlat out sub xor fildll cmpsl in sti js repz add lods add jecxz stos xlat cmc mull outsb test cmc inc scas stos cli into jne testl sti mov outsb ret mul js add stos jle loopne clc add xor js in out hlt lock or push mull out jp xrelease mov sbb out stos push pop jmp inc push lea jae mov icebp shrl sbb sub data16 mov rclb push cmp or xchg jg mov xor xchg xchg arpl xchg (bad) sub pusha es mov and or in aad mov xchg push sbb sbb insl lret movsb sbb lahf pushf imul jge,pt xchg fsubrp sbb and daa mov faddl fdivrl push fmull (bad) fcoml in icebp cmp xor push lret pop sbbl pop xchg adc xchg movsb fs xlat mov pmovmskb dec pop dec xlat fidivrl pop cmpsl push fnstcw mov mov jl jle (bad) xrelease mov xchg sub aas in js add pop hlt add jb pop xor pop aaa sarl div jmp out mov jmp mov repz stc jecxz lret stc (bad) neg fld idivl mov push xchg ljmp or out mov fsubp add mov data16 (bad) (bad) add mov addr16 push sbb adc push cltd push or pushf bound rorl inc adc jmp mov mov icebp in xor in call sub ja pop (bad) in pop xchg pushf mov out adc jae jmp mov jmp out cmp mul fistp stos jecxz fucomip mov jmp xchg dec dec cltd scas ret cltd inc fdivs scas in cmp jno pop jno jl xchg (bad) icebp jmp (bad) cmp jmp xchg adc stos (bad) adc push adc test and jmp push arpl vorpd in dec adc or mov in dec pop in dec adc or (bad) sub dec xor add sbb adc adc inc dec jbe xchg dec ljmp xchg neg sbb scas xor push out jle setle jl fisub push jb pop fdivp ja clc stos push std jg std xor jle in and and es push aas mov xchg mov test int mov (bad) loop pop mov (bad) loop add ret add ja lcall cld jno stc adc dec popa popf mov scas mov popf xor btc mov xchg mov pop inc adc callw xchg pop mov outsb in in cmp cli adc jge icebp in repz stc stc loop repnz jmp mov lods dec ficoml imul fwait mov cmp jo xor je cltd push hlt repnz cmp out xchg sub (bad) outsb cmp mov dec addr16 out and out dec pop addr16 out dec push and out dec dec push les stc adc dec dec ds dec xor pusha das jno (bad) iret xchg xor movsb rcrl and sarl jmp in repnz jmp in aad jmp dec lahf test sti push rolb imul test lcall sbb add sbb and call js jb sub into xor js sub not adc dec jge adc sahf call leave (bad) ja repz (bad) and or xchg repz mov pop jp es outsl mov cmc in (bad) mov (bad) mov pop arpl inc push fsubrp lcall xor dec push xor mov xor cmp in out into out add adc mul rorb mov lds fdivs in jae jmp push xor out fsubr mov mov out jecxz fildll pop stos (bad) mov out jecxz sbb mov movsl mov or aam push stos cltd (bad) push cltd pop jecxz mov out push and jb mov cmpsb imul (bad) xor jecxz data16 jmp shll or inc cmp iret test (bad) icebp sub jecxz lret sarl (bad) in mov call mov iret stos jl mov test leave mov out in lods fsts sub add jmp pop aad push mov dec or mov (bad) mov pop shl iret mov rcrl sub or jns jne lods divl sub and mov addr16 ja repz aad repz mov jmp xor push xchg lcall in dec mov (bad) imul mov out in mov (bad) out mov in outsb cmp (bad) ss push pop das fisubrl xor sbb popa dec jbe push fidivl mov and mov xor add xlat pop popf in add jmp dec xor ret and into popa lock out fildll inc push lahf jo inc test inc int mov xchg repz stos ret mov cmp (bad) mov and jno (bad) mov cmp dec mov cmp mov js mov clc xor jo jmp inc pop into pop dec adc pop xchg dec xchg pushf mov jecxz jp hlt add rcr iret adc mov fcmovnb mov lret (bad) (bad) pushf (bad) hlt add sbb add sti adc ss enter or or xor sti outsb dec mov clc mov aas mov add adc add and dec rdpmc mov push ret sar faddl and and xchg sub xor adc sub push leave adc outsl mov jo imul sbb or jne adc imul xor fstp into mov jl xchg xor ss iret inc add insb aaa fstpt insb aaa sarl iret or fdivl (bad) mov sbb fcomip mov enter gs fcmovnu adc call fnstenv ret outsb pop clc shr jo aam notb sbb mov call les sub adc call fnstenv shrb lret cmp or enter adc rcl fcoms and call fnstenv outsb inc mov daa cltd push pop add movsl scas jo enter adc iret rcr adc dec jae xchg xor jb out aas in popf aas jae fwait std aam addr16 or xchg adc pop mov sub clc cltd cltd les jnp imulb sar pop adc (bad) clc sub stc enter pop or adc repz out fidivl jo and loop mov inc pop movsl out (bad) out jbe out inc jb scas loope aad push int3 fmul sahf push gs mov leave jmp fdivl jb push jecxz xlat shll imul or and (bad) out fistpll out fcmove push int loope fs jmp fnop mul jecxz loopne adc test out fcmovne push int3 dec loop jecxz jne repz imul iret outsl mov (bad) iret popf mov fcmovb imul cwtl imul (bad) outsl mov (bad) xor popf mov jb fsub fmul imul mov fildll xor jecxz repz fnclex (bad) out push (bad) in mul out jne out ret insl mov jmp (bad) jne mov jecxz jne iret testl (bad) jmp int3 (bad) xor lret loop neg jmp pop out (bad) (bad) out rep scas out aas jecxz mov out xor popf mov xorl fsubr push pop es js iret and imul movsl lock insb xlat jo mov adc sbb loop ss (bad) leave jecxz adc lock jns or xchg rorb mov or or pushf mov repz xlat adc repz in stos jge xlat add dec je iret pushf pop leave std imul xor imul movsl lock shrb cltd sub imul mov sbb mov mov and adc icebp push shrb outsl mov cmpsb and cs test dec out or cmpsl cmc and adc sbb cmp sbb clc cs cmc add lcall dec fist lret insb lcall mov push mov pushf pushf jb in add cmc ret mov push add push xchg (bad) mov mov sbb mov push xchg fcomps jmp dec lret push cmc imull jmp out mov repz or fldenv out mov fbstp sarl or mov iret daa outsl fwait out push add xlat cmc jecxz lcall (bad) repz mov lcall mov fcomps test imul cwtl imul neg cltd xor fadd jmp xor xchg rorl adc out fldcw ret jbe int stos push jae xchg (bad) lret ret mov rclb xchg repz fcmovnu movl rcll les push jb scas xchg mov in repz xor xchg mov out jae xchg iret lods mov in dec adc addl loop (bad) dec popf push loop dec xor addl loop (bad) dec popf push loop dec adc addl loop (bad) dec popf dec loop (bad) xlat cmpsl lods loopne lods jle lods xchg xor repz jmp cmp js mov ret lahf pop iret jo add lret popf or in jns cmp jb mov mov lret (bad) fimul lcall int adc mov popf pop inc xor push stc bnd jmp repnz add popa mov and push cmp inc stos test mov add pushf push lods out movsb (bad) pop fcomi xlat repz iret sbb test pop js mov or out aas jge jg movsl sarl fbstp mov jg pop inc ror jb outsl loopne add mov jb sbb jmp clc and jmp inc out out aad sbb push int pushf mov sub push (bad) idivl lock xor xchg adc fs mov or xchg jo xlat arpl fiaddl xchg cmp cmpl shrl add adc mov pop dec mov sbb loop or mov insl push outsl inc fimul orl stos js jmp cli cmpsb (bad) rorb jb cmp lods push (bad) or scas fcmovnb aas pop sbb nop clc outsl ret out jecxz loopne jecxz ficomp cli jp mov xchg push out out rclb or inc lea push inc int sti arpl jno push (bad) cli mov cmp and adc or (bad) imul push hlt sti and mov lret cmp cmpsb xchg dec sbb pusha (bad) test cmp in das sti pop out xlat mov adc push sti ja mov push dec lahf and jae test sti xor clc dec xor jl cmp lock mov push cli es cwtl xor xchg (bad) aaa out sti icebp inc aam fnop int hlt mov scas call mov ret jnp test xor jp sti iret mov adc mov xchg loope mov cmp (bad) sti xor adc xlat cmc (bad) sti and mov sti jmp cmp repz sti (bad) aas dec sti (bad) dec out ffreep mov and lods lods xor or insb xchg out push and xor ja stc xor add cmp stos push add add flds lret lock mov leave sub stos (bad) bnd hlt inc int3 inc out lods sbb lods clc std (bad) repz cltd repz (bad) (bad) sar test clc jge aam stos daa sub jl gs popa cmc sub mov sub cmp pop aas lods ret aas xchg decb lods jb int fldl2t mov (bad) iret dec xchg fxch xchg push jle inc xchg mov xorl jle movsb in in imul xor in jmp or push in inc and or mov push or and jmp pop jmp xchg push (bad) daa push jns je mov xor test fildll jmp loop or xchg cmc popf cld ficom or cmc jno (bad) repz test cmp inc adc cmp jmp jl jno (bad) or jnp (bad) jns fcmovnbe das test (bad) push mov inc sbb pop out dec jecxz loop sub in add and fsubrp push fisubr adc insb xor or ret pop in clc arpl xlat test sbb shr mov das sub xchg mov mov push test cmp repnz xchg jo lahf push jecxz adc daa aas ror or add xor pop or jl pop pushf flds sti jp jnp stc sahf and (bad) add push lahf stos and aam fisttpl fcmovne mov scas fldl negl stc xchg (bad) popl xor xchg jp xor addr16 mov aas xlat das (bad) out js inc jmp call imul cltd sbb cmpsl dec repnz cmp icebp and in stos add cwtl mov (bad) icebp and idiv and mov jmp (bad) roll xchg xor xchg mov clc pop repz sub sub clc ja or aaa in jmp jle clc cmp call dec xor ss pop imul repz push mov cmp test cld iret icebp xor cmp sub adc outsl clc and push mov jecxz fistp mov pop out js insl mov mov outsb mov mov (bad) or mov adc pop fcoml or jecxz sahf xchg pop jmp pop xchg jb hlt loopne adc mov fcomi sub cltd and loop cmp mov scas clc repnz and sub lcall jecxz push in ficomp mov imul (bad) repnz leave mov add in add dec sub clc stos pushf scas or push fwait push test cmpb out xchg mov adcl stos mov cld mul in jge stos aas popf fstpt mov jmp pushf popa jns stos or stos mov xlat testl jnp add push pop mov (bad) and aaa lock or nop xor shrb and and add daa loop testb insb pusha lods mov xchg pop jecxz into mov pop sbb pop jns mov outsl dec pop lods xchg nopl jmp pop or jns gs and lock jmp addr16 xchg sub sti sub lock lods ret xor inc es outsl jo out xchg pop dec test jmp xchg shlb pop push lea jecxz add mov test js fstpt sbb or leave inc into xor mov iret jns in or or lock xor in icebp push clc add in icebp pop mov mov mov xor lahf (bad) mov push (bad) aaa mov dec pop imul mov mov dec push mov lahf shl jns imul mov aas (bad) xchg imulb add push (bad) (bad) cmp mov test imul push xchg cmpsb pop adc fisttpl sub leave mov push pop ja in mov adc sbb outsl push xchg pusha sbb imul xor popf sbb test pop pop in dec and or (bad) push negb push mov push or dec cmpps fstpl adc jns pop inc out (bad) xor test popf sbb adc hlt cmp fidivl inc jne fstl sbb and cmpl push inc sti mov mov or push imul icebp dec out cmpl mov call mov push test shrl sti xor adcb aas cmp sti pop mov sti aaa xchg fidivr cld daa jl stc sarl (bad) pop sarb and pushf in stc mov outsl loop popl mov add das imul cmp cmc test in sub hlt stos or pop faddl jp enter sar adcl jo clc xor mov cmp push lea add xchg movsl inc xor sbb sub aas cmp (bad) repz sub add adc xlat in sub adc ljmp add add cmp adc jmp and push mov xor lock (bad) out xchg dec (bad) repz data16 (bad) fcomi mull arpl mov add add mov iret in cmp lret lock ljmp push mov (bad) push in fidivrl mov imul cmp ret pop repz mulb xor mov ret pop fcoms mov push sub mov in and inc adc mov mov repz jmp and out mov fdivrs and sub xchg repz sub xlat adcl ret or mov jp out es jecxz insb stc push out mov (bad) (bad) notb sbb repz (bad) aaa fild xchg jae or xor mov cs mov int ret cmp dec xor jp mov lcall mov fstps dec jmp (bad) cmp or popa fwait push pop lahf mov iret mov adc push sub mov jmp push fwait ljmp mov cmp jbe (bad) push xor ror mov adc lret or (bad) jne neg jae stos xlat icebp js sub pop xchg ljmp adc pop jg fadd repz xchg ljmp mov fnop stc mov rolb jne fbstp cmc sbb lock dec fwait jno fistpll sub pop xchg push fcom addr16 jp out call adc lock mov ret (bad) mov dec fisttp and xchg (bad) subl out insb jmp aas jle pop or jae popf repz int3 imull in sbb lock mov jbe pop ljmp jns test add iret add fcmovb ds aas inc jmp and jae popf repz jne dec cwtl sbb sbb cmp data16 int and pop sub icebp xchg insl jb fist mov scas repz cmpsb out sar js jns mov cmpsb bound int3 push nop js push in outsl mov in in jae jnp js stc add cld xchg les sbb sub sarb (bad) (bad) push mov jp rclb loop or fldenv jns lds sub test pushf std adc data16 inc or adc dec pushf xor aad cmc int sahf insb mov adc jle lds xor mov add dec jecxz xrelease mov inc (bad) mov cs mov xchg pop stc lea mov imul lahf shrl leave cli outsb mov (bad) xor mov and popf xchg xchg pop ss scas arpl daa or pop mov lret and imul cmpsl mov xchg xor pop pop ljmp outsb test insl mov out mov test outsb nop cli jmp and and jmp pop aam sahf mov imul lret stc adc clc adc js jmp mov adc pop mov ret dec (bad) mov imull repnz (bad) jno test jne idivl or mov test ljmp repz outsl popf sbb (bad) (bad) mov xchg xchg ret aas and mov mov xchg pop loopne lock mov mov shll imull fcmovnb xor fistp out pop popa scas push fs jnp adc pop (bad) stos adc jo dec inc fs jmp rorb ss cmp mov shr jo outsl stc sbb push clc inc mov cli cmpsb sub adc and and pop cmc inc clc mov sti inc xchg std addr16 lds xlat mov jo jae xchg pop fucomip add push loop xor insl push ljmp test test in enter movb mov ret iret mov sbb dec sub push lock jecxz jge test cmp fsubl pop outsb daa popf in lods push rorb xlat scas in call jmp out push rcl (bad) fs loop xor adc (bad) sbb lret mov mull imul gs mov or and fsubr or jo ja lock jae pop xor mov or jecxz cli sbbl jno xchg clc mov xchg das cwtl lcall in inc dec and add js repz popa cmp sub cmp inc stos fwait out jne cmp and outsl mov xor cmp pop int3 or mov cltd sub leave scas xchg or mov mov shrl push out iret sub mov lods repz cmp imul stos repz (bad) sbb cmp push fiaddl out iret sub lahf sub ljmp out sarb pop push jae or jno fwait sbb add add out adc push jg xchg sbb repz mov lahf sar add sti push pushw popfw push inc pushf movw pushf pushl adc lea pushf pushl ret add inc gs imul je aas cltd or icebp xlat pop (bad) adc fisubrl lret or jecxz movsb cmp push sbb cmp mov je bound inc and fisubr (bad) (bad) pop add xchg dec or test jbe xchg sarl pop outsl mov adc es sbb push mov inc jmp mov test xchg sbb mov or es pop adc mov imul arpl cmp pop repz fisttpl xchg les and ficom jbe pop repz adc ljmp push lcall adc jmp sarb lahf or or scas lret cmp cltd addr16 sub mov icebp je call inc push mov ret in mov dec jp sub mov popa xchg mov and cmc adc push call pusha pop xor mov gs inc pop shll and dec and imul pusha pushl mov lea jae pusha jmp cld push rcrb xor inc push or pop insl cmp jmp in jle jae dec mulb gs pop pop fcomps cltd xchg scas dec and mov mov mov (bad) test fsubl (bad) ss ret xchg movl pop gs addr16 (bad) fsubl and dec inc loope mov popf cld pop scas or xchg cmp push jle es mov mov inc cli (bad) sti lcall mov ret fdivrs (bad) int3 pusha sahf xorb stos sbb add add adc mov sub mov xchg stos mov ljmp mov mov adc iret mov scas ljmp mov jmp mov inc sbb pcmpeqb and mov mov push mov loop outsl jp push push lret imul sbb push int nop les mov negl mov adc xor sub sbb imul push lea jne call pushf movw cmp pushf pusha lea jae stc pushf call lea je cmc test cmp jmp pushl jmp pushf lea call call not not push pushf mov mov setns mov pushf call pushf lods bt call xor (bad) jae cld add cmp pop cmp outsl pusha add and out ficoml and add fistpll dec pop or fsubl adc sbb das scas jecxz mov shrb clc popa adc push enter sbb push sub lcall js dec or xor mov shrl outsl fimull movsb jecxz sub cmpsl push repz dec adc or fmull clc jae add outsw jo outsb add add jae jo imul ret inc pushf dec inc mov inc stc not clc sbb xchg setle mov cmp not not mov test xchg not cmp and mov cmp sub pushf jmp add insl je insl gs push or add add popa insb imul je add add jae je jae jb popa je gs add add imul jae js call add inc gs push inc gs je jo add dec jo outsb push jb arpl jae outsl imul pusha lea jae call pushf call add push gs jb inc jbe outsb je add out mov jmp add push dec add lea js pushf pushl push lea jne jmp nop cmp and icebp mov xor xlat movsb negb repz ja jae je add add jb outsb je add inc and movw pop pushf pushl popl pusha pushl jmp lea call pushf pusha mov jmp add jae jb outsb add cli ljmp adc jbe incl add sub jae je popa jo pop je jo add push shrl hlt (bad) out in test js test rcll cmp ds lret xchg int jecxz icebp lods out mov rcr bsf lea push test test mov jmp add inc gs gs imul add data16 je add add je inc add add add xor xor add inc pop cli decl inc lret (bad) sbb jp sub hlt (bad) insl out int dec sub outsb test cmp mov lcall into sub ljmp and gs (bad) jnp add (bad) scas mov and jmp je dec sahf (bad) jp inc xor sub mov or cltd popf sbb xchg je test fmuls ss push scas shr push sbb sahf cwtl shrb imul or jne dec cmp imul inc sbb mov fs call jmp rep pushf pusha mov push mov pushl lea jmp add inc insb outsl jae inc gs je jo push movb push lea jg xchg call push call test (bad) sldt add jae jb jo add add jb jne insb push jb je arpl adc btc aaa mov add shld mov call lea jne push pusha movb stos push mov push lea jmp pusha lea jae stc cmp call pusha lea jne call push mov mov lea mov call add inc gs jns je insl push imul add jmp add pop popa insb insb insl jne add add jns je jb popa je dec popa jae add add je jae jb popa insl gs add sbb ja sbb (bad) incl add outsb fs imul jne gs add jne jbe dec (bad) mov std jle ret and sbb pslld add test inc inc push ja add jmp scas xor int3 pushf adc in std ljmp add cmp je das sahf add cwtl and subw cmp popa add (bad) pop icebp mov movsl aam repz int3 lods loop loopne push clc cmp pusha lea je push cmc pushf cmp call movb lea jne jmp add pop pop addr16 popa imul push call cmp std call clc cmp cmp pusha pushl call pushf cmc stc and push lea jmp add push gs jb popa je dec gs js add add jns je outsb arpl jo add and (bad) call lret adc xor cmc test add or sub adc test add pop adc outsb dec adc aam or mov in push adc mov adc out mov adc inc mov or mov push or and jl add adc pop adc andl add arpl add adc popa mov adc cmp add adc das jge add adc jg adc lods movsl or je adc pop dec adc mov mov or xlat mov or add pop adc adc adc lds add pusha adc dec rorb push stos or cmp adc add adc aas mov adc mov into or xlat js add push adc pop test adc add add decl cmp add adc add or aaa test add adc cmp add add add arpl add dec adc addr16 adc mov add adc jg or hlt push adc mov movsl or lret movsl or test or cmp adc push dec adc rorl out dec adc mov add add arpl add mov or lret dec adc mov outsl adc add mov or out arpl add add add test add or shll add pop adc adc add cld or test loopne adc add ja add movsl or pushf mov adc sti insl adc je adc jb or adc adc mov adc in or pop dec adc outsl into or popf adc add adc outsb adc pop decb lock out or xchg add adc add test add or inc dec adc jne adc push dec adc add add jo add or add add add or add add add adc add jae add adc add add add hlt jnp add pop adc mov push adc mov or add arpl add push adc out adc iret pop adc jmp push adc cmp add jl add mov or lea add dec adc sub add test add adc xchg push adc push adc xchg mov or jno adc push jns add pop adc mov test add jle add adc add add dec dec adc mov adc sub pop adc xchg decb xor pop adc outsb dec adc sbb or lahf mov adc pop cld or xor pop adc pusha rorl idivl add pop adc mov adc mov or mov adc addr16 or in adc addr16 adc lods pop adc mov rorl loop or pop decl push push adc aaa push adc mov add dec adc pop mov adc jge or in or stos test add pop adc xchg pop adc stos cld or loope adc fmull add add add add add pop adc cmp add add add or add add add push gs fs imul and ror pushf push dec bt clc pushl ror std bt cmc pushw popfw pushf movb inc jmp pushl ror push dec clc mov call add inc gs jae jb bound arpl outsw jb popa je outsl outsb push add out adc add xchg mov pushf inc call add push jb je inc imul lea je stc push stc cmp push pusha lea je cmc cmc cmp pusha call lea jae jmp push call mov (bad) xor add insb outsl arpl gs imul bound add push bt bt bt pusha shr stc cmp call add inc gs imul push jo arpl js add lret dec bsr add bsr add jmp add inc gs jne jb outsb je jb arpl jae push call fcmove pop in outsl bswap je jle in mov sti insb imulb mov mov mov sbb imul mov push scas (bad) push cmp mov cli jb pushf cmp add cmpsb sarb (bad) stc dec loopne sbb sub xchg movsl adc pushf mov xchg test xchg cld cltd fs outsl dec lock jbe movsl jmp xchg enter movsb shr rol xor xadd mov neg sub add add bsf inc shl add sub clc shl bswap mov jmp cmc jmp add popa je imul call stc cmp pushf jmp rep not pushf movzbl jmp pushf pusha xchg mov jmp add push gs imul outsl arpl jae push push inc push xor cs insb add add insb insb outsl arpl jo outsl bound add push insb gs add push gs popa jae inc jb outsl jb cmp call movw lea ja pushf not inc push pushf not mov inc clc xchg stc inc mov neg mov bt pushf mov pushf mov mov jmp add jno outsl jb add push inc push dec xor cs insb add xor aas jmp add push gs outsb jne dec gs js add add jo pop arpl insl outsl fs add insl arpl add lock (bad) incl add popa outsb addr16 gs imul imul rorb into inc add subl insb arpl push arpl fnsaves je jp jg inc in dec insb jl add xor add mov (bad) fadds in or pop add pop xor dec xor cs insb add add inc js inc jb insl gs popa outsb fs gs push pushf addl mov pusha mov push lea jmp push call loope sbb (bad) jmp add pop jae jb arpl add lret dec clc stc movb ror jmp add pop popa jne insb jb insl add stc cmc movb xchg sbb stc dec push shld rcr push rcr rcl movsbl mov ror mov stc mov not clc mov xor xor mov mov lods not cmc not jmp mov call lock sti push in xchg mov test dec cmp lcall movsl push mov push sbb cmpsl cmc aam clc mov enter pop jns sti xchg and inc add xchg ds loope stc fwait les sbb cwtl pushf jp jns push xchg (bad) je xor add rcll dec pop and jbe js mov stos sarb cwtl mov xor inc cmc hlt (bad) and outsb push add xchg push addr16 jo xchg sbb mov clc inc cmp je sub repz (bad) loopne jle hlt incb (bad) (bad) cmc push push gs mov adc jne pusha sbb jno inc cmp clc pusha pushf test jmp add push popa imul insb gs bound arpl (bad) pushf jmp push call jl add call add inc jb popa je inc jbe outsb je add je or dec cli call and add pusha lea je call add push gs gs jae inc inc add js cli call jge add add push push xor dec gs add mov lret hlt (bad) (bad) stc pushl movb sub pushf push rep not mov mov push movb pushf lea jmp add inc gs imul bound gs js add (bad) or add add jb je add adc cs dec ror call add pop imul repz incl add gs insb add add je jb outsl jb outsl fs call add mov (bad) decl test (bad) jmp std setge mov xadd shr btr bsr sub neg shr clc movsbw mov not pusha add shl or jmp add inc jb popa je push jb arpl jae add adc push call std jo jns add gs add arpl insb outsb add (bad) mov call add jbe jo imul lock decl andl pusha push dec mov inc dec pushl inc setg jmp add je insl gs xlat pop fimul jecxz notl in fwait (bad) rorb (bad) in (bad) popa dec pop data16 popa fdiv push aad leave xchg fimul mov push jnp mov pop out fs mov arpl push mov xchg xchg inc mov rcr ret hlt test out in push leave outsb dec xor aad out (bad) in sbb (bad) jne into inc mov add inc test xchg (bad) mov dec ljmp fbstp repnz icebp fwait test (bad) jne sbb push js (bad) mov leave movsb cld mov fcomps jnp jle (bad) pop hlt test sub fs mov adc mul hlt push mov std pop mov ja push int jmp sub push into cmp sub (bad) addr16 inc frstor xchg sbb pop outsl xor add xor inc mov es mov jecxz loop and movsl xor fisubr jae enter sub sbb jne les (bad) ja mov out int3 dec sti lcall fisttpll add inc jb gs imul add inc gs jb arpl fs jae add adc (bad) call push (bad) xlat out cs or repz daa cmp or or test jnp imul arpl mov stos lock jbe or add pop inc (bad) aas leave push fbld mov add outsl bound dec gs outsl jb push je je jae pushf dec call add pop popa jne insb jae jb call push call adc call add inc imul insl gs insb outsl jae add add popa jb push gs imul add add test add lea call (bad) dec into jg push daa and inc sub sbb mov rcrl pop jle,pn js inc or push lea call call add pop jae jb imul jae jb je add enter pusha ror movb ror pushf push stos mov mov lea pusha pushf lea call pushf pushl lea jae pushf pushf stc sub jmp mov mov dec pushl bt clc ror clc cmc shr pushl push lea je pusha adc pusha lea jmp mov pushf movw pushf push pushl ret pushfw popw rol stc mov cmc clc cmc not mov call add inc gs gs imul ja insl int3 outsl repz fnsave aaa mov dec xor test (bad) cmp pop or and je bound fs and jne pusha pushfw popw pushf not rcl mov jmp push xchg rcr lea bt xor mov stc stc clc jmp push (bad) jo ficom cmp lcall ljmp adc outsl fsubl dec lds push rep in ret je mov push jno jl nop lods jmp das ljmp setns ret pop dec leave out adc outsb out arpl bound mov jmp sub mov add ret or (bad) inc sub dec adc js cwtl sub or or mov scas push arpl aas decl inc add or imul jne gs imul add lea je push stc bt test mov lea je call add pop arpl je outsl insb data16 pushf jmp lea jb push pushf movb pushl ret add inc jb jo inc arpl imul gs inc add add jb insl jo cmp setns shrd push mov pushf and jmp pushf pusha stos pushf lea jmp fidivl jae or xchg pop sub rol add push cld (bad) mov adc inc mov add ret test ljmp pop into popf add inc cmp dec adc pusha xor and sub fs je pusha pusha lea jmp fwait pop dec inc xchg lret das pop inc shlb push fs xchg out mov nop inc and daa mov cmpsl cmp dec inc mov cmp cmc js add fwait (bad) out or inc inc jmp divb mov movsb cmp imul sbbl inc gs jb jbe push jns gs add add gs je inc imul jns add dec popf sti lcall mov sbb adc push push pushl pushl ret fadds jo dec fsubl (bad) jp add or mov xchg imul mov mov jo sbb insl push pop or (bad) out fisubl push inc fiadd lret mov loope jp inc loop nop cmc outsb notb push in repnz mov movsb mov xlat js cpuid adc push pop and in cs xlat nop ret lcall gs mov rol inc sbb adc aad jb and jge jo push add pop pop or (bad) rol loop push sub and pop test insb lret pop lret stos xchg sbb int3 lahf xor xchg clc xchg js in push mov and fidivrl test mov std lss lahf or xorl inc push ljmp (bad) jnp data16 jg xchg cmp outsl xor push das pop xor test mov rol inc clc pusha mov and add adc (bad) sarl movsb pushl fcompl dec leave pop insb pop jae test dec cmc push hlt (bad) rcll inc cmp xlat clc cmp add push into imul cwtl or cmp das pop ljmp and xor (bad) hlt (bad) mov ret pop lret mov cmpsb rep repnz add movl jge in cltd sti jmp enter ret mov pushf pushf pushl pushf lea jmp movb mov call lea je seto and shr mov setne test rol sub xadd movzbw shr clc bswap jmp add dec outsl arpl inc jb add insb and jb jne je and and jae jo outsl addr16 insl and jae bound outsb and outsb imul and and jns gs and data16 and and push imul and popa arpl fs jae imul outsb daa je ja jb and jns outsl jb add lea or subl (bad) cmp clc call add je insb outsl ja jb push call add arpl fadds push inc push dec xor cs insb add add jne gs gs outsb je call add inc imul aad (bad) incl add gs inc inc add add popa jo xor je imul push push xor inc imul daa (bad) mov lcall inc inc call jmp add dec jo outsb push jb arpl jae push call add dec gs jo xor je gs add rorb pushf pushl ret stc mov pushf cmp jmp add pop addr16 push adc xchg sti (bad) jmp stos pushf lea jmp add inc jb popa je inc outsl insl jo je bound inc add add insb je inc jns gs outsl push imul not aam or mov or mov jmp rol shrd sub sete movzbw not bswap pop jmp sbb inc hlt push flds push cmp jmp mov std jle mov lds cmp mov popf loop cmc jne mov xchg test rcr lahf inc adc mov jle into sbb loopne call mov pushf xor sbb inc adc pushf jae sbb mov pop ret push popf sub xor out jb cmp fbld subl aaa pop pop into mov into data16 sbb inc out xchg cmp lds lret jnp jb popa rorl mov mov inc hlt sarb inc rclb push push mov or cld add pushf or inc sbb pop sbb add pop jae je outsl fs add jns je gs jb jns popa jae add test repz lcall bt cmp add test call add inc gs popa jae inc jb outsl jb add pop gs je add push gs gs gs dec gs add test (bad) incl aas cli incl add jb jo inc add add push add add insb gs jae dec jne gs add pop jae popa je push lret dec aad ret jae popa jmp inc cmp lcall es shrl add pushf jns incb scas add ja add jg,pn gs add jne insb imul jp inc sbb add add inc gs gs push gs imul (bad) cmp inc in lds shr js loope mov and jb jno mov mov mov (bad) xor cmp or rcll jbe add jmp lods fidivrl arpl daa dec jae xor arpl test jge andl cwtl adc loop (bad) addr16 scas in test insb movb mov xor in rorb fist add inc jb jo dec popa jae inc popa je add daa shl nop sbb add xor sbb push ljmp jp cmpsb int3 pop fcos and cmpsl cmp int3 xor xor jne jne stc fmull mov cmp fcoms sbb pushf rep movsbl mov lea mov pushf push lea jmp jne pusha stos mov pusha pushl lea jmp stc test call bt bt cmc xor pusha inc lea push pushf pushf pushf lea call call jmp add data16 add add je je dec popa outsb fs add or jae xor add aam cmp adc lods add sub fidivr xor sbb outsb sub mov adc xchg mov mov int3 cs fidivr hlt gs pop pop stos fs dec aad hlt nop and push jmp pop xor and dec push mov mov test (bad) sarl sub pushf pusha lea jb jne pushf stos movw pushl lea jmp xor sub ja push stc shr lea pusha test stc cmpl movl jmp loopne repnz push dec sub dec int3 inc lock push aam js lahf into dec hlt jnp push leave jns dec mulb jb test adc and aas sub pop and sti mov sarl shr add push push orl fcomps mov adc xchg cmp mov int mov inc dec pushf or lret xchg daa stos leave mov fildll imul inc int lret mov sbb or iret jg jmp ljmp add (bad) mov stos jmp pop insl clc xchg ljmp mov aam sbb lds add ljmp pop idivb movsb test sbb (bad) (bad) jbe xchg and stos dec add shrl mov fstps jle xchg repnz ret push fist jb data16 lahf xor cmp movsb jmp ja xor outsb test jmp rclb xchg fisub fdiv cmpsl outsl imul sbb xor outsb hlt andl mov shrb ss cmc xchg lods fwait dec add rcl cmpsl fstps (bad) les lcall imul sti je push stc (bad) sbb push and sbb scas adc cmc pop das xor cs mov add lea dec incb ret push pop stos mov inc pop mov mov in fidivl stos add stc lret inc push mov and xor dec popf rcrb scas lret cmp call pushl adc call add inc insb outsl jae dec popa outsb fs add add addr16 jne jb dec outsb outsw dec gs add cli (bad) clc insl les jno movsl cmp test add imul jo outsl lods push leave in cmpsb repnz std xchg xchg movsl loop outsb out mov pushf mov loope (bad) sub ja push sbb mov jns ss loope jnp dec call jo inc jb push gs dec cs (bad) push stos fild iret sahf lcall lods inc daa lea mov adc cli nop mov cs fild push cmc and push (bad) jne and add das xorl inc cld movsl or in std lods sbb sub (bad) mov (bad) mov fdivs movsl jge aas jp mov fimul push clc inc les inc out mov aaa lods loope push out fldl jecxz push push int xor pop std mov xor jno xchg mov cs test adc fildl jno dec or mov aam les jl pop mov xor add xchg push shrb cmc sub ds lods stos loop fdivs in mov add fs xor inc imul push gs insb outsl jae dec gs jo dec xor dec sbb add cltd sub cmp sub add push pop imulb cmpsl cmc insl add outsb sbb xchg in mov cmp and rorb mov mov pusha cmp pop cmp sub (bad) arpl sbb (bad) fchs jp dec rorb notl push cmp jae push in dec fistl add lea mov rcrb pop es mov cltd sti scas push sub shl xchg push imul xor cmp adc inc xor outsl loopne sti movsb rorb movb mov lea jmp push frstor (bad) jmp cmp mov pushf aad (bad) scas and xor or jmp pop (bad) mov hlt fisub push daa mov mov icebp popf mov push xor pop push sbb mov and jae push cmp cmp pusha call add push gs gs gs push popa insb jne inc add in dec in movl and call push pusha adc jmp push call pop test add outsl arpl jae xor jb je mov mov mov pushf pushf lea jmp adc call push call adc mov imul outsb je outsl jne arpl add add je jb arpl jae imul popa je outsl outsb add add gs push gs imul imul insb pusha pop daa dec rorb push sub lcall (bad) jns push out outsb ret push fidiv inc shll in mov leave and in aas test mov push and call (bad) in inc push sbb dec fimull sarb sbb (bad) sbb xchg jle xchg mov sub sbb push test fnsave cltd sbb cld je dec out cmp adc pop cmp pop sbb pop je dec pushf pushf shl pushf lods clc clc push pushl not bt jmp push call (bad) pop pusha mov push jmp add inc jb popa je inc outsl insl jo je bound imul out call (bad) sti (bad) xor pusha sbb mov (bad) cmp or and out adc mov scas or pop lcall mov aad test mov pop xchg jmp in (bad) jecxz xor pop add inc (bad) mov pop jp pop xchg xor (bad) (bad) (bad) inc and mull adc testb rolb lods mov or mov sub out gs pop iret jns mov pop cmp push idiv xor shl and jmp enter daa (bad) sbb cmp mov sbb pop mov sbb rorb or jmp pop push loop xor xchg into sub or subb sub stos push pushf xor xchg cmp int xor fldl fdivrp adc sbbl jl insb mov jg data16 nop addl xor loopne sbb mov xlat adc push mov and pop stc xchg or sbb xchg rcll lods lds adc xchg jmp add cmp add popa outsb addr16 gs imul imul movl add enter (bad) incl add imul jae ror movw pushl mov pushf lea call call lea xchg lods fdivr outsl adc mov cld (bad) xchg je cmp jb jp xor fwait sub sub mov iret push movsl or fmull shll outsl jae dec gs popa addr16 add daa rcl stos adc add gs gs je jo imul movl push call pop dec adc xor cmc test add or sub adc test add pop adc outsb dec adc aam or mov in push adc mov adc out mov adc inc mov or mov push or and jl add adc pop adc andl add arpl add adc popa mov adc cmp add adc das jge add adc jg adc lods movsl or je adc pop dec adc mov mov or xlat mov or add pop adc adc adc lds add pusha adc dec rorb push stos or cmp adc add adc aas mov adc mov into or xlat js add push adc pop test adc add add decl cmp add adc add or aaa test add adc cmp add add add arpl add dec adc addr16 adc mov add adc jg or hlt push adc mov movsl or lret movsl or test or cmp adc push dec adc rorl out dec adc mov add add arpl add mov or lret dec adc mov outsl adc add mov or out arpl add add add test add or shll add pop adc adc add cld or test loopne adc add ja add movsl or pushf mov adc sti insl adc je adc jb or adc adc mov adc in or pop dec adc outsl into or popf adc add adc outsb adc pop decb lock out or xchg add adc add test add or inc dec adc jne adc push dec adc add add jo add or add add add or add add add adc add jae add adc add add add hlt jnp add pop adc mov push adc mov or add arpl add push adc out adc iret pop adc jmp push adc cmp add jl add mov or lea add dec adc sub add test add adc xchg push adc push adc xchg mov or jno adc push jns add pop adc mov test add jle add adc add add dec dec adc mov adc sub pop adc xchg decb xor pop adc outsb dec adc sbb or lahf mov adc pop cld or xor pop adc pusha rorl idivl add pop adc mov adc mov or mov adc addr16 or in adc addr16 adc lods pop adc mov rorl loop or pop decl push push adc aaa push adc mov add dec adc pop mov adc jge or in or stos test add pop adc xchg pop adc stos cld or loope adc fmull add add add add add pop adc cmp add add add or add add add outsw jo outsb add add jb popa je add inc imul inc imul test add pop push push pushf fstps repz pushf jae popa or mov test scas sub jo subl add push add decl cmpsl sub inc mov cmpsl shl dec add das movsl in xor dec iret push mov fstpt sbb mov loopne scas mov fiaddl dec xor loop fwait sbb inc out test jnp aas fild lods cmp fwait jp outsb mull add inc icebp inc in jae iret push dec sub addb jge push xchg negb sbb enter sbb es xor pop sub or xchg or setno icebp flds pusha bound mov pop xor jnp add lods (bad) (bad) dec out dec std jecxz push int3 cmp adc cmp (bad) push aaa sbb pop scas and mov mov test mov adc inc into repz sub pop xor scas inc jl out xchg mov mov add xor jno add inc gs imul bound gs add add gs push gs imul imul gs outsl insb jne gs outsb outsw jb popa je outsl outsb inc add adc (bad) call xor add je jne jae jb outsl jae add pop imul insl add push mov movw pushf pushl ret jmp daa push inc lret js jnp jns mov les ret (bad) fcmovnb enter mov (bad) cmp pusha pop stc in or shrl adcb fbld je xor out loop cltd cmp jno jae lcall lret mov iret cmpsb xchg lods jp sub mov jmp inc in fdivrl inc hlt mov cld sub mov ret mov icebp shll jnp cwtl cmpsl inc aas mov outsb js test idiv dec insl sbb inc mov repz jns mov js (bad) cltd sub loopne lock add jne pushf and rorl insb hlt dec (bad) out in cmpsl lret lcall daa dec aas popa add pop bound imul fs add push gs gs imul imul call adc jns inc pop adc inc pop xchg cwtl or ret fucomip jae outsl out in (bad) inc xor cmp imull int3 sbb (bad) lret (bad) out and push adc push or in je insb insb cs insb add add imul outsl jo outsb add cmpl das out loope lea jbe push lea jne jmp push call jmp pusha lea call push push sub pushl call add push imul jb gs js clc push pushl xchg sub shl lea stc pushl bt cmp mov movb mov cmc bt or call lods pushf not clc jmp add dec jo outsb push gs imul pop aas cmp add sub notb pop aas or add rolb repnz pop aas or add inc scas mov loopne pop aas or add add or fs push aas pop add add mov sub pop aas or add add pop aas sub add loopne (bad) clc hlt into inc aas adc add es mov pop aas out add push adc lock es aas or add shl icebp mov pop aas or add inc inc addr16 leave inc aas out add jmp pop std jbe pop aas orl dec out mov inc aas cmp pop sub loopne inc aas or add in jle xor add add loopne mov nop stc inc aas testb add es aas or add add pop stc enter or add inc lds cmp add xor cld les add (bad) das outsb repnz es aas or add shr clc (bad) roll xor add or lods shl repnz gs cwtl (bad) (bad) cmpsl sti shrl in or add gs sub xlat ror cmp ljmp ret cmpsl sub (bad) adcl mov pusha mov sub jb push je pushf cli push lahf adc into cs test js roll (bad) in dec test fldt jecxz scas int adc (bad) jb push aas dec int3 cmp lret (bad) das pop push lock add dec mov mov mov cltd mov cwtl repz xor movsl dec push divb fsubrl mov enter (bad) lret xchg jmp mov push add imul add push pushf call add pop popa insb insb imul mov push push jmp call fdivrs pop ljmp mov push inc jnp or add fidiv add (bad) std adc aas push and add inc gs outsl fs gs popa outsb fs gs add and inc call push mov test (bad) (bad) dec and pushf mov rcl rol sub mov pusha stc cmp clc add pusha stc mov test push test pushf lea je sar pusha add adc add jl neg bsr mov sub mov bsf mov stc test bt test push jmp push call imul add je imul bound gs add not jmp shl mov pushf and call add dec outsl fs xor dec gs add jbe insb les push iret cmpsb xchg inc sbb mov call out (bad) jns inc adc cli (bad) jb mov das es insb or sti rcrl xor push int3 imul stos outsl js cmc push les add stc adc mov xor insb flds mov rorb lcall lcall je bswap ror btr sbb add sar mov cmp pushf test pusha lea je clc stc add push pushf lea jmp add insl popa insb insb outsl arpl add push je push outsb ja outsb fs insl int3 (bad) incl add gs push gs imul jne add xchg xchg sti (bad) jmp add pop insl bound arpl add pusha aam enter ja push lock adc mov dec mov push aad cli inc ds mov cmp jbe inc mov gs repz fwait mov out adc test sbb jge inc fcoms inc mov (bad) repz scas cmp dec rcrb dec lret fwait cmp jb cli loope js mov jmp pop push cmp dec sbb xor out or mov fildl pop sbb scas sbb inc cld ljmp mov adc adc cmpsl pop sub sbb ds sub shll dec jno add mov push mov stc mov fdivrl ret mov add push gs push inc gs je jo call cltd sbb pop popf rorb jp nop out or dec lods and ja push jg imul mov xorl jg inc popa sub sahf and xor push in std inc mov dec ljmp jmp (bad) (bad) fcoms into pusha push inc rcll shlb cwtl mov fdiv pop pop aam push inc add (bad) sahf sub sub mov add jae jb push and dec cmp xor call btr das mov or mov stc pusha pushf jmp jmp pushf call call call shrd pushf mov call push jmp shl aaa mov stc sub stc cmc stc stc add pusha pusha push pushf popl mov pushl popl movb push movl lea jmp mov jmp push jmp pushf movl call pushf bswap movw call pusha not ror lea jns mov sar push pushf push add jmp mov mov mov lea jmp mov push pushf pushl lea jmp add jmp pushf call cmc lea mov add mov bt mov cmp call pusha call push call pushl popl mov pushf mov mov lea jmp dec shl stc mov cmp test add pushf dec pushf movw pushf push not call sub pusha bswap sbb mov cmp add pusha mov mov call clc daa aam bsf mov (bad) repnz repnz push add jge add pushl popl movw pushf pusha lea jmp not bswap push lea mov jmp dec bt cmc rol lea je push pusha inc mov pushl inc mov add clc sub pushf mov push mov push lea jmp pusha mov pushl movb push xchg call movb pushl mov pushf call call mov push xchg pop mov movw mov pop pushl movw pushf popl pop mov pop not movl mov movsbl mov push movb pushf lea jmp push pushf popl call pushl mov call pusha pusha mov jmp pusha call inc call pushf mov xchg bswap mov bswap mov call mov pushf pushf lea jmp jmp cbtw lea je inc pusha cwtl push movw mov sub pushf mov pushf lea jmp push movb call cmp sub stc bt xor jmp mov pusha lea jmp mov push pushl pushf lea jmp push add movw jmp bsf lea jns movzbl jmp dec dec cmc not cmc neg btc lea bts cmp xor jmp mov call jmp pusha cltd bsf mov test mov cmc cmp clc not jmp push mov call pushf mov call mov pushf mov pusha pushl lea jmp or pushf sbb mov inc mov clc add push jmp lea shr sar mov cmc movb stc cmp and pushf mov lea je cmp push adc add mov jmp dec bsf bsr movzbl pusha bsf bsf bswap mov jmp pushf jmp lea movsbw mov not push mov movl push pushf movzbw jmp movw lea jb pushf push pushl popl movb lea jmp mov pushf push mov push lea jmp xor pushf pusha jmp sub movzww cmp pusha jmp call movl bswap mov mov movb lea jmp push notl cbtw rcr mov push pushf test pushf sub call pushf mov push pushl call pushf pushf mov push pusha pushl ret call stc cmp jmp mov call test mov push movw sub movb jmp mov movsbw mov call movl mov call sub call mov pushl pusha push push lea jmp mov push lahf pushl mov pushf mov call push mov call mov mov call pushl popl pushf movw mov lea jmp bswap pushf popl pop not pop mov lea movl mov call pushf pushf movw mov push pushf xchg pusha bswap mov jmp mov call pushl pushf popl jmp pushf mov call cmp xor call lea push mov clc xor jmp jmp push pushf mov pusha pushf push push lea jmp pushl popl pushf lea jmp movsbw not mov pop mov pushf push mov push pushl ret mov mov pushf push pusha lea jmp adc mov add mov push bt add jmp call stc bsf pop pushf pushl popf lea mov setge mov lea mov mov movzbl mov push setno movsbw push mov not call push pushf pushf sub pusha jmp movw pushl popl pushf push movb lea jmp mov movw sub mov push push mov pushl push pushf pushf lea jmp push push mov sub jmp cmc cmp jmp movw inc push pushf clc movb neg clc cmc ror mov cmc sub clc pushf xor pushf test sub push mov cwtl cmp cmc clc call shr and push inc mov rcr add jmp jmp bswap mov movzbw bswap movl movw mov pusha push lea jmp cmc and bswap lahf lea pushf push jmp add movb mov pushf popl pusha pusha mov mov pushl popl movw movb pushf pushl lea jmp sub pusha pusha pushf mov mov pushf pushl mov mov lea jmp push push movzbw mov movw lea jmp jmp test cmc cmp jmp pushf mov mov call jmp pushf popl lea js pushf pushf pushl popl mov lea jmp pushl popl movl mov push mov lea jmp xchg lea movsbl mov push mov pushf lea jb std cld call pushf popl jmp mov push lea jmp pushl popl pushf lea jmp mov push lea jmp call movl pusha mov movw pusha mov pushf pushf pushl mov push mov jmp movzbw call mov clc add mov pusha inc pushf xor pushf ror cmp clc not call mov push inc push movl push lea jmp jmp shl sbb mov push sub stc call sbb mov pushl stc sub cmc clc shr call call mov call pushl jmp mov pushf pushf pushf mov jmp bswap not mov mov pusha mov pushf lea jmp cmp clc sub push jmp sub call movsbl mov dec (bad) icebp add mov call mov pushf mov push pushf popl mov pusha mov movb pushl popl movl pushf pushl lea jmp pushf inc stc rol call mov mov pushl pushl pushf popl pushf pushf call jmp push call sub pushl mov jmp pushf push pushf popl pusha push pushl jmp mov not call mov call pusha push movb dec call pushl movb pusha mov push mov jmp push mov call push xor test cmc add stc movb call mov jmp cmp cmp sub test lea jp clc and push mov push pushf popl pushf pusha pushl popl pushf push push lea jmp add pusha movb push mov movb lea jmp pushl pushf popl pusha pushl popl mov mov push pushl lea jmp pushf lea jnp pusha mov mov pushf call lahf clc shr das mov jl mov test sub (bad) icebp push mov bt test jmp not pushl and call add jmp push clc mov add mov push pusha call push mov mov pushf jmp adc cbtw mov cmp or stc mov jmp setge neg mov bsf xor bts and mov test bt bt add jns mov pusha lea jmp pushl popl movb pushl mov mov lea jmp jmp pushl popl pushf lea jmp movb jmp jmp pushf sub push movzbl or add bsf pushl dec sete not not call and xor shr mov setbe mov pushf call lea pushf pushf popl not lea movsbl bswap mov jmp pushf mov mov jmp call or mov and cmc mov pusha sub cmp pushf test clc shl call mov call mov lea mov mov xchg mov mov lea mov pop movzbl bswap pushf popl inc mov movsbw not dec not movl bsr mov lea bsf dec bsf inc pusha xchg ror sar sbb stc rol sub shr not mov btc add rcl lea (bad) testl cmp bts mov pusha setae mov shld pushf pusha or add lea shld mov pushf shr and xor ror ror jmp pushf pushl movb mov push mov call pushf push mov pushl movb pushl ret push and dec add lea jmp call pop mov mov mov pushf call das add movsbw mov setnp bsr stc shrd mov pusha not bt cmp not jmp pusha jmp pusha push mov push jmp mov cmc sub mov push mov pushf pushf mov lea jmp pusha push mov pushf xchg movsbw movsbw jmp push mov movsbw movsbw mov not mov jmp xor stc mov bt push add mov mov push mov pushf lea jmp push test pushf add lea jbe pushf pushl mov pushl pushf lea jmp call neg pushf jmp call push mov push mov jmp pushf popl jmp pushf mov mov mov pushf popl call mov jmp pusha adc mov stc push add jmp jmp mov pushl pushl push push lea jmp mov inc push mov movb jmp jmp jl mov pushf lea jmp jmp inc mov not stc neg push rcl add mov bsf dec not inc jmp mov pushf push pushf lea jmp jmp mov pusha movl mov movb jmp mov jmp xchg call mov pushl jmp bswap push mov call mov pusha mov jmp pushf mov pushf lea jmp lea jmp pusha mov mov movw pushl pusha mov call test sub cmp push shr lea jno mov jmp pusha inc pusha cmp pushl cwtl clc stc push sub movb mov pushf push lea jmp call sar push ror movzbl pusha pusha pushf add jmp pushf mov jmp movzbl test add stc push stc test xor jmp not mov pusha pop movzbw pushf popl bswap push mov pushf mov bswap call call xor aaa mov cmp call pop movl movsbw movsbw pushl mov pushf mov lea jmp push not movzbw mov push lea jmp mov movzbw call mov movzbl pushf pusha movl pop movw bswap call push push xchg pushf jmp call mov jmp jmp mov pushf popl pusha pusha pushl jmp pushf pusha mov pop mov pushf call pushf not pushf popl pushf mov lea call pushl popl pushf pushf lea jmp pushl mov pushf pusha pushf call mov push mov pushf mov call mov jmp pusha mov pushf pushf pushl pushf lea jmp pusha call jmp mov movzbw mov not pop mov pop push mov not call pushf lea mov lea ja pusha pushf popl movsbw lea call inc mov stc pushf ror lea jb pushf pusha inc pushl push rol pushf bt bt push sub stc test jmp movsbl movl call jmp jmp jmp call mov pusha pushf call jmp mov movb movb lea jmp pusha movb inc call not mov bswap movl pushl mov mov mov push lea jmp pushf mov push mov pushf pushf movb push lea jmp xor bts mov ror add test pusha sbb sub lea bts not clc movzbl bt shl push clc cmp add call add btr adc mov shld stc shr or mov test stc add jmp cmp pusha and pusha jmp call mov pushf pushl lea jmp lea mov push call call stc call pushf pushf mov dec jmp mov mov pusha pushl mov movb pushf popl call rcl inc jmp mov pushl lea jmp sbb rcl mov jmp pushl rol movw call pushf pushf mov lea jg pusha pusha movb pushf popl movw pushl pushf mov pushl popl push pushl mov movb lea jmp mov pushf movb lea jne jmp lea xchg movsbw pop mov pusha mov mov jmp jmp pop pushf ds pop pushf adc pop pushf add pop pushf sbb outsb pop pushf pop inc pop pushf sbb pop pushf ds pop pushf sbb pop pushf sbb pop pushf sbb pop pushf jecxz pop pushf sbb pop pushf jle,pt pushf sbb pop pushf sbb pushf add pushf push and pop pushf ds pop pushf adc pop pushf adc pop pushf sbb pop pushf adc pushf push stos pop pushf adc pop pushf sbb pop pushf adc pop pushf add pop pushf pop inc pop pushf sbb in pop pushf or pop pushf add pop pushf ds pop pushf pop mov sbb pushf push stos pop pushf or pushf sbb pushf or pushf adc pop pushf push pop pop pushf adc pop pushf add pushf sbb pushf sbb pop pushf sbb pushf add pushf jecxz pop pushf add pop pushf add pop pushf adc pop pushf add pushf cmp pop pushf ds pop pushf adc pop pushf sbb pushf add pop pushf push pop pop pushf add pop pushf pop inc pop pushf pop mov sbb pop pushf adc pop pushf add pushf sbb pushf adc pushf sbb dec pop pushf adc pop pushf sbb int pushf adc pop pushf cmp pop pushf sbb push pop pushf sbb pop pushf pop inc pop pushf sbb das pop pushf adc pushf sbb pop pushf sbb sbb pushf sbb enter xchg pop inc pop pushf ds pop pushf push enter inc pop pushf push pop pop pushf ds pop pushf adc pop pushf push add pop pushf sbb pushf sbb pop pushf cmp pop pushf push pop pop pushf sbb push pop pushf push pop pop pushf cmp pop pushf cmp pop pushf cmp pop pushf cmp pop pushf cmp pop pushf cmp pop pushf cmp pop pushf cmp pop pushf cmp pop pushf cmp pop pushf cmp pop pushf cmp pop pushf cmp pop pushf cmp pop pushf cmp pop pushf cmp pop pushf sbb rcrb aas jge pushf add pushf ds pop pushf sbb pushf sbb pop pushf add pushf adc pushf sbb pop pushf adc pop pushf cmp pop pushf add pop pushf adc pop pushf aas jge pushf sbb pop pushf add pushf adc pop pushf or pop pushf adc pop pushf add pop pushf add pushf push stos pop pushf aas jge pushf aas jge pushf jecxz pop pushf sbb pop pop pushf add pop pushf push enter dec pop pushf adc pop pushf jle,pt pushf sbb pushf sbb pop pushf adc pop pushf aas jge pushf add pop pushf or pushf aas jge pushf sbb and pop pushf or pushf or pop pushf sbb pop pushf sbb pop pushf sbb pop pushf sbb pop pushf sbb pop pushf sbb pop pushf sbb pop pushf sbb pop pushf sbb pop pushf sbb pop pushf sbb pop pushf sbb pop pushf sbb pop pushf sbb pop pushf sbb pop pushf sbb pop pushf or pushf sbb pop pushf pop mov sbb and pop pushf adc pushf adc pop pushf ds pop pushf cmp pop pushf sbb pushf push and pop pushf or pushf aas jge pushf sbb push pop pushf add pushf add pop pushf adc pop pushf adc pop pushf push add pop pushf adc pop pushf or pushf ds pop pushf sbb pop pushf sbb pushf adc pop pushf adc pop pushf adc pop pushf pop mov sbb das pop pushf jecxz pop pushf add pop pushf adc pop pushf push add pop pushf sbb pop pushf sbb mov pop pushf sbb sbbb dec pop pushf ds pop pushf sbb addr16 pushf jecxz pop pushf push and pop pushf adc pushf sbb lock pushf ds call mov push mov mov movl lea jmp pushl mov push movb push movw lea jmp call movsbw sub inc sub xor movsbw neg bsr sub dec neg setnp movsbw ror test xor rol bswap movsbw push and bsr xor movzbl stc mov cmp push call pusha add pushl mov pushl movb pushl ret cld pushf std movw cld push movb rep bt pusha mov shld cmc mov cmc call pop mov not lea pushf pusha pushf popl pushf lea movsbw movzbl mov not call push movw pushf pushl mov call movl not mov mov push mov pushf lea jmp lea call movw sub movb xor cmc test add call mov push pusha pushl lea jmp adc bsr cmp add mov not bsr mov cmc mov jmp mov jmp mov mov lea jmp add sub jge bt pusha test shrd call not pop bswap mov pushf movl bswap mov movb pushl pushf pushl lea jmp movl push push bswap mov pushf movw lea jmp push pushf pusha pushf popl push jmp cmc add data16 (bad) or jne cmc bt test pusha add pushf push mov lea jmp mov movzbw not mov pushf pusha pushf popl mov mov lea pop bswap movl call pushl mov pop mov movsbw mov jmp lea mov lea not movzbw pop pushf popl jmp pushl jmp divl jmp jmp pushl popl push lea jmp pushf inc pushf test cmc add jmp pushf pushf bswap jmp jmp pushf pushf pusha pushf popl jmp test add jmp adc mov ror pop btc jmp push pushf push call add push call pushf mov call pushl popl pushf lea jmp pushf pushf popl bswap not mov movsbl mov pushf mov pusha movw lea movb movb jmp inc pushf pushf bt add cmc test sub pushf mov call push call cmp mov sar jmp push push movb xchg movsbw push bswap call pushl popl pusha movw pushf movb lea jmp sbb xadd cmc movzbl rol add add clc xor bts btc btr ror setbe not adc xor rol pushf sub btc shld stc add add movsbw cmc mov clc jmp cmp bt jne clc shrd jmp call seto and cbtw rcl mov call movb jmp stc clc pushl stc test pusha bt add std cmp pushl pushl popf pushf movw pushf mov lea jmp dec cmp mov jmp push pusha pushf shr bt xor movzbw pushl xor pushf mov lea jmp pushf pushl popf mov pushl lea jmp mov pusha lea jmp movl mov pushl pop pushf mov mov lea jmp jmp push push call mov rol (bad) lock (bad) lock (bad) (bad) lcall popl movzbl mov pushf jmp push pusha jmp add adc shl sub movsbw shrd (bad) repnz rol shld shld sub shl bsf cmp bsf neg movsbw ror bts rol sbb cmp xor bsf and shld not mov call mov jmp call pushf pusha mov lea jge push mov push mov jmp pusha pushf popl call mov pushf popl mov pushl popl mov mov mov lea jmp mov pushl pushf pushf lea jmp xadd bts dec aam mov btr mov cmc test add pusha mov push pushf mov pushf pushf lea jmp pushf stc sub call mov lea not pushf lea not lea pusha mov not movl movzbw mov pushl movb lea jmp call pushf movsbw call pushf jmp mov pushl mov jmp mov call mov mov bswap not pushf push mov not not bswap mov push jmp pushl popl push mov lea jmp bswap mov pushf movl jmp rol call mov push call mov push pushf movb pushf popl pushl pushl popl pushl lea jmp lea xor mov setle mov call mov call movsbw mov pushf clc call mov mov pushf push pushf pushf mov jmp add mov mov mov lea jmp shrd mov call mov call lea ja btc xadd bts rol mov and bsr lea rol shr sub aad xor not shld lea bsf and rol shld sub call btr stc bt mov pushf test pusha add push call shl jnp mov sar inc mov clc bt pushf add mov push mov mov movb lea jmp mov mov add call movzbw movsbl not mov pusha pusha push mov pushf jmp pusha pusha pushf popl pushl push jmp mov jmp push push xchg bswap call movsbw lea pushf popl mov push call pushf popl pushf mov pushf call mov xor lea js pusha dec stc clc call inc clc cmp call dec pusha bt pushf rol pushl inc push stc stc mov add pushf call pushl mov call bt add bt shld pushf mov mov mov jmp call mov pushl call cmc shl pushf pushl mov pushl mov pusha pushl call bt cmp sub pushf cmc cmp shr lea jg push movb mov pusha pusha lea jnp pushf pushf popl call jmp bts shl dec mov call pusha mov rep inc data16 mulb out add sub jl and rcr xor mov stc mov pushf pushl popf pushf pushf lea jmp mov bswap movsbl pusha pushf popl mov jmp mov lea call pushf popl pusha call pusha decl call cmc neg bt ror call mov pusha mov push mov lea jmp adc sub call push movb mov pusha jmp mov pusha jmp aas xadd call pushf movzbw mov pushl bswap jmp not call jmp test and pushl pushf popl pushl pushl popl pushf pusha push lea jmp mov movl pushf mov mov pushl lea jmp call call sub cmp cmp shl pusha push pushf push mov jmp mov push push mov mov mov movzbw movw mov mov lea pushf movzbw mov jmp 